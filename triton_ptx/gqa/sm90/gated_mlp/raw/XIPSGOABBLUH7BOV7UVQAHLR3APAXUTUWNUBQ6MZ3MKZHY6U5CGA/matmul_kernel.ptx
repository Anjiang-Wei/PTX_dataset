//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	matmul_kernel           // -- Begin function matmul_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @matmul_kernel
.visible .entry matmul_kernel(
	.param .u64 .ptr .global .align 1 matmul_kernel_param_0,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_1,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_2,
	.param .u32 matmul_kernel_param_3,
	.param .u32 matmul_kernel_param_4,
	.param .u32 matmul_kernel_param_5,
	.param .u32 matmul_kernel_param_6,
	.param .u32 matmul_kernel_param_7,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_8
)
.reqntid 128
{
	.reg .pred 	%p<37>;
	.reg .b32 	%r<1152>;
	.reg .b64 	%rd<85>;
	.loc	1 68 0                          // gated_mlp.py:68:0
$L__func_begin0:
	.loc	1 68 0                          // gated_mlp.py:68:0

// %bb.0:
	ld.param.b32 	%r226, [matmul_kernel_param_7];
	ld.param.b32 	%r225, [matmul_kernel_param_4];
	ld.param.b32 	%r224, [matmul_kernel_param_3];
	ld.param.b64 	%rd12, [matmul_kernel_param_2];
	ld.param.b64 	%rd11, [matmul_kernel_param_0];
	ld.param.b64 	%rd31, [matmul_kernel_param_1];
$L__tmp0:
	.loc	1 91 24                         // gated_mlp.py:91:24
	mov.u32 	%r264, %ctaid.x;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:93:27 ]
	add.s32 	%r265, %r224, 63;
	.loc	2 40 28                         // standard.py:40:28 @[ gated_mlp.py:93:27 ]
	shr.s32 	%r266, %r265, 31;
	shr.u32 	%r267, %r266, 26;
	add.s32 	%r268, %r265, %r267;
	shr.s32 	%r269, %r268, 6;
$L__tmp2:
	.loc	1 94 38                         // gated_mlp.py:94:38
	shl.b32 	%r271, %r269, 3;
	.loc	1 95 22                         // gated_mlp.py:95:22
	div.s32 	%r272, %r264, %r271;
	ld.param.b32 	%r273, [matmul_kernel_param_6];
	.loc	1 96 29                         // gated_mlp.py:96:29
	shl.b32 	%r1, %r272, 3;
	.loc	1 97 35                         // gated_mlp.py:97:35
	sub.s32 	%r274, 1, %r1;
	.loc	1 97 48                         // gated_mlp.py:97:48
	min.s32 	%r2, %r274, 8;
	.loc	1 98 34                         // gated_mlp.py:98:34
	mul.lo.s32 	%r275, %r272, %r271;
	sub.s32 	%r3, %r264, %r275;
	.loc	1 99 40                         // gated_mlp.py:99:40
	div.s32 	%r4, %r3, %r2;
	.loc	1 109 23                        // gated_mlp.py:109:23
	shl.b32 	%r276, %r4, 6;
	.loc	1 109 51                        // gated_mlp.py:109:51
	mov.u32 	%r5, %tid.x;
	shl.b32 	%r6, %r5, 3;
	and.b32 	%r7, %r6, 24;
	and.b32 	%r277, %r6, 56;
	.loc	1 109 38                        // gated_mlp.py:109:38
	or.b32 	%r8, %r276, %r277;
	.loc	1 109 68                        // gated_mlp.py:109:68
	rem.s32 	%r278, %r8, %r224;
	.loc	1 111 22                        // gated_mlp.py:111:22
	mul.wide.u32 	%rd32, %r7, 2;
	add.s64 	%rd13, %rd11, %rd32;
	.loc	1 112 29                        // gated_mlp.py:112:29
	bfe.s32 	%r279, %r5, 5, 1;
	and.b32 	%r280, %r5, 32;
	shr.u32 	%r10, %r5, 3;
	bfe.u32 	%r11, %r5, 3, 4;
	or.b32 	%r12, %r11, 16;
	.loc	1 112 40                        // gated_mlp.py:112:40
	shl.b32 	%r281, %r273, 4;
	.loc	1 112 52                        // gated_mlp.py:112:52
	mad.lo.s32 	%r282, %r273, %r11, %r278;
	add.s32 	%r283, %r282, %r281;
	.loc	1 112 22                        // gated_mlp.py:112:22
	mul.wide.s32 	%rd33, %r282, 2;
	add.s64 	%rd17, %rd31, %rd33;
	mul.wide.s32 	%rd34, %r283, 2;
	add.s64 	%rd18, %rd31, %rd34;
$L__tmp3:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:120:33 ]
	add.s32 	%r284, %r225, 31;
$L__tmp4:
	.loc	1 129 33                        // gated_mlp.py:129:33
	shl.b32 	%r288, %r273, 5;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.lt.s32 	%p1, %r284, 32;
	setp.gt.s32 	%p2, %r284, 31;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p3, %r7, %r225;
	.loc	1 123 20                        // gated_mlp.py:123:20
	and.b32 	%r289, %r5, 24;
	mul.lo.s32 	%r290, %r289, 9;
	xor.b32 	%r291, %r290, %r277;
	shl.b32 	%r14, %r280, 3;
	and.b32 	%r15, %r6, 512;
	or.b32 	%r292, %r15, %r14;
	or.b32 	%r16, %r292, %r291;
	shl.b32 	%r293, %r16, 1;
	mov.b32 	%r294, global_smem;
	add.s32 	%r227, %r294, %r293;
	or.b32 	%r295, %r277, 1024;
	xor.b32 	%r296, %r290, %r295;
	or.b32 	%r17, %r292, %r296;
	shl.b32 	%r297, %r17, 1;
	add.s32 	%r229, %r294, %r297;
	or.b32 	%r298, %r277, 2048;
	xor.b32 	%r299, %r290, %r298;
	or.b32 	%r300, %r14, %r299;
	or.b32 	%r18, %r300, %r15;
	shl.b32 	%r301, %r18, 1;
	add.s32 	%r231, %r294, %r301;
	or.b32 	%r302, %r277, 3072;
	xor.b32 	%r303, %r290, %r302;
	or.b32 	%r304, %r14, %r303;
	or.b32 	%r19, %r304, %r15;
	shl.b32 	%r305, %r19, 1;
	add.s32 	%r233, %r294, %r305;
	selp.b32 	%r306, 16, 0, %p2;
	selp.b32 	%r230, %r306, 0, %p3;
	// begin inline asm
	cp.async.cg.shared.global [ %r227 + 0 ], [ %rd13 + 0 ], 0x10, %r230;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r229 + 0 ], [ %rd13 + 0 ], 0x10, %r230;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r231 + 0 ], [ %rd13 + 0 ], 0x10, %r230;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r233 + 0 ], [ %rd13 + 0 ], 0x10, %r230;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p4, %r11, %r225;
	setp.lt.s32 	%p5, %r12, %r225;
	.loc	1 124 20                        // gated_mlp.py:124:20
	and.b32 	%r307, %r279, 288;
	xor.b32 	%r308, %r291, %r307;
	or.b32 	%r20, %r308, %r15;
	shl.b32 	%r309, %r20, 1;
	add.s32 	%r310, %r294, 32768;
	add.s32 	%r235, %r310, %r309;
	xor.b32 	%r311, %r296, %r307;
	or.b32 	%r21, %r311, %r15;
	shl.b32 	%r312, %r21, 1;
	add.s32 	%r237, %r310, %r312;
	selp.b32 	%r236, %r306, 0, %p4;
	// begin inline asm
	cp.async.cg.shared.global [ %r235 + 0 ], [ %rd17 + 0 ], 0x10, %r236;
	// end inline asm
	selp.b32 	%r238, %r306, 0, %p5;
	// begin inline asm
	cp.async.cg.shared.global [ %r237 + 0 ], [ %rd18 + 0 ], 0x10, %r238;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p6, %r284, 63;
	.loc	1 128 18                        // gated_mlp.py:128:18
	add.s64 	%rd19, %rd13, 64;
	.loc	1 129 18                        // gated_mlp.py:129:18
	mul.wide.s32 	%rd35, %r288, 2;
	add.s64 	%rd23, %rd17, %rd35;
	add.s64 	%rd24, %rd18, %rd35;
	.loc	1 123 55                        // gated_mlp.py:123:55
	add.s32 	%r313, %r225, -32;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p7, %r7, %r313;
	.loc	1 123 20                        // gated_mlp.py:123:20
	bar.sync 	0;
	add.s32 	%r314, %r294, 8192;
	add.s32 	%r239, %r314, %r293;
	add.s32 	%r241, %r314, %r297;
	add.s32 	%r243, %r314, %r301;
	add.s32 	%r245, %r314, %r305;
	selp.b32 	%r315, 16, 0, %p7;
	selp.b32 	%r242, %r315, 0, %p6;
	// begin inline asm
	cp.async.cg.shared.global [ %r239 + 0 ], [ %rd19 + 0 ], 0x10, %r242;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r241 + 0 ], [ %rd19 + 0 ], 0x10, %r242;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r243 + 0 ], [ %rd19 + 0 ], 0x10, %r242;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r245 + 0 ], [ %rd19 + 0 ], 0x10, %r242;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p8, %r11, %r313;
	setp.lt.s32 	%p9, %r12, %r313;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r316, %r294, 36864;
	add.s32 	%r247, %r316, %r309;
	add.s32 	%r249, %r316, %r312;
	selp.b32 	%r317, 16, 0, %p8;
	selp.b32 	%r248, %r317, 0, %p6;
	// begin inline asm
	cp.async.cg.shared.global [ %r247 + 0 ], [ %rd23 + 0 ], 0x10, %r248;
	// end inline asm
	selp.b32 	%r318, 16, 0, %p9;
	selp.b32 	%r250, %r318, 0, %p6;
	// begin inline asm
	cp.async.cg.shared.global [ %r249 + 0 ], [ %rd24 + 0 ], 0x10, %r250;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p10, %r284, 95;
	.loc	1 128 18                        // gated_mlp.py:128:18
	add.s64 	%rd25, %rd13, 128;
	.loc	1 129 18                        // gated_mlp.py:129:18
	add.s64 	%rd29, %rd23, %rd35;
	add.s64 	%rd30, %rd24, %rd35;
	.loc	1 123 55                        // gated_mlp.py:123:55
	add.s32 	%r319, %r225, -64;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p11, %r7, %r319;
	.loc	1 123 20                        // gated_mlp.py:123:20
	bar.sync 	0;
	add.s32 	%r320, %r294, 16384;
	add.s32 	%r251, %r320, %r293;
	add.s32 	%r253, %r320, %r297;
	add.s32 	%r255, %r320, %r301;
	add.s32 	%r257, %r320, %r305;
	selp.b32 	%r321, 16, 0, %p11;
	selp.b32 	%r254, %r321, 0, %p10;
	// begin inline asm
	cp.async.cg.shared.global [ %r251 + 0 ], [ %rd25 + 0 ], 0x10, %r254;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r253 + 0 ], [ %rd25 + 0 ], 0x10, %r254;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r255 + 0 ], [ %rd25 + 0 ], 0x10, %r254;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r257 + 0 ], [ %rd25 + 0 ], 0x10, %r254;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p12, %r11, %r319;
	setp.lt.s32 	%p13, %r12, %r319;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r322, %r294, 40960;
	add.s32 	%r259, %r322, %r309;
	add.s32 	%r261, %r322, %r312;
	selp.b32 	%r323, 16, 0, %p12;
	selp.b32 	%r260, %r323, 0, %p10;
	// begin inline asm
	cp.async.cg.shared.global [ %r259 + 0 ], [ %rd29 + 0 ], 0x10, %r260;
	// end inline asm
	selp.b32 	%r324, 16, 0, %p13;
	selp.b32 	%r262, %r324, 0, %p10;
	// begin inline asm
	cp.async.cg.shared.global [ %r261 + 0 ], [ %rd30 + 0 ], 0x10, %r262;
	// end inline asm
	cp.async.commit_group;
	mov.b32 	%r1023, 0f00000000;
	mov.b32 	%r1024, %r1023;
	mov.b32 	%r1025, %r1023;
	mov.b32 	%r1026, %r1023;
	mov.b32 	%r1027, %r1023;
	mov.b32 	%r1028, %r1023;
	mov.b32 	%r1029, %r1023;
	mov.b32 	%r1030, %r1023;
	mov.b32 	%r1031, %r1023;
	mov.b32 	%r1032, %r1023;
	mov.b32 	%r1033, %r1023;
	mov.b32 	%r1034, %r1023;
	mov.b32 	%r1035, %r1023;
	mov.b32 	%r1036, %r1023;
	mov.b32 	%r1037, %r1023;
	mov.b32 	%r1038, %r1023;
	mov.b32 	%r1039, %r1023;
	mov.b32 	%r1040, %r1023;
	mov.b32 	%r1041, %r1023;
	mov.b32 	%r1042, %r1023;
	mov.b32 	%r1043, %r1023;
	mov.b32 	%r1044, %r1023;
	mov.b32 	%r1045, %r1023;
	mov.b32 	%r1046, %r1023;
	mov.b32 	%r1047, %r1023;
	mov.b32 	%r1048, %r1023;
	mov.b32 	%r1049, %r1023;
	mov.b32 	%r1050, %r1023;
	mov.b32 	%r1051, %r1023;
	mov.b32 	%r1052, %r1023;
	mov.b32 	%r1053, %r1023;
	mov.b32 	%r1054, %r1023;
	mov.b32 	%r1055, %r1023;
	mov.b32 	%r1056, %r1023;
	mov.b32 	%r1057, %r1023;
	mov.b32 	%r1058, %r1023;
	mov.b32 	%r1059, %r1023;
	mov.b32 	%r1060, %r1023;
	mov.b32 	%r1061, %r1023;
	mov.b32 	%r1062, %r1023;
	mov.b32 	%r1063, %r1023;
	mov.b32 	%r1064, %r1023;
	mov.b32 	%r1065, %r1023;
	mov.b32 	%r1066, %r1023;
	mov.b32 	%r1067, %r1023;
	mov.b32 	%r1068, %r1023;
	mov.b32 	%r1069, %r1023;
	mov.b32 	%r1070, %r1023;
	mov.b32 	%r1071, %r1023;
	mov.b32 	%r1072, %r1023;
	mov.b32 	%r1073, %r1023;
	mov.b32 	%r1074, %r1023;
	mov.b32 	%r1075, %r1023;
	mov.b32 	%r1076, %r1023;
	mov.b32 	%r1077, %r1023;
	mov.b32 	%r1078, %r1023;
	mov.b32 	%r1079, %r1023;
	mov.b32 	%r1080, %r1023;
	mov.b32 	%r1081, %r1023;
	mov.b32 	%r1082, %r1023;
	mov.b32 	%r1083, %r1023;
	mov.b32 	%r1084, %r1023;
	mov.b32 	%r1085, %r1023;
	mov.b32 	%r1086, %r1023;
	.loc	1 120 22                        // gated_mlp.py:120:22
	@%p1 bra 	$L__BB0_3;
// %bb.1:                               // %.lr.ph
	.loc	1 0 22                          // gated_mlp.py:0:22
	shr.u32 	%r9, %r5, 5;
	shr.s32 	%r285, %r284, 31;
	shr.u32 	%r286, %r285, 27;
	add.s32 	%r287, %r284, %r286;
	shr.s32 	%r13, %r287, 5;
	cvt.s64.s32 	%rd3, %r288;
	add.s32 	%r22, %r13, -3;
	add.s32 	%r1020, %r225, -96;
	.loc	1 120 22                        // gated_mlp.py:120:22
	mul.lo.s64 	%rd84, %rd3, 6;
	shl.b64 	%rd5, %rd3, 1;
	and.b32 	%r329, %r5, 3;
	mul.wide.u32 	%rd36, %r329, 16;
	add.s64 	%rd37, %rd36, %rd11;
	add.s64 	%rd83, %rd37, 192;
	mov.b32 	%r721, 0;
	mov.b32 	%r1023, 0f00000000;
	mov.b32 	%r1022, 2;
	mov.b32 	%r1021, -1;
	mov.b32 	%r1024, %r1023;
	mov.b32 	%r1025, %r1023;
	mov.b32 	%r1026, %r1023;
	mov.b32 	%r1027, %r1023;
	mov.b32 	%r1028, %r1023;
	mov.b32 	%r1029, %r1023;
	mov.b32 	%r1030, %r1023;
	mov.b32 	%r1031, %r1023;
	mov.b32 	%r1032, %r1023;
	mov.b32 	%r1033, %r1023;
	mov.b32 	%r1034, %r1023;
	mov.b32 	%r1035, %r1023;
	mov.b32 	%r1036, %r1023;
	mov.b32 	%r1037, %r1023;
	mov.b32 	%r1038, %r1023;
	mov.b32 	%r1039, %r1023;
	mov.b32 	%r1040, %r1023;
	mov.b32 	%r1041, %r1023;
	mov.b32 	%r1042, %r1023;
	mov.b32 	%r1043, %r1023;
	mov.b32 	%r1044, %r1023;
	mov.b32 	%r1045, %r1023;
	mov.b32 	%r1046, %r1023;
	mov.b32 	%r1047, %r1023;
	mov.b32 	%r1048, %r1023;
	mov.b32 	%r1049, %r1023;
	mov.b32 	%r1050, %r1023;
	mov.b32 	%r1051, %r1023;
	mov.b32 	%r1052, %r1023;
	mov.b32 	%r1053, %r1023;
	mov.b32 	%r1054, %r1023;
	mov.b32 	%r1055, %r1023;
	mov.b32 	%r1056, %r1023;
	mov.b32 	%r1057, %r1023;
	mov.b32 	%r1058, %r1023;
	mov.b32 	%r1059, %r1023;
	mov.b32 	%r1060, %r1023;
	mov.b32 	%r1061, %r1023;
	mov.b32 	%r1062, %r1023;
	mov.b32 	%r1063, %r1023;
	mov.b32 	%r1064, %r1023;
	mov.b32 	%r1065, %r1023;
	mov.b32 	%r1066, %r1023;
	mov.b32 	%r1067, %r1023;
	mov.b32 	%r1068, %r1023;
	mov.b32 	%r1069, %r1023;
	mov.b32 	%r1070, %r1023;
	mov.b32 	%r1071, %r1023;
	mov.b32 	%r1072, %r1023;
	mov.b32 	%r1073, %r1023;
	mov.b32 	%r1074, %r1023;
	mov.b32 	%r1075, %r1023;
	mov.b32 	%r1076, %r1023;
	mov.b32 	%r1077, %r1023;
	mov.b32 	%r1078, %r1023;
	mov.b32 	%r1079, %r1023;
	mov.b32 	%r1080, %r1023;
	mov.b32 	%r1081, %r1023;
	mov.b32 	%r1082, %r1023;
	mov.b32 	%r1083, %r1023;
	mov.b32 	%r1084, %r1023;
	mov.b32 	%r1085, %r1023;
	mov.b32 	%r1086, %r1023;
	mov.b32 	%r1087, %r721;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	setp.lt.s32 	%p18, %r1087, %r22;
	add.s32 	%r738, %r1021, 1;
	setp.gt.s32 	%p19, %r738, 3;
	selp.b32 	%r1021, 0, %r738, %p19;
	.loc	1 123 20                        // gated_mlp.py:123:20
	cp.async.wait_group 	4;
	bar.sync 	0;
	shl.b32 	%r739, %r1021, 13;
	add.s32 	%r650, %r294, %r739;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r741, %r1021, 12;
	add.s32 	%r653, %r310, %r741;
	.loc	1 126 35                        // gated_mlp.py:126:35
	shfl.sync.idx.b32 	%r743, %r9, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r744, %r650, 4, 14;
	cvt.u64.u32 	%rd52, %r744;
	or.b64 	%rd38, %rd52, -9223371899382267904;
	bfe.u32 	%r745, %r653, 4, 14;
	cvt.u64.u32 	%rd53, %r745;
	or.b64 	%rd39, %rd53, 4611686293322072064;
	mov.pred 	%p14, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r1023,%r1024,%r1025,%r1026,%r1027,%r1028,%r1029,%r1030,%r1031,%r1032,%r1033,%r1034,%r1035,%r1036,%r1037,%r1038,%r1039,%r1040,%r1041,%r1042,%r1043,%r1044,%r1045,%r1046,%r1047,%r1048,%r1049,%r1050,%r1051,%r1052,%r1053,%r1054}, %rd38, %rd39, %p14, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r746, %r650, 32;
	bfe.u32 	%r747, %r746, 4, 14;
	cvt.u64.u32 	%rd54, %r747;
	or.b64 	%rd40, %rd54, -9223371899382267904;
	add.s32 	%r748, %r653, 2048;
	bfe.u32 	%r749, %r748, 4, 14;
	cvt.u64.u32 	%rd55, %r749;
	or.b64 	%rd41, %rd55, 4611686293322072064;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r1023,%r1024,%r1025,%r1026,%r1027,%r1028,%r1029,%r1030,%r1031,%r1032,%r1033,%r1034,%r1035,%r1036,%r1037,%r1038,%r1039,%r1040,%r1041,%r1042,%r1043,%r1044,%r1045,%r1046,%r1047,%r1048,%r1049,%r1050,%r1051,%r1052,%r1053,%r1054}, %rd40, %rd41, %p14, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r750, %r650, 4096;
	bfe.u32 	%r751, %r750, 4, 14;
	cvt.u64.u32 	%rd56, %r751;
	or.b64 	%rd42, %rd56, -9223371899382267904;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r1055,%r1056,%r1057,%r1058,%r1059,%r1060,%r1061,%r1062,%r1063,%r1064,%r1065,%r1066,%r1067,%r1068,%r1069,%r1070,%r1071,%r1072,%r1073,%r1074,%r1075,%r1076,%r1077,%r1078,%r1079,%r1080,%r1081,%r1082,%r1083,%r1084,%r1085,%r1086}, %rd42, %rd39, %p14, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r752, %r650, 4128;
	bfe.u32 	%r753, %r752, 4, 14;
	cvt.u64.u32 	%rd57, %r753;
	or.b64 	%rd44, %rd57, -9223371899382267904;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r1055,%r1056,%r1057,%r1058,%r1059,%r1060,%r1061,%r1062,%r1063,%r1064,%r1065,%r1066,%r1067,%r1068,%r1069,%r1070,%r1071,%r1072,%r1073,%r1074,%r1075,%r1076,%r1077,%r1078,%r1079,%r1080,%r1081,%r1082,%r1083,%r1084,%r1085,%r1086}, %rd44, %rd41, %p14, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r651, %r721;
	mov.b32 	%r652, %r721;
	mov.b32 	%r654, %r721;
	mov.b32 	%r655, %r721;
	// begin inline asm
	// wait for regs: %r1023,%r1024,%r1025,%r1026,%r1027,%r1028,%r1029,%r1030,%r1031,%r1032,%r1033,%r1034,%r1035,%r1036,%r1037,%r1038,%r1039,%r1040,%r1041,%r1042,%r1043,%r1044,%r1045,%r1046,%r1047,%r1048,%r1049,%r1050,%r1051,%r1052,%r1053,%r1054,%r1055,%r1056,%r1057,%r1058,%r1059,%r1060,%r1061,%r1062,%r1063,%r1064,%r1065,%r1066,%r1067,%r1068,%r1069,%r1070,%r1071,%r1072,%r1073,%r1074,%r1075,%r1076,%r1077,%r1078,%r1079,%r1080,%r1081,%r1082,%r1083,%r1084,%r1085,%r1086,%r650,%r651,%r652,%r653,%r654,%r655
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 129 18                        // gated_mlp.py:129:18
	add.s64 	%rd50, %rd17, %rd84;
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s64 	%rd51, %rd18, %rd84;
	add.s32 	%r754, %r1022, 1;
	setp.gt.s32 	%p20, %r754, 3;
	selp.b32 	%r1022, 0, %r754, %p20;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p21, %r7, %r1020;
	.loc	1 123 20                        // gated_mlp.py:123:20
	shl.b32 	%r755, %r1022, 13;
	add.s32 	%r756, %r294, %r755;
	bar.sync 	0;
	add.s32 	%r726, %r756, %r293;
	add.s32 	%r728, %r756, %r297;
	add.s32 	%r730, %r756, %r301;
	add.s32 	%r732, %r756, %r305;
	selp.b32 	%r761, 16, 0, %p21;
	selp.b32 	%r729, %r761, 0, %p18;
	// begin inline asm
	cp.async.cg.shared.global [ %r726 + 0 ], [ %rd83 + 0 ], 0x10, %r729;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r728 + 0 ], [ %rd83 + 0 ], 0x10, %r729;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r730 + 0 ], [ %rd83 + 0 ], 0x10, %r729;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r732 + 0 ], [ %rd83 + 0 ], 0x10, %r729;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p22, %r11, %r1020;
	setp.lt.s32 	%p23, %r12, %r1020;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r762, %r1022, 12;
	add.s32 	%r763, %r310, %r762;
	add.s32 	%r734, %r763, %r309;
	add.s32 	%r736, %r763, %r312;
	selp.b32 	%r766, 16, 0, %p22;
	selp.b32 	%r735, %r766, 0, %p18;
	// begin inline asm
	cp.async.cg.shared.global [ %r734 + 0 ], [ %rd50 + 0 ], 0x10, %r735;
	// end inline asm
	selp.b32 	%r767, 16, 0, %p23;
	selp.b32 	%r737, %r767, 0, %p18;
	// begin inline asm
	cp.async.cg.shared.global [ %r736 + 0 ], [ %rd51 + 0 ], 0x10, %r737;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s32 	%r1087, %r1087, 1;
	add.s64 	%rd84, %rd84, %rd5;
	add.s64 	%rd83, %rd83, 64;
	add.s32 	%r1020, %r1020, -32;
	setp.ne.s32 	%p24, %r13, %r1087;
	@%p24 bra 	$L__BB0_2;
$L__BB0_3:                              // %._crit_edge
	.loc	1 98 54                         // gated_mlp.py:98:54
	mul.lo.s32 	%r928, %r4, %r2;
	sub.s32 	%r929, %r3, %r928;
	.loc	1 98 27                         // gated_mlp.py:98:27
	add.s32 	%r930, %r929, %r1;
	.loc	1 120 22                        // gated_mlp.py:120:22
	// begin inline asm
	// wait for regs: %r1023,%r1024,%r1025,%r1026,%r1027,%r1028,%r1029,%r1030,%r1031,%r1032,%r1033,%r1034,%r1035,%r1036,%r1037,%r1038,%r1039,%r1040,%r1041,%r1042,%r1043,%r1044,%r1045,%r1046,%r1047,%r1048,%r1049,%r1050,%r1051,%r1052,%r1053,%r1054,%r1055,%r1056,%r1057,%r1058,%r1059,%r1060,%r1061,%r1062,%r1063,%r1064,%r1065,%r1066,%r1067,%r1068,%r1069,%r1070,%r1071,%r1072,%r1073,%r1074,%r1075,%r1076,%r1077,%r1078,%r1079,%r1080,%r1081,%r1082,%r1083,%r1084,%r1085,%r1086
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 134 23                        // gated_mlp.py:134:23
	cvt.rn.f16x2.f32 	%r931, %r1024, %r1023;
	cvt.rn.f16x2.f32 	%r932, %r1026, %r1025;
	cvt.rn.f16x2.f32 	%r933, %r1028, %r1027;
	cvt.rn.f16x2.f32 	%r934, %r1030, %r1029;
	cvt.rn.f16x2.f32 	%r935, %r1032, %r1031;
	cvt.rn.f16x2.f32 	%r936, %r1034, %r1033;
	cvt.rn.f16x2.f32 	%r937, %r1036, %r1035;
	cvt.rn.f16x2.f32 	%r938, %r1038, %r1037;
	cvt.rn.f16x2.f32 	%r939, %r1040, %r1039;
	cvt.rn.f16x2.f32 	%r940, %r1042, %r1041;
	cvt.rn.f16x2.f32 	%r941, %r1044, %r1043;
	cvt.rn.f16x2.f32 	%r942, %r1046, %r1045;
	cvt.rn.f16x2.f32 	%r943, %r1048, %r1047;
	cvt.rn.f16x2.f32 	%r944, %r1050, %r1049;
	cvt.rn.f16x2.f32 	%r945, %r1052, %r1051;
	cvt.rn.f16x2.f32 	%r946, %r1054, %r1053;
	cvt.rn.f16x2.f32 	%r947, %r1056, %r1055;
	cvt.rn.f16x2.f32 	%r948, %r1058, %r1057;
	cvt.rn.f16x2.f32 	%r949, %r1060, %r1059;
	cvt.rn.f16x2.f32 	%r950, %r1062, %r1061;
	cvt.rn.f16x2.f32 	%r951, %r1064, %r1063;
	cvt.rn.f16x2.f32 	%r952, %r1066, %r1065;
	cvt.rn.f16x2.f32 	%r953, %r1068, %r1067;
	cvt.rn.f16x2.f32 	%r954, %r1070, %r1069;
	cvt.rn.f16x2.f32 	%r955, %r1072, %r1071;
	cvt.rn.f16x2.f32 	%r956, %r1074, %r1073;
	cvt.rn.f16x2.f32 	%r957, %r1076, %r1075;
	cvt.rn.f16x2.f32 	%r958, %r1078, %r1077;
	cvt.rn.f16x2.f32 	%r959, %r1080, %r1079;
	cvt.rn.f16x2.f32 	%r960, %r1082, %r1081;
	cvt.rn.f16x2.f32 	%r961, %r1084, %r1083;
	cvt.rn.f16x2.f32 	%r962, %r1086, %r1085;
	.loc	1 138 22                        // gated_mlp.py:138:22
	shl.b32 	%r963, %r930, 7;
	.loc	1 138 37                        // gated_mlp.py:138:37
	or.b32 	%r964, %r963, %r11;
	or.b32 	%r965, %r963, %r12;
	or.b32 	%r966, %r10, %r963;
	or.b32 	%r967, %r966, 112;
	.loc	1 140 33                        // gated_mlp.py:140:33
	mul.lo.s32 	%r968, %r964, %r226;
	mul.lo.s32 	%r969, %r965, %r226;
	shl.b32 	%r970, %r226, 5;
	add.s32 	%r971, %r968, %r970;
	shl.b32 	%r972, %r226, 4;
	add.s32 	%r973, %r971, %r972;
	add.s32 	%r974, %r973, %r972;
	add.s32 	%r975, %r974, %r972;
	add.s32 	%r976, %r975, %r972;
	mul.lo.s32 	%r977, %r967, %r226;
	.loc	1 140 21                        // gated_mlp.py:140:21
	mul.wide.s32 	%rd66, %r968, 2;
	add.s64 	%rd67, %rd12, %rd66;
	mul.wide.s32 	%rd68, %r969, 2;
	add.s64 	%rd69, %rd12, %rd68;
	mul.wide.s32 	%rd70, %r971, 2;
	add.s64 	%rd71, %rd12, %rd70;
	mul.wide.s32 	%rd72, %r973, 2;
	add.s64 	%rd73, %rd12, %rd72;
	mul.wide.s32 	%rd74, %r974, 2;
	add.s64 	%rd75, %rd12, %rd74;
	mul.wide.s32 	%rd76, %r975, 2;
	add.s64 	%rd77, %rd12, %rd76;
	mul.wide.s32 	%rd78, %r976, 2;
	add.s64 	%rd79, %rd12, %rd78;
	mul.wide.s32 	%rd80, %r977, 2;
	add.s64 	%rd81, %rd12, %rd80;
	.loc	1 140 52                        // gated_mlp.py:140:52
	mul.wide.s32 	%rd82, %r8, 2;
	add.s64 	%rd58, %rd67, %rd82;
	add.s64 	%rd59, %rd69, %rd82;
	add.s64 	%rd60, %rd71, %rd82;
	add.s64 	%rd61, %rd73, %rd82;
	add.s64 	%rd62, %rd75, %rd82;
	add.s64 	%rd63, %rd77, %rd82;
	add.s64 	%rd64, %rd79, %rd82;
	add.s64 	%rd65, %rd81, %rd82;
	.loc	1 141 33                        // gated_mlp.py:141:33
	setp.lt.s32 	%p33, %r964, 1;
	setp.lt.s32 	%p34, %r965, 1;
	setp.lt.s32 	%p35, %r963, 0;
	.loc	1 141 58                        // gated_mlp.py:141:58
	setp.lt.s32 	%p36, %r8, %r224;
	.loc	1 141 39                        // gated_mlp.py:141:39
	and.pred 	%p25, %p36, %p33;
	and.pred 	%p26, %p36, %p34;
	and.pred 	%p27, %p36, %p35;
	.loc	1 142 21                        // gated_mlp.py:142:21
	shl.b32 	%r978, %r5, 1;
	and.b32 	%r979, %r978, 6;
	shl.b32 	%r980, %r5, 4;
	and.b32 	%r981, %r980, 448;
	or.b32 	%r982, %r981, %r979;
	shl.b32 	%r983, %r5, 5;
	and.b32 	%r984, %r983, 3072;
	or.b32 	%r985, %r982, %r984;
	and.b32 	%r986, %r6, 248;
	or.b32 	%r987, %r986, %r14;
	or.b32 	%r988, %r987, %r15;
	shr.u32 	%r989, %r985, 2;
	and.b32 	%r990, %r989, 880;
	add.s32 	%r992, %r294, %r990;
	shl.b32 	%r993, %r985, 1;
	add.s32 	%r994, %r992, %r993;
	st.shared.b32 	[%r994], %r931;
	or.b32 	%r995, %r985, 512;
	shr.u32 	%r996, %r995, 2;
	and.b32 	%r997, %r996, 1008;
	add.s32 	%r998, %r294, %r997;
	add.s32 	%r999, %r998, %r993;
	st.shared.b32 	[%r999+1024], %r932;
	st.shared.b32 	[%r994+16], %r933;
	st.shared.b32 	[%r999+1040], %r934;
	st.shared.b32 	[%r994+32], %r935;
	st.shared.b32 	[%r999+1056], %r936;
	st.shared.b32 	[%r994+48], %r937;
	st.shared.b32 	[%r999+1072], %r938;
	st.shared.b32 	[%r994+64], %r939;
	st.shared.b32 	[%r999+1088], %r940;
	st.shared.b32 	[%r994+80], %r941;
	st.shared.b32 	[%r999+1104], %r942;
	st.shared.b32 	[%r994+96], %r943;
	st.shared.b32 	[%r999+1120], %r944;
	st.shared.b32 	[%r994+112], %r945;
	st.shared.b32 	[%r999+1136], %r946;
	bar.sync 	0;
	shr.u32 	%r1000, %r988, 2;
	and.b32 	%r1001, %r1000, 240;
	add.s32 	%r1002, %r294, %r1001;
	shl.b32 	%r1003, %r988, 1;
	add.s32 	%r1004, %r1002, %r1003;
	ld.shared.v4.b32 	{%r896, %r897, %r898, %r899}, [%r1004];
	or.b32 	%r1005, %r988, 1024;
	shr.u32 	%r1006, %r1005, 2;
	and.b32 	%r1007, %r1006, 496;
	add.s32 	%r1008, %r294, %r1007;
	add.s32 	%r1009, %r1008, %r1003;
	ld.shared.v4.b32 	{%r900, %r901, %r902, %r903}, [%r1009+2048];
	or.b32 	%r1010, %r988, 2048;
	shr.u32 	%r1011, %r1010, 2;
	and.b32 	%r1012, %r1011, 752;
	add.s32 	%r1013, %r294, %r1012;
	add.s32 	%r1014, %r1013, %r1003;
	ld.shared.v4.b32 	{%r904, %r905, %r906, %r907}, [%r1014+4096];
	or.b32 	%r1015, %r988, 3072;
	shr.u32 	%r1016, %r1015, 2;
	and.b32 	%r1017, %r1016, 1008;
	add.s32 	%r1018, %r294, %r1017;
	add.s32 	%r1019, %r1018, %r1003;
	ld.shared.v4.b32 	{%r908, %r909, %r910, %r911}, [%r1019+6144];
	bar.sync 	0;
	st.shared.b32 	[%r994], %r947;
	st.shared.b32 	[%r999+1024], %r948;
	st.shared.b32 	[%r994+16], %r949;
	st.shared.b32 	[%r999+1040], %r950;
	st.shared.b32 	[%r994+32], %r951;
	st.shared.b32 	[%r999+1056], %r952;
	st.shared.b32 	[%r994+48], %r953;
	st.shared.b32 	[%r999+1072], %r954;
	st.shared.b32 	[%r994+64], %r955;
	st.shared.b32 	[%r999+1088], %r956;
	st.shared.b32 	[%r994+80], %r957;
	st.shared.b32 	[%r999+1104], %r958;
	st.shared.b32 	[%r994+96], %r959;
	st.shared.b32 	[%r999+1120], %r960;
	st.shared.b32 	[%r994+112], %r961;
	st.shared.b32 	[%r999+1136], %r962;
	bar.sync 	0;
	ld.shared.v4.b32 	{%r912, %r913, %r914, %r915}, [%r1004];
	ld.shared.v4.b32 	{%r916, %r917, %r918, %r919}, [%r1009+2048];
	ld.shared.v4.b32 	{%r920, %r921, %r922, %r923}, [%r1014+4096];
	ld.shared.v4.b32 	{%r924, %r925, %r926, %r927}, [%r1019+6144];
	// begin inline asm
	@%p25 st.global.v4.b32 [ %rd58 + 0 ], { %r896, %r897, %r898, %r899 };
	// end inline asm
	// begin inline asm
	@%p26 st.global.v4.b32 [ %rd59 + 0 ], { %r900, %r901, %r902, %r903 };
	// end inline asm
	// begin inline asm
	@%p27 st.global.v4.b32 [ %rd60 + 0 ], { %r904, %r905, %r906, %r907 };
	// end inline asm
	// begin inline asm
	@%p27 st.global.v4.b32 [ %rd61 + 0 ], { %r908, %r909, %r910, %r911 };
	// end inline asm
	// begin inline asm
	@%p27 st.global.v4.b32 [ %rd62 + 0 ], { %r912, %r913, %r914, %r915 };
	// end inline asm
	// begin inline asm
	@%p27 st.global.v4.b32 [ %rd63 + 0 ], { %r916, %r917, %r918, %r919 };
	// end inline asm
	// begin inline asm
	@%p27 st.global.v4.b32 [ %rd64 + 0 ], { %r920, %r921, %r922, %r923 };
	// end inline asm
	// begin inline asm
	@%p27 st.global.v4.b32 [ %rd65 + 0 ], { %r924, %r925, %r926, %r927 };
	// end inline asm
	.loc	1 142 4                         // gated_mlp.py:142:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py"
	.file	2 "/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 157                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x96 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 103                                 // DW_AT_name
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 109
.b8 108
.b8 112
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 117
.b8 98
.b8 117
.b8 110
.b8 116
.b8 117
.b8 47
.b8 80
.b8 84
.b8 88
.b8 95
.b8 100
.b8 97
.b8 116
.b8 97
.b8 115
.b8 101
.b8 116
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 116
.b8 120
.b8 0
.b8 2                                   // Abbrev [2] 0x4a:0x10 DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x5a:0x46 DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 74                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x6f:0x18 DW_TAG_inlined_subroutine
.b32 74                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 93                                  // DW_AT_call_line
.b8 27                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x87:0x18 DW_TAG_inlined_subroutine
.b32 74                                 // DW_AT_abstract_origin
.b64 $L__tmp3                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 120                                 // DW_AT_call_line
.b8 33                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
