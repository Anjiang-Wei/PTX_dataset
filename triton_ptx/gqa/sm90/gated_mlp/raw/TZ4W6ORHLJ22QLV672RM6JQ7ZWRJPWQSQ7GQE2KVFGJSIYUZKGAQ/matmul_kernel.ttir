#loc = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0)
module {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<128x128xf32> loc(#loc1)
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x128xf16> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<128x1xi32> loc(#loc1)
    %cst_2 = arith.constant dense<128> : tensor<128x128xi32> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg3, %c127_i32 : i32 loc(#loc52)
    %2 = arith.divsi %1, %c128_i32 : i32 loc(#loc53)
    %3 = arith.muli %2, %c8_i32 : i32 loc(#loc6)
    %4 = arith.divsi %0, %3 : i32 loc(#loc7)
    %5 = arith.muli %4, %c8_i32 : i32 loc(#loc8)
    %6 = arith.subi %c1_i32, %5 : i32 loc(#loc9)
    %7 = arith.minsi %6, %c8_i32 : i32 loc(#loc10)
    %8 = arith.remsi %0, %3 : i32 loc(#loc11)
    %9 = arith.remsi %8, %7 : i32 loc(#loc12)
    %10 = arith.addi %5, %9 : i32 loc(#loc13)
    %11 = arith.divsi %8, %7 : i32 loc(#loc14)
    %12 = arith.muli %11, %c128_i32 : i32 loc(#loc15)
    %13 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc16)
    %14 = tt.splat %12 : i32 -> tensor<128xi32> loc(#loc17)
    %15 = arith.addi %14, %13 : tensor<128xi32> loc(#loc17)
    %16 = tt.splat %arg3 : i32 -> tensor<128xi32> loc(#loc18)
    %17 = arith.remsi %15, %16 : tensor<128xi32> loc(#loc18)
    %18 = tt.expand_dims %13 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc19)
    %19 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<1x128x!tt.ptr<f16>> loc(#loc20)
    %20 = tt.addptr %19, %18 : tensor<1x128x!tt.ptr<f16>>, tensor<1x128xi32> loc(#loc20)
    %21 = tt.broadcast %20 : tensor<1x128x!tt.ptr<f16>> -> tensor<128x128x!tt.ptr<f16>> loc(#loc20)
    %22 = tt.expand_dims %13 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc21)
    %23 = tt.splat %arg6 : i32 -> tensor<128x1xi32> loc(#loc22)
    %24 = arith.muli %22, %23 : tensor<128x1xi32> loc(#loc22)
    %25 = tt.expand_dims %17 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc23)
    %26 = tt.broadcast %24 : tensor<128x1xi32> -> tensor<128x128xi32> loc(#loc24)
    %27 = tt.broadcast %25 : tensor<1x128xi32> -> tensor<128x128xi32> loc(#loc24)
    %28 = arith.addi %26, %27 : tensor<128x128xi32> loc(#loc24)
    %29 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<128x128x!tt.ptr<f16>> loc(#loc25)
    %30 = tt.addptr %29, %28 : tensor<128x128x!tt.ptr<f16>>, tensor<128x128xi32> loc(#loc25)
    %31 = arith.addi %arg4, %c127_i32 : i32 loc(#loc54)
    %32 = arith.divsi %31, %c128_i32 : i32 loc(#loc55)
    %33:3 = scf.for %arg8 = %c0_i32 to %32 step %c1_i32 iter_args(%arg9 = %cst, %arg10 = %21, %arg11 = %30) -> (tensor<128x128xf32>, tensor<128x128x!tt.ptr<f16>>, tensor<128x128x!tt.ptr<f16>>)  : i32 {
      %53 = arith.muli %arg8, %c128_i32 : i32 loc(#loc28)
      %54 = arith.subi %arg4, %53 : i32 loc(#loc29)
      %55 = tt.splat %54 : i32 -> tensor<1x128xi32> loc(#loc30)
      %56 = arith.cmpi slt, %18, %55 : tensor<1x128xi32> loc(#loc30)
      %57 = tt.broadcast %56 : tensor<1x128xi1> -> tensor<128x128xi1> loc(#loc31)
      %58 = tt.load %arg10, %57, %cst_0 : tensor<128x128x!tt.ptr<f16>> loc(#loc31)
      %59 = tt.splat %54 : i32 -> tensor<128x1xi32> loc(#loc32)
      %60 = arith.cmpi slt, %22, %59 : tensor<128x1xi32> loc(#loc32)
      %61 = tt.broadcast %60 : tensor<128x1xi1> -> tensor<128x128xi1> loc(#loc33)
      %62 = tt.load %arg11, %61, %cst_0 : tensor<128x128x!tt.ptr<f16>> loc(#loc33)
      %63 = tt.dot %58, %62, %arg9, inputPrecision = tf32 : tensor<128x128xf16> * tensor<128x128xf16> -> tensor<128x128xf32> loc(#loc34)
      %64 = tt.addptr %arg10, %cst_2 : tensor<128x128x!tt.ptr<f16>>, tensor<128x128xi32> loc(#loc35)
      %65 = arith.muli %arg6, %c128_i32 : i32 loc(#loc36)
      %66 = tt.splat %65 : i32 -> tensor<128x128xi32> loc(#loc37)
      %67 = tt.addptr %arg11, %66 : tensor<128x128x!tt.ptr<f16>>, tensor<128x128xi32> loc(#loc37)
      scf.yield %63, %64, %67 : tensor<128x128xf32>, tensor<128x128x!tt.ptr<f16>>, tensor<128x128x!tt.ptr<f16>> loc(#loc38)
    } loc(#loc27)
    %34 = arith.truncf %33#0 : tensor<128x128xf32> to tensor<128x128xf16> loc(#loc39)
    %35 = arith.muli %10, %c128_i32 : i32 loc(#loc40)
    %36 = tt.splat %35 : i32 -> tensor<128xi32> loc(#loc41)
    %37 = arith.addi %36, %13 : tensor<128xi32> loc(#loc41)
    %38 = tt.expand_dims %37 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc42)
    %39 = tt.splat %arg7 : i32 -> tensor<128x1xi32> loc(#loc43)
    %40 = arith.muli %39, %38 : tensor<128x1xi32> loc(#loc43)
    %41 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<128x1x!tt.ptr<f16>> loc(#loc44)
    %42 = tt.addptr %41, %40 : tensor<128x1x!tt.ptr<f16>>, tensor<128x1xi32> loc(#loc44)
    %43 = tt.expand_dims %15 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc45)
    %44 = tt.broadcast %42 : tensor<128x1x!tt.ptr<f16>> -> tensor<128x128x!tt.ptr<f16>> loc(#loc46)
    %45 = tt.broadcast %43 : tensor<1x128xi32> -> tensor<128x128xi32> loc(#loc46)
    %46 = tt.addptr %44, %45 : tensor<128x128x!tt.ptr<f16>>, tensor<128x128xi32> loc(#loc46)
    %47 = arith.cmpi slt, %38, %cst_1 : tensor<128x1xi32> loc(#loc47)
    %48 = tt.splat %arg3 : i32 -> tensor<1x128xi32> loc(#loc48)
    %49 = arith.cmpi slt, %43, %48 : tensor<1x128xi32> loc(#loc48)
    %50 = tt.broadcast %47 : tensor<128x1xi1> -> tensor<128x128xi1> loc(#loc49)
    %51 = tt.broadcast %49 : tensor<1x128xi1> -> tensor<128x128xi1> loc(#loc49)
    %52 = arith.andi %50, %51 : tensor<128x128xi1> loc(#loc49)
    tt.store %46, %34, %52 : tensor<128x128x!tt.ptr<f16>> loc(#loc50)
    tt.return loc(#loc51)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":91:24)
#loc3 = loc("/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":40:22)
#loc4 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":93:27)
#loc5 = loc("/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":40:28)
#loc6 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":94:38)
#loc7 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":95:22)
#loc8 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":96:29)
#loc9 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":97:35)
#loc10 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":97:48)
#loc11 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":98:34)
#loc12 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":98:54)
#loc13 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":98:27)
#loc14 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":99:40)
#loc15 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":109:23)
#loc16 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":109:51)
#loc17 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":109:38)
#loc18 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":109:68)
#loc19 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":111:60)
#loc20 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":111:22)
#loc21 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":112:29)
#loc22 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":112:40)
#loc23 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":112:60)
#loc24 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":112:52)
#loc25 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":112:22)
#loc26 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":120:33)
#loc27 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":120:22)
#loc28 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":123:59)
#loc29 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":123:55)
#loc30 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":123:51)
#loc31 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":123:20)
#loc32 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":124:51)
#loc33 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":124:20)
#loc34 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":126:35)
#loc35 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":128:18)
#loc36 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":129:33)
#loc37 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":129:18)
#loc38 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":129:8)
#loc39 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":134:23)
#loc40 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":138:22)
#loc41 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":138:37)
#loc42 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":140:41)
#loc43 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":140:33)
#loc44 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":140:21)
#loc45 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":140:72)
#loc46 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":140:52)
#loc47 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":141:33)
#loc48 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":141:58)
#loc49 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":141:39)
#loc50 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":142:21)
#loc51 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":142:4)
#loc52 = loc(callsite(#loc3 at #loc4))
#loc53 = loc(callsite(#loc5 at #loc4))
#loc54 = loc(callsite(#loc3 at #loc26))
#loc55 = loc(callsite(#loc5 at #loc26))
