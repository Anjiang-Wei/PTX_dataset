#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0)
#mma = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [16, 128, 16]}>
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 16}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x128xf32, #mma> loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x128xf16, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x64xf16, #blocked1> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<64> : tensor<64x64xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<1> : tensor<64x1xi32, #blocked> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg3, %c127_i32 : i32 loc(#loc52)
    %2 = arith.divsi %1, %c128_i32 : i32 loc(#loc53)
    %3 = arith.muli %2, %c8_i32 : i32 loc(#loc6)
    %4 = arith.divsi %0, %3 : i32 loc(#loc7)
    %5 = arith.muli %4, %c8_i32 : i32 loc(#loc8)
    %6 = arith.subi %c1_i32, %5 : i32 loc(#loc9)
    %7 = arith.minsi %6, %c8_i32 : i32 loc(#loc10)
    %8 = arith.remsi %0, %3 : i32 loc(#loc11)
    %9 = arith.remsi %8, %7 : i32 loc(#loc12)
    %10 = arith.addi %5, %9 : i32 loc(#loc13)
    %11 = arith.divsi %8, %7 : i32 loc(#loc14)
    %12 = arith.muli %11, %c128_i32 : i32 loc(#loc15)
    %13 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc16)
    %14 = tt.splat %12 : i32 -> tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc17)
    %15 = arith.addi %14, %13 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc17)
    %16 = tt.splat %arg3 : i32 -> tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc18)
    %17 = arith.remsi %15, %16 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc18)
    %18 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc19)
    %19 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc20)
    %20 = tt.expand_dims %19 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc20)
    %21 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<1x64x!tt.ptr<f16>, #blocked1> loc(#loc21)
    %22 = tt.addptr %21, %20 : tensor<1x64x!tt.ptr<f16>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc21)
    %23 = tt.broadcast %22 : tensor<1x64x!tt.ptr<f16>, #blocked1> -> tensor<64x64x!tt.ptr<f16>, #blocked1> loc(#loc21)
    %24 = tt.expand_dims %18 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc22)
    %25 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc23)
    %26 = arith.muli %24, %25 : tensor<64x1xi32, #blocked> loc(#loc23)
    %27 = tt.expand_dims %17 {axis = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc24)
    %28 = tt.broadcast %26 : tensor<64x1xi32, #blocked> -> tensor<64x128xi32, #blocked> loc(#loc25)
    %29 = tt.broadcast %27 : tensor<1x128xi32, #blocked> -> tensor<64x128xi32, #blocked> loc(#loc25)
    %30 = arith.addi %28, %29 : tensor<64x128xi32, #blocked> loc(#loc25)
    %31 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<64x128x!tt.ptr<f16>, #blocked> loc(#loc26)
    %32 = tt.addptr %31, %30 : tensor<64x128x!tt.ptr<f16>, #blocked>, tensor<64x128xi32, #blocked> loc(#loc26)
    %33 = arith.addi %arg4, %c63_i32 : i32 loc(#loc54)
    %34 = arith.divsi %33, %c64_i32 : i32 loc(#loc55)
    %35 = arith.muli %arg6, %c64_i32 : i32 loc(#loc28)
    %36 = tt.splat %35 : i32 -> tensor<64x128xi32, #blocked> loc(#loc29)
    %37 = ttg.local_alloc : () -> !ttg.memdesc<4x64x64xf16, #shared, #smem, mutable> loc(#loc30)
    %38 = ttg.local_alloc : () -> !ttg.memdesc<4x64x128xf16, #shared, #smem, mutable> loc(#loc31)
    %39 = arith.cmpi sgt, %34, %c0_i32 : i32 loc(#loc32)
    %40 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc33)
    %41 = arith.cmpi slt, %20, %40 : tensor<1x64xi32, #blocked1> loc(#loc33)
    %42 = tt.broadcast %41 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc30)
    %43 = ttg.memdesc_subview %37[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 4x64x64> loc(#loc30)
    %44 = tt.splat %39 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc32)
    %45 = arith.andi %44, %42 : tensor<64x64xi1, #blocked1> loc(#loc32)
    %46 = ttg.async_copy_global_to_local %23, %43 mask %45 other %cst_1 : tensor<64x64x!tt.ptr<f16>, #blocked1> -> <64x64xf16, #shared, #smem, mutable, 4x64x64> loc(#loc30)
    %47 = ttg.async_commit_group %46 loc(#loc30)
    %48 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc34)
    %49 = arith.cmpi slt, %24, %48 : tensor<64x1xi32, #blocked> loc(#loc34)
    %50 = tt.broadcast %49 : tensor<64x1xi1, #blocked> -> tensor<64x128xi1, #blocked> loc(#loc31)
    %51 = ttg.memdesc_subview %38[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable, 4x64x128> loc(#loc31)
    %52 = tt.splat %39 : i1 -> tensor<64x128xi1, #blocked> loc(#loc32)
    %53 = arith.andi %52, %50 : tensor<64x128xi1, #blocked> loc(#loc32)
    %54 = ttg.async_copy_global_to_local %32, %51 mask %53 other %cst_0 : tensor<64x128x!tt.ptr<f16>, #blocked> -> <64x128xf16, #shared, #smem, mutable, 4x64x128> loc(#loc31)
    %55 = ttg.async_commit_group %54 loc(#loc31)
    %56 = arith.cmpi sgt, %34, %c1_i32 : i32 loc(#loc32)
    %57 = tt.addptr %23, %cst_2 : tensor<64x64x!tt.ptr<f16>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc35)
    %58 = tt.addptr %32, %36 : tensor<64x128x!tt.ptr<f16>, #blocked>, tensor<64x128xi32, #blocked> loc(#loc29)
    %59 = arith.subi %arg4, %c64_i32 : i32 loc(#loc36)
    %60 = tt.splat %59 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc33)
    %61 = arith.cmpi slt, %20, %60 : tensor<1x64xi32, #blocked1> loc(#loc33)
    %62 = tt.broadcast %61 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc30)
    %63 = ttg.memdesc_subview %37[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 4x64x64> loc(#loc30)
    %64 = tt.splat %56 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc32)
    %65 = arith.andi %64, %62 : tensor<64x64xi1, #blocked1> loc(#loc32)
    %66 = ttg.async_copy_global_to_local %57, %63 mask %65 other %cst_1 : tensor<64x64x!tt.ptr<f16>, #blocked1> -> <64x64xf16, #shared, #smem, mutable, 4x64x64> loc(#loc30)
    %67 = ttg.async_commit_group %66 loc(#loc30)
    %68 = tt.splat %59 : i32 -> tensor<64x1xi32, #blocked> loc(#loc34)
    %69 = arith.cmpi slt, %24, %68 : tensor<64x1xi32, #blocked> loc(#loc34)
    %70 = tt.broadcast %69 : tensor<64x1xi1, #blocked> -> tensor<64x128xi1, #blocked> loc(#loc31)
    %71 = ttg.memdesc_subview %38[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable, 4x64x128> loc(#loc31)
    %72 = tt.splat %56 : i1 -> tensor<64x128xi1, #blocked> loc(#loc32)
    %73 = arith.andi %72, %70 : tensor<64x128xi1, #blocked> loc(#loc32)
    %74 = ttg.async_copy_global_to_local %58, %71 mask %73 other %cst_0 : tensor<64x128x!tt.ptr<f16>, #blocked> -> <64x128xf16, #shared, #smem, mutable, 4x64x128> loc(#loc31)
    %75 = ttg.async_commit_group %74 loc(#loc31)
    %76 = arith.cmpi sgt, %34, %c2_i32 : i32 loc(#loc32)
    %77 = tt.addptr %57, %cst_2 : tensor<64x64x!tt.ptr<f16>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc35)
    %78 = tt.addptr %58, %36 : tensor<64x128x!tt.ptr<f16>, #blocked>, tensor<64x128xi32, #blocked> loc(#loc29)
    %79 = arith.subi %arg4, %c128_i32 : i32 loc(#loc36)
    %80 = tt.splat %79 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc33)
    %81 = arith.cmpi slt, %20, %80 : tensor<1x64xi32, #blocked1> loc(#loc33)
    %82 = tt.broadcast %81 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc30)
    %83 = ttg.memdesc_subview %37[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 4x64x64> loc(#loc30)
    %84 = tt.splat %76 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc32)
    %85 = arith.andi %84, %82 : tensor<64x64xi1, #blocked1> loc(#loc32)
    %86 = ttg.async_copy_global_to_local %77, %83 mask %85 other %cst_1 : tensor<64x64x!tt.ptr<f16>, #blocked1> -> <64x64xf16, #shared, #smem, mutable, 4x64x64> loc(#loc30)
    %87 = ttg.async_commit_group %86 loc(#loc30)
    %88 = tt.splat %79 : i32 -> tensor<64x1xi32, #blocked> loc(#loc34)
    %89 = arith.cmpi slt, %24, %88 : tensor<64x1xi32, #blocked> loc(#loc34)
    %90 = tt.broadcast %89 : tensor<64x1xi1, #blocked> -> tensor<64x128xi1, #blocked> loc(#loc31)
    %91 = ttg.memdesc_subview %38[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable, 4x64x128> loc(#loc31)
    %92 = tt.splat %76 : i1 -> tensor<64x128xi1, #blocked> loc(#loc32)
    %93 = arith.andi %92, %90 : tensor<64x128xi1, #blocked> loc(#loc32)
    %94 = ttg.async_copy_global_to_local %78, %91 mask %93 other %cst_0 : tensor<64x128x!tt.ptr<f16>, #blocked> -> <64x128xf16, #shared, #smem, mutable, 4x64x128> loc(#loc31)
    %95 = ttg.async_commit_group %94 loc(#loc31)
    %96:11 = scf.for %arg8 = %c0_i32 to %34 step %c1_i32 iter_args(%arg9 = %cst, %arg10 = %77, %arg11 = %78, %arg12 = %c2_i32, %arg13 = %c-1_i32, %arg14 = %47, %arg15 = %67, %arg16 = %87, %arg17 = %55, %arg18 = %75, %arg19 = %95) -> (tensor<64x128xf32, #mma>, tensor<64x64x!tt.ptr<f16>, #blocked1>, tensor<64x128x!tt.ptr<f16>, #blocked>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token)  : i32 {
      %119 = arith.subi %34, %c3_i32 : i32 loc(#loc32)
      %120 = arith.cmpi slt, %arg8, %119 : i32 loc(#loc32)
      %121 = arith.addi %arg13, %c1_i32 : i32 loc(#loc32)
      %122 = arith.cmpi sge, %121, %c4_i32 : i32 loc(#loc32)
      %123 = arith.select %122, %c0_i32, %121 : i32 loc(#loc32)
      %124 = ttg.async_wait %arg14, %arg17 {num = 4 : i32} loc(#loc30)
      %125 = ttg.memdesc_subview %37[%123, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 4x64x64> loc(#loc30)
      %126 = ttg.memdesc_subview %38[%123, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable, 4x64x128> loc(#loc31)
      %127 = ttng.warp_group_dot %125, %126, %arg9 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 4x64x64> * !ttg.memdesc<64x128xf16, #shared, #smem, mutable, 4x64x128> -> tensor<64x128xf32, #mma> loc(#loc37)
      %128:3 = ttng.warp_group_dot_wait %127, %125, %126 {pendings = 1 : i32} : tensor<64x128xf32, #mma>, !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 4x64x64>, !ttg.memdesc<64x128xf16, #shared, #smem, mutable, 4x64x128> loc(#loc37)
      %129 = tt.addptr %arg10, %cst_2 : tensor<64x64x!tt.ptr<f16>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc35)
      %130 = tt.addptr %arg11, %36 : tensor<64x128x!tt.ptr<f16>, #blocked>, tensor<64x128xi32, #blocked> loc(#loc29)
      %131 = arith.addi %arg12, %c1_i32 : i32 loc(#loc32)
      %132 = arith.cmpi sge, %131, %c4_i32 : i32 loc(#loc32)
      %133 = arith.select %132, %c0_i32, %131 : i32 loc(#loc32)
      %134 = arith.addi %arg8, %c3_i32 : i32 loc(#loc32)
      %135 = arith.muli %134, %c64_i32 : i32 loc(#loc38)
      %136 = arith.subi %arg4, %135 : i32 loc(#loc36)
      %137 = tt.splat %136 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc33)
      %138 = arith.cmpi slt, %20, %137 : tensor<1x64xi32, #blocked1> loc(#loc33)
      %139 = tt.broadcast %138 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc30)
      %140 = ttg.memdesc_subview %37[%133, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 4x64x64> loc(#loc30)
      %141 = tt.splat %120 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc32)
      %142 = arith.andi %141, %139 : tensor<64x64xi1, #blocked1> loc(#loc32)
      %143 = ttg.async_copy_global_to_local %129, %140 mask %142 other %cst_1 : tensor<64x64x!tt.ptr<f16>, #blocked1> -> <64x64xf16, #shared, #smem, mutable, 4x64x64> loc(#loc30)
      %144 = ttg.async_commit_group %143 loc(#loc30)
      %145 = tt.splat %136 : i32 -> tensor<64x1xi32, #blocked> loc(#loc34)
      %146 = arith.cmpi slt, %24, %145 : tensor<64x1xi32, #blocked> loc(#loc34)
      %147 = tt.broadcast %146 : tensor<64x1xi1, #blocked> -> tensor<64x128xi1, #blocked> loc(#loc31)
      %148 = ttg.memdesc_subview %38[%133, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable, 4x64x128> loc(#loc31)
      %149 = tt.splat %120 : i1 -> tensor<64x128xi1, #blocked> loc(#loc32)
      %150 = arith.andi %149, %147 : tensor<64x128xi1, #blocked> loc(#loc32)
      %151 = ttg.async_copy_global_to_local %130, %148 mask %150 other %cst_0 : tensor<64x128x!tt.ptr<f16>, #blocked> -> <64x128xf16, #shared, #smem, mutable, 4x64x128> loc(#loc31)
      %152 = ttg.async_commit_group %151 loc(#loc31)
      scf.yield %128#0, %129, %130, %133, %123, %arg15, %arg16, %144, %arg18, %arg19, %152 : tensor<64x128xf32, #mma>, tensor<64x64x!tt.ptr<f16>, #blocked1>, tensor<64x128x!tt.ptr<f16>, #blocked>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token loc(#loc32)
    } loc(#loc32)
    %97 = ttng.warp_group_dot_wait %96#0 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc32)
    %98 = ttg.async_wait  {num = 0 : i32} loc(#loc32)
    ttg.local_dealloc %38 : !ttg.memdesc<4x64x128xf16, #shared, #smem, mutable> loc(#loc32)
    ttg.local_dealloc %37 : !ttg.memdesc<4x64x64xf16, #shared, #smem, mutable> loc(#loc32)
    %99 = arith.truncf %97 : tensor<64x128xf32, #mma> to tensor<64x128xf16, #mma> loc(#loc39)
    %100 = arith.muli %10, %c64_i32 : i32 loc(#loc40)
    %101 = tt.splat %100 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc41)
    %102 = arith.addi %101, %18 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc41)
    %103 = tt.expand_dims %102 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc42)
    %104 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc43)
    %105 = arith.muli %104, %103 : tensor<64x1xi32, #blocked> loc(#loc43)
    %106 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<64x1x!tt.ptr<f16>, #blocked> loc(#loc44)
    %107 = tt.addptr %106, %105 : tensor<64x1x!tt.ptr<f16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc44)
    %108 = tt.expand_dims %15 {axis = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc45)
    %109 = tt.broadcast %107 : tensor<64x1x!tt.ptr<f16>, #blocked> -> tensor<64x128x!tt.ptr<f16>, #blocked> loc(#loc46)
    %110 = tt.broadcast %108 : tensor<1x128xi32, #blocked> -> tensor<64x128xi32, #blocked> loc(#loc46)
    %111 = tt.addptr %109, %110 : tensor<64x128x!tt.ptr<f16>, #blocked>, tensor<64x128xi32, #blocked> loc(#loc46)
    %112 = arith.cmpi slt, %103, %cst_3 : tensor<64x1xi32, #blocked> loc(#loc47)
    %113 = tt.splat %arg3 : i32 -> tensor<1x128xi32, #blocked> loc(#loc48)
    %114 = arith.cmpi slt, %108, %113 : tensor<1x128xi32, #blocked> loc(#loc48)
    %115 = tt.broadcast %112 : tensor<64x1xi1, #blocked> -> tensor<64x128xi1, #blocked> loc(#loc49)
    %116 = tt.broadcast %114 : tensor<1x128xi1, #blocked> -> tensor<64x128xi1, #blocked> loc(#loc49)
    %117 = arith.andi %115, %116 : tensor<64x128xi1, #blocked> loc(#loc49)
    %118 = ttg.convert_layout %99 : tensor<64x128xf16, #mma> -> tensor<64x128xf16, #blocked> loc(#loc50)
    tt.store %111, %118, %117 : tensor<64x128x!tt.ptr<f16>, #blocked> loc(#loc50)
    tt.return loc(#loc51)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":91:24)
#loc3 = loc("/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":40:22)
#loc4 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":93:27)
#loc5 = loc("/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":40:28)
#loc6 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":94:38)
#loc7 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":95:22)
#loc8 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":96:29)
#loc9 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":97:35)
#loc10 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":97:48)
#loc11 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":98:34)
#loc12 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":98:54)
#loc13 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":98:27)
#loc14 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":99:40)
#loc15 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":109:23)
#loc16 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":109:51)
#loc17 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":109:38)
#loc18 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":109:68)
#loc19 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":110:26)
#loc20 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":111:60)
#loc21 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":111:22)
#loc22 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":112:29)
#loc23 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":112:40)
#loc24 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":112:60)
#loc25 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":112:52)
#loc26 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":112:22)
#loc27 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":120:33)
#loc28 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":129:33)
#loc29 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":129:18)
#loc30 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":123:20)
#loc31 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":124:20)
#loc32 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":120:22)
#loc33 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":123:51)
#loc34 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":124:51)
#loc35 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":128:18)
#loc36 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":123:55)
#loc37 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":126:35)
#loc38 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":123:59)
#loc39 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":134:23)
#loc40 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":138:22)
#loc41 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":138:37)
#loc42 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":140:41)
#loc43 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":140:33)
#loc44 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":140:21)
#loc45 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":140:72)
#loc46 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":140:52)
#loc47 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":141:33)
#loc48 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":141:58)
#loc49 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":141:39)
#loc50 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":142:21)
#loc51 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":142:4)
#loc52 = loc(callsite(#loc3 at #loc4))
#loc53 = loc(callsite(#loc5 at #loc4))
#loc54 = loc(callsite(#loc3 at #loc27))
#loc55 = loc(callsite(#loc5 at #loc27))
