//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	matmul_kernel           // -- Begin function matmul_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @matmul_kernel
.visible .entry matmul_kernel(
	.param .u64 .ptr .global .align 1 matmul_kernel_param_0,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_1,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_2,
	.param .u32 matmul_kernel_param_3,
	.param .u32 matmul_kernel_param_4,
	.param .u32 matmul_kernel_param_5,
	.param .u32 matmul_kernel_param_6,
	.param .u32 matmul_kernel_param_7,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_8
)
.reqntid 128
{
	.reg .pred 	%p<66>;
	.reg .b32 	%r<1548>;
	.reg .b64 	%rd<131>;
	.loc	1 68 0                          // gated_mlp.py:68:0
$L__func_begin0:
	.loc	1 68 0                          // gated_mlp.py:68:0

// %bb.0:
	ld.param.b32 	%r237, [matmul_kernel_param_7];
	ld.param.b32 	%r236, [matmul_kernel_param_4];
	ld.param.b32 	%r235, [matmul_kernel_param_3];
	ld.param.b64 	%rd27, [matmul_kernel_param_2];
	ld.param.b64 	%rd26, [matmul_kernel_param_1];
	ld.param.b64 	%rd25, [matmul_kernel_param_0];
$L__tmp0:
	.loc	1 91 24                         // gated_mlp.py:91:24
	mov.u32 	%r311, %ctaid.x;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:93:27 ]
	add.s32 	%r312, %r235, 127;
	.loc	2 40 28                         // standard.py:40:28 @[ gated_mlp.py:93:27 ]
	shr.s32 	%r313, %r312, 31;
	shr.u32 	%r314, %r313, 25;
	add.s32 	%r315, %r312, %r314;
	shr.s32 	%r316, %r315, 7;
$L__tmp2:
	.loc	1 94 38                         // gated_mlp.py:94:38
	shl.b32 	%r318, %r316, 3;
	.loc	1 95 22                         // gated_mlp.py:95:22
	div.s32 	%r319, %r311, %r318;
	ld.param.b32 	%r320, [matmul_kernel_param_6];
	.loc	1 96 29                         // gated_mlp.py:96:29
	shl.b32 	%r1, %r319, 3;
	.loc	1 97 35                         // gated_mlp.py:97:35
	sub.s32 	%r321, 1, %r1;
	.loc	1 97 48                         // gated_mlp.py:97:48
	min.s32 	%r2, %r321, 8;
	.loc	1 98 34                         // gated_mlp.py:98:34
	mul.lo.s32 	%r322, %r319, %r318;
	sub.s32 	%r3, %r311, %r322;
	.loc	1 99 40                         // gated_mlp.py:99:40
	div.s32 	%r4, %r3, %r2;
	.loc	1 109 23                        // gated_mlp.py:109:23
	shl.b32 	%r323, %r4, 7;
	.loc	1 109 51                        // gated_mlp.py:109:51
	mov.u32 	%r5, %tid.x;
	shl.b32 	%r6, %r5, 3;
	and.b32 	%r7, %r6, 56;
	and.b32 	%r324, %r5, 8;
	shl.b32 	%r325, %r324, 3;
	.loc	1 109 38                        // gated_mlp.py:109:38
	or.b32 	%r326, %r323, %r325;
	or.b32 	%r8, %r326, %r7;
	.loc	1 109 68                        // gated_mlp.py:109:68
	rem.s32 	%r327, %r8, %r235;
	.loc	1 110 26                        // gated_mlp.py:110:26
	and.b32 	%r10, %r5, 16;
	bfe.s32 	%r328, %r5, 4, 1;
	bfe.s32 	%r329, %r5, 5, 1;
	bfe.s32 	%r330, %r5, 6, 1;
	and.b32 	%r331, %r5, 64;
	shr.u32 	%r332, %r5, 4;
	bfe.u32 	%r11, %r5, 4, 3;
	or.b32 	%r12, %r11, 8;
	or.b32 	%r13, %r11, 16;
	or.b32 	%r14, %r11, 24;
	or.b32 	%r15, %r11, 32;
	or.b32 	%r16, %r11, 40;
	or.b32 	%r17, %r11, 48;
	or.b32 	%r18, %r332, 56;
	.loc	1 111 22                        // gated_mlp.py:111:22
	mul.wide.u32 	%rd64, %r7, 2;
	add.s64 	%rd28, %rd25, %rd64;
	.loc	1 112 40                        // gated_mlp.py:112:40
	shl.b32 	%r333, %r320, 3;
	.loc	1 112 52                        // gated_mlp.py:112:52
	mad.lo.s32 	%r334, %r320, %r11, %r327;
	add.s32 	%r335, %r334, %r333;
	add.s32 	%r336, %r335, %r333;
	add.s32 	%r337, %r336, %r333;
	add.s32 	%r338, %r337, %r333;
	add.s32 	%r339, %r338, %r333;
	add.s32 	%r340, %r339, %r333;
	mad.lo.s32 	%r341, %r320, %r18, %r327;
	.loc	1 112 22                        // gated_mlp.py:112:22
	mul.wide.s32 	%rd65, %r334, 2;
	add.s64 	%rd32, %rd26, %rd65;
	mul.wide.s32 	%rd66, %r335, 2;
	add.s64 	%rd33, %rd26, %rd66;
	mul.wide.s32 	%rd67, %r336, 2;
	add.s64 	%rd34, %rd26, %rd67;
	mul.wide.s32 	%rd68, %r337, 2;
	add.s64 	%rd35, %rd26, %rd68;
	mul.wide.s32 	%rd69, %r338, 2;
	add.s64 	%rd36, %rd26, %rd69;
	mul.wide.s32 	%rd70, %r339, 2;
	add.s64 	%rd37, %rd26, %rd70;
	mul.wide.s32 	%rd71, %r340, 2;
	add.s64 	%rd38, %rd26, %rd71;
	mul.wide.s32 	%rd72, %r341, 2;
	add.s64 	%rd39, %rd26, %rd72;
$L__tmp3:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:120:33 ]
	add.s32 	%r342, %r236, 63;
$L__tmp4:
	.loc	1 129 33                        // gated_mlp.py:129:33
	shl.b32 	%r346, %r320, 6;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.lt.s32 	%p1, %r342, 64;
	setp.gt.s32 	%p2, %r342, 63;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p3, %r7, %r236;
	.loc	1 123 20                        // gated_mlp.py:123:20
	and.b32 	%r347, %r329, 288;
	and.b32 	%r348, %r5, 24;
	mul.lo.s32 	%r349, %r348, 9;
	xor.b32 	%r350, %r349, %r7;
	xor.b32 	%r351, %r350, %r347;
	shl.b32 	%r20, %r331, 3;
	or.b32 	%r21, %r351, %r20;
	shl.b32 	%r352, %r21, 1;
	mov.b32 	%r353, global_smem;
	add.s32 	%r354, %r353, 65536;
	add.s32 	%r238, %r354, %r352;
	or.b32 	%r355, %r7, 1024;
	xor.b32 	%r356, %r349, %r355;
	xor.b32 	%r357, %r356, %r347;
	or.b32 	%r22, %r357, %r20;
	shl.b32 	%r358, %r22, 1;
	add.s32 	%r240, %r354, %r358;
	or.b32 	%r359, %r7, 2048;
	xor.b32 	%r360, %r349, %r359;
	xor.b32 	%r361, %r360, %r347;
	or.b32 	%r23, %r361, %r20;
	shl.b32 	%r362, %r23, 1;
	add.s32 	%r242, %r354, %r362;
	or.b32 	%r363, %r7, 3072;
	xor.b32 	%r364, %r349, %r363;
	xor.b32 	%r365, %r364, %r347;
	or.b32 	%r24, %r365, %r20;
	shl.b32 	%r366, %r24, 1;
	add.s32 	%r244, %r354, %r366;
	selp.b32 	%r367, 16, 0, %p2;
	selp.b32 	%r241, %r367, 0, %p3;
	// begin inline asm
	cp.async.cg.shared.global [ %r238 + 0 ], [ %rd28 + 0 ], 0x10, %r241;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r240 + 0 ], [ %rd28 + 0 ], 0x10, %r241;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r242 + 0 ], [ %rd28 + 0 ], 0x10, %r241;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r244 + 0 ], [ %rd28 + 0 ], 0x10, %r241;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p4, %r11, %r236;
	setp.lt.s32 	%p5, %r12, %r236;
	setp.lt.s32 	%p6, %r13, %r236;
	setp.lt.s32 	%p7, %r14, %r236;
	setp.lt.s32 	%p8, %r15, %r236;
	setp.lt.s32 	%p9, %r16, %r236;
	setp.lt.s32 	%p10, %r17, %r236;
	setp.lt.s32 	%p11, %r18, %r236;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r368, %r324, 9;
	or.b32 	%r369, %r7, %r368;
	and.b32 	%r370, %r328, 72;
	and.b32 	%r371, %r329, 144;
	and.b32 	%r372, %r330, 288;
	or.b32 	%r373, %r371, %r370;
	xor.b32 	%r374, %r373, %r369;
	xor.b32 	%r25, %r374, %r372;
	shl.b32 	%r375, %r25, 1;
	add.s32 	%r246, %r353, %r375;
	or.b32 	%r376, %r369, 512;
	or.b32 	%r377, %r373, %r372;
	xor.b32 	%r26, %r377, %r376;
	shl.b32 	%r378, %r26, 1;
	add.s32 	%r248, %r353, %r378;
	or.b32 	%r379, %r355, %r368;
	xor.b32 	%r27, %r377, %r379;
	shl.b32 	%r380, %r27, 1;
	add.s32 	%r250, %r353, %r380;
	or.b32 	%r381, %r369, 1536;
	xor.b32 	%r28, %r377, %r381;
	shl.b32 	%r382, %r28, 1;
	add.s32 	%r252, %r353, %r382;
	or.b32 	%r383, %r359, %r368;
	xor.b32 	%r29, %r377, %r383;
	shl.b32 	%r384, %r29, 1;
	add.s32 	%r254, %r353, %r384;
	or.b32 	%r385, %r369, 2560;
	xor.b32 	%r30, %r377, %r385;
	shl.b32 	%r386, %r30, 1;
	add.s32 	%r256, %r353, %r386;
	or.b32 	%r387, %r363, %r368;
	xor.b32 	%r31, %r377, %r387;
	shl.b32 	%r388, %r31, 1;
	add.s32 	%r258, %r353, %r388;
	or.b32 	%r389, %r369, 3584;
	xor.b32 	%r32, %r377, %r389;
	shl.b32 	%r390, %r32, 1;
	add.s32 	%r260, %r353, %r390;
	selp.b32 	%r247, %r367, 0, %p4;
	// begin inline asm
	cp.async.cg.shared.global [ %r246 + 0 ], [ %rd32 + 0 ], 0x10, %r247;
	// end inline asm
	selp.b32 	%r249, %r367, 0, %p5;
	// begin inline asm
	cp.async.cg.shared.global [ %r248 + 0 ], [ %rd33 + 0 ], 0x10, %r249;
	// end inline asm
	selp.b32 	%r251, %r367, 0, %p6;
	// begin inline asm
	cp.async.cg.shared.global [ %r250 + 0 ], [ %rd34 + 0 ], 0x10, %r251;
	// end inline asm
	selp.b32 	%r253, %r367, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r252 + 0 ], [ %rd35 + 0 ], 0x10, %r253;
	// end inline asm
	selp.b32 	%r255, %r367, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r254 + 0 ], [ %rd36 + 0 ], 0x10, %r255;
	// end inline asm
	selp.b32 	%r257, %r367, 0, %p9;
	// begin inline asm
	cp.async.cg.shared.global [ %r256 + 0 ], [ %rd37 + 0 ], 0x10, %r257;
	// end inline asm
	selp.b32 	%r259, %r367, 0, %p10;
	// begin inline asm
	cp.async.cg.shared.global [ %r258 + 0 ], [ %rd38 + 0 ], 0x10, %r259;
	// end inline asm
	selp.b32 	%r261, %r367, 0, %p11;
	// begin inline asm
	cp.async.cg.shared.global [ %r260 + 0 ], [ %rd39 + 0 ], 0x10, %r261;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p12, %r342, 127;
	.loc	1 128 18                        // gated_mlp.py:128:18
	add.s64 	%rd40, %rd28, 128;
	.loc	1 129 18                        // gated_mlp.py:129:18
	mul.wide.s32 	%rd73, %r346, 2;
	add.s64 	%rd44, %rd32, %rd73;
	add.s64 	%rd45, %rd33, %rd73;
	add.s64 	%rd46, %rd34, %rd73;
	add.s64 	%rd47, %rd35, %rd73;
	add.s64 	%rd48, %rd36, %rd73;
	add.s64 	%rd49, %rd37, %rd73;
	add.s64 	%rd50, %rd38, %rd73;
	add.s64 	%rd51, %rd39, %rd73;
	.loc	1 123 55                        // gated_mlp.py:123:55
	add.s32 	%r391, %r236, -64;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p13, %r7, %r391;
	.loc	1 123 20                        // gated_mlp.py:123:20
	bar.sync 	0;
	add.s32 	%r392, %r353, 73728;
	add.s32 	%r262, %r392, %r352;
	add.s32 	%r264, %r392, %r358;
	add.s32 	%r266, %r392, %r362;
	add.s32 	%r268, %r392, %r366;
	selp.b32 	%r393, 16, 0, %p13;
	selp.b32 	%r265, %r393, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r262 + 0 ], [ %rd40 + 0 ], 0x10, %r265;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r264 + 0 ], [ %rd40 + 0 ], 0x10, %r265;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r266 + 0 ], [ %rd40 + 0 ], 0x10, %r265;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r268 + 0 ], [ %rd40 + 0 ], 0x10, %r265;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p14, %r11, %r391;
	setp.lt.s32 	%p15, %r12, %r391;
	setp.lt.s32 	%p16, %r13, %r391;
	setp.lt.s32 	%p17, %r14, %r391;
	setp.lt.s32 	%p18, %r15, %r391;
	setp.lt.s32 	%p19, %r16, %r391;
	setp.lt.s32 	%p20, %r17, %r391;
	setp.lt.s32 	%p21, %r18, %r391;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r394, %r353, 16384;
	add.s32 	%r270, %r394, %r375;
	add.s32 	%r272, %r394, %r378;
	add.s32 	%r274, %r394, %r380;
	add.s32 	%r276, %r394, %r382;
	add.s32 	%r278, %r394, %r384;
	add.s32 	%r280, %r394, %r386;
	add.s32 	%r282, %r394, %r388;
	add.s32 	%r284, %r394, %r390;
	selp.b32 	%r395, 16, 0, %p14;
	selp.b32 	%r271, %r395, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r270 + 0 ], [ %rd44 + 0 ], 0x10, %r271;
	// end inline asm
	selp.b32 	%r396, 16, 0, %p15;
	selp.b32 	%r273, %r396, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r272 + 0 ], [ %rd45 + 0 ], 0x10, %r273;
	// end inline asm
	selp.b32 	%r397, 16, 0, %p16;
	selp.b32 	%r275, %r397, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r274 + 0 ], [ %rd46 + 0 ], 0x10, %r275;
	// end inline asm
	selp.b32 	%r398, 16, 0, %p17;
	selp.b32 	%r277, %r398, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r276 + 0 ], [ %rd47 + 0 ], 0x10, %r277;
	// end inline asm
	selp.b32 	%r399, 16, 0, %p18;
	selp.b32 	%r279, %r399, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r278 + 0 ], [ %rd48 + 0 ], 0x10, %r279;
	// end inline asm
	selp.b32 	%r400, 16, 0, %p19;
	selp.b32 	%r281, %r400, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r280 + 0 ], [ %rd49 + 0 ], 0x10, %r281;
	// end inline asm
	selp.b32 	%r401, 16, 0, %p20;
	selp.b32 	%r283, %r401, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r282 + 0 ], [ %rd50 + 0 ], 0x10, %r283;
	// end inline asm
	selp.b32 	%r402, 16, 0, %p21;
	selp.b32 	%r285, %r402, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r284 + 0 ], [ %rd51 + 0 ], 0x10, %r285;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p22, %r342, 191;
	.loc	1 128 18                        // gated_mlp.py:128:18
	add.s64 	%rd52, %rd28, 256;
	.loc	1 129 18                        // gated_mlp.py:129:18
	add.s64 	%rd56, %rd44, %rd73;
	add.s64 	%rd57, %rd45, %rd73;
	add.s64 	%rd58, %rd46, %rd73;
	add.s64 	%rd59, %rd47, %rd73;
	add.s64 	%rd60, %rd48, %rd73;
	add.s64 	%rd61, %rd49, %rd73;
	add.s64 	%rd62, %rd50, %rd73;
	add.s64 	%rd63, %rd51, %rd73;
	.loc	1 123 55                        // gated_mlp.py:123:55
	add.s32 	%r403, %r236, -128;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p23, %r7, %r403;
	.loc	1 123 20                        // gated_mlp.py:123:20
	bar.sync 	0;
	add.s32 	%r404, %r353, 81920;
	add.s32 	%r286, %r404, %r352;
	add.s32 	%r288, %r404, %r358;
	add.s32 	%r290, %r404, %r362;
	add.s32 	%r292, %r404, %r366;
	selp.b32 	%r405, 16, 0, %p23;
	selp.b32 	%r289, %r405, 0, %p22;
	// begin inline asm
	cp.async.cg.shared.global [ %r286 + 0 ], [ %rd52 + 0 ], 0x10, %r289;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r288 + 0 ], [ %rd52 + 0 ], 0x10, %r289;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r290 + 0 ], [ %rd52 + 0 ], 0x10, %r289;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r292 + 0 ], [ %rd52 + 0 ], 0x10, %r289;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p24, %r11, %r403;
	setp.lt.s32 	%p25, %r12, %r403;
	setp.lt.s32 	%p26, %r13, %r403;
	setp.lt.s32 	%p27, %r14, %r403;
	setp.lt.s32 	%p28, %r15, %r403;
	setp.lt.s32 	%p29, %r16, %r403;
	setp.lt.s32 	%p30, %r17, %r403;
	setp.lt.s32 	%p31, %r18, %r403;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r406, %r353, 32768;
	add.s32 	%r294, %r406, %r375;
	add.s32 	%r296, %r406, %r378;
	add.s32 	%r298, %r406, %r380;
	add.s32 	%r300, %r406, %r382;
	add.s32 	%r302, %r406, %r384;
	add.s32 	%r304, %r406, %r386;
	add.s32 	%r306, %r406, %r388;
	add.s32 	%r308, %r406, %r390;
	selp.b32 	%r407, 16, 0, %p24;
	selp.b32 	%r295, %r407, 0, %p22;
	// begin inline asm
	cp.async.cg.shared.global [ %r294 + 0 ], [ %rd56 + 0 ], 0x10, %r295;
	// end inline asm
	selp.b32 	%r408, 16, 0, %p25;
	selp.b32 	%r297, %r408, 0, %p22;
	// begin inline asm
	cp.async.cg.shared.global [ %r296 + 0 ], [ %rd57 + 0 ], 0x10, %r297;
	// end inline asm
	selp.b32 	%r409, 16, 0, %p26;
	selp.b32 	%r299, %r409, 0, %p22;
	// begin inline asm
	cp.async.cg.shared.global [ %r298 + 0 ], [ %rd58 + 0 ], 0x10, %r299;
	// end inline asm
	selp.b32 	%r410, 16, 0, %p27;
	selp.b32 	%r301, %r410, 0, %p22;
	// begin inline asm
	cp.async.cg.shared.global [ %r300 + 0 ], [ %rd59 + 0 ], 0x10, %r301;
	// end inline asm
	selp.b32 	%r411, 16, 0, %p28;
	selp.b32 	%r303, %r411, 0, %p22;
	// begin inline asm
	cp.async.cg.shared.global [ %r302 + 0 ], [ %rd60 + 0 ], 0x10, %r303;
	// end inline asm
	selp.b32 	%r412, 16, 0, %p29;
	selp.b32 	%r305, %r412, 0, %p22;
	// begin inline asm
	cp.async.cg.shared.global [ %r304 + 0 ], [ %rd61 + 0 ], 0x10, %r305;
	// end inline asm
	selp.b32 	%r413, 16, 0, %p30;
	selp.b32 	%r307, %r413, 0, %p22;
	// begin inline asm
	cp.async.cg.shared.global [ %r306 + 0 ], [ %rd62 + 0 ], 0x10, %r307;
	// end inline asm
	selp.b32 	%r414, 16, 0, %p31;
	selp.b32 	%r309, %r414, 0, %p22;
	// begin inline asm
	cp.async.cg.shared.global [ %r308 + 0 ], [ %rd63 + 0 ], 0x10, %r309;
	// end inline asm
	cp.async.commit_group;
	mov.b32 	%r1419, 0f00000000;
	mov.b32 	%r1420, %r1419;
	mov.b32 	%r1421, %r1419;
	mov.b32 	%r1422, %r1419;
	mov.b32 	%r1423, %r1419;
	mov.b32 	%r1424, %r1419;
	mov.b32 	%r1425, %r1419;
	mov.b32 	%r1426, %r1419;
	mov.b32 	%r1427, %r1419;
	mov.b32 	%r1428, %r1419;
	mov.b32 	%r1429, %r1419;
	mov.b32 	%r1430, %r1419;
	mov.b32 	%r1431, %r1419;
	mov.b32 	%r1432, %r1419;
	mov.b32 	%r1433, %r1419;
	mov.b32 	%r1434, %r1419;
	mov.b32 	%r1435, %r1419;
	mov.b32 	%r1436, %r1419;
	mov.b32 	%r1437, %r1419;
	mov.b32 	%r1438, %r1419;
	mov.b32 	%r1439, %r1419;
	mov.b32 	%r1440, %r1419;
	mov.b32 	%r1441, %r1419;
	mov.b32 	%r1442, %r1419;
	mov.b32 	%r1443, %r1419;
	mov.b32 	%r1444, %r1419;
	mov.b32 	%r1445, %r1419;
	mov.b32 	%r1446, %r1419;
	mov.b32 	%r1447, %r1419;
	mov.b32 	%r1448, %r1419;
	mov.b32 	%r1449, %r1419;
	mov.b32 	%r1450, %r1419;
	mov.b32 	%r1451, %r1419;
	mov.b32 	%r1452, %r1419;
	mov.b32 	%r1453, %r1419;
	mov.b32 	%r1454, %r1419;
	mov.b32 	%r1455, %r1419;
	mov.b32 	%r1456, %r1419;
	mov.b32 	%r1457, %r1419;
	mov.b32 	%r1458, %r1419;
	mov.b32 	%r1459, %r1419;
	mov.b32 	%r1460, %r1419;
	mov.b32 	%r1461, %r1419;
	mov.b32 	%r1462, %r1419;
	mov.b32 	%r1463, %r1419;
	mov.b32 	%r1464, %r1419;
	mov.b32 	%r1465, %r1419;
	mov.b32 	%r1466, %r1419;
	mov.b32 	%r1467, %r1419;
	mov.b32 	%r1468, %r1419;
	mov.b32 	%r1469, %r1419;
	mov.b32 	%r1470, %r1419;
	mov.b32 	%r1471, %r1419;
	mov.b32 	%r1472, %r1419;
	mov.b32 	%r1473, %r1419;
	mov.b32 	%r1474, %r1419;
	mov.b32 	%r1475, %r1419;
	mov.b32 	%r1476, %r1419;
	mov.b32 	%r1477, %r1419;
	mov.b32 	%r1478, %r1419;
	mov.b32 	%r1479, %r1419;
	mov.b32 	%r1480, %r1419;
	mov.b32 	%r1481, %r1419;
	mov.b32 	%r1482, %r1419;
	.loc	1 120 22                        // gated_mlp.py:120:22
	@%p1 bra 	$L__BB0_3;
// %bb.1:                               // %.lr.ph
	.loc	1 0 22                          // gated_mlp.py:0:22
	shr.u32 	%r9, %r5, 5;
	cvt.s64.s32 	%rd1, %r334;
	cvt.s64.s32 	%rd2, %r335;
	cvt.s64.s32 	%rd3, %r336;
	cvt.s64.s32 	%rd4, %r337;
	cvt.s64.s32 	%rd5, %r338;
	cvt.s64.s32 	%rd6, %r339;
	cvt.s64.s32 	%rd7, %r340;
	cvt.s64.s32 	%rd8, %r341;
	shr.s32 	%r343, %r342, 31;
	shr.u32 	%r344, %r343, 26;
	add.s32 	%r345, %r342, %r344;
	shr.s32 	%r19, %r345, 6;
	cvt.s64.s32 	%rd9, %r346;
	add.s32 	%r33, %r19, -3;
	add.s32 	%r1416, %r236, -192;
	.loc	1 120 22                        // gated_mlp.py:120:22
	shl.b64 	%rd10, %rd8, 1;
	mad.lo.s64 	%rd130, %rd9, 6, %rd26;
	shl.b64 	%rd12, %rd9, 1;
	shl.b64 	%rd13, %rd7, 1;
	shl.b64 	%rd14, %rd6, 1;
	shl.b64 	%rd15, %rd5, 1;
	shl.b64 	%rd16, %rd4, 1;
	shl.b64 	%rd17, %rd3, 1;
	shl.b64 	%rd18, %rd2, 1;
	shl.b64 	%rd19, %rd1, 1;
	and.b32 	%r419, %r5, 7;
	mul.wide.u32 	%rd74, %r419, 16;
	add.s64 	%rd75, %rd74, %rd25;
	add.s64 	%rd129, %rd75, 384;
	mov.b32 	%r1067, 0;
	mov.b32 	%r1419, 0f00000000;
	mov.b32 	%r1418, 2;
	mov.b32 	%r1417, -1;
	mov.b32 	%r1420, %r1419;
	mov.b32 	%r1421, %r1419;
	mov.b32 	%r1422, %r1419;
	mov.b32 	%r1423, %r1419;
	mov.b32 	%r1424, %r1419;
	mov.b32 	%r1425, %r1419;
	mov.b32 	%r1426, %r1419;
	mov.b32 	%r1427, %r1419;
	mov.b32 	%r1428, %r1419;
	mov.b32 	%r1429, %r1419;
	mov.b32 	%r1430, %r1419;
	mov.b32 	%r1431, %r1419;
	mov.b32 	%r1432, %r1419;
	mov.b32 	%r1433, %r1419;
	mov.b32 	%r1434, %r1419;
	mov.b32 	%r1435, %r1419;
	mov.b32 	%r1436, %r1419;
	mov.b32 	%r1437, %r1419;
	mov.b32 	%r1438, %r1419;
	mov.b32 	%r1439, %r1419;
	mov.b32 	%r1440, %r1419;
	mov.b32 	%r1441, %r1419;
	mov.b32 	%r1442, %r1419;
	mov.b32 	%r1443, %r1419;
	mov.b32 	%r1444, %r1419;
	mov.b32 	%r1445, %r1419;
	mov.b32 	%r1446, %r1419;
	mov.b32 	%r1447, %r1419;
	mov.b32 	%r1448, %r1419;
	mov.b32 	%r1449, %r1419;
	mov.b32 	%r1450, %r1419;
	mov.b32 	%r1451, %r1419;
	mov.b32 	%r1452, %r1419;
	mov.b32 	%r1453, %r1419;
	mov.b32 	%r1454, %r1419;
	mov.b32 	%r1455, %r1419;
	mov.b32 	%r1456, %r1419;
	mov.b32 	%r1457, %r1419;
	mov.b32 	%r1458, %r1419;
	mov.b32 	%r1459, %r1419;
	mov.b32 	%r1460, %r1419;
	mov.b32 	%r1461, %r1419;
	mov.b32 	%r1462, %r1419;
	mov.b32 	%r1463, %r1419;
	mov.b32 	%r1464, %r1419;
	mov.b32 	%r1465, %r1419;
	mov.b32 	%r1466, %r1419;
	mov.b32 	%r1467, %r1419;
	mov.b32 	%r1468, %r1419;
	mov.b32 	%r1469, %r1419;
	mov.b32 	%r1470, %r1419;
	mov.b32 	%r1471, %r1419;
	mov.b32 	%r1472, %r1419;
	mov.b32 	%r1473, %r1419;
	mov.b32 	%r1474, %r1419;
	mov.b32 	%r1475, %r1419;
	mov.b32 	%r1476, %r1419;
	mov.b32 	%r1477, %r1419;
	mov.b32 	%r1478, %r1419;
	mov.b32 	%r1479, %r1419;
	mov.b32 	%r1480, %r1419;
	mov.b32 	%r1481, %r1419;
	mov.b32 	%r1482, %r1419;
	mov.b32 	%r1483, %r1067;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	setp.lt.s32 	%p36, %r1483, %r33;
	add.s32 	%r1096, %r1417, 1;
	setp.gt.s32 	%p37, %r1096, 3;
	selp.b32 	%r1417, 0, %r1096, %p37;
	.loc	1 123 20                        // gated_mlp.py:123:20
	cp.async.wait_group 	4;
	bar.sync 	0;
	shl.b32 	%r1097, %r1417, 13;
	add.s32 	%r996, %r354, %r1097;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r1100, %r1417, 14;
	add.s32 	%r999, %r353, %r1100;
	.loc	1 126 35                        // gated_mlp.py:126:35
	shfl.sync.idx.b32 	%r1101, %r9, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r1102, %r996, 4, 14;
	cvt.u64.u32 	%rd96, %r1102;
	or.b64 	%rd76, %rd96, 4611686293338849280;
	bfe.u32 	%r1103, %r999, 4, 14;
	cvt.u64.u32 	%rd97, %r1103;
	or.b64 	%rd77, %rd97, 4611686293338849280;
	mov.pred 	%p32, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r1419,%r1420,%r1421,%r1422,%r1423,%r1424,%r1425,%r1426,%r1427,%r1428,%r1429,%r1430,%r1431,%r1432,%r1433,%r1434,%r1435,%r1436,%r1437,%r1438,%r1439,%r1440,%r1441,%r1442,%r1443,%r1444,%r1445,%r1446,%r1447,%r1448,%r1449,%r1450,%r1451,%r1452,%r1453,%r1454,%r1455,%r1456,%r1457,%r1458,%r1459,%r1460,%r1461,%r1462,%r1463,%r1464,%r1465,%r1466,%r1467,%r1468,%r1469,%r1470,%r1471,%r1472,%r1473,%r1474,%r1475,%r1476,%r1477,%r1478,%r1479,%r1480,%r1481,%r1482}, %rd76, %rd77, %p32, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1104, %r996, 32;
	bfe.u32 	%r1105, %r1104, 4, 14;
	cvt.u64.u32 	%rd98, %r1105;
	or.b64 	%rd78, %rd98, 4611686293338849280;
	add.s32 	%r1106, %r999, 2048;
	bfe.u32 	%r1107, %r1106, 4, 14;
	cvt.u64.u32 	%rd99, %r1107;
	or.b64 	%rd79, %rd99, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r1419,%r1420,%r1421,%r1422,%r1423,%r1424,%r1425,%r1426,%r1427,%r1428,%r1429,%r1430,%r1431,%r1432,%r1433,%r1434,%r1435,%r1436,%r1437,%r1438,%r1439,%r1440,%r1441,%r1442,%r1443,%r1444,%r1445,%r1446,%r1447,%r1448,%r1449,%r1450,%r1451,%r1452,%r1453,%r1454,%r1455,%r1456,%r1457,%r1458,%r1459,%r1460,%r1461,%r1462,%r1463,%r1464,%r1465,%r1466,%r1467,%r1468,%r1469,%r1470,%r1471,%r1472,%r1473,%r1474,%r1475,%r1476,%r1477,%r1478,%r1479,%r1480,%r1481,%r1482}, %rd78, %rd79, %p32, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1108, %r996, 64;
	bfe.u32 	%r1109, %r1108, 4, 14;
	cvt.u64.u32 	%rd100, %r1109;
	or.b64 	%rd80, %rd100, 4611686293338849280;
	add.s32 	%r1110, %r999, 4096;
	bfe.u32 	%r1111, %r1110, 4, 14;
	cvt.u64.u32 	%rd101, %r1111;
	or.b64 	%rd81, %rd101, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r1419,%r1420,%r1421,%r1422,%r1423,%r1424,%r1425,%r1426,%r1427,%r1428,%r1429,%r1430,%r1431,%r1432,%r1433,%r1434,%r1435,%r1436,%r1437,%r1438,%r1439,%r1440,%r1441,%r1442,%r1443,%r1444,%r1445,%r1446,%r1447,%r1448,%r1449,%r1450,%r1451,%r1452,%r1453,%r1454,%r1455,%r1456,%r1457,%r1458,%r1459,%r1460,%r1461,%r1462,%r1463,%r1464,%r1465,%r1466,%r1467,%r1468,%r1469,%r1470,%r1471,%r1472,%r1473,%r1474,%r1475,%r1476,%r1477,%r1478,%r1479,%r1480,%r1481,%r1482}, %rd80, %rd81, %p32, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1112, %r996, 96;
	bfe.u32 	%r1113, %r1112, 4, 14;
	cvt.u64.u32 	%rd102, %r1113;
	or.b64 	%rd82, %rd102, 4611686293338849280;
	add.s32 	%r1114, %r999, 6144;
	bfe.u32 	%r1115, %r1114, 4, 14;
	cvt.u64.u32 	%rd103, %r1115;
	or.b64 	%rd83, %rd103, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r1419,%r1420,%r1421,%r1422,%r1423,%r1424,%r1425,%r1426,%r1427,%r1428,%r1429,%r1430,%r1431,%r1432,%r1433,%r1434,%r1435,%r1436,%r1437,%r1438,%r1439,%r1440,%r1441,%r1442,%r1443,%r1444,%r1445,%r1446,%r1447,%r1448,%r1449,%r1450,%r1451,%r1452,%r1453,%r1454,%r1455,%r1456,%r1457,%r1458,%r1459,%r1460,%r1461,%r1462,%r1463,%r1464,%r1465,%r1466,%r1467,%r1468,%r1469,%r1470,%r1471,%r1472,%r1473,%r1474,%r1475,%r1476,%r1477,%r1478,%r1479,%r1480,%r1481,%r1482}, %rd82, %rd83, %p32, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r997, %r1067;
	mov.b32 	%r998, %r1067;
	mov.b32 	%r1000, %r1067;
	mov.b32 	%r1001, %r1067;
	// begin inline asm
	// wait for regs: %r1419,%r1420,%r1421,%r1422,%r1423,%r1424,%r1425,%r1426,%r1427,%r1428,%r1429,%r1430,%r1431,%r1432,%r1433,%r1434,%r1435,%r1436,%r1437,%r1438,%r1439,%r1440,%r1441,%r1442,%r1443,%r1444,%r1445,%r1446,%r1447,%r1448,%r1449,%r1450,%r1451,%r1452,%r1453,%r1454,%r1455,%r1456,%r1457,%r1458,%r1459,%r1460,%r1461,%r1462,%r1463,%r1464,%r1465,%r1466,%r1467,%r1468,%r1469,%r1470,%r1471,%r1472,%r1473,%r1474,%r1475,%r1476,%r1477,%r1478,%r1479,%r1480,%r1481,%r1482,%r996,%r997,%r998,%r999,%r1000,%r1001
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 129 18                        // gated_mlp.py:129:18
	add.s64 	%rd88, %rd130, %rd19;
	add.s64 	%rd89, %rd130, %rd18;
	add.s64 	%rd90, %rd130, %rd17;
	add.s64 	%rd91, %rd130, %rd16;
	add.s64 	%rd92, %rd130, %rd15;
	add.s64 	%rd93, %rd130, %rd14;
	add.s64 	%rd94, %rd130, %rd13;
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s64 	%rd95, %rd130, %rd10;
	add.s32 	%r1116, %r1418, 1;
	setp.gt.s32 	%p38, %r1116, 3;
	selp.b32 	%r1418, 0, %r1116, %p38;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p39, %r7, %r1416;
	.loc	1 123 20                        // gated_mlp.py:123:20
	shl.b32 	%r1117, %r1418, 13;
	add.s32 	%r1118, %r354, %r1117;
	bar.sync 	0;
	add.s32 	%r1072, %r1118, %r352;
	add.s32 	%r1074, %r1118, %r358;
	add.s32 	%r1076, %r1118, %r362;
	add.s32 	%r1078, %r1118, %r366;
	selp.b32 	%r1123, 16, 0, %p39;
	selp.b32 	%r1075, %r1123, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r1072 + 0 ], [ %rd129 + 0 ], 0x10, %r1075;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1074 + 0 ], [ %rd129 + 0 ], 0x10, %r1075;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1076 + 0 ], [ %rd129 + 0 ], 0x10, %r1075;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1078 + 0 ], [ %rd129 + 0 ], 0x10, %r1075;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p40, %r11, %r1416;
	setp.lt.s32 	%p41, %r12, %r1416;
	setp.lt.s32 	%p42, %r13, %r1416;
	setp.lt.s32 	%p43, %r14, %r1416;
	setp.lt.s32 	%p44, %r15, %r1416;
	setp.lt.s32 	%p45, %r16, %r1416;
	setp.lt.s32 	%p46, %r17, %r1416;
	setp.lt.s32 	%p47, %r18, %r1416;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r1124, %r1418, 14;
	add.s32 	%r1125, %r353, %r1124;
	add.s32 	%r1080, %r1125, %r375;
	add.s32 	%r1082, %r1125, %r378;
	add.s32 	%r1084, %r1125, %r380;
	add.s32 	%r1086, %r1125, %r382;
	add.s32 	%r1088, %r1125, %r384;
	add.s32 	%r1090, %r1125, %r386;
	add.s32 	%r1092, %r1125, %r388;
	add.s32 	%r1094, %r1125, %r390;
	selp.b32 	%r1134, 16, 0, %p40;
	selp.b32 	%r1081, %r1134, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r1080 + 0 ], [ %rd88 + 0 ], 0x10, %r1081;
	// end inline asm
	selp.b32 	%r1135, 16, 0, %p41;
	selp.b32 	%r1083, %r1135, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r1082 + 0 ], [ %rd89 + 0 ], 0x10, %r1083;
	// end inline asm
	selp.b32 	%r1136, 16, 0, %p42;
	selp.b32 	%r1085, %r1136, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r1084 + 0 ], [ %rd90 + 0 ], 0x10, %r1085;
	// end inline asm
	selp.b32 	%r1137, 16, 0, %p43;
	selp.b32 	%r1087, %r1137, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r1086 + 0 ], [ %rd91 + 0 ], 0x10, %r1087;
	// end inline asm
	selp.b32 	%r1138, 16, 0, %p44;
	selp.b32 	%r1089, %r1138, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r1088 + 0 ], [ %rd92 + 0 ], 0x10, %r1089;
	// end inline asm
	selp.b32 	%r1139, 16, 0, %p45;
	selp.b32 	%r1091, %r1139, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r1090 + 0 ], [ %rd93 + 0 ], 0x10, %r1091;
	// end inline asm
	selp.b32 	%r1140, 16, 0, %p46;
	selp.b32 	%r1093, %r1140, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r1092 + 0 ], [ %rd94 + 0 ], 0x10, %r1093;
	// end inline asm
	selp.b32 	%r1141, 16, 0, %p47;
	selp.b32 	%r1095, %r1141, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r1094 + 0 ], [ %rd95 + 0 ], 0x10, %r1095;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s32 	%r1483, %r1483, 1;
	add.s64 	%rd130, %rd130, %rd12;
	add.s64 	%rd129, %rd129, 128;
	add.s32 	%r1416, %r1416, -64;
	setp.ne.s32 	%p48, %r19, %r1483;
	@%p48 bra 	$L__BB0_2;
$L__BB0_3:                              // %._crit_edge
	.loc	1 98 54                         // gated_mlp.py:98:54
	mul.lo.s32 	%r1342, %r4, %r2;
	sub.s32 	%r1343, %r3, %r1342;
	.loc	1 98 27                         // gated_mlp.py:98:27
	add.s32 	%r1344, %r1343, %r1;
	.loc	1 120 22                        // gated_mlp.py:120:22
	// begin inline asm
	// wait for regs: %r1419,%r1420,%r1421,%r1422,%r1423,%r1424,%r1425,%r1426,%r1427,%r1428,%r1429,%r1430,%r1431,%r1432,%r1433,%r1434,%r1435,%r1436,%r1437,%r1438,%r1439,%r1440,%r1441,%r1442,%r1443,%r1444,%r1445,%r1446,%r1447,%r1448,%r1449,%r1450,%r1451,%r1452,%r1453,%r1454,%r1455,%r1456,%r1457,%r1458,%r1459,%r1460,%r1461,%r1462,%r1463,%r1464,%r1465,%r1466,%r1467,%r1468,%r1469,%r1470,%r1471,%r1472,%r1473,%r1474,%r1475,%r1476,%r1477,%r1478,%r1479,%r1480,%r1481,%r1482
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 134 23                        // gated_mlp.py:134:23
	cvt.rn.f16x2.f32 	%r1271, %r1420, %r1419;
	cvt.rn.f16x2.f32 	%r1272, %r1422, %r1421;
	cvt.rn.f16x2.f32 	%r1273, %r1424, %r1423;
	cvt.rn.f16x2.f32 	%r1274, %r1426, %r1425;
	cvt.rn.f16x2.f32 	%r1276, %r1428, %r1427;
	cvt.rn.f16x2.f32 	%r1277, %r1430, %r1429;
	cvt.rn.f16x2.f32 	%r1278, %r1432, %r1431;
	cvt.rn.f16x2.f32 	%r1279, %r1434, %r1433;
	cvt.rn.f16x2.f32 	%r1281, %r1436, %r1435;
	cvt.rn.f16x2.f32 	%r1282, %r1438, %r1437;
	cvt.rn.f16x2.f32 	%r1283, %r1440, %r1439;
	cvt.rn.f16x2.f32 	%r1284, %r1442, %r1441;
	cvt.rn.f16x2.f32 	%r1286, %r1444, %r1443;
	cvt.rn.f16x2.f32 	%r1287, %r1446, %r1445;
	cvt.rn.f16x2.f32 	%r1288, %r1448, %r1447;
	cvt.rn.f16x2.f32 	%r1289, %r1450, %r1449;
	cvt.rn.f16x2.f32 	%r1291, %r1452, %r1451;
	cvt.rn.f16x2.f32 	%r1292, %r1454, %r1453;
	cvt.rn.f16x2.f32 	%r1293, %r1456, %r1455;
	cvt.rn.f16x2.f32 	%r1294, %r1458, %r1457;
	cvt.rn.f16x2.f32 	%r1296, %r1460, %r1459;
	cvt.rn.f16x2.f32 	%r1297, %r1462, %r1461;
	cvt.rn.f16x2.f32 	%r1298, %r1464, %r1463;
	cvt.rn.f16x2.f32 	%r1299, %r1466, %r1465;
	cvt.rn.f16x2.f32 	%r1301, %r1468, %r1467;
	cvt.rn.f16x2.f32 	%r1302, %r1470, %r1469;
	cvt.rn.f16x2.f32 	%r1303, %r1472, %r1471;
	cvt.rn.f16x2.f32 	%r1304, %r1474, %r1473;
	cvt.rn.f16x2.f32 	%r1306, %r1476, %r1475;
	cvt.rn.f16x2.f32 	%r1307, %r1478, %r1477;
	cvt.rn.f16x2.f32 	%r1308, %r1480, %r1479;
	cvt.rn.f16x2.f32 	%r1309, %r1482, %r1481;
	.loc	1 138 22                        // gated_mlp.py:138:22
	shl.b32 	%r1345, %r1344, 6;
	.loc	1 138 37                        // gated_mlp.py:138:37
	or.b32 	%r1346, %r1345, %r11;
	or.b32 	%r1347, %r1345, %r12;
	or.b32 	%r1348, %r1345, %r13;
	or.b32 	%r1349, %r1345, %r14;
	or.b32 	%r1350, %r1345, %r15;
	or.b32 	%r1351, %r1345, %r16;
	or.b32 	%r1352, %r1345, %r17;
	or.b32 	%r1353, %r1345, %r18;
	.loc	1 140 33                        // gated_mlp.py:140:33
	mul.lo.s32 	%r1354, %r1346, %r237;
	mul.lo.s32 	%r1355, %r1347, %r237;
	mul.lo.s32 	%r1356, %r1348, %r237;
	mul.lo.s32 	%r1357, %r1349, %r237;
	mul.lo.s32 	%r1358, %r1350, %r237;
	mul.lo.s32 	%r1359, %r1351, %r237;
	mul.lo.s32 	%r1360, %r1352, %r237;
	mul.lo.s32 	%r1361, %r1353, %r237;
	.loc	1 140 21                        // gated_mlp.py:140:21
	mul.wide.s32 	%rd112, %r1354, 2;
	add.s64 	%rd113, %rd27, %rd112;
	mul.wide.s32 	%rd114, %r1355, 2;
	add.s64 	%rd115, %rd27, %rd114;
	mul.wide.s32 	%rd116, %r1356, 2;
	add.s64 	%rd117, %rd27, %rd116;
	mul.wide.s32 	%rd118, %r1357, 2;
	add.s64 	%rd119, %rd27, %rd118;
	mul.wide.s32 	%rd120, %r1358, 2;
	add.s64 	%rd121, %rd27, %rd120;
	mul.wide.s32 	%rd122, %r1359, 2;
	add.s64 	%rd123, %rd27, %rd122;
	mul.wide.s32 	%rd124, %r1360, 2;
	add.s64 	%rd125, %rd27, %rd124;
	mul.wide.s32 	%rd126, %r1361, 2;
	add.s64 	%rd127, %rd27, %rd126;
	.loc	1 140 52                        // gated_mlp.py:140:52
	mul.wide.s32 	%rd128, %r8, 2;
	add.s64 	%rd104, %rd113, %rd128;
	add.s64 	%rd105, %rd115, %rd128;
	add.s64 	%rd106, %rd117, %rd128;
	add.s64 	%rd107, %rd119, %rd128;
	add.s64 	%rd108, %rd121, %rd128;
	add.s64 	%rd109, %rd123, %rd128;
	add.s64 	%rd110, %rd125, %rd128;
	add.s64 	%rd111, %rd127, %rd128;
	.loc	1 141 33                        // gated_mlp.py:141:33
	setp.lt.s32 	%p57, %r1346, 1;
	setp.lt.s32 	%p58, %r1347, 1;
	setp.lt.s32 	%p59, %r1348, 1;
	setp.lt.s32 	%p60, %r1349, 1;
	setp.lt.s32 	%p61, %r1350, 1;
	setp.lt.s32 	%p62, %r1351, 1;
	setp.lt.s32 	%p63, %r1352, 1;
	setp.lt.s32 	%p64, %r1353, 1;
	.loc	1 141 58                        // gated_mlp.py:141:58
	setp.lt.s32 	%p65, %r8, %r235;
	.loc	1 141 39                        // gated_mlp.py:141:39
	and.pred 	%p49, %p65, %p57;
	and.pred 	%p50, %p65, %p58;
	and.pred 	%p51, %p65, %p59;
	and.pred 	%p52, %p65, %p60;
	and.pred 	%p53, %p65, %p61;
	and.pred 	%p54, %p65, %p62;
	and.pred 	%p55, %p65, %p63;
	and.pred 	%p56, %p65, %p64;
	.loc	1 142 21                        // gated_mlp.py:142:21
	shl.b32 	%r1362, %r5, 7;
	and.b32 	%r1363, %r1362, 1920;
	shr.u32 	%r1364, %r10, 1;
	or.b32 	%r1365, %r1363, %r1364;
	shl.b32 	%r1366, %r5, 6;
	and.b32 	%r1367, %r1366, 6144;
	or.b32 	%r1368, %r1365, %r1367;
	and.b32 	%r1369, %r6, 504;
	or.b32 	%r1370, %r1369, %r20;
	shr.u32 	%r1371, %r1368, 3;
	and.b32 	%r1372, %r1371, 1008;
	add.s32 	%r1374, %r353, %r1372;
	shl.b32 	%r1375, %r1368, 1;
	add.s32 	%r1270, %r1374, %r1375;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1270], {%r1271, %r1272, %r1273, %r1274};
	// end inline asm
	add.s32 	%r1275, %r1270, 32;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1275], {%r1276, %r1277, %r1278, %r1279};
	// end inline asm
	add.s32 	%r1280, %r1270, 64;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1280], {%r1281, %r1282, %r1283, %r1284};
	// end inline asm
	add.s32 	%r1285, %r1270, 96;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1285], {%r1286, %r1287, %r1288, %r1289};
	// end inline asm
	add.s32 	%r1290, %r1270, 128;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1290], {%r1291, %r1292, %r1293, %r1294};
	// end inline asm
	add.s32 	%r1295, %r1270, 160;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1295], {%r1296, %r1297, %r1298, %r1299};
	// end inline asm
	add.s32 	%r1300, %r1270, 192;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1300], {%r1301, %r1302, %r1303, %r1304};
	// end inline asm
	add.s32 	%r1305, %r1270, 224;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1305], {%r1306, %r1307, %r1308, %r1309};
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r1376, %r1370, 3;
	and.b32 	%r1377, %r1376, 112;
	add.s32 	%r1378, %r353, %r1377;
	shl.b32 	%r1379, %r1370, 1;
	add.s32 	%r1380, %r1378, %r1379;
	ld.shared.v4.b32 	{%r1310, %r1311, %r1312, %r1313}, [%r1380];
	or.b32 	%r1381, %r1370, 1024;
	shr.u32 	%r1382, %r1381, 3;
	and.b32 	%r1383, %r1382, 240;
	add.s32 	%r1384, %r353, %r1383;
	add.s32 	%r1385, %r1384, %r1379;
	ld.shared.v4.b32 	{%r1314, %r1315, %r1316, %r1317}, [%r1385+2048];
	or.b32 	%r1386, %r1370, 2048;
	shr.u32 	%r1387, %r1386, 3;
	and.b32 	%r1388, %r1387, 368;
	add.s32 	%r1389, %r353, %r1388;
	add.s32 	%r1390, %r1389, %r1379;
	ld.shared.v4.b32 	{%r1318, %r1319, %r1320, %r1321}, [%r1390+4096];
	or.b32 	%r1391, %r1370, 3072;
	shr.u32 	%r1392, %r1391, 3;
	and.b32 	%r1393, %r1392, 496;
	add.s32 	%r1394, %r353, %r1393;
	add.s32 	%r1395, %r1394, %r1379;
	ld.shared.v4.b32 	{%r1322, %r1323, %r1324, %r1325}, [%r1395+6144];
	or.b32 	%r1396, %r1370, 4096;
	shr.u32 	%r1397, %r1396, 3;
	and.b32 	%r1398, %r1397, 624;
	add.s32 	%r1399, %r353, %r1398;
	add.s32 	%r1400, %r1399, %r1379;
	ld.shared.v4.b32 	{%r1326, %r1327, %r1328, %r1329}, [%r1400+8192];
	or.b32 	%r1401, %r1370, 5120;
	shr.u32 	%r1402, %r1401, 3;
	and.b32 	%r1403, %r1402, 752;
	add.s32 	%r1404, %r353, %r1403;
	add.s32 	%r1405, %r1404, %r1379;
	ld.shared.v4.b32 	{%r1330, %r1331, %r1332, %r1333}, [%r1405+10240];
	or.b32 	%r1406, %r1370, 6144;
	shr.u32 	%r1407, %r1406, 3;
	and.b32 	%r1408, %r1407, 880;
	add.s32 	%r1409, %r353, %r1408;
	add.s32 	%r1410, %r1409, %r1379;
	ld.shared.v4.b32 	{%r1334, %r1335, %r1336, %r1337}, [%r1410+12288];
	or.b32 	%r1411, %r1370, 7168;
	shr.u32 	%r1412, %r1411, 3;
	and.b32 	%r1413, %r1412, 1008;
	add.s32 	%r1414, %r353, %r1413;
	add.s32 	%r1415, %r1414, %r1379;
	ld.shared.v4.b32 	{%r1338, %r1339, %r1340, %r1341}, [%r1415+14336];
	// begin inline asm
	@%p49 st.global.v4.b32 [ %rd104 + 0 ], { %r1310, %r1311, %r1312, %r1313 };
	// end inline asm
	// begin inline asm
	@%p50 st.global.v4.b32 [ %rd105 + 0 ], { %r1314, %r1315, %r1316, %r1317 };
	// end inline asm
	// begin inline asm
	@%p51 st.global.v4.b32 [ %rd106 + 0 ], { %r1318, %r1319, %r1320, %r1321 };
	// end inline asm
	// begin inline asm
	@%p52 st.global.v4.b32 [ %rd107 + 0 ], { %r1322, %r1323, %r1324, %r1325 };
	// end inline asm
	// begin inline asm
	@%p53 st.global.v4.b32 [ %rd108 + 0 ], { %r1326, %r1327, %r1328, %r1329 };
	// end inline asm
	// begin inline asm
	@%p54 st.global.v4.b32 [ %rd109 + 0 ], { %r1330, %r1331, %r1332, %r1333 };
	// end inline asm
	// begin inline asm
	@%p55 st.global.v4.b32 [ %rd110 + 0 ], { %r1334, %r1335, %r1336, %r1337 };
	// end inline asm
	// begin inline asm
	@%p56 st.global.v4.b32 [ %rd111 + 0 ], { %r1338, %r1339, %r1340, %r1341 };
	// end inline asm
	.loc	1 142 4                         // gated_mlp.py:142:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py"
	.file	2 "/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 157                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x96 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 103                                 // DW_AT_name
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 109
.b8 108
.b8 112
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 117
.b8 98
.b8 117
.b8 110
.b8 116
.b8 117
.b8 47
.b8 80
.b8 84
.b8 88
.b8 95
.b8 100
.b8 97
.b8 116
.b8 97
.b8 115
.b8 101
.b8 116
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 116
.b8 120
.b8 0
.b8 2                                   // Abbrev [2] 0x4a:0x10 DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x5a:0x46 DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 74                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x6f:0x18 DW_TAG_inlined_subroutine
.b32 74                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 93                                  // DW_AT_call_line
.b8 27                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x87:0x18 DW_TAG_inlined_subroutine
.b32 74                                 // DW_AT_abstract_origin
.b64 $L__tmp3                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 120                                 // DW_AT_call_line
.b8 33                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
