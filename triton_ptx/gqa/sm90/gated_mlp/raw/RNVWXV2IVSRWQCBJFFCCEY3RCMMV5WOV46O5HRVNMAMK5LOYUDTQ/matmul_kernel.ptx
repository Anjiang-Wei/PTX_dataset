//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	matmul_kernel           // -- Begin function matmul_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @matmul_kernel
.visible .entry matmul_kernel(
	.param .u64 .ptr .global .align 1 matmul_kernel_param_0,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_1,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_2,
	.param .u32 matmul_kernel_param_3,
	.param .u32 matmul_kernel_param_4,
	.param .u32 matmul_kernel_param_5,
	.param .u32 matmul_kernel_param_6,
	.param .u32 matmul_kernel_param_7,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_8
)
.reqntid 128
{
	.reg .pred 	%p<28>;
	.reg .b32 	%r<660>;
	.reg .b64 	%rd<69>;
	.loc	1 68 0                          // gated_mlp.py:68:0
$L__func_begin0:
	.loc	1 68 0                          // gated_mlp.py:68:0

// %bb.0:
	ld.param.b32 	%r129, [matmul_kernel_param_7];
	ld.param.b32 	%r128, [matmul_kernel_param_4];
	ld.param.b32 	%r127, [matmul_kernel_param_3];
	ld.param.b64 	%rd12, [matmul_kernel_param_2];
	ld.param.b64 	%rd11, [matmul_kernel_param_1];
	ld.param.b64 	%rd10, [matmul_kernel_param_0];
$L__tmp0:
	.loc	1 91 24                         // gated_mlp.py:91:24
	mov.u32 	%r161, %ctaid.x;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:93:27 ]
	add.s32 	%r162, %r127, 31;
	.loc	2 40 28                         // standard.py:40:28 @[ gated_mlp.py:93:27 ]
	shr.s32 	%r163, %r162, 31;
	shr.u32 	%r164, %r163, 27;
	add.s32 	%r165, %r162, %r164;
	shr.s32 	%r166, %r165, 5;
$L__tmp2:
	.loc	1 94 38                         // gated_mlp.py:94:38
	shl.b32 	%r168, %r166, 3;
	.loc	1 95 22                         // gated_mlp.py:95:22
	div.s32 	%r169, %r161, %r168;
	ld.param.b32 	%r170, [matmul_kernel_param_6];
	.loc	1 96 29                         // gated_mlp.py:96:29
	shl.b32 	%r1, %r169, 3;
	.loc	1 97 35                         // gated_mlp.py:97:35
	sub.s32 	%r171, 1, %r1;
	.loc	1 97 48                         // gated_mlp.py:97:48
	min.s32 	%r2, %r171, 8;
	.loc	1 98 34                         // gated_mlp.py:98:34
	mul.lo.s32 	%r172, %r169, %r168;
	sub.s32 	%r3, %r161, %r172;
	.loc	1 99 40                         // gated_mlp.py:99:40
	div.s32 	%r4, %r3, %r2;
	.loc	1 109 23                        // gated_mlp.py:109:23
	shl.b32 	%r173, %r4, 5;
	.loc	1 109 51                        // gated_mlp.py:109:51
	mov.u32 	%r5, %tid.x;
	shl.b32 	%r6, %r5, 3;
	and.b32 	%r7, %r6, 24;
	.loc	1 109 38                        // gated_mlp.py:109:38
	or.b32 	%r8, %r173, %r7;
	.loc	1 109 68                        // gated_mlp.py:109:68
	rem.s32 	%r174, %r8, %r127;
	.loc	1 111 22                        // gated_mlp.py:111:22
	mul.wide.u32 	%rd28, %r7, 2;
	add.s64 	%rd13, %rd10, %rd28;
	.loc	1 112 29                        // gated_mlp.py:112:29
	and.b32 	%r10, %r5, 32;
	and.b32 	%r11, %r5, 64;
	bfe.u32 	%r12, %r5, 2, 5;
	.loc	1 112 52                        // gated_mlp.py:112:52
	mad.lo.s32 	%r175, %r170, %r12, %r174;
	.loc	1 112 22                        // gated_mlp.py:112:22
	mul.wide.s32 	%rd29, %r175, 2;
	add.s64 	%rd17, %rd11, %rd29;
$L__tmp3:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:120:33 ]
	add.s32 	%r176, %r128, 31;
$L__tmp4:
	.loc	1 129 33                        // gated_mlp.py:129:33
	shl.b32 	%r180, %r170, 5;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.lt.s32 	%p1, %r176, 32;
	setp.gt.s32 	%p2, %r176, 31;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p3, %r7, %r128;
	.loc	1 123 20                        // gated_mlp.py:123:20
	and.b32 	%r181, %r6, 56;
	and.b32 	%r182, %r5, 24;
	mul.lo.s32 	%r183, %r182, 9;
	xor.b32 	%r184, %r183, %r181;
	shl.b32 	%r14, %r10, 3;
	shl.b32 	%r15, %r11, 3;
	or.b32 	%r185, %r14, %r184;
	or.b32 	%r16, %r185, %r15;
	shl.b32 	%r186, %r16, 1;
	mov.b32 	%r187, global_smem;
	add.s32 	%r130, %r187, %r186;
	or.b32 	%r188, %r181, 1024;
	xor.b32 	%r189, %r183, %r188;
	or.b32 	%r190, %r14, %r189;
	or.b32 	%r17, %r190, %r15;
	shl.b32 	%r191, %r17, 1;
	add.s32 	%r132, %r187, %r191;
	or.b32 	%r192, %r181, 2048;
	xor.b32 	%r193, %r183, %r192;
	or.b32 	%r194, %r14, %r193;
	or.b32 	%r18, %r194, %r15;
	shl.b32 	%r195, %r18, 1;
	add.s32 	%r134, %r187, %r195;
	or.b32 	%r196, %r181, 3072;
	xor.b32 	%r197, %r183, %r196;
	or.b32 	%r198, %r14, %r197;
	or.b32 	%r19, %r198, %r15;
	shl.b32 	%r199, %r19, 1;
	add.s32 	%r136, %r187, %r199;
	selp.b32 	%r200, 16, 0, %p2;
	selp.b32 	%r133, %r200, 0, %p3;
	// begin inline asm
	cp.async.cg.shared.global [ %r130 + 0 ], [ %rd13 + 0 ], 0x10, %r133;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r132 + 0 ], [ %rd13 + 0 ], 0x10, %r133;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r134 + 0 ], [ %rd13 + 0 ], 0x10, %r133;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r136 + 0 ], [ %rd13 + 0 ], 0x10, %r133;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p4, %r12, %r128;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r138, %r130, 32768;
	selp.b32 	%r139, %r200, 0, %p4;
	// begin inline asm
	cp.async.cg.shared.global [ %r138 + 0 ], [ %rd17 + 0 ], 0x10, %r139;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p5, %r176, 63;
	.loc	1 128 18                        // gated_mlp.py:128:18
	add.s64 	%rd18, %rd13, 64;
	.loc	1 129 18                        // gated_mlp.py:129:18
	mul.wide.s32 	%rd30, %r180, 2;
	add.s64 	%rd22, %rd17, %rd30;
	.loc	1 123 55                        // gated_mlp.py:123:55
	add.s32 	%r201, %r128, -32;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p6, %r7, %r201;
	.loc	1 123 20                        // gated_mlp.py:123:20
	bar.sync 	0;
	add.s32 	%r202, %r187, 8192;
	add.s32 	%r140, %r202, %r186;
	add.s32 	%r142, %r202, %r191;
	add.s32 	%r144, %r202, %r195;
	add.s32 	%r146, %r202, %r199;
	selp.b32 	%r203, 16, 0, %p6;
	selp.b32 	%r143, %r203, 0, %p5;
	// begin inline asm
	cp.async.cg.shared.global [ %r140 + 0 ], [ %rd18 + 0 ], 0x10, %r143;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r142 + 0 ], [ %rd18 + 0 ], 0x10, %r143;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r144 + 0 ], [ %rd18 + 0 ], 0x10, %r143;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r146 + 0 ], [ %rd18 + 0 ], 0x10, %r143;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p7, %r12, %r201;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r148, %r130, 34816;
	selp.b32 	%r204, 16, 0, %p7;
	selp.b32 	%r149, %r204, 0, %p5;
	// begin inline asm
	cp.async.cg.shared.global [ %r148 + 0 ], [ %rd22 + 0 ], 0x10, %r149;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p8, %r176, 95;
	.loc	1 128 18                        // gated_mlp.py:128:18
	add.s64 	%rd23, %rd13, 128;
	.loc	1 129 18                        // gated_mlp.py:129:18
	add.s64 	%rd27, %rd22, %rd30;
	.loc	1 123 55                        // gated_mlp.py:123:55
	add.s32 	%r205, %r128, -64;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p9, %r7, %r205;
	.loc	1 123 20                        // gated_mlp.py:123:20
	bar.sync 	0;
	add.s32 	%r206, %r187, 16384;
	add.s32 	%r150, %r206, %r186;
	add.s32 	%r152, %r206, %r191;
	add.s32 	%r154, %r206, %r195;
	add.s32 	%r156, %r206, %r199;
	selp.b32 	%r207, 16, 0, %p9;
	selp.b32 	%r153, %r207, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r150 + 0 ], [ %rd23 + 0 ], 0x10, %r153;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r152 + 0 ], [ %rd23 + 0 ], 0x10, %r153;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r154 + 0 ], [ %rd23 + 0 ], 0x10, %r153;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r156 + 0 ], [ %rd23 + 0 ], 0x10, %r153;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p10, %r12, %r205;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r158, %r130, 36864;
	selp.b32 	%r208, 16, 0, %p10;
	selp.b32 	%r159, %r208, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r158 + 0 ], [ %rd27 + 0 ], 0x10, %r159;
	// end inline asm
	cp.async.commit_group;
	mov.b32 	%r595, 0f00000000;
	mov.b32 	%r596, %r595;
	mov.b32 	%r597, %r595;
	mov.b32 	%r598, %r595;
	mov.b32 	%r599, %r595;
	mov.b32 	%r600, %r595;
	mov.b32 	%r601, %r595;
	mov.b32 	%r602, %r595;
	mov.b32 	%r603, %r595;
	mov.b32 	%r604, %r595;
	mov.b32 	%r605, %r595;
	mov.b32 	%r606, %r595;
	mov.b32 	%r607, %r595;
	mov.b32 	%r608, %r595;
	mov.b32 	%r609, %r595;
	mov.b32 	%r610, %r595;
	mov.b32 	%r611, %r595;
	mov.b32 	%r612, %r595;
	mov.b32 	%r613, %r595;
	mov.b32 	%r614, %r595;
	mov.b32 	%r615, %r595;
	mov.b32 	%r616, %r595;
	mov.b32 	%r617, %r595;
	mov.b32 	%r618, %r595;
	mov.b32 	%r619, %r595;
	mov.b32 	%r620, %r595;
	mov.b32 	%r621, %r595;
	mov.b32 	%r622, %r595;
	mov.b32 	%r623, %r595;
	mov.b32 	%r624, %r595;
	mov.b32 	%r625, %r595;
	mov.b32 	%r626, %r595;
	.loc	1 120 22                        // gated_mlp.py:120:22
	@%p1 bra 	$L__BB0_3;
// %bb.1:                               // %.lr.ph
	.loc	1 0 22                          // gated_mlp.py:0:22
	shr.u32 	%r9, %r5, 5;
	cvt.s64.s32 	%rd1, %r175;
	shr.s32 	%r177, %r176, 31;
	shr.u32 	%r178, %r177, 27;
	add.s32 	%r179, %r176, %r178;
	shr.s32 	%r13, %r179, 5;
	cvt.s64.s32 	%rd2, %r180;
	add.s32 	%r21, %r13, -3;
	add.s32 	%r592, %r128, -96;
	.loc	1 120 22                        // gated_mlp.py:120:22
	shl.b64 	%rd31, %rd1, 1;
	mad.lo.s64 	%rd32, %rd2, 6, %rd31;
	add.s64 	%rd68, %rd11, %rd32;
	shl.b64 	%rd4, %rd2, 1;
	and.b32 	%r213, %r5, 3;
	mul.wide.u32 	%rd33, %r213, 16;
	add.s64 	%rd34, %rd33, %rd10;
	add.s64 	%rd67, %rd34, 192;
	mov.b32 	%r413, 0;
	mov.b32 	%r595, 0f00000000;
	mov.b32 	%r594, 2;
	mov.b32 	%r593, -1;
	mov.b32 	%r596, %r595;
	mov.b32 	%r597, %r595;
	mov.b32 	%r598, %r595;
	mov.b32 	%r599, %r595;
	mov.b32 	%r600, %r595;
	mov.b32 	%r601, %r595;
	mov.b32 	%r602, %r595;
	mov.b32 	%r603, %r595;
	mov.b32 	%r604, %r595;
	mov.b32 	%r605, %r595;
	mov.b32 	%r606, %r595;
	mov.b32 	%r607, %r595;
	mov.b32 	%r608, %r595;
	mov.b32 	%r609, %r595;
	mov.b32 	%r610, %r595;
	mov.b32 	%r611, %r595;
	mov.b32 	%r612, %r595;
	mov.b32 	%r613, %r595;
	mov.b32 	%r614, %r595;
	mov.b32 	%r615, %r595;
	mov.b32 	%r616, %r595;
	mov.b32 	%r617, %r595;
	mov.b32 	%r618, %r595;
	mov.b32 	%r619, %r595;
	mov.b32 	%r620, %r595;
	mov.b32 	%r621, %r595;
	mov.b32 	%r622, %r595;
	mov.b32 	%r623, %r595;
	mov.b32 	%r624, %r595;
	mov.b32 	%r625, %r595;
	mov.b32 	%r626, %r595;
	mov.b32 	%r627, %r413;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	setp.lt.s32 	%p15, %r627, %r21;
	add.s32 	%r428, %r593, 1;
	setp.gt.s32 	%p16, %r428, 3;
	selp.b32 	%r593, 0, %r428, %p16;
	.loc	1 123 20                        // gated_mlp.py:123:20
	cp.async.wait_group 	4;
	bar.sync 	0;
	shl.b32 	%r429, %r593, 13;
	add.s32 	%r374, %r187, %r429;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r431, %r593, 11;
	add.s32 	%r432, %r187, %r431;
	add.s32 	%r377, %r432, 32768;
	.loc	1 126 35                        // gated_mlp.py:126:35
	shfl.sync.idx.b32 	%r433, %r9, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r434, %r374, 4, 14;
	cvt.u64.u32 	%rd48, %r434;
	or.b64 	%rd35, %rd48, -9223371899382267904;
	bfe.u32 	%r435, %r377, 4, 14;
	cvt.u64.u32 	%rd49, %r435;
	or.b64 	%rd36, %rd49, -9223371899407433728;
	mov.pred 	%p11, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.f16.f16 {%r595,%r596,%r597,%r598,%r599,%r600,%r601,%r602,%r603,%r604,%r605,%r606,%r607,%r608,%r609,%r610}, %rd35, %rd36, %p11, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r436, %r374, 32;
	bfe.u32 	%r437, %r436, 4, 14;
	cvt.u64.u32 	%rd50, %r437;
	or.b64 	%rd37, %rd50, -9223371899382267904;
	add.s32 	%r438, %r432, 33792;
	bfe.u32 	%r439, %r438, 4, 14;
	cvt.u64.u32 	%rd51, %r439;
	or.b64 	%rd38, %rd51, -9223371899407433728;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.f16.f16 {%r595,%r596,%r597,%r598,%r599,%r600,%r601,%r602,%r603,%r604,%r605,%r606,%r607,%r608,%r609,%r610}, %rd37, %rd38, %p11, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r440, %r374, 4096;
	bfe.u32 	%r441, %r440, 4, 14;
	cvt.u64.u32 	%rd52, %r441;
	or.b64 	%rd39, %rd52, -9223371899382267904;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.f16.f16 {%r611,%r612,%r613,%r614,%r615,%r616,%r617,%r618,%r619,%r620,%r621,%r622,%r623,%r624,%r625,%r626}, %rd39, %rd36, %p11, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r442, %r374, 4128;
	bfe.u32 	%r443, %r442, 4, 14;
	cvt.u64.u32 	%rd53, %r443;
	or.b64 	%rd41, %rd53, -9223371899382267904;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.f16.f16 {%r611,%r612,%r613,%r614,%r615,%r616,%r617,%r618,%r619,%r620,%r621,%r622,%r623,%r624,%r625,%r626}, %rd41, %rd38, %p11, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r379, %r413;
	mov.b32 	%r375, %r413;
	mov.b32 	%r376, %r413;
	mov.b32 	%r378, %r413;
	// begin inline asm
	// wait for regs: %r595,%r596,%r597,%r598,%r599,%r600,%r601,%r602,%r603,%r604,%r605,%r606,%r607,%r608,%r609,%r610,%r611,%r612,%r613,%r614,%r615,%r616,%r617,%r618,%r619,%r620,%r621,%r622,%r623,%r624,%r625,%r626,%r374,%r375,%r376,%r377,%r378,%r379
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s32 	%r444, %r594, 1;
	setp.gt.s32 	%p17, %r444, 3;
	selp.b32 	%r594, 0, %r444, %p17;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p18, %r7, %r592;
	.loc	1 123 20                        // gated_mlp.py:123:20
	shl.b32 	%r445, %r594, 13;
	add.s32 	%r446, %r187, %r445;
	bar.sync 	0;
	add.s32 	%r418, %r446, %r186;
	add.s32 	%r420, %r446, %r191;
	add.s32 	%r422, %r446, %r195;
	add.s32 	%r424, %r446, %r199;
	selp.b32 	%r451, 16, 0, %p18;
	selp.b32 	%r421, %r451, 0, %p15;
	// begin inline asm
	cp.async.cg.shared.global [ %r418 + 0 ], [ %rd67 + 0 ], 0x10, %r421;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r420 + 0 ], [ %rd67 + 0 ], 0x10, %r421;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r422 + 0 ], [ %rd67 + 0 ], 0x10, %r421;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r424 + 0 ], [ %rd67 + 0 ], 0x10, %r421;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p19, %r12, %r592;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r452, %r594, 11;
	add.s32 	%r426, %r138, %r452;
	selp.b32 	%r453, 16, 0, %p19;
	selp.b32 	%r427, %r453, 0, %p15;
	// begin inline asm
	cp.async.cg.shared.global [ %r426 + 0 ], [ %rd68 + 0 ], 0x10, %r427;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s32 	%r627, %r627, 1;
	add.s64 	%rd68, %rd68, %rd4;
	add.s64 	%rd67, %rd67, 64;
	add.s32 	%r592, %r592, -32;
	setp.ne.s32 	%p20, %r13, %r627;
	@%p20 bra 	$L__BB0_2;
$L__BB0_3:                              // %._crit_edge
	.loc	1 98 54                         // gated_mlp.py:98:54
	mul.lo.s32 	%r534, %r4, %r2;
	sub.s32 	%r535, %r3, %r534;
	.loc	1 98 27                         // gated_mlp.py:98:27
	add.s32 	%r536, %r535, %r1;
	.loc	1 120 22                        // gated_mlp.py:120:22
	// begin inline asm
	// wait for regs: %r595,%r596,%r597,%r598,%r599,%r600,%r601,%r602,%r603,%r604,%r605,%r606,%r607,%r608,%r609,%r610,%r611,%r612,%r613,%r614,%r615,%r616,%r617,%r618,%r619,%r620,%r621,%r622,%r623,%r624,%r625,%r626
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 134 23                        // gated_mlp.py:134:23
	cvt.rn.f16x2.f32 	%r537, %r596, %r595;
	cvt.rn.f16x2.f32 	%r538, %r598, %r597;
	cvt.rn.f16x2.f32 	%r539, %r600, %r599;
	cvt.rn.f16x2.f32 	%r540, %r602, %r601;
	cvt.rn.f16x2.f32 	%r541, %r604, %r603;
	cvt.rn.f16x2.f32 	%r542, %r606, %r605;
	cvt.rn.f16x2.f32 	%r543, %r608, %r607;
	cvt.rn.f16x2.f32 	%r544, %r610, %r609;
	cvt.rn.f16x2.f32 	%r545, %r612, %r611;
	cvt.rn.f16x2.f32 	%r546, %r614, %r613;
	cvt.rn.f16x2.f32 	%r547, %r616, %r615;
	cvt.rn.f16x2.f32 	%r548, %r618, %r617;
	cvt.rn.f16x2.f32 	%r549, %r620, %r619;
	cvt.rn.f16x2.f32 	%r550, %r622, %r621;
	cvt.rn.f16x2.f32 	%r551, %r624, %r623;
	cvt.rn.f16x2.f32 	%r552, %r626, %r625;
	.loc	1 138 22                        // gated_mlp.py:138:22
	shl.b32 	%r553, %r536, 7;
	.loc	1 138 37                        // gated_mlp.py:138:37
	or.b32 	%r554, %r553, %r12;
	.loc	1 140 33                        // gated_mlp.py:140:33
	mul.lo.s32 	%r555, %r554, %r129;
	shl.b32 	%r556, %r129, 5;
	add.s32 	%r557, %r555, %r556;
	add.s32 	%r558, %r557, %r556;
	add.s32 	%r559, %r558, %r556;
	.loc	1 140 21                        // gated_mlp.py:140:21
	mul.wide.s32 	%rd58, %r555, 2;
	add.s64 	%rd59, %rd12, %rd58;
	mul.wide.s32 	%rd60, %r557, 2;
	add.s64 	%rd61, %rd12, %rd60;
	mul.wide.s32 	%rd62, %r558, 2;
	add.s64 	%rd63, %rd12, %rd62;
	mul.wide.s32 	%rd64, %r559, 2;
	add.s64 	%rd65, %rd12, %rd64;
	.loc	1 140 52                        // gated_mlp.py:140:52
	mul.wide.s32 	%rd66, %r8, 2;
	add.s64 	%rd54, %rd59, %rd66;
	add.s64 	%rd55, %rd61, %rd66;
	add.s64 	%rd56, %rd63, %rd66;
	add.s64 	%rd57, %rd65, %rd66;
	.loc	1 141 33                        // gated_mlp.py:141:33
	setp.lt.s32 	%p25, %r554, 1;
	setp.lt.s32 	%p26, %r553, 0;
	.loc	1 141 58                        // gated_mlp.py:141:58
	setp.lt.s32 	%p27, %r8, %r127;
	.loc	1 141 39                        // gated_mlp.py:141:39
	and.pred 	%p21, %p27, %p25;
	and.pred 	%p22, %p27, %p26;
	.loc	1 142 21                        // gated_mlp.py:142:21
	shl.b32 	%r560, %r5, 1;
	and.b32 	%r561, %r560, 6;
	shl.b32 	%r562, %r10, 4;
	or.b32 	%r563, %r561, %r562;
	and.b32 	%r564, %r6, 224;
	or.b32 	%r565, %r563, %r564;
	shl.b32 	%r566, %r11, 4;
	or.b32 	%r567, %r565, %r566;
	and.b32 	%r568, %r6, 248;
	or.b32 	%r569, %r568, %r14;
	or.b32 	%r570, %r569, %r15;
	shr.u32 	%r571, %r567, 1;
	and.b32 	%r572, %r571, 1008;
	add.s32 	%r574, %r187, %r572;
	shl.b32 	%r575, %r567, 1;
	add.s32 	%r576, %r574, %r575;
	st.shared.b32 	[%r576], %r537;
	or.b32 	%r577, %r567, 256;
	shr.u32 	%r578, %r577, 1;
	and.b32 	%r579, %r578, 1073741808;
	add.s32 	%r580, %r187, %r579;
	add.s32 	%r581, %r580, %r575;
	st.shared.b32 	[%r581+512], %r538;
	st.shared.b32 	[%r576+16], %r539;
	st.shared.b32 	[%r581+528], %r540;
	st.shared.b32 	[%r576+32], %r541;
	st.shared.b32 	[%r581+544], %r542;
	st.shared.b32 	[%r576+48], %r543;
	st.shared.b32 	[%r581+560], %r544;
	bar.sync 	0;
	shr.u32 	%r582, %r570, 1;
	and.b32 	%r583, %r582, 496;
	add.s32 	%r584, %r187, %r583;
	shl.b32 	%r585, %r570, 1;
	add.s32 	%r586, %r584, %r585;
	ld.shared.v4.b32 	{%r518, %r519, %r520, %r521}, [%r586];
	or.b32 	%r587, %r570, 1024;
	shr.u32 	%r588, %r587, 1;
	and.b32 	%r589, %r588, 1008;
	add.s32 	%r590, %r187, %r589;
	add.s32 	%r591, %r590, %r585;
	ld.shared.v4.b32 	{%r522, %r523, %r524, %r525}, [%r591+2048];
	bar.sync 	0;
	st.shared.b32 	[%r576], %r545;
	st.shared.b32 	[%r581+512], %r546;
	st.shared.b32 	[%r576+16], %r547;
	st.shared.b32 	[%r581+528], %r548;
	st.shared.b32 	[%r576+32], %r549;
	st.shared.b32 	[%r581+544], %r550;
	st.shared.b32 	[%r576+48], %r551;
	st.shared.b32 	[%r581+560], %r552;
	bar.sync 	0;
	ld.shared.v4.b32 	{%r526, %r527, %r528, %r529}, [%r586];
	ld.shared.v4.b32 	{%r530, %r531, %r532, %r533}, [%r591+2048];
	// begin inline asm
	@%p21 st.global.v4.b32 [ %rd54 + 0 ], { %r518, %r519, %r520, %r521 };
	// end inline asm
	// begin inline asm
	@%p22 st.global.v4.b32 [ %rd55 + 0 ], { %r522, %r523, %r524, %r525 };
	// end inline asm
	// begin inline asm
	@%p22 st.global.v4.b32 [ %rd56 + 0 ], { %r526, %r527, %r528, %r529 };
	// end inline asm
	// begin inline asm
	@%p22 st.global.v4.b32 [ %rd57 + 0 ], { %r530, %r531, %r532, %r533 };
	// end inline asm
	.loc	1 142 4                         // gated_mlp.py:142:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py"
	.file	2 "/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 157                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x96 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 103                                 // DW_AT_name
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 109
.b8 108
.b8 112
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 117
.b8 98
.b8 117
.b8 110
.b8 116
.b8 117
.b8 47
.b8 80
.b8 84
.b8 88
.b8 95
.b8 100
.b8 97
.b8 116
.b8 97
.b8 115
.b8 101
.b8 116
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 116
.b8 120
.b8 0
.b8 2                                   // Abbrev [2] 0x4a:0x10 DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x5a:0x46 DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 74                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x6f:0x18 DW_TAG_inlined_subroutine
.b32 74                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 93                                  // DW_AT_call_line
.b8 27                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x87:0x18 DW_TAG_inlined_subroutine
.b32 74                                 // DW_AT_abstract_origin
.b64 $L__tmp3                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 120                                 // DW_AT_call_line
.b8 33                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
