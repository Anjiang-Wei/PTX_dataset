//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	matmul_kernel           // -- Begin function matmul_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @matmul_kernel
.visible .entry matmul_kernel(
	.param .u64 .ptr .global .align 1 matmul_kernel_param_0,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_1,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_2,
	.param .u32 matmul_kernel_param_3,
	.param .u32 matmul_kernel_param_4,
	.param .u32 matmul_kernel_param_5,
	.param .u32 matmul_kernel_param_6,
	.param .u32 matmul_kernel_param_7,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_8
)
.reqntid 128
{
	.reg .pred 	%p<51>;
	.reg .b32 	%r<1492>;
	.reg .b64 	%rd<131>;
	.loc	1 68 0                          // gated_mlp.py:68:0
$L__func_begin0:
	.loc	1 68 0                          // gated_mlp.py:68:0

// %bb.0:
	ld.param.b32 	%r228, [matmul_kernel_param_7];
	ld.param.b32 	%r227, [matmul_kernel_param_4];
	ld.param.b32 	%r226, [matmul_kernel_param_3];
	ld.param.b64 	%rd19, [matmul_kernel_param_2];
	ld.param.b64 	%rd18, [matmul_kernel_param_1];
	ld.param.b64 	%rd17, [matmul_kernel_param_0];
$L__tmp0:
	.loc	1 91 24                         // gated_mlp.py:91:24
	mov.u32 	%r302, %ctaid.x;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:93:27 ]
	add.s32 	%r303, %r226, 63;
	.loc	2 40 28                         // standard.py:40:28 @[ gated_mlp.py:93:27 ]
	shr.s32 	%r304, %r303, 31;
	shr.u32 	%r305, %r304, 26;
	add.s32 	%r306, %r303, %r305;
	shr.s32 	%r307, %r306, 6;
$L__tmp2:
	.loc	1 94 38                         // gated_mlp.py:94:38
	shl.b32 	%r309, %r307, 3;
	.loc	1 95 22                         // gated_mlp.py:95:22
	div.s32 	%r310, %r302, %r309;
	ld.param.b32 	%r311, [matmul_kernel_param_6];
	.loc	1 96 29                         // gated_mlp.py:96:29
	shl.b32 	%r1, %r310, 3;
	.loc	1 97 35                         // gated_mlp.py:97:35
	sub.s32 	%r312, 1, %r1;
	.loc	1 97 48                         // gated_mlp.py:97:48
	min.s32 	%r2, %r312, 8;
	.loc	1 98 34                         // gated_mlp.py:98:34
	mul.lo.s32 	%r313, %r310, %r309;
	sub.s32 	%r3, %r302, %r313;
	.loc	1 99 40                         // gated_mlp.py:99:40
	div.s32 	%r4, %r3, %r2;
	.loc	1 109 23                        // gated_mlp.py:109:23
	shl.b32 	%r314, %r4, 6;
	.loc	1 109 51                        // gated_mlp.py:109:51
	mov.u32 	%r5, %tid.x;
	shl.b32 	%r6, %r5, 3;
	and.b32 	%r7, %r6, 56;
	.loc	1 109 38                        // gated_mlp.py:109:38
	or.b32 	%r8, %r314, %r7;
	.loc	1 109 68                        // gated_mlp.py:109:68
	rem.s32 	%r315, %r8, %r226;
	.loc	1 111 22                        // gated_mlp.py:111:22
	mul.wide.u32 	%rd56, %r7, 2;
	add.s64 	%rd20, %rd17, %rd56;
	.loc	1 112 29                        // gated_mlp.py:112:29
	bfe.s32 	%r316, %r5, 5, 1;
	shr.u32 	%r10, %r5, 3;
	bfe.u32 	%r11, %r5, 3, 4;
	or.b32 	%r12, %r11, 16;
	or.b32 	%r13, %r11, 32;
	or.b32 	%r14, %r11, 48;
	.loc	1 112 40                        // gated_mlp.py:112:40
	shl.b32 	%r317, %r311, 4;
	.loc	1 112 52                        // gated_mlp.py:112:52
	mad.lo.s32 	%r318, %r311, %r11, %r315;
	add.s32 	%r319, %r318, %r317;
	add.s32 	%r320, %r319, %r317;
	add.s32 	%r321, %r320, %r317;
	.loc	1 112 22                        // gated_mlp.py:112:22
	mul.wide.s32 	%rd57, %r318, 2;
	add.s64 	%rd28, %rd18, %rd57;
	mul.wide.s32 	%rd58, %r319, 2;
	add.s64 	%rd29, %rd18, %rd58;
	mul.wide.s32 	%rd59, %r320, 2;
	add.s64 	%rd30, %rd18, %rd59;
	mul.wide.s32 	%rd60, %r321, 2;
	add.s64 	%rd31, %rd18, %rd60;
$L__tmp3:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:120:33 ]
	add.s32 	%r322, %r227, 63;
$L__tmp4:
	.loc	1 129 33                        // gated_mlp.py:129:33
	shl.b32 	%r326, %r311, 6;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.lt.s32 	%p1, %r322, 64;
	setp.gt.s32 	%p2, %r322, 63;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p3, %r7, %r227;
	.loc	1 123 20                        // gated_mlp.py:123:20
	and.b32 	%r327, %r316, 288;
	and.b32 	%r328, %r5, 24;
	mul.lo.s32 	%r329, %r328, 9;
	xor.b32 	%r330, %r329, %r7;
	xor.b32 	%r331, %r330, %r327;
	and.b32 	%r332, %r6, 512;
	or.b32 	%r16, %r331, %r332;
	shl.b32 	%r333, %r16, 1;
	mov.b32 	%r334, global_smem;
	add.s32 	%r229, %r334, %r333;
	or.b32 	%r335, %r7, 1024;
	xor.b32 	%r336, %r329, %r335;
	xor.b32 	%r337, %r336, %r327;
	or.b32 	%r17, %r337, %r332;
	shl.b32 	%r338, %r17, 1;
	add.s32 	%r231, %r334, %r338;
	or.b32 	%r339, %r7, 2048;
	xor.b32 	%r340, %r329, %r339;
	xor.b32 	%r341, %r340, %r327;
	or.b32 	%r18, %r341, %r332;
	shl.b32 	%r342, %r18, 1;
	add.s32 	%r233, %r334, %r342;
	or.b32 	%r343, %r7, 3072;
	xor.b32 	%r344, %r329, %r343;
	xor.b32 	%r345, %r344, %r327;
	or.b32 	%r19, %r345, %r332;
	shl.b32 	%r346, %r19, 1;
	add.s32 	%r235, %r334, %r346;
	or.b32 	%r347, %r7, 4096;
	xor.b32 	%r348, %r329, %r347;
	xor.b32 	%r349, %r348, %r327;
	or.b32 	%r20, %r349, %r332;
	shl.b32 	%r350, %r20, 1;
	add.s32 	%r237, %r334, %r350;
	or.b32 	%r351, %r7, 5120;
	xor.b32 	%r352, %r329, %r351;
	xor.b32 	%r353, %r352, %r327;
	or.b32 	%r21, %r353, %r332;
	shl.b32 	%r354, %r21, 1;
	add.s32 	%r239, %r334, %r354;
	or.b32 	%r355, %r7, 6144;
	xor.b32 	%r356, %r329, %r355;
	xor.b32 	%r357, %r356, %r327;
	or.b32 	%r22, %r357, %r332;
	shl.b32 	%r358, %r22, 1;
	add.s32 	%r241, %r334, %r358;
	or.b32 	%r359, %r7, 7168;
	xor.b32 	%r360, %r329, %r359;
	xor.b32 	%r361, %r360, %r327;
	or.b32 	%r23, %r361, %r332;
	shl.b32 	%r362, %r23, 1;
	add.s32 	%r243, %r334, %r362;
	selp.b32 	%r363, 16, 0, %p2;
	selp.b32 	%r232, %r363, 0, %p3;
	// begin inline asm
	cp.async.cg.shared.global [ %r229 + 0 ], [ %rd20 + 0 ], 0x10, %r232;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r231 + 0 ], [ %rd20 + 0 ], 0x10, %r232;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r233 + 0 ], [ %rd20 + 0 ], 0x10, %r232;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r235 + 0 ], [ %rd20 + 0 ], 0x10, %r232;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r237 + 0 ], [ %rd20 + 0 ], 0x10, %r232;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r239 + 0 ], [ %rd20 + 0 ], 0x10, %r232;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r241 + 0 ], [ %rd20 + 0 ], 0x10, %r232;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r243 + 0 ], [ %rd20 + 0 ], 0x10, %r232;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p4, %r11, %r227;
	setp.lt.s32 	%p5, %r12, %r227;
	setp.lt.s32 	%p6, %r13, %r227;
	setp.lt.s32 	%p7, %r14, %r227;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r364, %r334, 65536;
	add.s32 	%r245, %r364, %r333;
	add.s32 	%r247, %r364, %r338;
	add.s32 	%r249, %r364, %r342;
	add.s32 	%r251, %r364, %r346;
	selp.b32 	%r246, %r363, 0, %p4;
	// begin inline asm
	cp.async.cg.shared.global [ %r245 + 0 ], [ %rd28 + 0 ], 0x10, %r246;
	// end inline asm
	selp.b32 	%r248, %r363, 0, %p5;
	// begin inline asm
	cp.async.cg.shared.global [ %r247 + 0 ], [ %rd29 + 0 ], 0x10, %r248;
	// end inline asm
	selp.b32 	%r250, %r363, 0, %p6;
	// begin inline asm
	cp.async.cg.shared.global [ %r249 + 0 ], [ %rd30 + 0 ], 0x10, %r250;
	// end inline asm
	selp.b32 	%r252, %r363, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r251 + 0 ], [ %rd31 + 0 ], 0x10, %r252;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p8, %r322, 127;
	.loc	1 128 18                        // gated_mlp.py:128:18
	add.s64 	%rd32, %rd20, 128;
	.loc	1 129 18                        // gated_mlp.py:129:18
	mul.wide.s32 	%rd61, %r326, 2;
	add.s64 	%rd40, %rd28, %rd61;
	add.s64 	%rd41, %rd29, %rd61;
	add.s64 	%rd42, %rd30, %rd61;
	add.s64 	%rd43, %rd31, %rd61;
	.loc	1 123 55                        // gated_mlp.py:123:55
	add.s32 	%r365, %r227, -64;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p9, %r7, %r365;
	.loc	1 123 20                        // gated_mlp.py:123:20
	bar.sync 	0;
	add.s32 	%r366, %r334, 16384;
	add.s32 	%r253, %r366, %r333;
	add.s32 	%r255, %r366, %r338;
	add.s32 	%r257, %r366, %r342;
	add.s32 	%r259, %r366, %r346;
	add.s32 	%r261, %r366, %r350;
	add.s32 	%r263, %r366, %r354;
	add.s32 	%r265, %r366, %r358;
	add.s32 	%r267, %r366, %r362;
	selp.b32 	%r367, 16, 0, %p9;
	selp.b32 	%r256, %r367, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r253 + 0 ], [ %rd32 + 0 ], 0x10, %r256;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r255 + 0 ], [ %rd32 + 0 ], 0x10, %r256;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r257 + 0 ], [ %rd32 + 0 ], 0x10, %r256;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r259 + 0 ], [ %rd32 + 0 ], 0x10, %r256;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r261 + 0 ], [ %rd32 + 0 ], 0x10, %r256;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r263 + 0 ], [ %rd32 + 0 ], 0x10, %r256;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r265 + 0 ], [ %rd32 + 0 ], 0x10, %r256;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r267 + 0 ], [ %rd32 + 0 ], 0x10, %r256;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p10, %r11, %r365;
	setp.lt.s32 	%p11, %r12, %r365;
	setp.lt.s32 	%p12, %r13, %r365;
	setp.lt.s32 	%p13, %r14, %r365;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r368, %r334, 73728;
	add.s32 	%r269, %r368, %r333;
	add.s32 	%r271, %r368, %r338;
	add.s32 	%r273, %r368, %r342;
	add.s32 	%r275, %r368, %r346;
	selp.b32 	%r369, 16, 0, %p10;
	selp.b32 	%r270, %r369, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r269 + 0 ], [ %rd40 + 0 ], 0x10, %r270;
	// end inline asm
	selp.b32 	%r370, 16, 0, %p11;
	selp.b32 	%r272, %r370, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r271 + 0 ], [ %rd41 + 0 ], 0x10, %r272;
	// end inline asm
	selp.b32 	%r371, 16, 0, %p12;
	selp.b32 	%r274, %r371, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r273 + 0 ], [ %rd42 + 0 ], 0x10, %r274;
	// end inline asm
	selp.b32 	%r372, 16, 0, %p13;
	selp.b32 	%r276, %r372, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r275 + 0 ], [ %rd43 + 0 ], 0x10, %r276;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p14, %r322, 191;
	.loc	1 128 18                        // gated_mlp.py:128:18
	add.s64 	%rd44, %rd20, 256;
	.loc	1 129 18                        // gated_mlp.py:129:18
	add.s64 	%rd52, %rd40, %rd61;
	add.s64 	%rd53, %rd41, %rd61;
	add.s64 	%rd54, %rd42, %rd61;
	add.s64 	%rd55, %rd43, %rd61;
	.loc	1 123 55                        // gated_mlp.py:123:55
	add.s32 	%r373, %r227, -128;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p15, %r7, %r373;
	.loc	1 123 20                        // gated_mlp.py:123:20
	bar.sync 	0;
	add.s32 	%r374, %r334, 32768;
	add.s32 	%r277, %r374, %r333;
	add.s32 	%r279, %r374, %r338;
	add.s32 	%r281, %r374, %r342;
	add.s32 	%r283, %r374, %r346;
	add.s32 	%r285, %r374, %r350;
	add.s32 	%r287, %r374, %r354;
	add.s32 	%r289, %r374, %r358;
	add.s32 	%r291, %r374, %r362;
	selp.b32 	%r375, 16, 0, %p15;
	selp.b32 	%r280, %r375, 0, %p14;
	// begin inline asm
	cp.async.cg.shared.global [ %r277 + 0 ], [ %rd44 + 0 ], 0x10, %r280;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r279 + 0 ], [ %rd44 + 0 ], 0x10, %r280;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r281 + 0 ], [ %rd44 + 0 ], 0x10, %r280;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r283 + 0 ], [ %rd44 + 0 ], 0x10, %r280;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r285 + 0 ], [ %rd44 + 0 ], 0x10, %r280;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r287 + 0 ], [ %rd44 + 0 ], 0x10, %r280;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r289 + 0 ], [ %rd44 + 0 ], 0x10, %r280;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r291 + 0 ], [ %rd44 + 0 ], 0x10, %r280;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p16, %r11, %r373;
	setp.lt.s32 	%p17, %r12, %r373;
	setp.lt.s32 	%p18, %r13, %r373;
	setp.lt.s32 	%p19, %r14, %r373;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r376, %r334, 81920;
	add.s32 	%r293, %r376, %r333;
	add.s32 	%r295, %r376, %r338;
	add.s32 	%r297, %r376, %r342;
	add.s32 	%r299, %r376, %r346;
	selp.b32 	%r377, 16, 0, %p16;
	selp.b32 	%r294, %r377, 0, %p14;
	// begin inline asm
	cp.async.cg.shared.global [ %r293 + 0 ], [ %rd52 + 0 ], 0x10, %r294;
	// end inline asm
	selp.b32 	%r378, 16, 0, %p17;
	selp.b32 	%r296, %r378, 0, %p14;
	// begin inline asm
	cp.async.cg.shared.global [ %r295 + 0 ], [ %rd53 + 0 ], 0x10, %r296;
	// end inline asm
	selp.b32 	%r379, 16, 0, %p18;
	selp.b32 	%r298, %r379, 0, %p14;
	// begin inline asm
	cp.async.cg.shared.global [ %r297 + 0 ], [ %rd54 + 0 ], 0x10, %r298;
	// end inline asm
	selp.b32 	%r380, 16, 0, %p19;
	selp.b32 	%r300, %r380, 0, %p14;
	// begin inline asm
	cp.async.cg.shared.global [ %r299 + 0 ], [ %rd55 + 0 ], 0x10, %r300;
	// end inline asm
	cp.async.commit_group;
	mov.b32 	%r1363, 0f00000000;
	mov.b32 	%r1364, %r1363;
	mov.b32 	%r1365, %r1363;
	mov.b32 	%r1366, %r1363;
	mov.b32 	%r1367, %r1363;
	mov.b32 	%r1368, %r1363;
	mov.b32 	%r1369, %r1363;
	mov.b32 	%r1370, %r1363;
	mov.b32 	%r1371, %r1363;
	mov.b32 	%r1372, %r1363;
	mov.b32 	%r1373, %r1363;
	mov.b32 	%r1374, %r1363;
	mov.b32 	%r1375, %r1363;
	mov.b32 	%r1376, %r1363;
	mov.b32 	%r1377, %r1363;
	mov.b32 	%r1378, %r1363;
	mov.b32 	%r1379, %r1363;
	mov.b32 	%r1380, %r1363;
	mov.b32 	%r1381, %r1363;
	mov.b32 	%r1382, %r1363;
	mov.b32 	%r1383, %r1363;
	mov.b32 	%r1384, %r1363;
	mov.b32 	%r1385, %r1363;
	mov.b32 	%r1386, %r1363;
	mov.b32 	%r1387, %r1363;
	mov.b32 	%r1388, %r1363;
	mov.b32 	%r1389, %r1363;
	mov.b32 	%r1390, %r1363;
	mov.b32 	%r1391, %r1363;
	mov.b32 	%r1392, %r1363;
	mov.b32 	%r1393, %r1363;
	mov.b32 	%r1394, %r1363;
	mov.b32 	%r1395, %r1363;
	mov.b32 	%r1396, %r1363;
	mov.b32 	%r1397, %r1363;
	mov.b32 	%r1398, %r1363;
	mov.b32 	%r1399, %r1363;
	mov.b32 	%r1400, %r1363;
	mov.b32 	%r1401, %r1363;
	mov.b32 	%r1402, %r1363;
	mov.b32 	%r1403, %r1363;
	mov.b32 	%r1404, %r1363;
	mov.b32 	%r1405, %r1363;
	mov.b32 	%r1406, %r1363;
	mov.b32 	%r1407, %r1363;
	mov.b32 	%r1408, %r1363;
	mov.b32 	%r1409, %r1363;
	mov.b32 	%r1410, %r1363;
	mov.b32 	%r1411, %r1363;
	mov.b32 	%r1412, %r1363;
	mov.b32 	%r1413, %r1363;
	mov.b32 	%r1414, %r1363;
	mov.b32 	%r1415, %r1363;
	mov.b32 	%r1416, %r1363;
	mov.b32 	%r1417, %r1363;
	mov.b32 	%r1418, %r1363;
	mov.b32 	%r1419, %r1363;
	mov.b32 	%r1420, %r1363;
	mov.b32 	%r1421, %r1363;
	mov.b32 	%r1422, %r1363;
	mov.b32 	%r1423, %r1363;
	mov.b32 	%r1424, %r1363;
	mov.b32 	%r1425, %r1363;
	mov.b32 	%r1426, %r1363;
	.loc	1 120 22                        // gated_mlp.py:120:22
	@%p1 bra 	$L__BB0_3;
// %bb.1:                               // %.lr.ph
	.loc	1 0 22                          // gated_mlp.py:0:22
	shr.u32 	%r9, %r5, 5;
	cvt.s64.s32 	%rd1, %r318;
	cvt.s64.s32 	%rd2, %r319;
	cvt.s64.s32 	%rd3, %r320;
	cvt.s64.s32 	%rd4, %r321;
	shr.s32 	%r323, %r322, 31;
	shr.u32 	%r324, %r323, 26;
	add.s32 	%r325, %r322, %r324;
	shr.s32 	%r15, %r325, 6;
	cvt.s64.s32 	%rd5, %r326;
	add.s32 	%r24, %r15, -3;
	add.s32 	%r1360, %r227, -192;
	.loc	1 120 22                        // gated_mlp.py:120:22
	shl.b64 	%rd6, %rd4, 1;
	mad.lo.s64 	%rd130, %rd5, 6, %rd18;
	shl.b64 	%rd8, %rd5, 1;
	shl.b64 	%rd9, %rd3, 1;
	shl.b64 	%rd10, %rd2, 1;
	shl.b64 	%rd11, %rd1, 1;
	and.b32 	%r385, %r5, 7;
	mul.wide.u32 	%rd62, %r385, 16;
	add.s64 	%rd63, %rd62, %rd17;
	add.s64 	%rd129, %rd63, 384;
	mov.b32 	%r1033, 0;
	mov.b32 	%r1363, 0f00000000;
	mov.b32 	%r1362, 2;
	mov.b32 	%r1361, -1;
	mov.b32 	%r1364, %r1363;
	mov.b32 	%r1365, %r1363;
	mov.b32 	%r1366, %r1363;
	mov.b32 	%r1367, %r1363;
	mov.b32 	%r1368, %r1363;
	mov.b32 	%r1369, %r1363;
	mov.b32 	%r1370, %r1363;
	mov.b32 	%r1371, %r1363;
	mov.b32 	%r1372, %r1363;
	mov.b32 	%r1373, %r1363;
	mov.b32 	%r1374, %r1363;
	mov.b32 	%r1375, %r1363;
	mov.b32 	%r1376, %r1363;
	mov.b32 	%r1377, %r1363;
	mov.b32 	%r1378, %r1363;
	mov.b32 	%r1379, %r1363;
	mov.b32 	%r1380, %r1363;
	mov.b32 	%r1381, %r1363;
	mov.b32 	%r1382, %r1363;
	mov.b32 	%r1383, %r1363;
	mov.b32 	%r1384, %r1363;
	mov.b32 	%r1385, %r1363;
	mov.b32 	%r1386, %r1363;
	mov.b32 	%r1387, %r1363;
	mov.b32 	%r1388, %r1363;
	mov.b32 	%r1389, %r1363;
	mov.b32 	%r1390, %r1363;
	mov.b32 	%r1391, %r1363;
	mov.b32 	%r1392, %r1363;
	mov.b32 	%r1393, %r1363;
	mov.b32 	%r1394, %r1363;
	mov.b32 	%r1395, %r1363;
	mov.b32 	%r1396, %r1363;
	mov.b32 	%r1397, %r1363;
	mov.b32 	%r1398, %r1363;
	mov.b32 	%r1399, %r1363;
	mov.b32 	%r1400, %r1363;
	mov.b32 	%r1401, %r1363;
	mov.b32 	%r1402, %r1363;
	mov.b32 	%r1403, %r1363;
	mov.b32 	%r1404, %r1363;
	mov.b32 	%r1405, %r1363;
	mov.b32 	%r1406, %r1363;
	mov.b32 	%r1407, %r1363;
	mov.b32 	%r1408, %r1363;
	mov.b32 	%r1409, %r1363;
	mov.b32 	%r1410, %r1363;
	mov.b32 	%r1411, %r1363;
	mov.b32 	%r1412, %r1363;
	mov.b32 	%r1413, %r1363;
	mov.b32 	%r1414, %r1363;
	mov.b32 	%r1415, %r1363;
	mov.b32 	%r1416, %r1363;
	mov.b32 	%r1417, %r1363;
	mov.b32 	%r1418, %r1363;
	mov.b32 	%r1419, %r1363;
	mov.b32 	%r1420, %r1363;
	mov.b32 	%r1421, %r1363;
	mov.b32 	%r1422, %r1363;
	mov.b32 	%r1423, %r1363;
	mov.b32 	%r1424, %r1363;
	mov.b32 	%r1425, %r1363;
	mov.b32 	%r1426, %r1363;
	mov.b32 	%r1427, %r1033;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	setp.lt.s32 	%p28, %r1427, %r24;
	add.s32 	%r1062, %r1361, 1;
	setp.gt.s32 	%p29, %r1062, 3;
	selp.b32 	%r1361, 0, %r1062, %p29;
	.loc	1 123 20                        // gated_mlp.py:123:20
	cp.async.wait_group 	4;
	bar.sync 	0;
	shl.b32 	%r1063, %r1361, 14;
	add.s32 	%r962, %r334, %r1063;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r1065, %r1361, 13;
	add.s32 	%r965, %r364, %r1065;
	.loc	1 126 35                        // gated_mlp.py:126:35
	shfl.sync.idx.b32 	%r1067, %r9, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r1068, %r962, 4, 14;
	cvt.u64.u32 	%rd92, %r1068;
	or.b64 	%rd64, %rd92, 4611686293372403712;
	bfe.u32 	%r1069, %r965, 4, 14;
	cvt.u64.u32 	%rd93, %r1069;
	or.b64 	%rd65, %rd93, 4611686293338849280;
	mov.pred 	%p20, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r1363,%r1364,%r1365,%r1366,%r1367,%r1368,%r1369,%r1370,%r1371,%r1372,%r1373,%r1374,%r1375,%r1376,%r1377,%r1378,%r1379,%r1380,%r1381,%r1382,%r1383,%r1384,%r1385,%r1386,%r1387,%r1388,%r1389,%r1390,%r1391,%r1392,%r1393,%r1394}, %rd64, %rd65, %p20, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1070, %r962, 32;
	bfe.u32 	%r1071, %r1070, 4, 14;
	cvt.u64.u32 	%rd94, %r1071;
	or.b64 	%rd66, %rd94, 4611686293372403712;
	add.s32 	%r1072, %r965, 2048;
	bfe.u32 	%r1073, %r1072, 4, 14;
	cvt.u64.u32 	%rd95, %r1073;
	or.b64 	%rd67, %rd95, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r1363,%r1364,%r1365,%r1366,%r1367,%r1368,%r1369,%r1370,%r1371,%r1372,%r1373,%r1374,%r1375,%r1376,%r1377,%r1378,%r1379,%r1380,%r1381,%r1382,%r1383,%r1384,%r1385,%r1386,%r1387,%r1388,%r1389,%r1390,%r1391,%r1392,%r1393,%r1394}, %rd66, %rd67, %p20, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1074, %r962, 64;
	bfe.u32 	%r1075, %r1074, 4, 14;
	cvt.u64.u32 	%rd96, %r1075;
	or.b64 	%rd68, %rd96, 4611686293372403712;
	add.s32 	%r1076, %r965, 4096;
	bfe.u32 	%r1077, %r1076, 4, 14;
	cvt.u64.u32 	%rd97, %r1077;
	or.b64 	%rd69, %rd97, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r1363,%r1364,%r1365,%r1366,%r1367,%r1368,%r1369,%r1370,%r1371,%r1372,%r1373,%r1374,%r1375,%r1376,%r1377,%r1378,%r1379,%r1380,%r1381,%r1382,%r1383,%r1384,%r1385,%r1386,%r1387,%r1388,%r1389,%r1390,%r1391,%r1392,%r1393,%r1394}, %rd68, %rd69, %p20, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1078, %r962, 96;
	bfe.u32 	%r1079, %r1078, 4, 14;
	cvt.u64.u32 	%rd98, %r1079;
	or.b64 	%rd70, %rd98, 4611686293372403712;
	add.s32 	%r1080, %r965, 6144;
	bfe.u32 	%r1081, %r1080, 4, 14;
	cvt.u64.u32 	%rd99, %r1081;
	or.b64 	%rd71, %rd99, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r1363,%r1364,%r1365,%r1366,%r1367,%r1368,%r1369,%r1370,%r1371,%r1372,%r1373,%r1374,%r1375,%r1376,%r1377,%r1378,%r1379,%r1380,%r1381,%r1382,%r1383,%r1384,%r1385,%r1386,%r1387,%r1388,%r1389,%r1390,%r1391,%r1392,%r1393,%r1394}, %rd70, %rd71, %p20, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1082, %r962, 8192;
	bfe.u32 	%r1083, %r1082, 4, 14;
	cvt.u64.u32 	%rd100, %r1083;
	or.b64 	%rd72, %rd100, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r1395,%r1396,%r1397,%r1398,%r1399,%r1400,%r1401,%r1402,%r1403,%r1404,%r1405,%r1406,%r1407,%r1408,%r1409,%r1410,%r1411,%r1412,%r1413,%r1414,%r1415,%r1416,%r1417,%r1418,%r1419,%r1420,%r1421,%r1422,%r1423,%r1424,%r1425,%r1426}, %rd72, %rd65, %p20, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1084, %r962, 8224;
	bfe.u32 	%r1085, %r1084, 4, 14;
	cvt.u64.u32 	%rd101, %r1085;
	or.b64 	%rd74, %rd101, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r1395,%r1396,%r1397,%r1398,%r1399,%r1400,%r1401,%r1402,%r1403,%r1404,%r1405,%r1406,%r1407,%r1408,%r1409,%r1410,%r1411,%r1412,%r1413,%r1414,%r1415,%r1416,%r1417,%r1418,%r1419,%r1420,%r1421,%r1422,%r1423,%r1424,%r1425,%r1426}, %rd74, %rd67, %p20, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1086, %r962, 8256;
	bfe.u32 	%r1087, %r1086, 4, 14;
	cvt.u64.u32 	%rd102, %r1087;
	or.b64 	%rd76, %rd102, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r1395,%r1396,%r1397,%r1398,%r1399,%r1400,%r1401,%r1402,%r1403,%r1404,%r1405,%r1406,%r1407,%r1408,%r1409,%r1410,%r1411,%r1412,%r1413,%r1414,%r1415,%r1416,%r1417,%r1418,%r1419,%r1420,%r1421,%r1422,%r1423,%r1424,%r1425,%r1426}, %rd76, %rd69, %p20, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1088, %r962, 8288;
	bfe.u32 	%r1089, %r1088, 4, 14;
	cvt.u64.u32 	%rd103, %r1089;
	or.b64 	%rd78, %rd103, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r1395,%r1396,%r1397,%r1398,%r1399,%r1400,%r1401,%r1402,%r1403,%r1404,%r1405,%r1406,%r1407,%r1408,%r1409,%r1410,%r1411,%r1412,%r1413,%r1414,%r1415,%r1416,%r1417,%r1418,%r1419,%r1420,%r1421,%r1422,%r1423,%r1424,%r1425,%r1426}, %rd78, %rd71, %p20, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r967, %r1033;
	mov.b32 	%r963, %r1033;
	mov.b32 	%r964, %r1033;
	mov.b32 	%r966, %r1033;
	// begin inline asm
	// wait for regs: %r1363,%r1364,%r1365,%r1366,%r1367,%r1368,%r1369,%r1370,%r1371,%r1372,%r1373,%r1374,%r1375,%r1376,%r1377,%r1378,%r1379,%r1380,%r1381,%r1382,%r1383,%r1384,%r1385,%r1386,%r1387,%r1388,%r1389,%r1390,%r1391,%r1392,%r1393,%r1394,%r1395,%r1396,%r1397,%r1398,%r1399,%r1400,%r1401,%r1402,%r1403,%r1404,%r1405,%r1406,%r1407,%r1408,%r1409,%r1410,%r1411,%r1412,%r1413,%r1414,%r1415,%r1416,%r1417,%r1418,%r1419,%r1420,%r1421,%r1422,%r1423,%r1424,%r1425,%r1426,%r962,%r963,%r964,%r965,%r966,%r967
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 129 18                        // gated_mlp.py:129:18
	add.s64 	%rd88, %rd130, %rd11;
	add.s64 	%rd89, %rd130, %rd10;
	add.s64 	%rd90, %rd130, %rd9;
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s64 	%rd91, %rd130, %rd6;
	add.s32 	%r1090, %r1362, 1;
	setp.gt.s32 	%p30, %r1090, 3;
	selp.b32 	%r1362, 0, %r1090, %p30;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p31, %r7, %r1360;
	.loc	1 123 20                        // gated_mlp.py:123:20
	shl.b32 	%r1091, %r1362, 14;
	add.s32 	%r1092, %r334, %r1091;
	bar.sync 	0;
	add.s32 	%r1038, %r1092, %r333;
	add.s32 	%r1040, %r1092, %r338;
	add.s32 	%r1042, %r1092, %r342;
	add.s32 	%r1044, %r1092, %r346;
	add.s32 	%r1046, %r1092, %r350;
	add.s32 	%r1048, %r1092, %r354;
	add.s32 	%r1050, %r1092, %r358;
	add.s32 	%r1052, %r1092, %r362;
	selp.b32 	%r1101, 16, 0, %p31;
	selp.b32 	%r1041, %r1101, 0, %p28;
	// begin inline asm
	cp.async.cg.shared.global [ %r1038 + 0 ], [ %rd129 + 0 ], 0x10, %r1041;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1040 + 0 ], [ %rd129 + 0 ], 0x10, %r1041;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1042 + 0 ], [ %rd129 + 0 ], 0x10, %r1041;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1044 + 0 ], [ %rd129 + 0 ], 0x10, %r1041;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1046 + 0 ], [ %rd129 + 0 ], 0x10, %r1041;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1048 + 0 ], [ %rd129 + 0 ], 0x10, %r1041;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1050 + 0 ], [ %rd129 + 0 ], 0x10, %r1041;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1052 + 0 ], [ %rd129 + 0 ], 0x10, %r1041;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p32, %r11, %r1360;
	setp.lt.s32 	%p33, %r12, %r1360;
	setp.lt.s32 	%p34, %r13, %r1360;
	setp.lt.s32 	%p35, %r14, %r1360;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r1102, %r1362, 13;
	add.s32 	%r1103, %r364, %r1102;
	add.s32 	%r1054, %r1103, %r333;
	add.s32 	%r1056, %r1103, %r338;
	add.s32 	%r1058, %r1103, %r342;
	add.s32 	%r1060, %r1103, %r346;
	selp.b32 	%r1104, 16, 0, %p32;
	selp.b32 	%r1055, %r1104, 0, %p28;
	// begin inline asm
	cp.async.cg.shared.global [ %r1054 + 0 ], [ %rd88 + 0 ], 0x10, %r1055;
	// end inline asm
	selp.b32 	%r1105, 16, 0, %p33;
	selp.b32 	%r1057, %r1105, 0, %p28;
	// begin inline asm
	cp.async.cg.shared.global [ %r1056 + 0 ], [ %rd89 + 0 ], 0x10, %r1057;
	// end inline asm
	selp.b32 	%r1106, 16, 0, %p34;
	selp.b32 	%r1059, %r1106, 0, %p28;
	// begin inline asm
	cp.async.cg.shared.global [ %r1058 + 0 ], [ %rd90 + 0 ], 0x10, %r1059;
	// end inline asm
	selp.b32 	%r1107, 16, 0, %p35;
	selp.b32 	%r1061, %r1107, 0, %p28;
	// begin inline asm
	cp.async.cg.shared.global [ %r1060 + 0 ], [ %rd91 + 0 ], 0x10, %r1061;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s32 	%r1427, %r1427, 1;
	add.s64 	%rd130, %rd130, %rd8;
	add.s64 	%rd129, %rd129, 128;
	add.s32 	%r1360, %r1360, -64;
	setp.ne.s32 	%p36, %r15, %r1427;
	@%p36 bra 	$L__BB0_2;
$L__BB0_3:                              // %._crit_edge
	.loc	1 98 54                         // gated_mlp.py:98:54
	mul.lo.s32 	%r1268, %r4, %r2;
	sub.s32 	%r1269, %r3, %r1268;
	.loc	1 98 27                         // gated_mlp.py:98:27
	add.s32 	%r1270, %r1269, %r1;
	.loc	1 120 22                        // gated_mlp.py:120:22
	// begin inline asm
	// wait for regs: %r1363,%r1364,%r1365,%r1366,%r1367,%r1368,%r1369,%r1370,%r1371,%r1372,%r1373,%r1374,%r1375,%r1376,%r1377,%r1378,%r1379,%r1380,%r1381,%r1382,%r1383,%r1384,%r1385,%r1386,%r1387,%r1388,%r1389,%r1390,%r1391,%r1392,%r1393,%r1394,%r1395,%r1396,%r1397,%r1398,%r1399,%r1400,%r1401,%r1402,%r1403,%r1404,%r1405,%r1406,%r1407,%r1408,%r1409,%r1410,%r1411,%r1412,%r1413,%r1414,%r1415,%r1416,%r1417,%r1418,%r1419,%r1420,%r1421,%r1422,%r1423,%r1424,%r1425,%r1426
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 134 23                        // gated_mlp.py:134:23
	cvt.rn.f16x2.f32 	%r1271, %r1364, %r1363;
	cvt.rn.f16x2.f32 	%r1272, %r1366, %r1365;
	cvt.rn.f16x2.f32 	%r1273, %r1368, %r1367;
	cvt.rn.f16x2.f32 	%r1274, %r1370, %r1369;
	cvt.rn.f16x2.f32 	%r1275, %r1372, %r1371;
	cvt.rn.f16x2.f32 	%r1276, %r1374, %r1373;
	cvt.rn.f16x2.f32 	%r1277, %r1376, %r1375;
	cvt.rn.f16x2.f32 	%r1278, %r1378, %r1377;
	cvt.rn.f16x2.f32 	%r1279, %r1380, %r1379;
	cvt.rn.f16x2.f32 	%r1280, %r1382, %r1381;
	cvt.rn.f16x2.f32 	%r1281, %r1384, %r1383;
	cvt.rn.f16x2.f32 	%r1282, %r1386, %r1385;
	cvt.rn.f16x2.f32 	%r1283, %r1388, %r1387;
	cvt.rn.f16x2.f32 	%r1284, %r1390, %r1389;
	cvt.rn.f16x2.f32 	%r1285, %r1392, %r1391;
	cvt.rn.f16x2.f32 	%r1286, %r1394, %r1393;
	cvt.rn.f16x2.f32 	%r1287, %r1396, %r1395;
	cvt.rn.f16x2.f32 	%r1288, %r1398, %r1397;
	cvt.rn.f16x2.f32 	%r1289, %r1400, %r1399;
	cvt.rn.f16x2.f32 	%r1290, %r1402, %r1401;
	cvt.rn.f16x2.f32 	%r1291, %r1404, %r1403;
	cvt.rn.f16x2.f32 	%r1292, %r1406, %r1405;
	cvt.rn.f16x2.f32 	%r1293, %r1408, %r1407;
	cvt.rn.f16x2.f32 	%r1294, %r1410, %r1409;
	cvt.rn.f16x2.f32 	%r1295, %r1412, %r1411;
	cvt.rn.f16x2.f32 	%r1296, %r1414, %r1413;
	cvt.rn.f16x2.f32 	%r1297, %r1416, %r1415;
	cvt.rn.f16x2.f32 	%r1298, %r1418, %r1417;
	cvt.rn.f16x2.f32 	%r1299, %r1420, %r1419;
	cvt.rn.f16x2.f32 	%r1300, %r1422, %r1421;
	cvt.rn.f16x2.f32 	%r1301, %r1424, %r1423;
	cvt.rn.f16x2.f32 	%r1302, %r1426, %r1425;
	.loc	1 138 22                        // gated_mlp.py:138:22
	shl.b32 	%r1303, %r1270, 7;
	.loc	1 138 37                        // gated_mlp.py:138:37
	or.b32 	%r1304, %r1303, %r11;
	or.b32 	%r1305, %r1303, %r12;
	or.b32 	%r1306, %r1303, %r13;
	or.b32 	%r1307, %r1303, %r14;
	or.b32 	%r1308, %r10, %r1303;
	or.b32 	%r1309, %r1308, 112;
	.loc	1 140 33                        // gated_mlp.py:140:33
	mul.lo.s32 	%r1310, %r1304, %r228;
	mul.lo.s32 	%r1311, %r1305, %r228;
	mul.lo.s32 	%r1312, %r1306, %r228;
	mul.lo.s32 	%r1313, %r1307, %r228;
	shl.b32 	%r1314, %r228, 6;
	add.s32 	%r1315, %r1310, %r1314;
	shl.b32 	%r1316, %r228, 4;
	add.s32 	%r1317, %r1315, %r1316;
	add.s32 	%r1318, %r1317, %r1316;
	mul.lo.s32 	%r1319, %r1309, %r228;
	.loc	1 140 21                        // gated_mlp.py:140:21
	mul.wide.s32 	%rd112, %r1310, 2;
	add.s64 	%rd113, %rd19, %rd112;
	mul.wide.s32 	%rd114, %r1311, 2;
	add.s64 	%rd115, %rd19, %rd114;
	mul.wide.s32 	%rd116, %r1312, 2;
	add.s64 	%rd117, %rd19, %rd116;
	mul.wide.s32 	%rd118, %r1313, 2;
	add.s64 	%rd119, %rd19, %rd118;
	mul.wide.s32 	%rd120, %r1315, 2;
	add.s64 	%rd121, %rd19, %rd120;
	mul.wide.s32 	%rd122, %r1317, 2;
	add.s64 	%rd123, %rd19, %rd122;
	mul.wide.s32 	%rd124, %r1318, 2;
	add.s64 	%rd125, %rd19, %rd124;
	mul.wide.s32 	%rd126, %r1319, 2;
	add.s64 	%rd127, %rd19, %rd126;
	.loc	1 140 52                        // gated_mlp.py:140:52
	mul.wide.s32 	%rd128, %r8, 2;
	add.s64 	%rd104, %rd113, %rd128;
	add.s64 	%rd105, %rd115, %rd128;
	add.s64 	%rd106, %rd117, %rd128;
	add.s64 	%rd107, %rd119, %rd128;
	add.s64 	%rd108, %rd121, %rd128;
	add.s64 	%rd109, %rd123, %rd128;
	add.s64 	%rd110, %rd125, %rd128;
	add.s64 	%rd111, %rd127, %rd128;
	.loc	1 141 33                        // gated_mlp.py:141:33
	setp.lt.s32 	%p45, %r1304, 1;
	setp.lt.s32 	%p46, %r1305, 1;
	setp.lt.s32 	%p47, %r1306, 1;
	setp.lt.s32 	%p48, %r1307, 1;
	setp.lt.s32 	%p49, %r1303, 0;
	.loc	1 141 58                        // gated_mlp.py:141:58
	setp.lt.s32 	%p50, %r8, %r226;
	.loc	1 141 39                        // gated_mlp.py:141:39
	and.pred 	%p37, %p50, %p45;
	and.pred 	%p38, %p50, %p46;
	and.pred 	%p39, %p50, %p47;
	and.pred 	%p40, %p50, %p48;
	and.pred 	%p41, %p50, %p49;
	.loc	1 142 21                        // gated_mlp.py:142:21
	shl.b32 	%r1320, %r5, 1;
	and.b32 	%r1321, %r1320, 6;
	shl.b32 	%r1322, %r5, 4;
	and.b32 	%r1323, %r1322, 448;
	or.b32 	%r1324, %r1323, %r1321;
	shl.b32 	%r1325, %r5, 5;
	and.b32 	%r1326, %r1325, 3072;
	or.b32 	%r1327, %r1324, %r1326;
	and.b32 	%r1328, %r6, 1016;
	shr.u32 	%r1329, %r1327, 2;
	and.b32 	%r1330, %r1329, 880;
	add.s32 	%r1332, %r334, %r1330;
	shl.b32 	%r1333, %r1327, 1;
	add.s32 	%r1334, %r1332, %r1333;
	st.shared.b32 	[%r1334], %r1271;
	or.b32 	%r1335, %r1327, 512;
	shr.u32 	%r1336, %r1335, 2;
	and.b32 	%r1337, %r1336, 1008;
	add.s32 	%r1338, %r334, %r1337;
	add.s32 	%r1339, %r1338, %r1333;
	st.shared.b32 	[%r1339+1024], %r1272;
	st.shared.b32 	[%r1334+16], %r1273;
	st.shared.b32 	[%r1339+1040], %r1274;
	st.shared.b32 	[%r1334+32], %r1275;
	st.shared.b32 	[%r1339+1056], %r1276;
	st.shared.b32 	[%r1334+48], %r1277;
	st.shared.b32 	[%r1339+1072], %r1278;
	st.shared.b32 	[%r1334+64], %r1279;
	st.shared.b32 	[%r1339+1088], %r1280;
	st.shared.b32 	[%r1334+80], %r1281;
	st.shared.b32 	[%r1339+1104], %r1282;
	st.shared.b32 	[%r1334+96], %r1283;
	st.shared.b32 	[%r1339+1120], %r1284;
	st.shared.b32 	[%r1334+112], %r1285;
	st.shared.b32 	[%r1339+1136], %r1286;
	bar.sync 	0;
	and.b32 	%r1340, %r5, 120;
	shl.b32 	%r1341, %r1340, 1;
	add.s32 	%r1342, %r334, %r1341;
	shl.b32 	%r1343, %r1328, 1;
	add.s32 	%r1344, %r1342, %r1343;
	ld.shared.v4.b32 	{%r1236, %r1237, %r1238, %r1239}, [%r1344];
	or.b32 	%r1345, %r1328, 1024;
	shr.u32 	%r1346, %r1345, 2;
	and.b32 	%r1347, %r1346, 496;
	add.s32 	%r1348, %r334, %r1347;
	add.s32 	%r1349, %r1348, %r1343;
	ld.shared.v4.b32 	{%r1240, %r1241, %r1242, %r1243}, [%r1349+2048];
	or.b32 	%r1350, %r1328, 2048;
	shr.u32 	%r1351, %r1350, 2;
	and.b32 	%r1352, %r1351, 752;
	add.s32 	%r1353, %r334, %r1352;
	add.s32 	%r1354, %r1353, %r1343;
	ld.shared.v4.b32 	{%r1244, %r1245, %r1246, %r1247}, [%r1354+4096];
	or.b32 	%r1355, %r1328, 3072;
	shr.u32 	%r1356, %r1355, 2;
	and.b32 	%r1357, %r1356, 1008;
	add.s32 	%r1358, %r334, %r1357;
	add.s32 	%r1359, %r1358, %r1343;
	ld.shared.v4.b32 	{%r1248, %r1249, %r1250, %r1251}, [%r1359+6144];
	bar.sync 	0;
	st.shared.b32 	[%r1334], %r1287;
	st.shared.b32 	[%r1339+1024], %r1288;
	st.shared.b32 	[%r1334+16], %r1289;
	st.shared.b32 	[%r1339+1040], %r1290;
	st.shared.b32 	[%r1334+32], %r1291;
	st.shared.b32 	[%r1339+1056], %r1292;
	st.shared.b32 	[%r1334+48], %r1293;
	st.shared.b32 	[%r1339+1072], %r1294;
	st.shared.b32 	[%r1334+64], %r1295;
	st.shared.b32 	[%r1339+1088], %r1296;
	st.shared.b32 	[%r1334+80], %r1297;
	st.shared.b32 	[%r1339+1104], %r1298;
	st.shared.b32 	[%r1334+96], %r1299;
	st.shared.b32 	[%r1339+1120], %r1300;
	st.shared.b32 	[%r1334+112], %r1301;
	st.shared.b32 	[%r1339+1136], %r1302;
	bar.sync 	0;
	ld.shared.v4.b32 	{%r1252, %r1253, %r1254, %r1255}, [%r1344];
	ld.shared.v4.b32 	{%r1256, %r1257, %r1258, %r1259}, [%r1349+2048];
	ld.shared.v4.b32 	{%r1260, %r1261, %r1262, %r1263}, [%r1354+4096];
	ld.shared.v4.b32 	{%r1264, %r1265, %r1266, %r1267}, [%r1359+6144];
	// begin inline asm
	@%p37 st.global.v4.b32 [ %rd104 + 0 ], { %r1236, %r1237, %r1238, %r1239 };
	// end inline asm
	// begin inline asm
	@%p38 st.global.v4.b32 [ %rd105 + 0 ], { %r1240, %r1241, %r1242, %r1243 };
	// end inline asm
	// begin inline asm
	@%p39 st.global.v4.b32 [ %rd106 + 0 ], { %r1244, %r1245, %r1246, %r1247 };
	// end inline asm
	// begin inline asm
	@%p40 st.global.v4.b32 [ %rd107 + 0 ], { %r1248, %r1249, %r1250, %r1251 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.v4.b32 [ %rd108 + 0 ], { %r1252, %r1253, %r1254, %r1255 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.v4.b32 [ %rd109 + 0 ], { %r1256, %r1257, %r1258, %r1259 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.v4.b32 [ %rd110 + 0 ], { %r1260, %r1261, %r1262, %r1263 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.v4.b32 [ %rd111 + 0 ], { %r1264, %r1265, %r1266, %r1267 };
	// end inline asm
	.loc	1 142 4                         // gated_mlp.py:142:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py"
	.file	2 "/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 157                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x96 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 103                                 // DW_AT_name
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 109
.b8 108
.b8 112
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 117
.b8 98
.b8 117
.b8 110
.b8 116
.b8 117
.b8 47
.b8 80
.b8 84
.b8 88
.b8 95
.b8 100
.b8 97
.b8 116
.b8 97
.b8 115
.b8 101
.b8 116
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 116
.b8 120
.b8 0
.b8 2                                   // Abbrev [2] 0x4a:0x10 DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x5a:0x46 DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 74                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x6f:0x18 DW_TAG_inlined_subroutine
.b32 74                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 93                                  // DW_AT_call_line
.b8 27                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x87:0x18 DW_TAG_inlined_subroutine
.b32 74                                 // DW_AT_abstract_origin
.b64 $L__tmp3                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 120                                 // DW_AT_call_line
.b8 33                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
