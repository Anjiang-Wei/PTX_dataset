; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @matmul_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = add i32 %3, 63, !dbg !9
  %12 = sdiv i32 %11, 64, !dbg !13
  %13 = shl nsw i32 %12, 3, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %14 = sdiv i32 %10, %.frozen, !dbg !15
  %15 = shl i32 %14, 3, !dbg !16
  %16 = sub i32 1, %15, !dbg !17
  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 8), !dbg !18
  %18 = mul i32 %14, %.frozen, !dbg !19
  %.decomposed = sub i32 %10, %18, !dbg !19
  %19 = sdiv i32 %.decomposed, %17, !dbg !20
  %20 = shl i32 %19, 6, !dbg !21
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !22
  %22 = shl nuw nsw i32 %21, 3, !dbg !22
  %23 = and i32 %22, 24, !dbg !22
  %24 = and i32 %22, 56, !dbg !22
  %25 = or disjoint i32 %20, %24, !dbg !23
  %26 = srem i32 %25, %3, !dbg !24
  %27 = and i32 %21, 16, !dbg !25
  %28 = lshr i32 %21, 3, !dbg !25
  %29 = and i32 %28, 7, !dbg !25
  %30 = or disjoint i32 %29, 8, !dbg !25
  %31 = or disjoint i32 %29, 16, !dbg !25
  %32 = or disjoint i32 %29, 24, !dbg !25
  %33 = zext nneg i32 %23 to i64, !dbg !26
  %34 = getelementptr half, ptr addrspace(1) %0, i64 %33, !dbg !26
  %35 = mul i32 %6, %29, !dbg !27
  %36 = mul i32 %6, %30, !dbg !27
  %37 = mul i32 %6, %31, !dbg !27
  %38 = mul i32 %6, %32, !dbg !27
  %39 = add i32 %26, %35, !dbg !28
  %40 = add i32 %26, %36, !dbg !28
  %41 = add i32 %26, %37, !dbg !28
  %42 = add i32 %26, %38, !dbg !28
  %43 = sext i32 %39 to i64, !dbg !29
  %44 = getelementptr half, ptr addrspace(1) %1, i64 %43, !dbg !29
  %45 = sext i32 %40 to i64, !dbg !29
  %46 = getelementptr half, ptr addrspace(1) %1, i64 %45, !dbg !29
  %47 = sext i32 %41 to i64, !dbg !29
  %48 = getelementptr half, ptr addrspace(1) %1, i64 %47, !dbg !29
  %49 = sext i32 %42 to i64, !dbg !29
  %50 = getelementptr half, ptr addrspace(1) %1, i64 %49, !dbg !29
  %51 = add i32 %4, 31, !dbg !30
  %52 = sdiv i32 %51, 32, !dbg !32
  %53 = shl i32 %6, 5, !dbg !33
  %54 = icmp sgt i32 %51, 31, !dbg !34
  %55 = icmp slt i32 %23, %4, !dbg !35
  %56 = and i1 %55, %54, !dbg !34
  %57 = xor i32 %22, %21, !dbg !36
  %58 = and i32 %57, 24, !dbg !36
  %59 = lshr i32 %21, 2, !dbg !36
  %60 = and i32 %59, 8, !dbg !36
  %61 = shl nuw nsw i32 %59, 5, !dbg !36
  %62 = and i32 %61, 480, !dbg !36
  %63 = or disjoint i32 %62, %58, !dbg !36
  %64 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %63, !dbg !36
  %65 = or disjoint i32 %63, 512, !dbg !36
  %66 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %65, !dbg !36
  %67 = select i1 %56, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %64, ptr addrspace(1) %34, i32 %67) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %66, ptr addrspace(1) %34, i32 %67) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %68 = icmp slt i32 %29, %4, !dbg !37
  %69 = icmp slt i32 %30, %4, !dbg !37
  %70 = icmp slt i32 %31, %4, !dbg !37
  %71 = icmp slt i32 %32, %4, !dbg !37
  %72 = and i1 %68, %54, !dbg !34
  %73 = and i1 %69, %54, !dbg !34
  %74 = and i1 %70, %54, !dbg !34
  %75 = and i1 %71, %54, !dbg !34
  %76 = and i32 %57, 56, !dbg !38
  %77 = shl nuw nsw i32 %29, 6, !dbg !38
  %78 = or disjoint i32 %76, %77, !dbg !38
  %79 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %78, !dbg !38
  %80 = or disjoint i32 %78, 512, !dbg !38
  %81 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %80, !dbg !38
  %82 = or disjoint i32 %78, 1024, !dbg !38
  %83 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %82, !dbg !38
  %84 = or disjoint i32 %78, 1536, !dbg !38
  %85 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %84, !dbg !38
  %86 = select i1 %72, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %79, ptr addrspace(1) %44, i32 %86) #2, !dbg !38
  %87 = select i1 %73, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %81, ptr addrspace(1) %46, i32 %87) #2, !dbg !38
  %88 = select i1 %74, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %83, ptr addrspace(1) %48, i32 %88) #2, !dbg !38
  %89 = select i1 %75, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %85, ptr addrspace(1) %50, i32 %89) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %90 = icmp sgt i32 %51, 63, !dbg !34
  %91 = getelementptr i8, ptr addrspace(1) %34, i64 64, !dbg !39
  %92 = sext i32 %53 to i64, !dbg !40
  %93 = getelementptr half, ptr addrspace(1) %44, i64 %92, !dbg !40
  %94 = getelementptr half, ptr addrspace(1) %46, i64 %92, !dbg !40
  %95 = getelementptr half, ptr addrspace(1) %48, i64 %92, !dbg !40
  %96 = getelementptr half, ptr addrspace(1) %50, i64 %92, !dbg !40
  %97 = add i32 %4, -32, !dbg !41
  %98 = icmp slt i32 %23, %97, !dbg !35
  %99 = and i1 %90, %98, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %100 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18432), i32 %63, !dbg !36
  %101 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18432), i32 %65, !dbg !36
  %102 = select i1 %99, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %100, ptr addrspace(1) %91, i32 %102) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %101, ptr addrspace(1) %91, i32 %102) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %103 = icmp slt i32 %29, %97, !dbg !37
  %104 = icmp slt i32 %30, %97, !dbg !37
  %105 = icmp slt i32 %31, %97, !dbg !37
  %106 = icmp slt i32 %32, %97, !dbg !37
  %107 = and i1 %90, %103, !dbg !34
  %108 = and i1 %90, %104, !dbg !34
  %109 = and i1 %90, %105, !dbg !34
  %110 = and i1 %90, %106, !dbg !34
  %111 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %78, !dbg !38
  %112 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %80, !dbg !38
  %113 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %82, !dbg !38
  %114 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %84, !dbg !38
  %115 = select i1 %107, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %111, ptr addrspace(1) %93, i32 %115) #2, !dbg !38
  %116 = select i1 %108, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %112, ptr addrspace(1) %94, i32 %116) #2, !dbg !38
  %117 = select i1 %109, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %113, ptr addrspace(1) %95, i32 %117) #2, !dbg !38
  %118 = select i1 %110, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %114, ptr addrspace(1) %96, i32 %118) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %119 = icmp sgt i32 %51, 95, !dbg !34
  %120 = getelementptr i8, ptr addrspace(1) %34, i64 128, !dbg !39
  %121 = getelementptr half, ptr addrspace(1) %93, i64 %92, !dbg !40
  %122 = getelementptr half, ptr addrspace(1) %94, i64 %92, !dbg !40
  %123 = getelementptr half, ptr addrspace(1) %95, i64 %92, !dbg !40
  %124 = getelementptr half, ptr addrspace(1) %96, i64 %92, !dbg !40
  %125 = add i32 %4, -64, !dbg !41
  %126 = icmp slt i32 %23, %125, !dbg !35
  %127 = and i1 %119, %126, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %128 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 20480), i32 %63, !dbg !36
  %129 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 20480), i32 %65, !dbg !36
  %130 = select i1 %127, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %128, ptr addrspace(1) %120, i32 %130) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %129, ptr addrspace(1) %120, i32 %130) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %131 = icmp slt i32 %29, %125, !dbg !37
  %132 = icmp slt i32 %30, %125, !dbg !37
  %133 = icmp slt i32 %31, %125, !dbg !37
  %134 = icmp slt i32 %32, %125, !dbg !37
  %135 = and i1 %119, %131, !dbg !34
  %136 = and i1 %119, %132, !dbg !34
  %137 = and i1 %119, %133, !dbg !34
  %138 = and i1 %119, %134, !dbg !34
  %139 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %78, !dbg !38
  %140 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %80, !dbg !38
  %141 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %82, !dbg !38
  %142 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %84, !dbg !38
  %143 = select i1 %135, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %139, ptr addrspace(1) %121, i32 %143) #2, !dbg !38
  %144 = select i1 %136, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %140, ptr addrspace(1) %122, i32 %144) #2, !dbg !38
  %145 = select i1 %137, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %141, ptr addrspace(1) %123, i32 %145) #2, !dbg !38
  %146 = select i1 %138, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %142, ptr addrspace(1) %124, i32 %146) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %147 = icmp sgt i32 %51, 127, !dbg !34
  %148 = getelementptr i8, ptr addrspace(1) %34, i64 192, !dbg !39
  %149 = getelementptr half, ptr addrspace(1) %121, i64 %92, !dbg !40
  %150 = getelementptr half, ptr addrspace(1) %122, i64 %92, !dbg !40
  %151 = getelementptr half, ptr addrspace(1) %123, i64 %92, !dbg !40
  %152 = getelementptr half, ptr addrspace(1) %124, i64 %92, !dbg !40
  %153 = add i32 %4, -96, !dbg !41
  %154 = icmp slt i32 %23, %153, !dbg !35
  %155 = and i1 %147, %154, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %156 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 22528), i32 %63, !dbg !36
  %157 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 22528), i32 %65, !dbg !36
  %158 = select i1 %155, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %156, ptr addrspace(1) %148, i32 %158) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %157, ptr addrspace(1) %148, i32 %158) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %159 = icmp slt i32 %29, %153, !dbg !37
  %160 = icmp slt i32 %30, %153, !dbg !37
  %161 = icmp slt i32 %31, %153, !dbg !37
  %162 = icmp slt i32 %32, %153, !dbg !37
  %163 = and i1 %147, %159, !dbg !34
  %164 = and i1 %147, %160, !dbg !34
  %165 = and i1 %147, %161, !dbg !34
  %166 = and i1 %147, %162, !dbg !34
  %167 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 12288), i32 %78, !dbg !38
  %168 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 12288), i32 %80, !dbg !38
  %169 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 12288), i32 %82, !dbg !38
  %170 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 12288), i32 %84, !dbg !38
  %171 = select i1 %163, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %167, ptr addrspace(1) %149, i32 %171) #2, !dbg !38
  %172 = select i1 %164, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %168, ptr addrspace(1) %150, i32 %172) #2, !dbg !38
  %173 = select i1 %165, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %169, ptr addrspace(1) %151, i32 %173) #2, !dbg !38
  %174 = select i1 %166, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %170, ptr addrspace(1) %152, i32 %174) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  br i1 %54, label %.lr.ph, label %._crit_edge, !dbg !34

.lr.ph:                                           ; preds = %9
  %175 = and i32 %21, 4, !dbg !22
  %.not3 = icmp eq i32 %175, 0, !dbg !22
  %176 = and i32 %21, 2, !dbg !22
  %177 = icmp eq i32 %176, 0, !dbg !22
  %178 = add nsw i32 %52, -4
  %179 = shl nuw nsw i32 %21, 5
  %180 = select i1 %177, i32 0, i32 72
  %181 = select i1 %.not3, i32 0, i32 144
  %182 = and i32 %179, 288
  %183 = or disjoint i32 %182, %180
  %184 = or disjoint i32 %183, %181
  %185 = lshr exact i32 %27, 1
  %186 = xor i32 %184, %185
  %187 = xor i32 %186, 16
  %188 = xor i32 %186, 528
  %189 = and i32 %21, 3
  %190 = mul nuw nsw i32 %189, 72
  %191 = select i1 %.not3, i32 0, i32 288
  %192 = xor i32 %191, %190
  %193 = shl nuw nsw i32 %21, 6
  %194 = and i32 %193, 1536
  %195 = or disjoint i32 %192, %194
  %196 = xor i32 %195, %60
  %197 = xor i32 %196, 16
  %198 = xor i32 %196, 32
  %199 = xor i32 %196, 48
  %.neg182 = add nsw i32 %4, -128
  br label %200, !dbg !34

200:                                              ; preds = %.lr.ph, %200
  %201 = phi i32 [ -1, %.lr.ph ], [ %239, %200 ]
  %202 = phi i32 [ 3, %.lr.ph ], [ %385, %200 ]
  %.pn50188 = phi ptr addrspace(1) [ %152, %.lr.ph ], [ %382, %200 ]
  %.pn66187 = phi ptr addrspace(1) [ %151, %.lr.ph ], [ %381, %200 ]
  %.pn82186 = phi ptr addrspace(1) [ %150, %.lr.ph ], [ %380, %200 ]
  %.pn98185 = phi ptr addrspace(1) [ %149, %.lr.ph ], [ %379, %200 ]
  %.pn18184 = phi ptr addrspace(1) [ %148, %.lr.ph ], [ %378, %200 ]
  %203 = phi float [ 0.000000e+00, %.lr.ph ], [ %339, %200 ]
  %204 = phi float [ 0.000000e+00, %.lr.ph ], [ %340, %200 ]
  %205 = phi float [ 0.000000e+00, %.lr.ph ], [ %341, %200 ]
  %206 = phi float [ 0.000000e+00, %.lr.ph ], [ %342, %200 ]
  %207 = phi float [ 0.000000e+00, %.lr.ph ], [ %344, %200 ]
  %208 = phi float [ 0.000000e+00, %.lr.ph ], [ %345, %200 ]
  %209 = phi float [ 0.000000e+00, %.lr.ph ], [ %346, %200 ]
  %210 = phi float [ 0.000000e+00, %.lr.ph ], [ %347, %200 ]
  %211 = phi float [ 0.000000e+00, %.lr.ph ], [ %349, %200 ]
  %212 = phi float [ 0.000000e+00, %.lr.ph ], [ %350, %200 ]
  %213 = phi float [ 0.000000e+00, %.lr.ph ], [ %351, %200 ]
  %214 = phi float [ 0.000000e+00, %.lr.ph ], [ %352, %200 ]
  %215 = phi float [ 0.000000e+00, %.lr.ph ], [ %354, %200 ]
  %216 = phi float [ 0.000000e+00, %.lr.ph ], [ %355, %200 ]
  %217 = phi float [ 0.000000e+00, %.lr.ph ], [ %356, %200 ]
  %218 = phi float [ 0.000000e+00, %.lr.ph ], [ %357, %200 ]
  %219 = phi float [ 0.000000e+00, %.lr.ph ], [ %359, %200 ]
  %220 = phi float [ 0.000000e+00, %.lr.ph ], [ %360, %200 ]
  %221 = phi float [ 0.000000e+00, %.lr.ph ], [ %361, %200 ]
  %222 = phi float [ 0.000000e+00, %.lr.ph ], [ %362, %200 ]
  %223 = phi float [ 0.000000e+00, %.lr.ph ], [ %364, %200 ]
  %224 = phi float [ 0.000000e+00, %.lr.ph ], [ %365, %200 ]
  %225 = phi float [ 0.000000e+00, %.lr.ph ], [ %366, %200 ]
  %226 = phi float [ 0.000000e+00, %.lr.ph ], [ %367, %200 ]
  %227 = phi float [ 0.000000e+00, %.lr.ph ], [ %369, %200 ]
  %228 = phi float [ 0.000000e+00, %.lr.ph ], [ %370, %200 ]
  %229 = phi float [ 0.000000e+00, %.lr.ph ], [ %371, %200 ]
  %230 = phi float [ 0.000000e+00, %.lr.ph ], [ %372, %200 ]
  %231 = phi float [ 0.000000e+00, %.lr.ph ], [ %374, %200 ]
  %232 = phi float [ 0.000000e+00, %.lr.ph ], [ %375, %200 ]
  %233 = phi float [ 0.000000e+00, %.lr.ph ], [ %376, %200 ]
  %234 = phi float [ 0.000000e+00, %.lr.ph ], [ %377, %200 ]
  %235 = phi i32 [ 0, %.lr.ph ], [ %411, %200 ]
  %236 = icmp slt i32 %235, %178, !dbg !34
  %237 = add i32 %201, 1, !dbg !34
  %238 = icmp sgt i32 %237, 3, !dbg !34
  %239 = select i1 %238, i32 0, i32 %237, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !36
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %.idx = shl i32 %239, 11, !dbg !36
  %240 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %.idx, !dbg !36
  %241 = getelementptr inbounds nuw half, ptr addrspace(3) %240, i32 %186, !dbg !36
  %242 = ptrtoint ptr addrspace(3) %241 to i32, !dbg !36
  %243 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %242) #2, !dbg !36
  %244 = extractvalue { i32, i32, i32, i32 } %243, 0, !dbg !36
  %245 = extractvalue { i32, i32, i32, i32 } %243, 1, !dbg !36
  %246 = extractvalue { i32, i32, i32, i32 } %243, 2, !dbg !36
  %247 = extractvalue { i32, i32, i32, i32 } %243, 3, !dbg !36
  %248 = getelementptr inbounds nuw half, ptr addrspace(3) %240, i32 %187, !dbg !36
  %249 = ptrtoint ptr addrspace(3) %248 to i32, !dbg !36
  %250 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %249) #2, !dbg !36
  %251 = extractvalue { i32, i32, i32, i32 } %250, 0, !dbg !36
  %252 = extractvalue { i32, i32, i32, i32 } %250, 1, !dbg !36
  %253 = extractvalue { i32, i32, i32, i32 } %250, 2, !dbg !36
  %254 = extractvalue { i32, i32, i32, i32 } %250, 3, !dbg !36
  %255 = getelementptr inbounds nuw i8, ptr addrspace(3) %241, i32 1024, !dbg !36
  %256 = ptrtoint ptr addrspace(3) %255 to i32, !dbg !36
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %256) #2, !dbg !36
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !36
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !36
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !36
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !36
  %262 = getelementptr inbounds nuw half, ptr addrspace(3) %240, i32 %188, !dbg !36
  %263 = ptrtoint ptr addrspace(3) %262 to i32, !dbg !36
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %263) #2, !dbg !36
  %265 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !36
  %266 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !36
  %267 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !36
  %268 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !36
  %.idx145 = shl i32 %239, 12, !dbg !38
  %269 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx145, !dbg !38
  %270 = getelementptr inbounds nuw half, ptr addrspace(3) %269, i32 %196, !dbg !38
  %271 = ptrtoint ptr addrspace(3) %270 to i32, !dbg !38
  %272 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %271) #2, !dbg !38
  %273 = extractvalue { i32, i32, i32, i32 } %272, 0, !dbg !38
  %274 = extractvalue { i32, i32, i32, i32 } %272, 1, !dbg !38
  %275 = extractvalue { i32, i32, i32, i32 } %272, 2, !dbg !38
  %276 = extractvalue { i32, i32, i32, i32 } %272, 3, !dbg !38
  %277 = getelementptr inbounds nuw half, ptr addrspace(3) %269, i32 %197, !dbg !38
  %278 = ptrtoint ptr addrspace(3) %277 to i32, !dbg !38
  %279 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %278) #2, !dbg !38
  %280 = extractvalue { i32, i32, i32, i32 } %279, 0, !dbg !38
  %281 = extractvalue { i32, i32, i32, i32 } %279, 1, !dbg !38
  %282 = extractvalue { i32, i32, i32, i32 } %279, 2, !dbg !38
  %283 = extractvalue { i32, i32, i32, i32 } %279, 3, !dbg !38
  %284 = getelementptr inbounds nuw half, ptr addrspace(3) %269, i32 %198, !dbg !38
  %285 = ptrtoint ptr addrspace(3) %284 to i32, !dbg !38
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %285) #2, !dbg !38
  %287 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !38
  %288 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !38
  %289 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !38
  %290 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !38
  %291 = getelementptr inbounds nuw half, ptr addrspace(3) %269, i32 %199, !dbg !38
  %292 = ptrtoint ptr addrspace(3) %291 to i32, !dbg !38
  %293 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %292) #2, !dbg !38
  %294 = extractvalue { i32, i32, i32, i32 } %293, 0, !dbg !38
  %295 = extractvalue { i32, i32, i32, i32 } %293, 1, !dbg !38
  %296 = extractvalue { i32, i32, i32, i32 } %293, 2, !dbg !38
  %297 = extractvalue { i32, i32, i32, i32 } %293, 3, !dbg !38
  %298 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %203, float %204, float %205, float %206, i32 %244, i32 %245, i32 %246, i32 %247, i32 %273, i32 %274) #2, !dbg !42
  %299 = extractvalue { float, float, float, float } %298, 0, !dbg !42
  %300 = extractvalue { float, float, float, float } %298, 1, !dbg !42
  %301 = extractvalue { float, float, float, float } %298, 2, !dbg !42
  %302 = extractvalue { float, float, float, float } %298, 3, !dbg !42
  %303 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %207, float %208, float %209, float %210, i32 %244, i32 %245, i32 %246, i32 %247, i32 %280, i32 %281) #2, !dbg !42
  %304 = extractvalue { float, float, float, float } %303, 0, !dbg !42
  %305 = extractvalue { float, float, float, float } %303, 1, !dbg !42
  %306 = extractvalue { float, float, float, float } %303, 2, !dbg !42
  %307 = extractvalue { float, float, float, float } %303, 3, !dbg !42
  %308 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %211, float %212, float %213, float %214, i32 %244, i32 %245, i32 %246, i32 %247, i32 %287, i32 %288) #2, !dbg !42
  %309 = extractvalue { float, float, float, float } %308, 0, !dbg !42
  %310 = extractvalue { float, float, float, float } %308, 1, !dbg !42
  %311 = extractvalue { float, float, float, float } %308, 2, !dbg !42
  %312 = extractvalue { float, float, float, float } %308, 3, !dbg !42
  %313 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %215, float %216, float %217, float %218, i32 %244, i32 %245, i32 %246, i32 %247, i32 %294, i32 %295) #2, !dbg !42
  %314 = extractvalue { float, float, float, float } %313, 0, !dbg !42
  %315 = extractvalue { float, float, float, float } %313, 1, !dbg !42
  %316 = extractvalue { float, float, float, float } %313, 2, !dbg !42
  %317 = extractvalue { float, float, float, float } %313, 3, !dbg !42
  %318 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %219, float %220, float %221, float %222, i32 %258, i32 %259, i32 %260, i32 %261, i32 %273, i32 %274) #2, !dbg !42
  %319 = extractvalue { float, float, float, float } %318, 0, !dbg !42
  %320 = extractvalue { float, float, float, float } %318, 1, !dbg !42
  %321 = extractvalue { float, float, float, float } %318, 2, !dbg !42
  %322 = extractvalue { float, float, float, float } %318, 3, !dbg !42
  %323 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %223, float %224, float %225, float %226, i32 %258, i32 %259, i32 %260, i32 %261, i32 %280, i32 %281) #2, !dbg !42
  %324 = extractvalue { float, float, float, float } %323, 0, !dbg !42
  %325 = extractvalue { float, float, float, float } %323, 1, !dbg !42
  %326 = extractvalue { float, float, float, float } %323, 2, !dbg !42
  %327 = extractvalue { float, float, float, float } %323, 3, !dbg !42
  %328 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %227, float %228, float %229, float %230, i32 %258, i32 %259, i32 %260, i32 %261, i32 %287, i32 %288) #2, !dbg !42
  %329 = extractvalue { float, float, float, float } %328, 0, !dbg !42
  %330 = extractvalue { float, float, float, float } %328, 1, !dbg !42
  %331 = extractvalue { float, float, float, float } %328, 2, !dbg !42
  %332 = extractvalue { float, float, float, float } %328, 3, !dbg !42
  %333 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %231, float %232, float %233, float %234, i32 %258, i32 %259, i32 %260, i32 %261, i32 %294, i32 %295) #2, !dbg !42
  %334 = extractvalue { float, float, float, float } %333, 0, !dbg !42
  %335 = extractvalue { float, float, float, float } %333, 1, !dbg !42
  %336 = extractvalue { float, float, float, float } %333, 2, !dbg !42
  %337 = extractvalue { float, float, float, float } %333, 3, !dbg !42
  %338 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %299, float %300, float %301, float %302, i32 %251, i32 %252, i32 %253, i32 %254, i32 %275, i32 %276) #2, !dbg !42
  %339 = extractvalue { float, float, float, float } %338, 0, !dbg !42
  %340 = extractvalue { float, float, float, float } %338, 1, !dbg !42
  %341 = extractvalue { float, float, float, float } %338, 2, !dbg !42
  %342 = extractvalue { float, float, float, float } %338, 3, !dbg !42
  %343 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %304, float %305, float %306, float %307, i32 %251, i32 %252, i32 %253, i32 %254, i32 %282, i32 %283) #2, !dbg !42
  %344 = extractvalue { float, float, float, float } %343, 0, !dbg !42
  %345 = extractvalue { float, float, float, float } %343, 1, !dbg !42
  %346 = extractvalue { float, float, float, float } %343, 2, !dbg !42
  %347 = extractvalue { float, float, float, float } %343, 3, !dbg !42
  %348 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %309, float %310, float %311, float %312, i32 %251, i32 %252, i32 %253, i32 %254, i32 %289, i32 %290) #2, !dbg !42
  %349 = extractvalue { float, float, float, float } %348, 0, !dbg !42
  %350 = extractvalue { float, float, float, float } %348, 1, !dbg !42
  %351 = extractvalue { float, float, float, float } %348, 2, !dbg !42
  %352 = extractvalue { float, float, float, float } %348, 3, !dbg !42
  %353 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %314, float %315, float %316, float %317, i32 %251, i32 %252, i32 %253, i32 %254, i32 %296, i32 %297) #2, !dbg !42
  %354 = extractvalue { float, float, float, float } %353, 0, !dbg !42
  %355 = extractvalue { float, float, float, float } %353, 1, !dbg !42
  %356 = extractvalue { float, float, float, float } %353, 2, !dbg !42
  %357 = extractvalue { float, float, float, float } %353, 3, !dbg !42
  %358 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %319, float %320, float %321, float %322, i32 %265, i32 %266, i32 %267, i32 %268, i32 %275, i32 %276) #2, !dbg !42
  %359 = extractvalue { float, float, float, float } %358, 0, !dbg !42
  %360 = extractvalue { float, float, float, float } %358, 1, !dbg !42
  %361 = extractvalue { float, float, float, float } %358, 2, !dbg !42
  %362 = extractvalue { float, float, float, float } %358, 3, !dbg !42
  %363 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %324, float %325, float %326, float %327, i32 %265, i32 %266, i32 %267, i32 %268, i32 %282, i32 %283) #2, !dbg !42
  %364 = extractvalue { float, float, float, float } %363, 0, !dbg !42
  %365 = extractvalue { float, float, float, float } %363, 1, !dbg !42
  %366 = extractvalue { float, float, float, float } %363, 2, !dbg !42
  %367 = extractvalue { float, float, float, float } %363, 3, !dbg !42
  %368 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %329, float %330, float %331, float %332, i32 %265, i32 %266, i32 %267, i32 %268, i32 %289, i32 %290) #2, !dbg !42
  %369 = extractvalue { float, float, float, float } %368, 0, !dbg !42
  %370 = extractvalue { float, float, float, float } %368, 1, !dbg !42
  %371 = extractvalue { float, float, float, float } %368, 2, !dbg !42
  %372 = extractvalue { float, float, float, float } %368, 3, !dbg !42
  %373 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %334, float %335, float %336, float %337, i32 %265, i32 %266, i32 %267, i32 %268, i32 %296, i32 %297) #2, !dbg !42
  %374 = extractvalue { float, float, float, float } %373, 0, !dbg !42
  %375 = extractvalue { float, float, float, float } %373, 1, !dbg !42
  %376 = extractvalue { float, float, float, float } %373, 2, !dbg !42
  %377 = extractvalue { float, float, float, float } %373, 3, !dbg !42
  %378 = getelementptr i8, ptr addrspace(1) %.pn18184, i64 64, !dbg !39
  %379 = getelementptr half, ptr addrspace(1) %.pn98185, i64 %92, !dbg !40
  %380 = getelementptr half, ptr addrspace(1) %.pn82186, i64 %92, !dbg !40
  %381 = getelementptr half, ptr addrspace(1) %.pn66187, i64 %92, !dbg !40
  %382 = getelementptr half, ptr addrspace(1) %.pn50188, i64 %92, !dbg !40
  %383 = add i32 %202, 1, !dbg !34
  %384 = icmp sgt i32 %383, 3, !dbg !34
  %385 = select i1 %384, i32 0, i32 %383, !dbg !34
  %386 = shl i32 %235, 5, !dbg !41
  %387 = sub i32 %.neg182, %386, !dbg !41
  %388 = icmp slt i32 %23, %387, !dbg !35
  %.idx146 = shl i32 %385, 11, !dbg !36
  %389 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %.idx146, !dbg !36
  %390 = and i1 %236, %388, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %391 = getelementptr inbounds nuw half, ptr addrspace(3) %389, i32 %63, !dbg !36
  %392 = getelementptr inbounds nuw half, ptr addrspace(3) %389, i32 %65, !dbg !36
  %393 = select i1 %390, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %391, ptr addrspace(1) %378, i32 %393) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %392, ptr addrspace(1) %378, i32 %393) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %394 = icmp slt i32 %29, %387, !dbg !37
  %395 = icmp slt i32 %30, %387, !dbg !37
  %396 = icmp slt i32 %31, %387, !dbg !37
  %397 = icmp slt i32 %32, %387, !dbg !37
  %.idx147 = shl i32 %385, 12, !dbg !38
  %398 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx147, !dbg !38
  %399 = and i1 %236, %394, !dbg !34
  %400 = and i1 %236, %395, !dbg !34
  %401 = and i1 %236, %396, !dbg !34
  %402 = and i1 %236, %397, !dbg !34
  %403 = getelementptr inbounds nuw half, ptr addrspace(3) %398, i32 %78, !dbg !38
  %404 = getelementptr inbounds nuw half, ptr addrspace(3) %398, i32 %80, !dbg !38
  %405 = getelementptr inbounds nuw half, ptr addrspace(3) %398, i32 %82, !dbg !38
  %406 = getelementptr inbounds nuw half, ptr addrspace(3) %398, i32 %84, !dbg !38
  %407 = select i1 %399, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %403, ptr addrspace(1) %379, i32 %407) #2, !dbg !38
  %408 = select i1 %400, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %404, ptr addrspace(1) %380, i32 %408) #2, !dbg !38
  %409 = select i1 %401, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %405, ptr addrspace(1) %381, i32 %409) #2, !dbg !38
  %410 = select i1 %402, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %406, ptr addrspace(1) %382, i32 %410) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %411 = add nuw nsw i32 %235, 1, !dbg !34
  %exitcond.not = icmp eq i32 %411, %52, !dbg !34
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %200, !dbg !34

._crit_edge.loopexit:                             ; preds = %200
  %412 = insertelement <32 x float> poison, float %339, i64 0, !dbg !43
  %413 = insertelement <32 x float> %412, float %340, i64 1, !dbg !43
  %414 = insertelement <32 x float> %413, float %341, i64 2, !dbg !43
  %415 = insertelement <32 x float> %414, float %342, i64 3, !dbg !43
  %416 = insertelement <32 x float> %415, float %344, i64 4, !dbg !43
  %417 = insertelement <32 x float> %416, float %345, i64 5, !dbg !43
  %418 = insertelement <32 x float> %417, float %346, i64 6, !dbg !43
  %419 = insertelement <32 x float> %418, float %347, i64 7, !dbg !43
  %420 = insertelement <32 x float> %419, float %349, i64 8, !dbg !43
  %421 = insertelement <32 x float> %420, float %350, i64 9, !dbg !43
  %422 = insertelement <32 x float> %421, float %351, i64 10, !dbg !43
  %423 = insertelement <32 x float> %422, float %352, i64 11, !dbg !43
  %424 = insertelement <32 x float> %423, float %354, i64 12, !dbg !43
  %425 = insertelement <32 x float> %424, float %355, i64 13, !dbg !43
  %426 = insertelement <32 x float> %425, float %356, i64 14, !dbg !43
  %427 = insertelement <32 x float> %426, float %357, i64 15, !dbg !43
  %428 = insertelement <32 x float> %427, float %359, i64 16, !dbg !43
  %429 = insertelement <32 x float> %428, float %360, i64 17, !dbg !43
  %430 = insertelement <32 x float> %429, float %361, i64 18, !dbg !43
  %431 = insertelement <32 x float> %430, float %362, i64 19, !dbg !43
  %432 = insertelement <32 x float> %431, float %364, i64 20, !dbg !43
  %433 = insertelement <32 x float> %432, float %365, i64 21, !dbg !43
  %434 = insertelement <32 x float> %433, float %366, i64 22, !dbg !43
  %435 = insertelement <32 x float> %434, float %367, i64 23, !dbg !43
  %436 = insertelement <32 x float> %435, float %369, i64 24, !dbg !43
  %437 = insertelement <32 x float> %436, float %370, i64 25, !dbg !43
  %438 = insertelement <32 x float> %437, float %371, i64 26, !dbg !43
  %439 = insertelement <32 x float> %438, float %372, i64 27, !dbg !43
  %440 = insertelement <32 x float> %439, float %374, i64 28, !dbg !43
  %441 = insertelement <32 x float> %440, float %375, i64 29, !dbg !43
  %442 = insertelement <32 x float> %441, float %376, i64 30, !dbg !43
  %443 = insertelement <32 x float> %442, float %377, i64 31, !dbg !43
  %444 = fptrunc <32 x float> %443 to <32 x half>, !dbg !43
  br label %._crit_edge, !dbg !44

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %9
  %445 = phi <32 x half> [ zeroinitializer, %9 ], [ %444, %._crit_edge.loopexit ]
  %446 = mul i32 %19, %17, !dbg !44
  %.decomposed284 = sub i32 %.decomposed, %446, !dbg !44
  %447 = add i32 %.decomposed284, %15, !dbg !45
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %448 = shl i32 %447, 5, !dbg !46
  %449 = or disjoint i32 %448, %29, !dbg !47
  %450 = or disjoint i32 %448, %30, !dbg !47
  %451 = or disjoint i32 %448, %31, !dbg !47
  %452 = or disjoint i32 %448, %32, !dbg !47
  %453 = mul i32 %449, %7, !dbg !48
  %454 = mul i32 %450, %7, !dbg !48
  %455 = mul i32 %451, %7, !dbg !48
  %456 = mul i32 %452, %7, !dbg !48
  %457 = sext i32 %453 to i64, !dbg !49
  %458 = getelementptr half, ptr addrspace(1) %2, i64 %457, !dbg !49
  %459 = sext i32 %454 to i64, !dbg !49
  %460 = getelementptr half, ptr addrspace(1) %2, i64 %459, !dbg !49
  %461 = sext i32 %455 to i64, !dbg !49
  %462 = getelementptr half, ptr addrspace(1) %2, i64 %461, !dbg !49
  %463 = sext i32 %456 to i64, !dbg !49
  %464 = getelementptr half, ptr addrspace(1) %2, i64 %463, !dbg !49
  %465 = sext i32 %25 to i64, !dbg !50
  %466 = getelementptr half, ptr addrspace(1) %458, i64 %465, !dbg !50
  %467 = getelementptr half, ptr addrspace(1) %460, i64 %465, !dbg !50
  %468 = getelementptr half, ptr addrspace(1) %462, i64 %465, !dbg !50
  %469 = getelementptr half, ptr addrspace(1) %464, i64 %465, !dbg !50
  %470 = icmp slt i32 %449, 1, !dbg !51
  %471 = icmp slt i32 %450, 1, !dbg !51
  %472 = icmp slt i32 %451, 1, !dbg !51
  %473 = icmp slt i32 %452, 1, !dbg !51
  %474 = icmp slt i32 %25, %3, !dbg !52
  %475 = and i1 %474, %470, !dbg !53
  %476 = and i1 %474, %471, !dbg !53
  %477 = and i1 %474, %472, !dbg !53
  %478 = and i1 %474, %473, !dbg !53
  %479 = shl nuw nsw i32 %21, 1, !dbg !54
  %480 = and i32 %479, 6, !dbg !54
  %481 = shl nuw nsw i32 %21, 4, !dbg !54
  %482 = and i32 %481, 192, !dbg !54
  %483 = or disjoint i32 %482, %480, !dbg !54
  %484 = shl nuw nsw i32 %27, 4, !dbg !54
  %485 = or disjoint i32 %483, %484, !dbg !54
  %486 = or disjoint i32 %485, %60, !dbg !54
  %487 = and i32 %22, 504, !dbg !54
  %488 = lshr i32 %485, 3, !dbg !54
  %489 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %488, !dbg !54
  %490 = getelementptr inbounds nuw half, ptr addrspace(3) %489, i32 %486, !dbg !54
  %491 = shufflevector <32 x half> %445, <32 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !54
  store <2 x half> %491, ptr addrspace(3) %490, align 4, !dbg !54
  %492 = or disjoint i32 %486, 512, !dbg !54
  %493 = lshr i32 %492, 3, !dbg !54
  %494 = and i32 %493, 536870904, !dbg !54
  %495 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %494, !dbg !54
  %496 = getelementptr inbounds nuw half, ptr addrspace(3) %495, i32 %492, !dbg !54
  %497 = shufflevector <32 x half> %445, <32 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !54
  store <2 x half> %497, ptr addrspace(3) %496, align 4, !dbg !54
  %498 = getelementptr inbounds nuw i8, ptr addrspace(3) %490, i32 32, !dbg !54
  %499 = shufflevector <32 x half> %445, <32 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !54
  store <2 x half> %499, ptr addrspace(3) %498, align 4, !dbg !54
  %500 = or disjoint i32 %486, 528, !dbg !54
  %501 = lshr i32 %500, 3, !dbg !54
  %502 = and i32 %501, 536870904, !dbg !54
  %503 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %502, !dbg !54
  %504 = getelementptr inbounds nuw half, ptr addrspace(3) %503, i32 %500, !dbg !54
  %505 = shufflevector <32 x half> %445, <32 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !54
  store <2 x half> %505, ptr addrspace(3) %504, align 4, !dbg !54
  %506 = getelementptr inbounds nuw i8, ptr addrspace(3) %490, i32 64, !dbg !54
  %507 = shufflevector <32 x half> %445, <32 x half> poison, <2 x i32> <i32 8, i32 9>, !dbg !54
  store <2 x half> %507, ptr addrspace(3) %506, align 4, !dbg !54
  %508 = or disjoint i32 %486, 544, !dbg !54
  %509 = lshr i32 %508, 3, !dbg !54
  %510 = and i32 %509, 536870904, !dbg !54
  %511 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %510, !dbg !54
  %512 = getelementptr inbounds nuw half, ptr addrspace(3) %511, i32 %508, !dbg !54
  %513 = shufflevector <32 x half> %445, <32 x half> poison, <2 x i32> <i32 10, i32 11>, !dbg !54
  store <2 x half> %513, ptr addrspace(3) %512, align 4, !dbg !54
  %514 = getelementptr inbounds nuw i8, ptr addrspace(3) %490, i32 96, !dbg !54
  %515 = shufflevector <32 x half> %445, <32 x half> poison, <2 x i32> <i32 12, i32 13>, !dbg !54
  store <2 x half> %515, ptr addrspace(3) %514, align 4, !dbg !54
  %516 = or disjoint i32 %486, 560, !dbg !54
  %517 = lshr i32 %516, 3, !dbg !54
  %518 = and i32 %517, 536870904, !dbg !54
  %519 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %518, !dbg !54
  %520 = getelementptr inbounds nuw half, ptr addrspace(3) %519, i32 %516, !dbg !54
  %521 = shufflevector <32 x half> %445, <32 x half> poison, <2 x i32> <i32 14, i32 15>, !dbg !54
  store <2 x half> %521, ptr addrspace(3) %520, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  %522 = and i32 %21, 56, !dbg !54
  %523 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %522, !dbg !54
  %524 = getelementptr inbounds nuw half, ptr addrspace(3) %523, i32 %487, !dbg !54
  %525 = load <4 x i32>, ptr addrspace(3) %524, align 16, !dbg !54
  %526 = or disjoint i32 %487, 512, !dbg !54
  %527 = lshr exact i32 %526, 3, !dbg !54
  %528 = and i32 %527, 120, !dbg !54
  %529 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %528, !dbg !54
  %530 = getelementptr inbounds nuw half, ptr addrspace(3) %529, i32 %526, !dbg !54
  %531 = load <4 x i32>, ptr addrspace(3) %530, align 16, !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  %532 = shufflevector <32 x half> %445, <32 x half> poison, <2 x i32> <i32 16, i32 17>, !dbg !54
  store <2 x half> %532, ptr addrspace(3) %490, align 4, !dbg !54
  %533 = shufflevector <32 x half> %445, <32 x half> poison, <2 x i32> <i32 18, i32 19>, !dbg !54
  store <2 x half> %533, ptr addrspace(3) %496, align 4, !dbg !54
  %534 = shufflevector <32 x half> %445, <32 x half> poison, <2 x i32> <i32 20, i32 21>, !dbg !54
  store <2 x half> %534, ptr addrspace(3) %498, align 4, !dbg !54
  %535 = shufflevector <32 x half> %445, <32 x half> poison, <2 x i32> <i32 22, i32 23>, !dbg !54
  store <2 x half> %535, ptr addrspace(3) %504, align 4, !dbg !54
  %536 = shufflevector <32 x half> %445, <32 x half> poison, <2 x i32> <i32 24, i32 25>, !dbg !54
  store <2 x half> %536, ptr addrspace(3) %506, align 4, !dbg !54
  %537 = shufflevector <32 x half> %445, <32 x half> poison, <2 x i32> <i32 26, i32 27>, !dbg !54
  store <2 x half> %537, ptr addrspace(3) %512, align 4, !dbg !54
  %538 = shufflevector <32 x half> %445, <32 x half> poison, <2 x i32> <i32 28, i32 29>, !dbg !54
  store <2 x half> %538, ptr addrspace(3) %514, align 4, !dbg !54
  %539 = shufflevector <32 x half> %445, <32 x half> poison, <2 x i32> <i32 30, i32 31>, !dbg !54
  store <2 x half> %539, ptr addrspace(3) %520, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  %540 = load <4 x i32>, ptr addrspace(3) %524, align 16, !dbg !54
  %541 = load <4 x i32>, ptr addrspace(3) %530, align 16, !dbg !54
  %.extract = extractelement <4 x i32> %525, i64 0, !dbg !54
  %.extract151 = extractelement <4 x i32> %525, i64 1, !dbg !54
  %.extract153 = extractelement <4 x i32> %525, i64 2, !dbg !54
  %.extract155 = extractelement <4 x i32> %525, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract151, i32 %.extract153, i32 %.extract155, ptr addrspace(1) %466, i1 %475) #2, !dbg !54
  %.extract157 = extractelement <4 x i32> %531, i64 0, !dbg !54
  %.extract159 = extractelement <4 x i32> %531, i64 1, !dbg !54
  %.extract161 = extractelement <4 x i32> %531, i64 2, !dbg !54
  %.extract163 = extractelement <4 x i32> %531, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract157, i32 %.extract159, i32 %.extract161, i32 %.extract163, ptr addrspace(1) %467, i1 %476) #2, !dbg !54
  %.extract165 = extractelement <4 x i32> %540, i64 0, !dbg !54
  %.extract167 = extractelement <4 x i32> %540, i64 1, !dbg !54
  %.extract169 = extractelement <4 x i32> %540, i64 2, !dbg !54
  %.extract171 = extractelement <4 x i32> %540, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract165, i32 %.extract167, i32 %.extract169, i32 %.extract171, ptr addrspace(1) %468, i1 %477) #2, !dbg !54
  %.extract173 = extractelement <4 x i32> %541, i64 0, !dbg !54
  %.extract175 = extractelement <4 x i32> %541, i64 1, !dbg !54
  %.extract177 = extractelement <4 x i32> %541, i64 2, !dbg !54
  %.extract179 = extractelement <4 x i32> %541, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract173, i32 %.extract175, i32 %.extract177, i32 %.extract179, ptr addrspace(1) %469, i1 %478) #2, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

attributes #0 = { "nvvm.reqntid"="64" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "gated_mlp.py", directory: "/home/ubuntu/PTX_dataset/triton_ptx")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !1, file: !1, line: 68, type: !6, scopeLine: 68, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 91, column: 24, scope: !5)
!9 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !12)
!10 = distinct !DILexicalBlockFile(scope: !5, file: !11, discriminator: 0)
!11 = !DIFile(filename: "standard.py", directory: "/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language")
!12 = !DILocation(line: 93, column: 27, scope: !5)
!13 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !12)
!14 = !DILocation(line: 94, column: 38, scope: !5)
!15 = !DILocation(line: 95, column: 22, scope: !5)
!16 = !DILocation(line: 96, column: 29, scope: !5)
!17 = !DILocation(line: 97, column: 35, scope: !5)
!18 = !DILocation(line: 97, column: 48, scope: !5)
!19 = !DILocation(line: 98, column: 34, scope: !5)
!20 = !DILocation(line: 99, column: 40, scope: !5)
!21 = !DILocation(line: 109, column: 23, scope: !5)
!22 = !DILocation(line: 109, column: 51, scope: !5)
!23 = !DILocation(line: 109, column: 38, scope: !5)
!24 = !DILocation(line: 109, column: 68, scope: !5)
!25 = !DILocation(line: 110, column: 26, scope: !5)
!26 = !DILocation(line: 111, column: 22, scope: !5)
!27 = !DILocation(line: 112, column: 40, scope: !5)
!28 = !DILocation(line: 112, column: 52, scope: !5)
!29 = !DILocation(line: 112, column: 22, scope: !5)
!30 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !31)
!31 = !DILocation(line: 120, column: 33, scope: !5)
!32 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !31)
!33 = !DILocation(line: 129, column: 33, scope: !5)
!34 = !DILocation(line: 120, column: 22, scope: !5)
!35 = !DILocation(line: 123, column: 51, scope: !5)
!36 = !DILocation(line: 123, column: 20, scope: !5)
!37 = !DILocation(line: 124, column: 51, scope: !5)
!38 = !DILocation(line: 124, column: 20, scope: !5)
!39 = !DILocation(line: 128, column: 18, scope: !5)
!40 = !DILocation(line: 129, column: 18, scope: !5)
!41 = !DILocation(line: 123, column: 55, scope: !5)
!42 = !DILocation(line: 126, column: 35, scope: !5)
!43 = !DILocation(line: 134, column: 23, scope: !5)
!44 = !DILocation(line: 98, column: 54, scope: !5)
!45 = !DILocation(line: 98, column: 27, scope: !5)
!46 = !DILocation(line: 138, column: 22, scope: !5)
!47 = !DILocation(line: 138, column: 37, scope: !5)
!48 = !DILocation(line: 140, column: 33, scope: !5)
!49 = !DILocation(line: 140, column: 21, scope: !5)
!50 = !DILocation(line: 140, column: 52, scope: !5)
!51 = !DILocation(line: 141, column: 33, scope: !5)
!52 = !DILocation(line: 141, column: 58, scope: !5)
!53 = !DILocation(line: 141, column: 39, scope: !5)
!54 = !DILocation(line: 142, column: 21, scope: !5)
!55 = !DILocation(line: 142, column: 4, scope: !5)
