//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	_attn_fwd               // -- Begin function _attn_fwd
.extern .shared .align 16 .b8 global_smem[];
.global .align 1 .b8 _$_str[11] = {95, 95, 67, 85, 68, 65, 95, 70, 84, 90};
                                        // @_attn_fwd
.visible .entry _attn_fwd(
	.param .u64 .ptr .global .align 1 _attn_fwd_param_0,
	.param .u64 .ptr .global .align 1 _attn_fwd_param_1,
	.param .u64 .ptr .global .align 1 _attn_fwd_param_2,
	.param .f32 _attn_fwd_param_3,
	.param .u64 .ptr .global .align 1 _attn_fwd_param_4,
	.param .u64 .ptr .global .align 1 _attn_fwd_param_5,
	.param .u32 _attn_fwd_param_6,
	.param .u32 _attn_fwd_param_7,
	.param .u32 _attn_fwd_param_8,
	.param .u32 _attn_fwd_param_9,
	.param .u32 _attn_fwd_param_10,
	.param .u32 _attn_fwd_param_11,
	.param .u32 _attn_fwd_param_12,
	.param .u32 _attn_fwd_param_13,
	.param .u32 _attn_fwd_param_14,
	.param .u32 _attn_fwd_param_15,
	.param .u32 _attn_fwd_param_16,
	.param .u32 _attn_fwd_param_17,
	.param .u32 _attn_fwd_param_18,
	.param .u64 .ptr .global .align 1 _attn_fwd_param_19
)
.reqntid 256
{
	.reg .pred 	%p<19>;
	.reg .b32 	%r<1353>;
	.reg .b64 	%rd<179>;
	.loc	1 114 0                         // gqa.py:114:0
$L__func_begin0:
	.loc	1 114 0                         // gqa.py:114:0

// %bb.0:
	ld.param.b32 	%r129, [_attn_fwd_param_17];
	ld.param.b64 	%rd23, [_attn_fwd_param_5];
	ld.param.b64 	%rd22, [_attn_fwd_param_4];
	ld.param.b64 	%rd40, [_attn_fwd_param_0];
	ld.param.b64 	%rd41, [_attn_fwd_param_1];
$L__tmp0:
	.loc	1 127 28                        // gqa.py:127:28
	mov.u32 	%r176, %ctaid.x;
	.loc	1 128 27                        // gqa.py:128:27
	mov.u32 	%r1, %ctaid.y;
	ld.param.b64 	%rd42, [_attn_fwd_param_2];
	ld.param.b32 	%r177, [_attn_fwd_param_3];
	ld.param.b32 	%r178, [_attn_fwd_param_18];
	.loc	1 129 22                        // gqa.py:129:22
	div.s32 	%r180, %r1, %r178;
	.loc	1 130 21                        // gqa.py:130:21
	mul.lo.s32 	%r181, %r180, %r178;
	sub.s32 	%r182, %r1, %r181;
	ld.param.b32 	%r183, [_attn_fwd_param_6];
	ld.param.s32 	%rd43, [_attn_fwd_param_7];
	ld.param.s32 	%rd44, [_attn_fwd_param_8];
	.loc	1 131 38                        // gqa.py:131:38
	mul.wide.s32 	%rd45, %r180, %r183;
	.loc	1 131 59                        // gqa.py:131:59
	cvt.u64.u32 	%rd46, %r182;
	ld.param.b32 	%r184, [_attn_fwd_param_11];
	.loc	1 131 50                        // gqa.py:131:50
	mad.lo.s64 	%rd1, %rd46, %rd43, %rd45;
	.loc	1 135 17                        // gqa.py:135:17
	shl.b64 	%rd7, %rd1, 1;
	add.s64 	%rd47, %rd40, %rd7;
	ld.param.b32 	%r185, [_attn_fwd_param_14];
	.loc	1 138 27                        // gqa.py:138:27
	shl.b32 	%r2, %r176, 7;
	.loc	1 140 8                         // gqa.py:140:8
	cvt.s64.s32 	%rd48, %r2;
	.loc	1 143 17                        // gqa.py:143:17
	add.s64 	%rd49, %rd42, %rd7;
	.loc	1 148 8                         // gqa.py:148:8
	cvt.s64.s32 	%rd50, %r185;
	.loc	1 151 17                        // gqa.py:151:17
	add.s64 	%rd51, %rd41, %rd7;
	.loc	1 156 8                         // gqa.py:156:8
	cvt.s64.s32 	%rd52, %r184;
	.loc	1 167 46                        // gqa.py:167:46
	mov.u32 	%r3, %tid.x;
	shr.u32 	%r4, %r3, 5;
	bfe.s32 	%r186, %r3, 5, 1;
	and.b32 	%r5, %r3, 128;
	shr.u32 	%r187, %r3, 3;
	bfe.u32 	%r188, %r3, 3, 5;
	or.b32 	%r189, %r188, 32;
	or.b32 	%r190, %r188, 64;
	or.b32 	%r191, %r187, 96;
	.loc	1 175 16                        // gqa.py:175:16
	mul.f32 	%r6, %r177, 0f3FB8AA3B;
	.loc	1 177 16                        // gqa.py:177:16
	cvt.u64.u32 	%rd53, %r188;
	cvt.u64.u32 	%rd54, %r189;
	cvt.u64.u32 	%rd55, %r190;
	cvt.u64.u32 	%rd56, %r191;
	or.b64 	%rd2, %rd53, %rd48;
	or.b64 	%rd3, %rd54, %rd48;
	or.b64 	%rd4, %rd55, %rd48;
	or.b64 	%rd5, %rd56, %rd48;
	mul.lo.s64 	%rd57, %rd2, %rd44;
	mul.lo.s64 	%rd58, %rd3, %rd44;
	mul.lo.s64 	%rd59, %rd4, %rd44;
	mul.lo.s64 	%rd60, %rd5, %rd44;
	shl.b32 	%r7, %r3, 3;
	and.b32 	%r192, %r7, 56;
	cvt.u64.u32 	%rd6, %r192;
	shl.b64 	%rd61, %rd57, 1;
	add.s64 	%rd62, %rd47, %rd61;
	mul.wide.u32 	%rd63, %r192, 2;
	add.s64 	%rd24, %rd62, %rd63;
	shl.b64 	%rd64, %rd58, 1;
	add.s64 	%rd65, %rd47, %rd64;
	add.s64 	%rd25, %rd65, %rd63;
	shl.b64 	%rd66, %rd59, 1;
	add.s64 	%rd67, %rd47, %rd66;
	add.s64 	%rd26, %rd67, %rd63;
	shl.b64 	%rd68, %rd60, 1;
	add.s64 	%rd69, %rd47, %rd68;
	add.s64 	%rd27, %rd69, %rd63;
	// begin inline asm
	mov.u32 %r130, 0x0;
	mov.u32 %r131, 0x0;
	mov.u32 %r132, 0x0;
	mov.u32 %r133, 0x0;
	ld.global.v4.b32 { %r130, %r131, %r132, %r133 }, [ %rd24 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r134, 0x0;
	mov.u32 %r135, 0x0;
	mov.u32 %r136, 0x0;
	mov.u32 %r137, 0x0;
	ld.global.v4.b32 { %r134, %r135, %r136, %r137 }, [ %rd25 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r138, 0x0;
	mov.u32 %r139, 0x0;
	mov.u32 %r140, 0x0;
	mov.u32 %r141, 0x0;
	ld.global.v4.b32 { %r138, %r139, %r140, %r141 }, [ %rd26 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r142, 0x0;
	mov.u32 %r143, 0x0;
	mov.u32 %r144, 0x0;
	mov.u32 %r145, 0x0;
	ld.global.v4.b32 { %r142, %r143, %r144, %r145 }, [ %rd27 + 0 ];
	// end inline asm
	and.b32 	%r193, %r186, 288;
	and.b32 	%r194, %r3, 24;
	mul.lo.s32 	%r195, %r194, 9;
	xor.b32 	%r196, %r195, %r192;
	xor.b32 	%r197, %r196, %r193;
	and.b32 	%r198, %r7, 512;
	shl.b32 	%r8, %r5, 3;
	or.b32 	%r199, %r198, %r197;
	or.b32 	%r9, %r199, %r8;
	shl.b32 	%r200, %r9, 1;
	mov.b32 	%r201, global_smem;
	add.s32 	%r202, %r201, 65536;
	add.s32 	%r203, %r202, %r200;
	st.shared.v4.b32 	[%r203], {%r130, %r131, %r132, %r133};
	or.b32 	%r204, %r192, 2048;
	xor.b32 	%r205, %r195, %r204;
	xor.b32 	%r206, %r205, %r193;
	or.b32 	%r207, %r206, %r198;
	or.b32 	%r10, %r207, %r8;
	shl.b32 	%r208, %r10, 1;
	add.s32 	%r209, %r202, %r208;
	st.shared.v4.b32 	[%r209], {%r134, %r135, %r136, %r137};
	or.b32 	%r210, %r192, 4096;
	xor.b32 	%r211, %r195, %r210;
	xor.b32 	%r212, %r211, %r193;
	shl.b32 	%r213, %r212, 1;
	add.s32 	%r214, %r202, %r213;
	shl.b32 	%r215, %r198, 1;
	add.s32 	%r216, %r214, %r215;
	shl.b32 	%r217, %r5, 4;
	add.s32 	%r218, %r216, %r217;
	st.shared.v4.b32 	[%r218], {%r138, %r139, %r140, %r141};
	or.b32 	%r219, %r192, 6144;
	xor.b32 	%r220, %r195, %r219;
	xor.b32 	%r221, %r220, %r193;
	shl.b32 	%r222, %r221, 1;
	add.s32 	%r223, %r202, %r222;
	add.s32 	%r224, %r223, %r215;
	add.s32 	%r225, %r224, %r217;
	st.shared.v4.b32 	[%r225], {%r142, %r143, %r144, %r145};
$L__tmp1:
	.loc	1 47 20                         // gqa.py:47:20 @[ gqa.py:185:82 ]
	mul.lo.s64 	%rd70, %rd52, %rd53;
	mul.lo.s64 	%rd71, %rd52, %rd54;
	shl.b64 	%rd72, %rd70, 1;
	add.s64 	%rd73, %rd51, %rd72;
	add.s64 	%rd28, %rd73, %rd63;
	shl.b64 	%rd74, %rd71, 1;
	add.s64 	%rd75, %rd51, %rd74;
	add.s64 	%rd29, %rd75, %rd63;
	add.s32 	%r146, %r201, %r200;
	add.s32 	%r148, %r201, %r208;
	mov.b32 	%r147, 16;
	// begin inline asm
	cp.async.cg.shared.global [ %r146 + 0 ], [ %rd28 + 0 ], 0x10, %r147;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r148 + 0 ], [ %rd29 + 0 ], 0x10, %r147;
	// end inline asm
	cp.async.commit_group;
	.loc	1 65 20                         // gqa.py:65:20 @[ gqa.py:185:82 ]
	mul.lo.s64 	%rd76, %rd50, %rd53;
	mul.lo.s64 	%rd77, %rd50, %rd54;
	shl.b64 	%rd78, %rd76, 1;
	add.s64 	%rd79, %rd49, %rd78;
	add.s64 	%rd30, %rd79, %rd63;
	shl.b64 	%rd80, %rd77, 1;
	add.s64 	%rd81, %rd49, %rd80;
	add.s64 	%rd31, %rd81, %rd63;
	add.s32 	%r226, %r201, 32768;
	add.s32 	%r150, %r226, %r200;
	add.s32 	%r152, %r226, %r208;
	// begin inline asm
	cp.async.cg.shared.global [ %r150 + 0 ], [ %rd30 + 0 ], 0x10, %r147;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r152 + 0 ], [ %rd31 + 0 ], 0x10, %r147;
	// end inline asm
	cp.async.commit_group;
	.loc	1 47 20                         // gqa.py:47:20 @[ gqa.py:185:82 ]
	mul.wide.s32 	%rd82, %r184, 64;
	add.s64 	%rd83, %rd70, %rd82;
	add.s64 	%rd84, %rd71, %rd82;
	shl.b64 	%rd85, %rd83, 1;
	add.s64 	%rd86, %rd51, %rd85;
	add.s64 	%rd32, %rd86, %rd63;
	shl.b64 	%rd87, %rd84, 1;
	add.s64 	%rd88, %rd51, %rd87;
	add.s64 	%rd33, %rd88, %rd63;
	bar.sync 	0;
	add.s32 	%r227, %r201, 8192;
	add.s32 	%r154, %r227, %r200;
	add.s32 	%r156, %r227, %r208;
	// begin inline asm
	cp.async.cg.shared.global [ %r154 + 0 ], [ %rd32 + 0 ], 0x10, %r147;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r156 + 0 ], [ %rd33 + 0 ], 0x10, %r147;
	// end inline asm
	cp.async.commit_group;
	.loc	1 65 20                         // gqa.py:65:20 @[ gqa.py:185:82 ]
	mul.wide.s32 	%rd89, %r185, 64;
	add.s64 	%rd90, %rd76, %rd89;
	add.s64 	%rd91, %rd77, %rd89;
	shl.b64 	%rd92, %rd90, 1;
	add.s64 	%rd93, %rd49, %rd92;
	add.s64 	%rd34, %rd93, %rd63;
	shl.b64 	%rd94, %rd91, 1;
	add.s64 	%rd95, %rd49, %rd94;
	add.s64 	%rd35, %rd95, %rd63;
	add.s32 	%r228, %r201, 40960;
	add.s32 	%r158, %r228, %r200;
	add.s32 	%r160, %r228, %r208;
	// begin inline asm
	cp.async.cg.shared.global [ %r158 + 0 ], [ %rd34 + 0 ], 0x10, %r147;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r160 + 0 ], [ %rd35 + 0 ], 0x10, %r147;
	// end inline asm
	cp.async.commit_group;
	.loc	1 47 20                         // gqa.py:47:20 @[ gqa.py:185:82 ]
	add.s64 	%rd96, %rd83, %rd82;
	add.s64 	%rd97, %rd84, %rd82;
	shl.b64 	%rd98, %rd96, 1;
	add.s64 	%rd99, %rd51, %rd98;
	add.s64 	%rd36, %rd99, %rd63;
	shl.b64 	%rd100, %rd97, 1;
	add.s64 	%rd101, %rd51, %rd100;
	add.s64 	%rd37, %rd101, %rd63;
	bar.sync 	0;
	add.s32 	%r229, %r201, 16384;
	add.s32 	%r162, %r229, %r200;
	add.s32 	%r164, %r229, %r208;
	// begin inline asm
	cp.async.cg.shared.global [ %r162 + 0 ], [ %rd36 + 0 ], 0x10, %r147;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r164 + 0 ], [ %rd37 + 0 ], 0x10, %r147;
	// end inline asm
	cp.async.commit_group;
	.loc	1 65 20                         // gqa.py:65:20 @[ gqa.py:185:82 ]
	add.s64 	%rd102, %rd90, %rd89;
	add.s64 	%rd103, %rd91, %rd89;
	shl.b64 	%rd104, %rd102, 1;
	add.s64 	%rd105, %rd49, %rd104;
	add.s64 	%rd38, %rd105, %rd63;
	shl.b64 	%rd106, %rd103, 1;
	add.s64 	%rd107, %rd49, %rd106;
	add.s64 	%rd39, %rd107, %rd63;
	add.s32 	%r230, %r201, 49152;
	add.s32 	%r166, %r230, %r200;
	add.s32 	%r168, %r230, %r208;
	// begin inline asm
	cp.async.cg.shared.global [ %r166 + 0 ], [ %rd38 + 0 ], 0x10, %r147;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r168 + 0 ], [ %rd39 + 0 ], 0x10, %r147;
	// end inline asm
	cp.async.commit_group;
	.loc	1 48 23                         // gqa.py:48:23 @[ gqa.py:185:82 ]
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	.loc	1 44 33                         // gqa.py:44:33 @[ gqa.py:185:82 ]
	or.b64 	%rd108, %rd53, 224;
	mul.lo.s64 	%rd109, %rd108, %rd50;
	shl.b64 	%rd110, %rd109, 1;
	and.b32 	%r231, %r3, 7;
	mul.wide.u32 	%rd111, %r231, 16;
	add.s64 	%rd112, %rd110, %rd111;
	add.s64 	%rd178, %rd42, %rd112;
	mul.wide.s32 	%rd9, %r185, 128;
	mul.lo.s64 	%rd113, %rd108, %rd52;
	shl.b64 	%rd114, %rd113, 1;
	add.s64 	%rd115, %rd114, %rd111;
	add.s64 	%rd177, %rd41, %rd115;
	mul.wide.s32 	%rd11, %r184, 128;
	or.b64 	%rd116, %rd53, 192;
	mul.lo.s64 	%rd117, %rd116, %rd50;
	shl.b64 	%rd118, %rd117, 1;
	add.s64 	%rd119, %rd118, %rd111;
	add.s64 	%rd176, %rd42, %rd119;
	mul.lo.s64 	%rd120, %rd116, %rd52;
	shl.b64 	%rd121, %rd120, 1;
	add.s64 	%rd122, %rd121, %rd111;
	add.s64 	%rd175, %rd41, %rd122;
	mov.b32 	%r1349, 0f3F800000;
	mov.b32 	%r664, 0f00000000;
	mov.b32 	%r1315, 0fFF800000;
	mov.b32 	%r1314, 2;
	mov.b32 	%r1313, -1;
	mov.b32 	%r1312, -64;
	mov.b32 	%r1316, %r1315;
	mov.b32 	%r665, %r664;
	mov.b32 	%r666, %r664;
	mov.b32 	%r667, %r664;
	mov.b32 	%r668, %r664;
	mov.b32 	%r669, %r664;
	mov.b32 	%r670, %r664;
	mov.b32 	%r671, %r664;
	mov.b32 	%r672, %r664;
	mov.b32 	%r673, %r664;
	mov.b32 	%r674, %r664;
	mov.b32 	%r675, %r664;
	mov.b32 	%r676, %r664;
	mov.b32 	%r677, %r664;
	mov.b32 	%r678, %r664;
	mov.b32 	%r679, %r664;
	mov.b32 	%r680, %r664;
	mov.b32 	%r681, %r664;
	mov.b32 	%r682, %r664;
	mov.b32 	%r683, %r664;
	mov.b32 	%r684, %r664;
	mov.b32 	%r685, %r664;
	mov.b32 	%r686, %r664;
	mov.b32 	%r687, %r664;
	mov.b32 	%r688, %r664;
	mov.b32 	%r689, %r664;
	mov.b32 	%r690, %r664;
	mov.b32 	%r691, %r664;
	mov.b32 	%r692, %r664;
	mov.b32 	%r693, %r664;
	mov.b32 	%r694, %r664;
	mov.b32 	%r695, %r664;
	mov.b32 	%r1350, %r1349;
$L__BB0_1:                              // %__nv_exp2f.exit
                                        // =>This Inner Loop Header: Depth=1
	add.s32 	%r1312, %r1312, 64;
	setp.lt.u32 	%p8, %r1312, 3904;
	add.s32 	%r876, %r1313, 1;
	setp.gt.s32 	%p9, %r876, 3;
	selp.b32 	%r1313, 0, %r876, %p9;
	.loc	1 47 20                         // gqa.py:47:20 @[ gqa.py:185:82 ]
	cp.async.wait_group 	4;
	bar.sync 	0;
	shl.b32 	%r877, %r1313, 13;
	add.s32 	%r491, %r201, %r877;
	.loc	1 48 23                         // gqa.py:48:23 @[ gqa.py:185:82 ]
	shfl.sync.idx.b32 	%r879, %r4, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r880, %r879, 11;
	and.b32 	%r881, %r880, 8192;
	add.s32 	%r882, %r881, %r202;
	bfe.u32 	%r883, %r882, 4, 14;
	cvt.u64.u32 	%rd139, %r883;
	or.b64 	%rd123, %rd139, 4611686293372403712;
	bfe.u32 	%r884, %r491, 4, 14;
	cvt.u64.u32 	%rd140, %r884;
	or.b64 	%rd124, %rd140, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r328,%r329,%r330,%r331,%r332,%r333,%r334,%r335,%r336,%r337,%r338,%r339,%r340,%r341,%r342,%r343,%r344,%r345,%r346,%r347,%r348,%r349,%r350,%r351,%r352,%r353,%r354,%r355,%r356,%r357,%r358,%r359}, %rd123, %rd124, 0, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r885, %r882, 32;
	bfe.u32 	%r886, %r885, 4, 14;
	cvt.u64.u32 	%rd141, %r886;
	or.b64 	%rd125, %rd141, 4611686293372403712;
	add.s32 	%r887, %r491, 32;
	bfe.u32 	%r888, %r887, 4, 14;
	cvt.u64.u32 	%rd142, %r888;
	or.b64 	%rd126, %rd142, 4611686293338849280;
	mov.pred 	%p1, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r328,%r329,%r330,%r331,%r332,%r333,%r334,%r335,%r336,%r337,%r338,%r339,%r340,%r341,%r342,%r343,%r344,%r345,%r346,%r347,%r348,%r349,%r350,%r351,%r352,%r353,%r354,%r355,%r356,%r357,%r358,%r359}, %rd125, %rd126, %p1, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r889, %r882, 64;
	bfe.u32 	%r890, %r889, 4, 14;
	cvt.u64.u32 	%rd143, %r890;
	or.b64 	%rd127, %rd143, 4611686293372403712;
	add.s32 	%r891, %r491, 64;
	bfe.u32 	%r892, %r891, 4, 14;
	cvt.u64.u32 	%rd144, %r892;
	or.b64 	%rd128, %rd144, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r328,%r329,%r330,%r331,%r332,%r333,%r334,%r335,%r336,%r337,%r338,%r339,%r340,%r341,%r342,%r343,%r344,%r345,%r346,%r347,%r348,%r349,%r350,%r351,%r352,%r353,%r354,%r355,%r356,%r357,%r358,%r359}, %rd127, %rd128, %p1, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r893, %r882, 96;
	bfe.u32 	%r894, %r893, 4, 14;
	cvt.u64.u32 	%rd145, %r894;
	or.b64 	%rd129, %rd145, 4611686293372403712;
	add.s32 	%r895, %r491, 96;
	bfe.u32 	%r896, %r895, 4, 14;
	cvt.u64.u32 	%rd146, %r896;
	or.b64 	%rd130, %rd146, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r328,%r329,%r330,%r331,%r332,%r333,%r334,%r335,%r336,%r337,%r338,%r339,%r340,%r341,%r342,%r343,%r344,%r345,%r346,%r347,%r348,%r349,%r350,%r351,%r352,%r353,%r354,%r355,%r356,%r357,%r358,%r359}, %rd129, %rd130, %p1, 1, 1, 0, 0;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r489, 0;
	mov.b32 	%r488, %r202;
	mov.b32 	%r490, %r489;
	mov.b32 	%r492, %r489;
	mov.b32 	%r493, %r489;
	// begin inline asm
	// wait for regs: %r328,%r329,%r330,%r331,%r332,%r333,%r334,%r335,%r336,%r337,%r338,%r339,%r340,%r341,%r342,%r343,%r344,%r345,%r346,%r347,%r348,%r349,%r350,%r351,%r352,%r353,%r354,%r355,%r356,%r357,%r358,%r359,%r488,%r489,%r490,%r491,%r492,%r493,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672,%r673,%r674,%r675,%r676,%r677,%r678,%r679,%r680,%r681,%r682,%r683,%r684,%r685,%r686,%r687,%r688,%r689,%r690,%r691,%r692,%r693,%r694,%r695
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	2 167 27                        // standard.py:167:27 @[ gqa.py:185:82 ]
	max.f32 	%r897, %r328, %r329;
	max.f32 	%r898, %r330, %r331;
	max.f32 	%r899, %r897, %r332;
	max.f32 	%r900, %r899, %r333;
	max.f32 	%r901, %r898, %r334;
	max.f32 	%r902, %r901, %r335;
	max.f32 	%r903, %r900, %r336;
	max.f32 	%r904, %r903, %r337;
	max.f32 	%r905, %r902, %r338;
	max.f32 	%r906, %r905, %r339;
	max.f32 	%r907, %r904, %r340;
	max.f32 	%r908, %r907, %r341;
	max.f32 	%r909, %r906, %r342;
	max.f32 	%r910, %r909, %r343;
	max.f32 	%r911, %r908, %r344;
	max.f32 	%r912, %r911, %r345;
	max.f32 	%r913, %r910, %r346;
	max.f32 	%r914, %r913, %r347;
	max.f32 	%r915, %r912, %r348;
	max.f32 	%r916, %r915, %r349;
	max.f32 	%r917, %r914, %r350;
	max.f32 	%r918, %r917, %r351;
	max.f32 	%r919, %r916, %r352;
	max.f32 	%r920, %r919, %r353;
	max.f32 	%r921, %r918, %r354;
	max.f32 	%r922, %r921, %r355;
	max.f32 	%r923, %r920, %r356;
	max.f32 	%r924, %r923, %r357;
	max.f32 	%r925, %r922, %r358;
	max.f32 	%r926, %r925, %r359;
	.loc	2 188 40                        // standard.py:188:40 @[ gqa.py:185:82 ]
	shfl.sync.bfly.b32 	%r927, %r924, 2, 31, -1;
	.loc	2 167 27                        // standard.py:167:27 @[ gqa.py:185:82 ]
	max.f32 	%r928, %r924, %r927;
	.loc	2 188 40                        // standard.py:188:40 @[ gqa.py:185:82 ]
	shfl.sync.bfly.b32 	%r929, %r928, 1, 31, -1;
	.loc	2 167 27                        // standard.py:167:27 @[ gqa.py:185:82 ]
	max.f32 	%r930, %r928, %r929;
	.loc	2 188 40                        // standard.py:188:40 @[ gqa.py:185:82 ]
	shfl.sync.bfly.b32 	%r931, %r926, 2, 31, -1;
	.loc	2 167 27                        // standard.py:167:27 @[ gqa.py:185:82 ]
	max.f32 	%r932, %r926, %r931;
	.loc	2 188 40                        // standard.py:188:40 @[ gqa.py:185:82 ]
	shfl.sync.bfly.b32 	%r933, %r932, 1, 31, -1;
	.loc	2 167 27                        // standard.py:167:27 @[ gqa.py:185:82 ]
	max.f32 	%r934, %r932, %r933;
	.loc	1 55 51                         // gqa.py:55:51 @[ gqa.py:185:82 ]
	mul.f32 	%r935, %r6, %r930;
	mul.f32 	%r936, %r6, %r934;
	.loc	1 55 35                         // gqa.py:55:35 @[ gqa.py:185:82 ]
	max.f32 	%r52, %r1315, %r935;
	max.f32 	%r53, %r1316, %r936;
	.loc	1 56 33                         // gqa.py:56:33 @[ gqa.py:185:82 ]
	neg.f32 	%r937, %r52;
	fma.rn.f32 	%r938, %r6, %r328, %r937;
	fma.rn.f32 	%r939, %r6, %r329, %r937;
	neg.f32 	%r940, %r53;
	fma.rn.f32 	%r941, %r6, %r330, %r940;
	fma.rn.f32 	%r942, %r6, %r331, %r940;
	fma.rn.f32 	%r943, %r6, %r332, %r937;
	fma.rn.f32 	%r944, %r6, %r333, %r937;
	fma.rn.f32 	%r945, %r6, %r334, %r940;
	fma.rn.f32 	%r946, %r6, %r335, %r940;
	fma.rn.f32 	%r947, %r6, %r336, %r937;
	fma.rn.f32 	%r948, %r6, %r337, %r937;
	fma.rn.f32 	%r949, %r6, %r338, %r940;
	fma.rn.f32 	%r950, %r6, %r339, %r940;
	fma.rn.f32 	%r951, %r6, %r340, %r937;
	fma.rn.f32 	%r952, %r6, %r341, %r937;
	fma.rn.f32 	%r953, %r6, %r342, %r940;
	fma.rn.f32 	%r954, %r6, %r343, %r940;
	fma.rn.f32 	%r955, %r6, %r344, %r937;
	fma.rn.f32 	%r956, %r6, %r345, %r937;
	fma.rn.f32 	%r957, %r6, %r346, %r940;
	fma.rn.f32 	%r958, %r6, %r347, %r940;
	fma.rn.f32 	%r959, %r6, %r348, %r937;
	fma.rn.f32 	%r960, %r6, %r349, %r937;
	fma.rn.f32 	%r961, %r6, %r350, %r940;
	fma.rn.f32 	%r962, %r6, %r351, %r940;
	fma.rn.f32 	%r963, %r6, %r352, %r937;
	fma.rn.f32 	%r964, %r6, %r353, %r937;
	fma.rn.f32 	%r965, %r6, %r354, %r940;
	fma.rn.f32 	%r966, %r6, %r355, %r940;
	fma.rn.f32 	%r967, %r6, %r356, %r937;
	fma.rn.f32 	%r968, %r6, %r357, %r937;
	fma.rn.f32 	%r969, %r6, %r358, %r940;
	fma.rn.f32 	%r970, %r6, %r359, %r940;
	.loc	1 57 25                         // gqa.py:57:25 @[ gqa.py:185:82 ]
	ex2.approx.ftz.f32 	%r971, %r938;
	ex2.approx.ftz.f32 	%r972, %r939;
	ex2.approx.ftz.f32 	%r973, %r941;
	ex2.approx.ftz.f32 	%r974, %r942;
	ex2.approx.ftz.f32 	%r975, %r943;
	ex2.approx.ftz.f32 	%r976, %r944;
	ex2.approx.ftz.f32 	%r977, %r945;
	ex2.approx.ftz.f32 	%r978, %r946;
	ex2.approx.ftz.f32 	%r979, %r947;
	ex2.approx.ftz.f32 	%r980, %r948;
	ex2.approx.ftz.f32 	%r981, %r949;
	ex2.approx.ftz.f32 	%r982, %r950;
	ex2.approx.ftz.f32 	%r983, %r951;
	ex2.approx.ftz.f32 	%r984, %r952;
	ex2.approx.ftz.f32 	%r985, %r953;
	ex2.approx.ftz.f32 	%r986, %r954;
	ex2.approx.ftz.f32 	%r987, %r955;
	ex2.approx.ftz.f32 	%r988, %r956;
	ex2.approx.ftz.f32 	%r989, %r957;
	ex2.approx.ftz.f32 	%r990, %r958;
	ex2.approx.ftz.f32 	%r991, %r959;
	ex2.approx.ftz.f32 	%r992, %r960;
	ex2.approx.ftz.f32 	%r993, %r961;
	ex2.approx.ftz.f32 	%r994, %r962;
	ex2.approx.ftz.f32 	%r995, %r963;
	ex2.approx.ftz.f32 	%r996, %r964;
	ex2.approx.ftz.f32 	%r997, %r965;
	ex2.approx.ftz.f32 	%r998, %r966;
	ex2.approx.ftz.f32 	%r999, %r967;
	ex2.approx.ftz.f32 	%r1000, %r968;
	ex2.approx.ftz.f32 	%r1001, %r969;
	ex2.approx.ftz.f32 	%r1002, %r970;
	.loc	2 260 15                        // standard.py:260:15 @[ gqa.py:185:82 ]
	add.f32 	%r1003, %r971, %r972;
	add.f32 	%r1004, %r973, %r974;
	add.f32 	%r1005, %r1003, %r975;
	add.f32 	%r1006, %r1005, %r976;
	add.f32 	%r1007, %r1004, %r977;
	add.f32 	%r1008, %r1007, %r978;
	add.f32 	%r1009, %r1006, %r979;
	add.f32 	%r1010, %r1009, %r980;
	add.f32 	%r1011, %r1008, %r981;
	add.f32 	%r1012, %r1011, %r982;
	add.f32 	%r1013, %r1010, %r983;
	add.f32 	%r1014, %r1013, %r984;
	add.f32 	%r1015, %r1012, %r985;
	add.f32 	%r1016, %r1015, %r986;
	add.f32 	%r1017, %r1014, %r987;
	add.f32 	%r1018, %r1017, %r988;
	add.f32 	%r1019, %r1016, %r989;
	add.f32 	%r1020, %r1019, %r990;
	add.f32 	%r1021, %r1018, %r991;
	add.f32 	%r1022, %r1021, %r992;
	add.f32 	%r1023, %r1020, %r993;
	add.f32 	%r1024, %r1023, %r994;
	add.f32 	%r1025, %r1022, %r995;
	add.f32 	%r1026, %r1025, %r996;
	add.f32 	%r1027, %r1024, %r997;
	add.f32 	%r1028, %r1027, %r998;
	add.f32 	%r1029, %r1026, %r999;
	add.f32 	%r1030, %r1029, %r1000;
	add.f32 	%r1031, %r1028, %r1001;
	add.f32 	%r1032, %r1031, %r1002;
	.loc	2 290 36                        // standard.py:290:36 @[ gqa.py:185:82 ]
	shfl.sync.bfly.b32 	%r1033, %r1030, 2, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ gqa.py:185:82 ]
	add.f32 	%r1034, %r1030, %r1033;
	.loc	2 290 36                        // standard.py:290:36 @[ gqa.py:185:82 ]
	shfl.sync.bfly.b32 	%r1035, %r1034, 1, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ gqa.py:185:82 ]
	add.f32 	%r1036, %r1034, %r1035;
	.loc	2 290 36                        // standard.py:290:36 @[ gqa.py:185:82 ]
	shfl.sync.bfly.b32 	%r1037, %r1032, 2, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ gqa.py:185:82 ]
	add.f32 	%r1038, %r1032, %r1037;
	.loc	2 290 36                        // standard.py:290:36 @[ gqa.py:185:82 ]
	shfl.sync.bfly.b32 	%r1039, %r1038, 1, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ gqa.py:185:82 ]
	add.f32 	%r1040, %r1038, %r1039;
	.loc	1 60 35                         // gqa.py:60:35 @[ gqa.py:185:82 ]
	sub.f32 	%r1041, %r1315, %r52;
	sub.f32 	%r1042, %r1316, %r53;
	.loc	1 60 29                         // gqa.py:60:29 @[ gqa.py:185:82 ]
	ex2.approx.ftz.f32 	%r1043, %r1041;
	ex2.approx.ftz.f32 	%r1044, %r1042;
	.loc	1 61 28                         // gqa.py:61:28 @[ gqa.py:185:82 ]
	fma.rn.f32 	%r1349, %r1349, %r1043, %r1036;
	fma.rn.f32 	%r1350, %r1350, %r1044, %r1040;
	.loc	1 63 20                         // gqa.py:63:20 @[ gqa.py:185:82 ]
	mul.f32 	%r664, %r664, %r1043;
	mul.f32 	%r665, %r665, %r1043;
	mul.f32 	%r666, %r666, %r1044;
	mul.f32 	%r667, %r667, %r1044;
	mul.f32 	%r668, %r668, %r1043;
	mul.f32 	%r669, %r669, %r1043;
	mul.f32 	%r670, %r670, %r1044;
	mul.f32 	%r671, %r671, %r1044;
	mul.f32 	%r672, %r672, %r1043;
	mul.f32 	%r673, %r673, %r1043;
	mul.f32 	%r674, %r674, %r1044;
	mul.f32 	%r675, %r675, %r1044;
	mul.f32 	%r676, %r676, %r1043;
	mul.f32 	%r677, %r677, %r1043;
	mul.f32 	%r678, %r678, %r1044;
	mul.f32 	%r679, %r679, %r1044;
	mul.f32 	%r680, %r680, %r1043;
	mul.f32 	%r681, %r681, %r1043;
	mul.f32 	%r682, %r682, %r1044;
	mul.f32 	%r683, %r683, %r1044;
	mul.f32 	%r684, %r684, %r1043;
	mul.f32 	%r685, %r685, %r1043;
	mul.f32 	%r686, %r686, %r1044;
	mul.f32 	%r687, %r687, %r1044;
	mul.f32 	%r688, %r688, %r1043;
	mul.f32 	%r689, %r689, %r1043;
	mul.f32 	%r690, %r690, %r1044;
	mul.f32 	%r691, %r691, %r1044;
	mul.f32 	%r692, %r692, %r1043;
	mul.f32 	%r693, %r693, %r1043;
	mul.f32 	%r694, %r694, %r1044;
	mul.f32 	%r695, %r695, %r1044;
	.loc	1 65 20                         // gqa.py:65:20 @[ gqa.py:185:82 ]
	add.s32 	%r1046, %r226, %r877;
	.loc	1 69 21                         // gqa.py:69:21 @[ gqa.py:185:82 ]
	cvt.rn.f16x2.f32 	%r660, %r972, %r971;
	cvt.rn.f16x2.f32 	%r661, %r974, %r973;
	cvt.rn.f16x2.f32 	%r662, %r976, %r975;
	cvt.rn.f16x2.f32 	%r663, %r978, %r977;
	cvt.rn.f16x2.f32 	%r728, %r980, %r979;
	cvt.rn.f16x2.f32 	%r729, %r982, %r981;
	cvt.rn.f16x2.f32 	%r730, %r984, %r983;
	cvt.rn.f16x2.f32 	%r731, %r986, %r985;
	cvt.rn.f16x2.f32 	%r796, %r988, %r987;
	cvt.rn.f16x2.f32 	%r797, %r990, %r989;
	cvt.rn.f16x2.f32 	%r798, %r992, %r991;
	cvt.rn.f16x2.f32 	%r799, %r994, %r993;
	cvt.rn.f16x2.f32 	%r864, %r996, %r995;
	cvt.rn.f16x2.f32 	%r865, %r998, %r997;
	cvt.rn.f16x2.f32 	%r866, %r1000, %r999;
	cvt.rn.f16x2.f32 	%r867, %r1002, %r1001;
	.loc	1 70 27                         // gqa.py:70:27 @[ gqa.py:185:82 ]
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r1047, %r1046, 4, 14;
	cvt.u64.u32 	%rd147, %r1047;
	or.b64 	%rd131, %rd147, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672,%r673,%r674,%r675,%r676,%r677,%r678,%r679,%r680,%r681,%r682,%r683,%r684,%r685,%r686,%r687,%r688,%r689,%r690,%r691,%r692,%r693,%r694,%r695}, {%r660,%r661,%r662,%r663}, %rd131, %p1, 1, 1, 1;
	// end inline asm
	add.s32 	%r1048, %r1046, 2048;
	bfe.u32 	%r1049, %r1048, 4, 14;
	cvt.u64.u32 	%rd148, %r1049;
	or.b64 	%rd132, %rd148, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672,%r673,%r674,%r675,%r676,%r677,%r678,%r679,%r680,%r681,%r682,%r683,%r684,%r685,%r686,%r687,%r688,%r689,%r690,%r691,%r692,%r693,%r694,%r695}, {%r728,%r729,%r730,%r731}, %rd132, %p1, 1, 1, 1;
	// end inline asm
	add.s32 	%r1050, %r1046, 4096;
	bfe.u32 	%r1051, %r1050, 4, 14;
	cvt.u64.u32 	%rd149, %r1051;
	or.b64 	%rd133, %rd149, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672,%r673,%r674,%r675,%r676,%r677,%r678,%r679,%r680,%r681,%r682,%r683,%r684,%r685,%r686,%r687,%r688,%r689,%r690,%r691,%r692,%r693,%r694,%r695}, {%r796,%r797,%r798,%r799}, %rd133, %p1, 1, 1, 1;
	// end inline asm
	add.s32 	%r1052, %r1046, 6144;
	bfe.u32 	%r1053, %r1052, 4, 14;
	cvt.u64.u32 	%rd150, %r1053;
	or.b64 	%rd134, %rd150, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.f16.f16 {%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672,%r673,%r674,%r675,%r676,%r677,%r678,%r679,%r680,%r681,%r682,%r683,%r684,%r685,%r686,%r687,%r688,%r689,%r690,%r691,%r692,%r693,%r694,%r695}, {%r864,%r865,%r866,%r867}, %rd134, %p1, 1, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	.loc	1 44 33                         // gqa.py:44:33 @[ gqa.py:185:82 ]
	add.s32 	%r1054, %r1314, 1;
	setp.gt.s32 	%p10, %r1054, 3;
	selp.b32 	%r1314, 0, %r1054, %p10;
	.loc	1 47 20                         // gqa.py:47:20 @[ gqa.py:185:82 ]
	add.s64 	%rd135, %rd175, %rd7;
	add.s64 	%rd136, %rd177, %rd7;
	shl.b32 	%r1055, %r1314, 13;
	add.s32 	%r1056, %r201, %r1055;
	bar.sync 	0;
	add.s32 	%r868, %r1056, %r200;
	add.s32 	%r870, %r1056, %r208;
	selp.b32 	%r869, 16, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r868 + 0 ], [ %rd135 + 0 ], 0x10, %r869;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r870 + 0 ], [ %rd136 + 0 ], 0x10, %r869;
	// end inline asm
	cp.async.commit_group;
	.loc	1 65 20                         // gqa.py:65:20 @[ gqa.py:185:82 ]
	add.s64 	%rd137, %rd176, %rd7;
	add.s64 	%rd138, %rd178, %rd7;
	add.s32 	%r1059, %r226, %r1055;
	add.s32 	%r872, %r1059, %r200;
	add.s32 	%r874, %r1059, %r208;
	// begin inline asm
	cp.async.cg.shared.global [ %r872 + 0 ], [ %rd137 + 0 ], 0x10, %r869;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r874 + 0 ], [ %rd138 + 0 ], 0x10, %r869;
	// end inline asm
	cp.async.commit_group;
	.loc	1 44 33                         // gqa.py:44:33 @[ gqa.py:185:82 ]
	add.s64 	%rd178, %rd178, %rd9;
	add.s64 	%rd177, %rd177, %rd11;
	add.s64 	%rd176, %rd176, %rd9;
	add.s64 	%rd175, %rd175, %rd11;
	setp.lt.u32 	%p11, %r1312, 4032;
	mov.b32 	%r1315, %r52;
	mov.b32 	%r1316, %r53;
	@%p11 bra 	$L__BB0_1;
// %bb.2:
	// begin inline asm
	// wait for regs: %r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672,%r673,%r674,%r675,%r676,%r677,%r678,%r679,%r680,%r681,%r682,%r683,%r684,%r685,%r686,%r687,%r688,%r689,%r690,%r691,%r692,%r693,%r694,%r695
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	cp.async.wait_group 	0;
	bar.sync 	0;
$L__tmp2:
	.loc	1 198 24                        // gqa.py:198:24
	setp.lt.f32 	%p12, %r1349, 0f00800000;
	mul.f32 	%r1124, %r1349, 0f4B000000;
	selp.f32 	%r121, %r1124, %r1349, %p12;
	selp.f32 	%r1125, 0fC1B80000, 0f00000000, %p12;
	add.s32 	%r1126, %r121, -1060439283;
	and.b32 	%r1127, %r1126, -8388608;
	sub.s32 	%r1128, %r121, %r1127;
	cvt.rn.f32.s32 	%r1129, %r1127;
	mov.b32 	%r1130, 0f34000000;
	fma.rn.ftz.f32 	%r1131, %r1129, %r1130, %r1125;
	add.f32 	%r1132, %r1128, 0fBF800000;
	mov.b32 	%r1133, 0fBE2C7F30;
	mov.b32 	%r1134, 0f3DC6B27F;
	fma.rn.ftz.f32 	%r1135, %r1134, %r1132, %r1133;
	mov.b32 	%r1136, 0f3E2FCF2A;
	fma.rn.ftz.f32 	%r1137, %r1135, %r1132, %r1136;
	mov.b32 	%r1138, 0fBE374E43;
	fma.rn.ftz.f32 	%r1139, %r1137, %r1132, %r1138;
	mov.b32 	%r1140, 0f3E520BF4;
	fma.rn.ftz.f32 	%r1141, %r1139, %r1132, %r1140;
	mov.b32 	%r1142, 0fBE763C8B;
	fma.rn.ftz.f32 	%r1143, %r1141, %r1132, %r1142;
	mov.b32 	%r1144, 0f3E93BF99;
	fma.rn.ftz.f32 	%r1145, %r1143, %r1132, %r1144;
	mov.b32 	%r1146, 0fBEB8AA49;
	fma.rn.ftz.f32 	%r1147, %r1145, %r1132, %r1146;
	mov.b32 	%r1148, 0f3EF6384A;
	fma.rn.ftz.f32 	%r1149, %r1147, %r1132, %r1148;
	mov.b32 	%r1150, 0fBF38AA3B;
	fma.rn.ftz.f32 	%r1151, %r1149, %r1132, %r1150;
	mul.f32 	%r1152, %r1132, %r1151;
	mul.f32 	%r1153, %r1132, %r1152;
	mov.b32 	%r1154, 0f3FB8AA3B;
	fma.rn.ftz.f32 	%r1155, %r1132, %r1154, %r1153;
	add.f32 	%r1351, %r1131, %r1155;
	setp.lt.u32 	%p13, %r121, 2139095040;
	mov.b32 	%r1156, 0f7F800000;
	@%p13 bra 	$L__BB0_4;
// %bb.3:                               // %__nv_fmaf_rn.exit.i.i
	.loc	1 0 24                          // gqa.py:0:24
	fma.rn.ftz.f32 	%r1351, %r121, %r1156, %r1156;
$L__BB0_4:                              // %__nv_log2f.exit
	.loc	1 198 24                        // gqa.py:198:24
	setp.lt.f32 	%p14, %r1350, 0f00800000;
	mul.f32 	%r1157, %r1350, 0f4B000000;
	selp.f32 	%r125, %r1157, %r1350, %p14;
	selp.f32 	%r1158, 0fC1B80000, 0f00000000, %p14;
	add.s32 	%r1159, %r125, -1060439283;
	and.b32 	%r1160, %r1159, -8388608;
	sub.s32 	%r1161, %r125, %r1160;
	cvt.rn.f32.s32 	%r1162, %r1160;
	fma.rn.ftz.f32 	%r1164, %r1162, %r1130, %r1158;
	add.f32 	%r1165, %r1161, 0fBF800000;
	fma.rn.ftz.f32 	%r1168, %r1134, %r1165, %r1133;
	fma.rn.ftz.f32 	%r1170, %r1168, %r1165, %r1136;
	fma.rn.ftz.f32 	%r1172, %r1170, %r1165, %r1138;
	fma.rn.ftz.f32 	%r1174, %r1172, %r1165, %r1140;
	fma.rn.ftz.f32 	%r1176, %r1174, %r1165, %r1142;
	fma.rn.ftz.f32 	%r1178, %r1176, %r1165, %r1144;
	fma.rn.ftz.f32 	%r1180, %r1178, %r1165, %r1146;
	fma.rn.ftz.f32 	%r1182, %r1180, %r1165, %r1148;
	fma.rn.ftz.f32 	%r1184, %r1182, %r1165, %r1150;
	mul.f32 	%r1185, %r1165, %r1184;
	mul.f32 	%r1186, %r1165, %r1185;
	fma.rn.ftz.f32 	%r1188, %r1165, %r1154, %r1186;
	add.f32 	%r1352, %r1164, %r1188;
	setp.lt.u32 	%p15, %r125, 2139095040;
	@%p15 bra 	$L__BB0_6;
// %bb.5:                               // %__nv_fmaf_rn.exit.i.i178
	.loc	1 0 24                          // gqa.py:0:24
	fma.rn.ftz.f32 	%r1352, %r125, %r1156, %r1156;
$L__BB0_6:                              // %__nv_log2f.exit181
	.loc	1 198 24                        // gqa.py:198:24
	setp.eq.f32 	%p17, %r121, 0f00000000;
	selp.f32 	%r1227, 0fFF800000, %r1351, %p17;
	.loc	1 159 19                        // gqa.py:159:19
	add.s64 	%rd157, %rd23, %rd7;
	.loc	1 164 8                         // gqa.py:164:8
	cvt.s64.s32 	%rd158, %r129;
	.loc	1 167 46                        // gqa.py:167:46
	and.b32 	%r1228, %r3, 127;
	.loc	1 167 33                        // gqa.py:167:33
	or.b32 	%r1229, %r2, %r1228;
	.loc	1 167 46                        // gqa.py:167:46
	setp.eq.s32 	%p16, %r5, 0;
	.loc	1 198 24                        // gqa.py:198:24
	setp.eq.f32 	%p18, %r125, 0f00000000;
	selp.f32 	%r1230, 0fFF800000, %r1352, %p18;
	.loc	1 198 11                        // gqa.py:198:11
	add.f32 	%r1231, %r52, %r1227;
	add.f32 	%r1232, %r53, %r1230;
	.loc	1 199 16                        // gqa.py:199:16
	div.full.f32 	%r1233, %r664, %r1349;
	div.full.f32 	%r1234, %r665, %r1349;
	div.full.f32 	%r1235, %r666, %r1350;
	div.full.f32 	%r1236, %r667, %r1350;
	div.full.f32 	%r1237, %r668, %r1349;
	div.full.f32 	%r1238, %r669, %r1349;
	div.full.f32 	%r1239, %r670, %r1350;
	div.full.f32 	%r1240, %r671, %r1350;
	div.full.f32 	%r1241, %r672, %r1349;
	div.full.f32 	%r1242, %r673, %r1349;
	div.full.f32 	%r1243, %r674, %r1350;
	div.full.f32 	%r1244, %r675, %r1350;
	div.full.f32 	%r1245, %r676, %r1349;
	div.full.f32 	%r1246, %r677, %r1349;
	div.full.f32 	%r1247, %r678, %r1350;
	div.full.f32 	%r1248, %r679, %r1350;
	div.full.f32 	%r1249, %r680, %r1349;
	div.full.f32 	%r1250, %r681, %r1349;
	div.full.f32 	%r1251, %r682, %r1350;
	div.full.f32 	%r1252, %r683, %r1350;
	div.full.f32 	%r1253, %r684, %r1349;
	div.full.f32 	%r1254, %r685, %r1349;
	div.full.f32 	%r1255, %r686, %r1350;
	div.full.f32 	%r1256, %r687, %r1350;
	div.full.f32 	%r1257, %r688, %r1349;
	div.full.f32 	%r1258, %r689, %r1349;
	div.full.f32 	%r1259, %r690, %r1350;
	div.full.f32 	%r1260, %r691, %r1350;
	div.full.f32 	%r1261, %r692, %r1349;
	div.full.f32 	%r1262, %r693, %r1349;
	div.full.f32 	%r1263, %r694, %r1350;
	div.full.f32 	%r1264, %r695, %r1350;
	.loc	1 200 26                        // gqa.py:200:26
	shl.b32 	%r1265, %r1, 5;
	.loc	1 200 17                        // gqa.py:200:17
	mul.wide.u32 	%rd159, %r1265, 4;
	add.s64 	%rd160, %rd22, %rd159;
	.loc	1 200 34                        // gqa.py:200:34
	mul.wide.s32 	%rd161, %r1229, 4;
	add.s64 	%rd151, %rd160, %rd161;
	.loc	1 201 21                        // gqa.py:201:21
	shr.u32 	%r1266, %r3, 1;
	shl.b32 	%r1267, %r3, 1;
	and.b32 	%r1268, %r1267, 192;
	add.s32 	%r1270, %r201, %r1268;
	and.b32 	%r1271, %r3, 28;
	add.s32 	%r1272, %r1270, %r1271;
	shl.b32 	%r1273, %r5, 1;
	add.s32 	%r1274, %r1272, %r1273;
	st.shared.b32 	[%r1274], %r1231;
	st.shared.b32 	[%r1274+32], %r1232;
	bar.sync 	0;
	shl.b32 	%r1275, %r1228, 2;
	add.s32 	%r1276, %r201, %r1275;
	ld.shared.b32 	%r1190, [%r1276];
	// begin inline asm
	@%p16 st.global.b32 [ %rd151 + 0 ], { %r1190 };
	// end inline asm
	.loc	1 202 33                        // gqa.py:202:33
	cvt.rn.f16x2.f32 	%r1192, %r1234, %r1233;
	cvt.rn.f16x2.f32 	%r1193, %r1236, %r1235;
	cvt.rn.f16x2.f32 	%r1194, %r1238, %r1237;
	cvt.rn.f16x2.f32 	%r1195, %r1240, %r1239;
	cvt.rn.f16x2.f32 	%r1197, %r1242, %r1241;
	cvt.rn.f16x2.f32 	%r1198, %r1244, %r1243;
	cvt.rn.f16x2.f32 	%r1199, %r1246, %r1245;
	cvt.rn.f16x2.f32 	%r1200, %r1248, %r1247;
	cvt.rn.f16x2.f32 	%r1202, %r1250, %r1249;
	cvt.rn.f16x2.f32 	%r1203, %r1252, %r1251;
	cvt.rn.f16x2.f32 	%r1204, %r1254, %r1253;
	cvt.rn.f16x2.f32 	%r1205, %r1256, %r1255;
	cvt.rn.f16x2.f32 	%r1207, %r1258, %r1257;
	cvt.rn.f16x2.f32 	%r1208, %r1260, %r1259;
	cvt.rn.f16x2.f32 	%r1209, %r1262, %r1261;
	cvt.rn.f16x2.f32 	%r1210, %r1264, %r1263;
	.loc	1 202 26                        // gqa.py:202:26
	mul.lo.s64 	%rd162, %rd2, %rd158;
	mul.lo.s64 	%rd163, %rd3, %rd158;
	mul.lo.s64 	%rd164, %rd4, %rd158;
	mul.lo.s64 	%rd165, %rd5, %rd158;
	shl.b64 	%rd166, %rd162, 1;
	add.s64 	%rd167, %rd157, %rd166;
	shl.b64 	%rd168, %rd6, 1;
	add.s64 	%rd152, %rd167, %rd168;
	shl.b64 	%rd169, %rd163, 1;
	add.s64 	%rd170, %rd157, %rd169;
	add.s64 	%rd153, %rd170, %rd168;
	shl.b64 	%rd171, %rd164, 1;
	add.s64 	%rd172, %rd157, %rd171;
	add.s64 	%rd154, %rd172, %rd168;
	shl.b64 	%rd173, %rd165, 1;
	add.s64 	%rd174, %rd157, %rd173;
	add.s64 	%rd155, %rd174, %rd168;
	bar.sync 	0;
	shl.b32 	%r1277, %r3, 6;
	and.b32 	%r1278, %r1277, 960;
	and.b32 	%r1279, %r1266, 8;
	or.b32 	%r1280, %r1278, %r1279;
	shl.b32 	%r1281, %r3, 5;
	and.b32 	%r1282, %r1281, 3072;
	or.b32 	%r1283, %r1280, %r1282;
	shl.b32 	%r1284, %r5, 5;
	or.b32 	%r1285, %r1283, %r1284;
	and.b32 	%r1286, %r7, 1016;
	or.b32 	%r1287, %r1286, %r8;
	shr.u32 	%r1288, %r1285, 2;
	and.b32 	%r1289, %r1288, 2032;
	add.s32 	%r1290, %r201, %r1289;
	shl.b32 	%r1291, %r1285, 1;
	add.s32 	%r1191, %r1290, %r1291;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1191], {%r1192, %r1193, %r1194, %r1195};
	// end inline asm
	add.s32 	%r1196, %r1191, 32;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1196], {%r1197, %r1198, %r1199, %r1200};
	// end inline asm
	add.s32 	%r1201, %r1191, 64;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1201], {%r1202, %r1203, %r1204, %r1205};
	// end inline asm
	add.s32 	%r1206, %r1191, 96;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1206], {%r1207, %r1208, %r1209, %r1210};
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r1292, %r1287, 2;
	and.b32 	%r1293, %r1292, 496;
	add.s32 	%r1294, %r201, %r1293;
	shl.b32 	%r1295, %r1287, 1;
	add.s32 	%r1296, %r1294, %r1295;
	ld.shared.v4.b32 	{%r1211, %r1212, %r1213, %r1214}, [%r1296];
	or.b32 	%r1297, %r1287, 2048;
	shr.u32 	%r1298, %r1297, 2;
	and.b32 	%r1299, %r1298, 1008;
	add.s32 	%r1300, %r201, %r1299;
	add.s32 	%r1301, %r1300, %r1295;
	ld.shared.v4.b32 	{%r1215, %r1216, %r1217, %r1218}, [%r1301+4096];
	or.b32 	%r1302, %r1287, 4096;
	shr.u32 	%r1303, %r1302, 2;
	and.b32 	%r1304, %r1303, 1520;
	add.s32 	%r1305, %r201, %r1304;
	add.s32 	%r1306, %r1305, %r1295;
	ld.shared.v4.b32 	{%r1219, %r1220, %r1221, %r1222}, [%r1306+8192];
	or.b32 	%r1307, %r1287, 6144;
	shr.u32 	%r1308, %r1307, 2;
	and.b32 	%r1309, %r1308, 2032;
	add.s32 	%r1310, %r201, %r1309;
	add.s32 	%r1311, %r1310, %r1295;
	ld.shared.v4.b32 	{%r1223, %r1224, %r1225, %r1226}, [%r1311+12288];
	// begin inline asm
	st.global.v4.b32 [ %rd152 + 0 ], { %r1211, %r1212, %r1213, %r1214 };
	// end inline asm
	// begin inline asm
	st.global.v4.b32 [ %rd153 + 0 ], { %r1215, %r1216, %r1217, %r1218 };
	// end inline asm
	// begin inline asm
	st.global.v4.b32 [ %rd154 + 0 ], { %r1219, %r1220, %r1221, %r1222 };
	// end inline asm
	// begin inline asm
	st.global.v4.b32 [ %rd155 + 0 ], { %r1223, %r1224, %r1225, %r1226 };
	// end inline asm
	.loc	1 202 4                         // gqa.py:202:4
	ret;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/ubuntu/PTX_dataset/triton_ptx/gqa.py"
	.file	2 "/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 123                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x74 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 103                                 // DW_AT_name
.b8 113
.b8 97
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 117
.b8 98
.b8 117
.b8 110
.b8 116
.b8 117
.b8 47
.b8 80
.b8 84
.b8 88
.b8 95
.b8 100
.b8 97
.b8 116
.b8 97
.b8 115
.b8 101
.b8 116
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 116
.b8 120
.b8 0
.b8 2                                   // Abbrev [2] 0x44:0xc DW_TAG_subprogram
.b8 95                                  // DW_AT_name
.b8 97
.b8 116
.b8 116
.b8 110
.b8 95
.b8 102
.b8 119
.b8 100
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x50:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 68                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x65:0x18 DW_TAG_inlined_subroutine
.b32 68                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 185                                 // DW_AT_call_line
.b8 82                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
