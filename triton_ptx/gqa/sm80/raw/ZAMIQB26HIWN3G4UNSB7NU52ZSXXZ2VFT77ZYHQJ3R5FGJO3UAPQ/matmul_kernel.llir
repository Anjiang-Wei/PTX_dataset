; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @matmul_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = add i32 %3, 63, !dbg !9
  %12 = sdiv i32 %11, 64, !dbg !13
  %13 = shl nsw i32 %12, 3, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %14 = sdiv i32 %10, %.frozen, !dbg !15
  %15 = shl i32 %14, 3, !dbg !16
  %16 = sub i32 1, %15, !dbg !17
  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 8), !dbg !18
  %18 = mul i32 %14, %.frozen, !dbg !19
  %.decomposed = sub i32 %10, %18, !dbg !19
  %19 = sdiv i32 %.decomposed, %17, !dbg !20
  %20 = shl i32 %19, 6, !dbg !21
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !22
  %22 = shl nuw nsw i32 %21, 3, !dbg !22
  %23 = and i32 %22, 56, !dbg !22
  %24 = or disjoint i32 %20, %23, !dbg !23
  %25 = srem i32 %24, %3, !dbg !24
  %26 = zext nneg i32 %23 to i64, !dbg !25
  %27 = getelementptr half, ptr addrspace(1) %0, i64 %26, !dbg !25
  %28 = and i32 %21, 16, !dbg !26
  %29 = and i32 %21, 32, !dbg !26
  %30 = and i32 %21, 64, !dbg !26
  %31 = lshr i32 %21, 3, !dbg !26
  %32 = and i32 %31, 15, !dbg !26
  %33 = or disjoint i32 %32, 16, !dbg !26
  %34 = or disjoint i32 %32, 32, !dbg !26
  %35 = or disjoint i32 %32, 48, !dbg !26
  %36 = mul i32 %6, %32, !dbg !27
  %37 = mul i32 %6, %33, !dbg !27
  %38 = mul i32 %6, %34, !dbg !27
  %39 = mul i32 %6, %35, !dbg !27
  %40 = add i32 %25, %36, !dbg !28
  %41 = add i32 %25, %37, !dbg !28
  %42 = add i32 %25, %38, !dbg !28
  %43 = add i32 %25, %39, !dbg !28
  %44 = sext i32 %40 to i64, !dbg !29
  %45 = getelementptr half, ptr addrspace(1) %1, i64 %44, !dbg !29
  %46 = sext i32 %41 to i64, !dbg !29
  %47 = getelementptr half, ptr addrspace(1) %1, i64 %46, !dbg !29
  %48 = sext i32 %42 to i64, !dbg !29
  %49 = getelementptr half, ptr addrspace(1) %1, i64 %48, !dbg !29
  %50 = sext i32 %43 to i64, !dbg !29
  %51 = getelementptr half, ptr addrspace(1) %1, i64 %50, !dbg !29
  %52 = add i32 %4, 63, !dbg !30
  %53 = sdiv i32 %52, 64, !dbg !32
  %54 = shl i32 %6, 6, !dbg !33
  %55 = icmp sgt i32 %52, 63, !dbg !34
  %56 = icmp slt i32 %23, %4, !dbg !35
  %57 = and i1 %56, %55, !dbg !34
  %58 = xor i32 %22, %21, !dbg !36
  %59 = and i32 %58, 56, !dbg !36
  %60 = shl nuw nsw i32 %32, 6, !dbg !36
  %61 = or disjoint i32 %59, %60, !dbg !36
  %62 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %61, !dbg !36
  %63 = or disjoint i32 %61, 1024, !dbg !36
  %64 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %63, !dbg !36
  %65 = or disjoint i32 %61, 2048, !dbg !36
  %66 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %65, !dbg !36
  %67 = or disjoint i32 %61, 3072, !dbg !36
  %68 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %67, !dbg !36
  %69 = or disjoint i32 %61, 4096, !dbg !36
  %70 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %69, !dbg !36
  %71 = or disjoint i32 %61, 5120, !dbg !36
  %72 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %71, !dbg !36
  %73 = or disjoint i32 %61, 6144, !dbg !36
  %74 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %73, !dbg !36
  %75 = or disjoint i32 %61, 7168, !dbg !36
  %76 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %75, !dbg !36
  %77 = select i1 %57, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %62, ptr addrspace(1) %27, i32 %77) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %64, ptr addrspace(1) %27, i32 %77) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %66, ptr addrspace(1) %27, i32 %77) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %68, ptr addrspace(1) %27, i32 %77) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %70, ptr addrspace(1) %27, i32 %77) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %72, ptr addrspace(1) %27, i32 %77) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %74, ptr addrspace(1) %27, i32 %77) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %76, ptr addrspace(1) %27, i32 %77) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %78 = icmp slt i32 %32, %4, !dbg !37
  %79 = icmp slt i32 %33, %4, !dbg !37
  %80 = icmp slt i32 %34, %4, !dbg !37
  %81 = icmp slt i32 %35, %4, !dbg !37
  %82 = and i1 %78, %55, !dbg !34
  %83 = and i1 %79, %55, !dbg !34
  %84 = and i1 %80, %55, !dbg !34
  %85 = and i1 %81, %55, !dbg !34
  %86 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %61, !dbg !38
  %87 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %63, !dbg !38
  %88 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %65, !dbg !38
  %89 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %67, !dbg !38
  %90 = select i1 %82, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %86, ptr addrspace(1) %45, i32 %90) #2, !dbg !38
  %91 = select i1 %83, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %87, ptr addrspace(1) %47, i32 %91) #2, !dbg !38
  %92 = select i1 %84, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %88, ptr addrspace(1) %49, i32 %92) #2, !dbg !38
  %93 = select i1 %85, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %89, ptr addrspace(1) %51, i32 %93) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %94 = icmp sgt i32 %52, 127, !dbg !34
  %95 = getelementptr i8, ptr addrspace(1) %27, i64 128, !dbg !39
  %96 = sext i32 %54 to i64, !dbg !40
  %97 = getelementptr half, ptr addrspace(1) %45, i64 %96, !dbg !40
  %98 = getelementptr half, ptr addrspace(1) %47, i64 %96, !dbg !40
  %99 = getelementptr half, ptr addrspace(1) %49, i64 %96, !dbg !40
  %100 = getelementptr half, ptr addrspace(1) %51, i64 %96, !dbg !40
  %101 = add i32 %4, -64, !dbg !41
  %102 = icmp slt i32 %23, %101, !dbg !35
  %103 = and i1 %94, %102, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %104 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %61, !dbg !36
  %105 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %63, !dbg !36
  %106 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %65, !dbg !36
  %107 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %67, !dbg !36
  %108 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %69, !dbg !36
  %109 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %71, !dbg !36
  %110 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %73, !dbg !36
  %111 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %75, !dbg !36
  %112 = select i1 %103, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %104, ptr addrspace(1) %95, i32 %112) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %105, ptr addrspace(1) %95, i32 %112) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %106, ptr addrspace(1) %95, i32 %112) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %107, ptr addrspace(1) %95, i32 %112) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %108, ptr addrspace(1) %95, i32 %112) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %109, ptr addrspace(1) %95, i32 %112) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %110, ptr addrspace(1) %95, i32 %112) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %111, ptr addrspace(1) %95, i32 %112) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %113 = icmp slt i32 %32, %101, !dbg !37
  %114 = icmp slt i32 %33, %101, !dbg !37
  %115 = icmp slt i32 %34, %101, !dbg !37
  %116 = icmp slt i32 %35, %101, !dbg !37
  %117 = and i1 %94, %113, !dbg !34
  %118 = and i1 %94, %114, !dbg !34
  %119 = and i1 %94, %115, !dbg !34
  %120 = and i1 %94, %116, !dbg !34
  %121 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %61, !dbg !38
  %122 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %63, !dbg !38
  %123 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %65, !dbg !38
  %124 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %67, !dbg !38
  %125 = select i1 %117, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %121, ptr addrspace(1) %97, i32 %125) #2, !dbg !38
  %126 = select i1 %118, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %122, ptr addrspace(1) %98, i32 %126) #2, !dbg !38
  %127 = select i1 %119, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %123, ptr addrspace(1) %99, i32 %127) #2, !dbg !38
  %128 = select i1 %120, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %124, ptr addrspace(1) %100, i32 %128) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %129 = icmp sgt i32 %52, 191, !dbg !34
  %130 = getelementptr i8, ptr addrspace(1) %27, i64 256, !dbg !39
  %131 = getelementptr half, ptr addrspace(1) %97, i64 %96, !dbg !40
  %132 = getelementptr half, ptr addrspace(1) %98, i64 %96, !dbg !40
  %133 = getelementptr half, ptr addrspace(1) %99, i64 %96, !dbg !40
  %134 = getelementptr half, ptr addrspace(1) %100, i64 %96, !dbg !40
  %135 = add i32 %4, -128, !dbg !41
  %136 = icmp slt i32 %23, %135, !dbg !35
  %137 = and i1 %129, %136, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %138 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %61, !dbg !36
  %139 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %63, !dbg !36
  %140 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %65, !dbg !36
  %141 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %67, !dbg !36
  %142 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %69, !dbg !36
  %143 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %71, !dbg !36
  %144 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %73, !dbg !36
  %145 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %75, !dbg !36
  %146 = select i1 %137, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %138, ptr addrspace(1) %130, i32 %146) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %139, ptr addrspace(1) %130, i32 %146) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %140, ptr addrspace(1) %130, i32 %146) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %141, ptr addrspace(1) %130, i32 %146) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %142, ptr addrspace(1) %130, i32 %146) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %143, ptr addrspace(1) %130, i32 %146) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %144, ptr addrspace(1) %130, i32 %146) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %145, ptr addrspace(1) %130, i32 %146) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %147 = icmp slt i32 %32, %135, !dbg !37
  %148 = icmp slt i32 %33, %135, !dbg !37
  %149 = icmp slt i32 %34, %135, !dbg !37
  %150 = icmp slt i32 %35, %135, !dbg !37
  %151 = and i1 %129, %147, !dbg !34
  %152 = and i1 %129, %148, !dbg !34
  %153 = and i1 %129, %149, !dbg !34
  %154 = and i1 %129, %150, !dbg !34
  %155 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %61, !dbg !38
  %156 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %63, !dbg !38
  %157 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %65, !dbg !38
  %158 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %67, !dbg !38
  %159 = select i1 %151, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %155, ptr addrspace(1) %131, i32 %159) #2, !dbg !38
  %160 = select i1 %152, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %156, ptr addrspace(1) %132, i32 %160) #2, !dbg !38
  %161 = select i1 %153, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %157, ptr addrspace(1) %133, i32 %161) #2, !dbg !38
  %162 = select i1 %154, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %158, ptr addrspace(1) %134, i32 %162) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  br i1 %55, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !34

.._crit_edge_crit_edge:                           ; preds = %9
  %.pre = lshr exact i32 %29, 2, !dbg !42
  %.pre368 = shl nuw nsw i32 %30, 4, !dbg !42
  br label %._crit_edge, !dbg !34

.lr.ph:                                           ; preds = %9
  %163 = and i32 %21, 4, !dbg !22
  %164 = icmp eq i32 %163, 0, !dbg !22
  %165 = add nsw i32 %53, -3
  %166 = and i32 %21, 3
  %167 = mul nuw nsw i32 %166, 72
  %168 = select i1 %164, i32 0, i32 288
  %169 = xor i32 %168, %167
  %170 = shl nuw nsw i32 %21, 6
  %171 = and i32 %170, 512
  %172 = or disjoint i32 %169, %171
  %173 = lshr exact i32 %28, 1
  %174 = xor i32 %172, %173
  %175 = shl nuw nsw i32 %30, 4
  %176 = or disjoint i32 %174, %175
  %177 = xor i32 %176, 16
  %178 = xor i32 %176, 32
  %179 = xor i32 %176, 48
  %180 = xor i32 %176, 2048
  %181 = xor i32 %176, 2064
  %182 = xor i32 %176, 2080
  %183 = xor i32 %176, 2096
  %184 = xor i32 %176, 4096
  %185 = xor i32 %176, 4112
  %186 = xor i32 %176, 4128
  %187 = xor i32 %176, 4144
  %188 = xor i32 %176, 6144
  %189 = xor i32 %176, 6160
  %190 = xor i32 %176, 6176
  %191 = xor i32 %176, 6192
  %192 = and i32 %170, 1536
  %193 = or disjoint i32 %169, %192
  %194 = lshr exact i32 %29, 2
  %195 = xor i32 %193, %194
  %196 = xor i32 %195, 16
  %197 = xor i32 %195, 2064
  %198 = xor i32 %195, 32
  %199 = xor i32 %195, 2080
  %200 = xor i32 %195, 48
  %201 = xor i32 %195, 2096
  %.neg354 = add nsw i32 %4, -192
  br label %202, !dbg !34

202:                                              ; preds = %.lr.ph, %202
  %203 = phi i32 [ -1, %.lr.ph ], [ %273, %202 ]
  %204 = phi i32 [ 2, %.lr.ph ], [ %771, %202 ]
  %.pn144366 = phi ptr addrspace(1) [ %134, %.lr.ph ], [ %768, %202 ]
  %.pn160365 = phi ptr addrspace(1) [ %133, %.lr.ph ], [ %767, %202 ]
  %.pn176364 = phi ptr addrspace(1) [ %132, %.lr.ph ], [ %766, %202 ]
  %.pn192363 = phi ptr addrspace(1) [ %131, %.lr.ph ], [ %765, %202 ]
  %.pn16362 = phi ptr addrspace(1) [ %130, %.lr.ph ], [ %764, %202 ]
  %205 = phi float [ 0.000000e+00, %.lr.ph ], [ %685, %202 ]
  %206 = phi float [ 0.000000e+00, %.lr.ph ], [ %686, %202 ]
  %207 = phi float [ 0.000000e+00, %.lr.ph ], [ %687, %202 ]
  %208 = phi float [ 0.000000e+00, %.lr.ph ], [ %688, %202 ]
  %209 = phi float [ 0.000000e+00, %.lr.ph ], [ %690, %202 ]
  %210 = phi float [ 0.000000e+00, %.lr.ph ], [ %691, %202 ]
  %211 = phi float [ 0.000000e+00, %.lr.ph ], [ %692, %202 ]
  %212 = phi float [ 0.000000e+00, %.lr.ph ], [ %693, %202 ]
  %213 = phi float [ 0.000000e+00, %.lr.ph ], [ %695, %202 ]
  %214 = phi float [ 0.000000e+00, %.lr.ph ], [ %696, %202 ]
  %215 = phi float [ 0.000000e+00, %.lr.ph ], [ %697, %202 ]
  %216 = phi float [ 0.000000e+00, %.lr.ph ], [ %698, %202 ]
  %217 = phi float [ 0.000000e+00, %.lr.ph ], [ %700, %202 ]
  %218 = phi float [ 0.000000e+00, %.lr.ph ], [ %701, %202 ]
  %219 = phi float [ 0.000000e+00, %.lr.ph ], [ %702, %202 ]
  %220 = phi float [ 0.000000e+00, %.lr.ph ], [ %703, %202 ]
  %221 = phi float [ 0.000000e+00, %.lr.ph ], [ %705, %202 ]
  %222 = phi float [ 0.000000e+00, %.lr.ph ], [ %706, %202 ]
  %223 = phi float [ 0.000000e+00, %.lr.ph ], [ %707, %202 ]
  %224 = phi float [ 0.000000e+00, %.lr.ph ], [ %708, %202 ]
  %225 = phi float [ 0.000000e+00, %.lr.ph ], [ %710, %202 ]
  %226 = phi float [ 0.000000e+00, %.lr.ph ], [ %711, %202 ]
  %227 = phi float [ 0.000000e+00, %.lr.ph ], [ %712, %202 ]
  %228 = phi float [ 0.000000e+00, %.lr.ph ], [ %713, %202 ]
  %229 = phi float [ 0.000000e+00, %.lr.ph ], [ %715, %202 ]
  %230 = phi float [ 0.000000e+00, %.lr.ph ], [ %716, %202 ]
  %231 = phi float [ 0.000000e+00, %.lr.ph ], [ %717, %202 ]
  %232 = phi float [ 0.000000e+00, %.lr.ph ], [ %718, %202 ]
  %233 = phi float [ 0.000000e+00, %.lr.ph ], [ %720, %202 ]
  %234 = phi float [ 0.000000e+00, %.lr.ph ], [ %721, %202 ]
  %235 = phi float [ 0.000000e+00, %.lr.ph ], [ %722, %202 ]
  %236 = phi float [ 0.000000e+00, %.lr.ph ], [ %723, %202 ]
  %237 = phi float [ 0.000000e+00, %.lr.ph ], [ %725, %202 ]
  %238 = phi float [ 0.000000e+00, %.lr.ph ], [ %726, %202 ]
  %239 = phi float [ 0.000000e+00, %.lr.ph ], [ %727, %202 ]
  %240 = phi float [ 0.000000e+00, %.lr.ph ], [ %728, %202 ]
  %241 = phi float [ 0.000000e+00, %.lr.ph ], [ %730, %202 ]
  %242 = phi float [ 0.000000e+00, %.lr.ph ], [ %731, %202 ]
  %243 = phi float [ 0.000000e+00, %.lr.ph ], [ %732, %202 ]
  %244 = phi float [ 0.000000e+00, %.lr.ph ], [ %733, %202 ]
  %245 = phi float [ 0.000000e+00, %.lr.ph ], [ %735, %202 ]
  %246 = phi float [ 0.000000e+00, %.lr.ph ], [ %736, %202 ]
  %247 = phi float [ 0.000000e+00, %.lr.ph ], [ %737, %202 ]
  %248 = phi float [ 0.000000e+00, %.lr.ph ], [ %738, %202 ]
  %249 = phi float [ 0.000000e+00, %.lr.ph ], [ %740, %202 ]
  %250 = phi float [ 0.000000e+00, %.lr.ph ], [ %741, %202 ]
  %251 = phi float [ 0.000000e+00, %.lr.ph ], [ %742, %202 ]
  %252 = phi float [ 0.000000e+00, %.lr.ph ], [ %743, %202 ]
  %253 = phi float [ 0.000000e+00, %.lr.ph ], [ %745, %202 ]
  %254 = phi float [ 0.000000e+00, %.lr.ph ], [ %746, %202 ]
  %255 = phi float [ 0.000000e+00, %.lr.ph ], [ %747, %202 ]
  %256 = phi float [ 0.000000e+00, %.lr.ph ], [ %748, %202 ]
  %257 = phi float [ 0.000000e+00, %.lr.ph ], [ %750, %202 ]
  %258 = phi float [ 0.000000e+00, %.lr.ph ], [ %751, %202 ]
  %259 = phi float [ 0.000000e+00, %.lr.ph ], [ %752, %202 ]
  %260 = phi float [ 0.000000e+00, %.lr.ph ], [ %753, %202 ]
  %261 = phi float [ 0.000000e+00, %.lr.ph ], [ %755, %202 ]
  %262 = phi float [ 0.000000e+00, %.lr.ph ], [ %756, %202 ]
  %263 = phi float [ 0.000000e+00, %.lr.ph ], [ %757, %202 ]
  %264 = phi float [ 0.000000e+00, %.lr.ph ], [ %758, %202 ]
  %265 = phi float [ 0.000000e+00, %.lr.ph ], [ %760, %202 ]
  %266 = phi float [ 0.000000e+00, %.lr.ph ], [ %761, %202 ]
  %267 = phi float [ 0.000000e+00, %.lr.ph ], [ %762, %202 ]
  %268 = phi float [ 0.000000e+00, %.lr.ph ], [ %763, %202 ]
  %269 = phi i32 [ 0, %.lr.ph ], [ %803, %202 ]
  %270 = icmp slt i32 %269, %165, !dbg !34
  %271 = add i32 %203, 1, !dbg !34
  %272 = icmp sgt i32 %271, 2, !dbg !34
  %273 = select i1 %272, i32 0, i32 %271, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 4), !dbg !36
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %.idx = shl i32 %273, 14, !dbg !36
  %274 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !36
  %275 = getelementptr inbounds nuw half, ptr addrspace(3) %274, i32 %176, !dbg !36
  %276 = ptrtoint ptr addrspace(3) %275 to i32, !dbg !36
  %277 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %276) #2, !dbg !36
  %278 = extractvalue { i32, i32, i32, i32 } %277, 0, !dbg !36
  %279 = extractvalue { i32, i32, i32, i32 } %277, 1, !dbg !36
  %280 = extractvalue { i32, i32, i32, i32 } %277, 2, !dbg !36
  %281 = extractvalue { i32, i32, i32, i32 } %277, 3, !dbg !36
  %282 = getelementptr inbounds nuw half, ptr addrspace(3) %274, i32 %177, !dbg !36
  %283 = ptrtoint ptr addrspace(3) %282 to i32, !dbg !36
  %284 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %283) #2, !dbg !36
  %285 = extractvalue { i32, i32, i32, i32 } %284, 0, !dbg !36
  %286 = extractvalue { i32, i32, i32, i32 } %284, 1, !dbg !36
  %287 = extractvalue { i32, i32, i32, i32 } %284, 2, !dbg !36
  %288 = extractvalue { i32, i32, i32, i32 } %284, 3, !dbg !36
  %289 = getelementptr inbounds nuw half, ptr addrspace(3) %274, i32 %178, !dbg !36
  %290 = ptrtoint ptr addrspace(3) %289 to i32, !dbg !36
  %291 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %290) #2, !dbg !36
  %292 = extractvalue { i32, i32, i32, i32 } %291, 0, !dbg !36
  %293 = extractvalue { i32, i32, i32, i32 } %291, 1, !dbg !36
  %294 = extractvalue { i32, i32, i32, i32 } %291, 2, !dbg !36
  %295 = extractvalue { i32, i32, i32, i32 } %291, 3, !dbg !36
  %296 = getelementptr inbounds nuw half, ptr addrspace(3) %274, i32 %179, !dbg !36
  %297 = ptrtoint ptr addrspace(3) %296 to i32, !dbg !36
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %297) #2, !dbg !36
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !36
  %300 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !36
  %301 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !36
  %302 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !36
  %303 = getelementptr inbounds nuw half, ptr addrspace(3) %274, i32 %180, !dbg !36
  %304 = ptrtoint ptr addrspace(3) %303 to i32, !dbg !36
  %305 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %304) #2, !dbg !36
  %306 = extractvalue { i32, i32, i32, i32 } %305, 0, !dbg !36
  %307 = extractvalue { i32, i32, i32, i32 } %305, 1, !dbg !36
  %308 = extractvalue { i32, i32, i32, i32 } %305, 2, !dbg !36
  %309 = extractvalue { i32, i32, i32, i32 } %305, 3, !dbg !36
  %310 = getelementptr inbounds nuw half, ptr addrspace(3) %274, i32 %181, !dbg !36
  %311 = ptrtoint ptr addrspace(3) %310 to i32, !dbg !36
  %312 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %311) #2, !dbg !36
  %313 = extractvalue { i32, i32, i32, i32 } %312, 0, !dbg !36
  %314 = extractvalue { i32, i32, i32, i32 } %312, 1, !dbg !36
  %315 = extractvalue { i32, i32, i32, i32 } %312, 2, !dbg !36
  %316 = extractvalue { i32, i32, i32, i32 } %312, 3, !dbg !36
  %317 = getelementptr inbounds nuw half, ptr addrspace(3) %274, i32 %182, !dbg !36
  %318 = ptrtoint ptr addrspace(3) %317 to i32, !dbg !36
  %319 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %318) #2, !dbg !36
  %320 = extractvalue { i32, i32, i32, i32 } %319, 0, !dbg !36
  %321 = extractvalue { i32, i32, i32, i32 } %319, 1, !dbg !36
  %322 = extractvalue { i32, i32, i32, i32 } %319, 2, !dbg !36
  %323 = extractvalue { i32, i32, i32, i32 } %319, 3, !dbg !36
  %324 = getelementptr inbounds nuw half, ptr addrspace(3) %274, i32 %183, !dbg !36
  %325 = ptrtoint ptr addrspace(3) %324 to i32, !dbg !36
  %326 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %325) #2, !dbg !36
  %327 = extractvalue { i32, i32, i32, i32 } %326, 0, !dbg !36
  %328 = extractvalue { i32, i32, i32, i32 } %326, 1, !dbg !36
  %329 = extractvalue { i32, i32, i32, i32 } %326, 2, !dbg !36
  %330 = extractvalue { i32, i32, i32, i32 } %326, 3, !dbg !36
  %331 = getelementptr inbounds nuw half, ptr addrspace(3) %274, i32 %184, !dbg !36
  %332 = ptrtoint ptr addrspace(3) %331 to i32, !dbg !36
  %333 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %332) #2, !dbg !36
  %334 = extractvalue { i32, i32, i32, i32 } %333, 0, !dbg !36
  %335 = extractvalue { i32, i32, i32, i32 } %333, 1, !dbg !36
  %336 = extractvalue { i32, i32, i32, i32 } %333, 2, !dbg !36
  %337 = extractvalue { i32, i32, i32, i32 } %333, 3, !dbg !36
  %338 = getelementptr inbounds nuw half, ptr addrspace(3) %274, i32 %185, !dbg !36
  %339 = ptrtoint ptr addrspace(3) %338 to i32, !dbg !36
  %340 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %339) #2, !dbg !36
  %341 = extractvalue { i32, i32, i32, i32 } %340, 0, !dbg !36
  %342 = extractvalue { i32, i32, i32, i32 } %340, 1, !dbg !36
  %343 = extractvalue { i32, i32, i32, i32 } %340, 2, !dbg !36
  %344 = extractvalue { i32, i32, i32, i32 } %340, 3, !dbg !36
  %345 = getelementptr inbounds nuw half, ptr addrspace(3) %274, i32 %186, !dbg !36
  %346 = ptrtoint ptr addrspace(3) %345 to i32, !dbg !36
  %347 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %346) #2, !dbg !36
  %348 = extractvalue { i32, i32, i32, i32 } %347, 0, !dbg !36
  %349 = extractvalue { i32, i32, i32, i32 } %347, 1, !dbg !36
  %350 = extractvalue { i32, i32, i32, i32 } %347, 2, !dbg !36
  %351 = extractvalue { i32, i32, i32, i32 } %347, 3, !dbg !36
  %352 = getelementptr inbounds nuw half, ptr addrspace(3) %274, i32 %187, !dbg !36
  %353 = ptrtoint ptr addrspace(3) %352 to i32, !dbg !36
  %354 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %353) #2, !dbg !36
  %355 = extractvalue { i32, i32, i32, i32 } %354, 0, !dbg !36
  %356 = extractvalue { i32, i32, i32, i32 } %354, 1, !dbg !36
  %357 = extractvalue { i32, i32, i32, i32 } %354, 2, !dbg !36
  %358 = extractvalue { i32, i32, i32, i32 } %354, 3, !dbg !36
  %359 = getelementptr inbounds nuw half, ptr addrspace(3) %274, i32 %188, !dbg !36
  %360 = ptrtoint ptr addrspace(3) %359 to i32, !dbg !36
  %361 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %360) #2, !dbg !36
  %362 = extractvalue { i32, i32, i32, i32 } %361, 0, !dbg !36
  %363 = extractvalue { i32, i32, i32, i32 } %361, 1, !dbg !36
  %364 = extractvalue { i32, i32, i32, i32 } %361, 2, !dbg !36
  %365 = extractvalue { i32, i32, i32, i32 } %361, 3, !dbg !36
  %366 = getelementptr inbounds nuw half, ptr addrspace(3) %274, i32 %189, !dbg !36
  %367 = ptrtoint ptr addrspace(3) %366 to i32, !dbg !36
  %368 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %367) #2, !dbg !36
  %369 = extractvalue { i32, i32, i32, i32 } %368, 0, !dbg !36
  %370 = extractvalue { i32, i32, i32, i32 } %368, 1, !dbg !36
  %371 = extractvalue { i32, i32, i32, i32 } %368, 2, !dbg !36
  %372 = extractvalue { i32, i32, i32, i32 } %368, 3, !dbg !36
  %373 = getelementptr inbounds nuw half, ptr addrspace(3) %274, i32 %190, !dbg !36
  %374 = ptrtoint ptr addrspace(3) %373 to i32, !dbg !36
  %375 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %374) #2, !dbg !36
  %376 = extractvalue { i32, i32, i32, i32 } %375, 0, !dbg !36
  %377 = extractvalue { i32, i32, i32, i32 } %375, 1, !dbg !36
  %378 = extractvalue { i32, i32, i32, i32 } %375, 2, !dbg !36
  %379 = extractvalue { i32, i32, i32, i32 } %375, 3, !dbg !36
  %380 = getelementptr inbounds nuw half, ptr addrspace(3) %274, i32 %191, !dbg !36
  %381 = ptrtoint ptr addrspace(3) %380 to i32, !dbg !36
  %382 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %381) #2, !dbg !36
  %383 = extractvalue { i32, i32, i32, i32 } %382, 0, !dbg !36
  %384 = extractvalue { i32, i32, i32, i32 } %382, 1, !dbg !36
  %385 = extractvalue { i32, i32, i32, i32 } %382, 2, !dbg !36
  %386 = extractvalue { i32, i32, i32, i32 } %382, 3, !dbg !36
  %.idx287 = shl i32 %273, 13, !dbg !38
  %387 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %.idx287, !dbg !38
  %388 = getelementptr inbounds nuw half, ptr addrspace(3) %387, i32 %195, !dbg !38
  %389 = ptrtoint ptr addrspace(3) %388 to i32, !dbg !38
  %390 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %389) #2, !dbg !38
  %391 = extractvalue { i32, i32, i32, i32 } %390, 0, !dbg !38
  %392 = extractvalue { i32, i32, i32, i32 } %390, 1, !dbg !38
  %393 = extractvalue { i32, i32, i32, i32 } %390, 2, !dbg !38
  %394 = extractvalue { i32, i32, i32, i32 } %390, 3, !dbg !38
  %395 = getelementptr inbounds nuw i8, ptr addrspace(3) %388, i32 4096, !dbg !38
  %396 = ptrtoint ptr addrspace(3) %395 to i32, !dbg !38
  %397 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %396) #2, !dbg !38
  %398 = extractvalue { i32, i32, i32, i32 } %397, 0, !dbg !38
  %399 = extractvalue { i32, i32, i32, i32 } %397, 1, !dbg !38
  %400 = extractvalue { i32, i32, i32, i32 } %397, 2, !dbg !38
  %401 = extractvalue { i32, i32, i32, i32 } %397, 3, !dbg !38
  %402 = getelementptr inbounds nuw half, ptr addrspace(3) %387, i32 %196, !dbg !38
  %403 = ptrtoint ptr addrspace(3) %402 to i32, !dbg !38
  %404 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %403) #2, !dbg !38
  %405 = extractvalue { i32, i32, i32, i32 } %404, 0, !dbg !38
  %406 = extractvalue { i32, i32, i32, i32 } %404, 1, !dbg !38
  %407 = extractvalue { i32, i32, i32, i32 } %404, 2, !dbg !38
  %408 = extractvalue { i32, i32, i32, i32 } %404, 3, !dbg !38
  %409 = getelementptr inbounds nuw half, ptr addrspace(3) %387, i32 %197, !dbg !38
  %410 = ptrtoint ptr addrspace(3) %409 to i32, !dbg !38
  %411 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %410) #2, !dbg !38
  %412 = extractvalue { i32, i32, i32, i32 } %411, 0, !dbg !38
  %413 = extractvalue { i32, i32, i32, i32 } %411, 1, !dbg !38
  %414 = extractvalue { i32, i32, i32, i32 } %411, 2, !dbg !38
  %415 = extractvalue { i32, i32, i32, i32 } %411, 3, !dbg !38
  %416 = getelementptr inbounds nuw half, ptr addrspace(3) %387, i32 %198, !dbg !38
  %417 = ptrtoint ptr addrspace(3) %416 to i32, !dbg !38
  %418 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %417) #2, !dbg !38
  %419 = extractvalue { i32, i32, i32, i32 } %418, 0, !dbg !38
  %420 = extractvalue { i32, i32, i32, i32 } %418, 1, !dbg !38
  %421 = extractvalue { i32, i32, i32, i32 } %418, 2, !dbg !38
  %422 = extractvalue { i32, i32, i32, i32 } %418, 3, !dbg !38
  %423 = getelementptr inbounds nuw half, ptr addrspace(3) %387, i32 %199, !dbg !38
  %424 = ptrtoint ptr addrspace(3) %423 to i32, !dbg !38
  %425 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %424) #2, !dbg !38
  %426 = extractvalue { i32, i32, i32, i32 } %425, 0, !dbg !38
  %427 = extractvalue { i32, i32, i32, i32 } %425, 1, !dbg !38
  %428 = extractvalue { i32, i32, i32, i32 } %425, 2, !dbg !38
  %429 = extractvalue { i32, i32, i32, i32 } %425, 3, !dbg !38
  %430 = getelementptr inbounds nuw half, ptr addrspace(3) %387, i32 %200, !dbg !38
  %431 = ptrtoint ptr addrspace(3) %430 to i32, !dbg !38
  %432 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %431) #2, !dbg !38
  %433 = extractvalue { i32, i32, i32, i32 } %432, 0, !dbg !38
  %434 = extractvalue { i32, i32, i32, i32 } %432, 1, !dbg !38
  %435 = extractvalue { i32, i32, i32, i32 } %432, 2, !dbg !38
  %436 = extractvalue { i32, i32, i32, i32 } %432, 3, !dbg !38
  %437 = getelementptr inbounds nuw half, ptr addrspace(3) %387, i32 %201, !dbg !38
  %438 = ptrtoint ptr addrspace(3) %437 to i32, !dbg !38
  %439 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %438) #2, !dbg !38
  %440 = extractvalue { i32, i32, i32, i32 } %439, 0, !dbg !38
  %441 = extractvalue { i32, i32, i32, i32 } %439, 1, !dbg !38
  %442 = extractvalue { i32, i32, i32, i32 } %439, 2, !dbg !38
  %443 = extractvalue { i32, i32, i32, i32 } %439, 3, !dbg !38
  %444 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %205, float %206, float %207, float %208, i32 %278, i32 %279, i32 %280, i32 %281, i32 %391, i32 %392) #2, !dbg !43
  %445 = extractvalue { float, float, float, float } %444, 0, !dbg !43
  %446 = extractvalue { float, float, float, float } %444, 1, !dbg !43
  %447 = extractvalue { float, float, float, float } %444, 2, !dbg !43
  %448 = extractvalue { float, float, float, float } %444, 3, !dbg !43
  %449 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %209, float %210, float %211, float %212, i32 %278, i32 %279, i32 %280, i32 %281, i32 %405, i32 %406) #2, !dbg !43
  %450 = extractvalue { float, float, float, float } %449, 0, !dbg !43
  %451 = extractvalue { float, float, float, float } %449, 1, !dbg !43
  %452 = extractvalue { float, float, float, float } %449, 2, !dbg !43
  %453 = extractvalue { float, float, float, float } %449, 3, !dbg !43
  %454 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %213, float %214, float %215, float %216, i32 %278, i32 %279, i32 %280, i32 %281, i32 %419, i32 %420) #2, !dbg !43
  %455 = extractvalue { float, float, float, float } %454, 0, !dbg !43
  %456 = extractvalue { float, float, float, float } %454, 1, !dbg !43
  %457 = extractvalue { float, float, float, float } %454, 2, !dbg !43
  %458 = extractvalue { float, float, float, float } %454, 3, !dbg !43
  %459 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %217, float %218, float %219, float %220, i32 %278, i32 %279, i32 %280, i32 %281, i32 %433, i32 %434) #2, !dbg !43
  %460 = extractvalue { float, float, float, float } %459, 0, !dbg !43
  %461 = extractvalue { float, float, float, float } %459, 1, !dbg !43
  %462 = extractvalue { float, float, float, float } %459, 2, !dbg !43
  %463 = extractvalue { float, float, float, float } %459, 3, !dbg !43
  %464 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %221, float %222, float %223, float %224, i32 %306, i32 %307, i32 %308, i32 %309, i32 %391, i32 %392) #2, !dbg !43
  %465 = extractvalue { float, float, float, float } %464, 0, !dbg !43
  %466 = extractvalue { float, float, float, float } %464, 1, !dbg !43
  %467 = extractvalue { float, float, float, float } %464, 2, !dbg !43
  %468 = extractvalue { float, float, float, float } %464, 3, !dbg !43
  %469 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %225, float %226, float %227, float %228, i32 %306, i32 %307, i32 %308, i32 %309, i32 %405, i32 %406) #2, !dbg !43
  %470 = extractvalue { float, float, float, float } %469, 0, !dbg !43
  %471 = extractvalue { float, float, float, float } %469, 1, !dbg !43
  %472 = extractvalue { float, float, float, float } %469, 2, !dbg !43
  %473 = extractvalue { float, float, float, float } %469, 3, !dbg !43
  %474 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %229, float %230, float %231, float %232, i32 %306, i32 %307, i32 %308, i32 %309, i32 %419, i32 %420) #2, !dbg !43
  %475 = extractvalue { float, float, float, float } %474, 0, !dbg !43
  %476 = extractvalue { float, float, float, float } %474, 1, !dbg !43
  %477 = extractvalue { float, float, float, float } %474, 2, !dbg !43
  %478 = extractvalue { float, float, float, float } %474, 3, !dbg !43
  %479 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %233, float %234, float %235, float %236, i32 %306, i32 %307, i32 %308, i32 %309, i32 %433, i32 %434) #2, !dbg !43
  %480 = extractvalue { float, float, float, float } %479, 0, !dbg !43
  %481 = extractvalue { float, float, float, float } %479, 1, !dbg !43
  %482 = extractvalue { float, float, float, float } %479, 2, !dbg !43
  %483 = extractvalue { float, float, float, float } %479, 3, !dbg !43
  %484 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %237, float %238, float %239, float %240, i32 %334, i32 %335, i32 %336, i32 %337, i32 %391, i32 %392) #2, !dbg !43
  %485 = extractvalue { float, float, float, float } %484, 0, !dbg !43
  %486 = extractvalue { float, float, float, float } %484, 1, !dbg !43
  %487 = extractvalue { float, float, float, float } %484, 2, !dbg !43
  %488 = extractvalue { float, float, float, float } %484, 3, !dbg !43
  %489 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %241, float %242, float %243, float %244, i32 %334, i32 %335, i32 %336, i32 %337, i32 %405, i32 %406) #2, !dbg !43
  %490 = extractvalue { float, float, float, float } %489, 0, !dbg !43
  %491 = extractvalue { float, float, float, float } %489, 1, !dbg !43
  %492 = extractvalue { float, float, float, float } %489, 2, !dbg !43
  %493 = extractvalue { float, float, float, float } %489, 3, !dbg !43
  %494 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %245, float %246, float %247, float %248, i32 %334, i32 %335, i32 %336, i32 %337, i32 %419, i32 %420) #2, !dbg !43
  %495 = extractvalue { float, float, float, float } %494, 0, !dbg !43
  %496 = extractvalue { float, float, float, float } %494, 1, !dbg !43
  %497 = extractvalue { float, float, float, float } %494, 2, !dbg !43
  %498 = extractvalue { float, float, float, float } %494, 3, !dbg !43
  %499 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %249, float %250, float %251, float %252, i32 %334, i32 %335, i32 %336, i32 %337, i32 %433, i32 %434) #2, !dbg !43
  %500 = extractvalue { float, float, float, float } %499, 0, !dbg !43
  %501 = extractvalue { float, float, float, float } %499, 1, !dbg !43
  %502 = extractvalue { float, float, float, float } %499, 2, !dbg !43
  %503 = extractvalue { float, float, float, float } %499, 3, !dbg !43
  %504 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %253, float %254, float %255, float %256, i32 %362, i32 %363, i32 %364, i32 %365, i32 %391, i32 %392) #2, !dbg !43
  %505 = extractvalue { float, float, float, float } %504, 0, !dbg !43
  %506 = extractvalue { float, float, float, float } %504, 1, !dbg !43
  %507 = extractvalue { float, float, float, float } %504, 2, !dbg !43
  %508 = extractvalue { float, float, float, float } %504, 3, !dbg !43
  %509 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %257, float %258, float %259, float %260, i32 %362, i32 %363, i32 %364, i32 %365, i32 %405, i32 %406) #2, !dbg !43
  %510 = extractvalue { float, float, float, float } %509, 0, !dbg !43
  %511 = extractvalue { float, float, float, float } %509, 1, !dbg !43
  %512 = extractvalue { float, float, float, float } %509, 2, !dbg !43
  %513 = extractvalue { float, float, float, float } %509, 3, !dbg !43
  %514 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %261, float %262, float %263, float %264, i32 %362, i32 %363, i32 %364, i32 %365, i32 %419, i32 %420) #2, !dbg !43
  %515 = extractvalue { float, float, float, float } %514, 0, !dbg !43
  %516 = extractvalue { float, float, float, float } %514, 1, !dbg !43
  %517 = extractvalue { float, float, float, float } %514, 2, !dbg !43
  %518 = extractvalue { float, float, float, float } %514, 3, !dbg !43
  %519 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %265, float %266, float %267, float %268, i32 %362, i32 %363, i32 %364, i32 %365, i32 %433, i32 %434) #2, !dbg !43
  %520 = extractvalue { float, float, float, float } %519, 0, !dbg !43
  %521 = extractvalue { float, float, float, float } %519, 1, !dbg !43
  %522 = extractvalue { float, float, float, float } %519, 2, !dbg !43
  %523 = extractvalue { float, float, float, float } %519, 3, !dbg !43
  %524 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %445, float %446, float %447, float %448, i32 %285, i32 %286, i32 %287, i32 %288, i32 %393, i32 %394) #2, !dbg !43
  %525 = extractvalue { float, float, float, float } %524, 0, !dbg !43
  %526 = extractvalue { float, float, float, float } %524, 1, !dbg !43
  %527 = extractvalue { float, float, float, float } %524, 2, !dbg !43
  %528 = extractvalue { float, float, float, float } %524, 3, !dbg !43
  %529 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %450, float %451, float %452, float %453, i32 %285, i32 %286, i32 %287, i32 %288, i32 %407, i32 %408) #2, !dbg !43
  %530 = extractvalue { float, float, float, float } %529, 0, !dbg !43
  %531 = extractvalue { float, float, float, float } %529, 1, !dbg !43
  %532 = extractvalue { float, float, float, float } %529, 2, !dbg !43
  %533 = extractvalue { float, float, float, float } %529, 3, !dbg !43
  %534 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %455, float %456, float %457, float %458, i32 %285, i32 %286, i32 %287, i32 %288, i32 %421, i32 %422) #2, !dbg !43
  %535 = extractvalue { float, float, float, float } %534, 0, !dbg !43
  %536 = extractvalue { float, float, float, float } %534, 1, !dbg !43
  %537 = extractvalue { float, float, float, float } %534, 2, !dbg !43
  %538 = extractvalue { float, float, float, float } %534, 3, !dbg !43
  %539 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %460, float %461, float %462, float %463, i32 %285, i32 %286, i32 %287, i32 %288, i32 %435, i32 %436) #2, !dbg !43
  %540 = extractvalue { float, float, float, float } %539, 0, !dbg !43
  %541 = extractvalue { float, float, float, float } %539, 1, !dbg !43
  %542 = extractvalue { float, float, float, float } %539, 2, !dbg !43
  %543 = extractvalue { float, float, float, float } %539, 3, !dbg !43
  %544 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %465, float %466, float %467, float %468, i32 %313, i32 %314, i32 %315, i32 %316, i32 %393, i32 %394) #2, !dbg !43
  %545 = extractvalue { float, float, float, float } %544, 0, !dbg !43
  %546 = extractvalue { float, float, float, float } %544, 1, !dbg !43
  %547 = extractvalue { float, float, float, float } %544, 2, !dbg !43
  %548 = extractvalue { float, float, float, float } %544, 3, !dbg !43
  %549 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %470, float %471, float %472, float %473, i32 %313, i32 %314, i32 %315, i32 %316, i32 %407, i32 %408) #2, !dbg !43
  %550 = extractvalue { float, float, float, float } %549, 0, !dbg !43
  %551 = extractvalue { float, float, float, float } %549, 1, !dbg !43
  %552 = extractvalue { float, float, float, float } %549, 2, !dbg !43
  %553 = extractvalue { float, float, float, float } %549, 3, !dbg !43
  %554 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %475, float %476, float %477, float %478, i32 %313, i32 %314, i32 %315, i32 %316, i32 %421, i32 %422) #2, !dbg !43
  %555 = extractvalue { float, float, float, float } %554, 0, !dbg !43
  %556 = extractvalue { float, float, float, float } %554, 1, !dbg !43
  %557 = extractvalue { float, float, float, float } %554, 2, !dbg !43
  %558 = extractvalue { float, float, float, float } %554, 3, !dbg !43
  %559 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %480, float %481, float %482, float %483, i32 %313, i32 %314, i32 %315, i32 %316, i32 %435, i32 %436) #2, !dbg !43
  %560 = extractvalue { float, float, float, float } %559, 0, !dbg !43
  %561 = extractvalue { float, float, float, float } %559, 1, !dbg !43
  %562 = extractvalue { float, float, float, float } %559, 2, !dbg !43
  %563 = extractvalue { float, float, float, float } %559, 3, !dbg !43
  %564 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %485, float %486, float %487, float %488, i32 %341, i32 %342, i32 %343, i32 %344, i32 %393, i32 %394) #2, !dbg !43
  %565 = extractvalue { float, float, float, float } %564, 0, !dbg !43
  %566 = extractvalue { float, float, float, float } %564, 1, !dbg !43
  %567 = extractvalue { float, float, float, float } %564, 2, !dbg !43
  %568 = extractvalue { float, float, float, float } %564, 3, !dbg !43
  %569 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %490, float %491, float %492, float %493, i32 %341, i32 %342, i32 %343, i32 %344, i32 %407, i32 %408) #2, !dbg !43
  %570 = extractvalue { float, float, float, float } %569, 0, !dbg !43
  %571 = extractvalue { float, float, float, float } %569, 1, !dbg !43
  %572 = extractvalue { float, float, float, float } %569, 2, !dbg !43
  %573 = extractvalue { float, float, float, float } %569, 3, !dbg !43
  %574 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %495, float %496, float %497, float %498, i32 %341, i32 %342, i32 %343, i32 %344, i32 %421, i32 %422) #2, !dbg !43
  %575 = extractvalue { float, float, float, float } %574, 0, !dbg !43
  %576 = extractvalue { float, float, float, float } %574, 1, !dbg !43
  %577 = extractvalue { float, float, float, float } %574, 2, !dbg !43
  %578 = extractvalue { float, float, float, float } %574, 3, !dbg !43
  %579 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %500, float %501, float %502, float %503, i32 %341, i32 %342, i32 %343, i32 %344, i32 %435, i32 %436) #2, !dbg !43
  %580 = extractvalue { float, float, float, float } %579, 0, !dbg !43
  %581 = extractvalue { float, float, float, float } %579, 1, !dbg !43
  %582 = extractvalue { float, float, float, float } %579, 2, !dbg !43
  %583 = extractvalue { float, float, float, float } %579, 3, !dbg !43
  %584 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %505, float %506, float %507, float %508, i32 %369, i32 %370, i32 %371, i32 %372, i32 %393, i32 %394) #2, !dbg !43
  %585 = extractvalue { float, float, float, float } %584, 0, !dbg !43
  %586 = extractvalue { float, float, float, float } %584, 1, !dbg !43
  %587 = extractvalue { float, float, float, float } %584, 2, !dbg !43
  %588 = extractvalue { float, float, float, float } %584, 3, !dbg !43
  %589 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %510, float %511, float %512, float %513, i32 %369, i32 %370, i32 %371, i32 %372, i32 %407, i32 %408) #2, !dbg !43
  %590 = extractvalue { float, float, float, float } %589, 0, !dbg !43
  %591 = extractvalue { float, float, float, float } %589, 1, !dbg !43
  %592 = extractvalue { float, float, float, float } %589, 2, !dbg !43
  %593 = extractvalue { float, float, float, float } %589, 3, !dbg !43
  %594 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %515, float %516, float %517, float %518, i32 %369, i32 %370, i32 %371, i32 %372, i32 %421, i32 %422) #2, !dbg !43
  %595 = extractvalue { float, float, float, float } %594, 0, !dbg !43
  %596 = extractvalue { float, float, float, float } %594, 1, !dbg !43
  %597 = extractvalue { float, float, float, float } %594, 2, !dbg !43
  %598 = extractvalue { float, float, float, float } %594, 3, !dbg !43
  %599 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %520, float %521, float %522, float %523, i32 %369, i32 %370, i32 %371, i32 %372, i32 %435, i32 %436) #2, !dbg !43
  %600 = extractvalue { float, float, float, float } %599, 0, !dbg !43
  %601 = extractvalue { float, float, float, float } %599, 1, !dbg !43
  %602 = extractvalue { float, float, float, float } %599, 2, !dbg !43
  %603 = extractvalue { float, float, float, float } %599, 3, !dbg !43
  %604 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %525, float %526, float %527, float %528, i32 %292, i32 %293, i32 %294, i32 %295, i32 %398, i32 %399) #2, !dbg !43
  %605 = extractvalue { float, float, float, float } %604, 0, !dbg !43
  %606 = extractvalue { float, float, float, float } %604, 1, !dbg !43
  %607 = extractvalue { float, float, float, float } %604, 2, !dbg !43
  %608 = extractvalue { float, float, float, float } %604, 3, !dbg !43
  %609 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %530, float %531, float %532, float %533, i32 %292, i32 %293, i32 %294, i32 %295, i32 %412, i32 %413) #2, !dbg !43
  %610 = extractvalue { float, float, float, float } %609, 0, !dbg !43
  %611 = extractvalue { float, float, float, float } %609, 1, !dbg !43
  %612 = extractvalue { float, float, float, float } %609, 2, !dbg !43
  %613 = extractvalue { float, float, float, float } %609, 3, !dbg !43
  %614 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %535, float %536, float %537, float %538, i32 %292, i32 %293, i32 %294, i32 %295, i32 %426, i32 %427) #2, !dbg !43
  %615 = extractvalue { float, float, float, float } %614, 0, !dbg !43
  %616 = extractvalue { float, float, float, float } %614, 1, !dbg !43
  %617 = extractvalue { float, float, float, float } %614, 2, !dbg !43
  %618 = extractvalue { float, float, float, float } %614, 3, !dbg !43
  %619 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %540, float %541, float %542, float %543, i32 %292, i32 %293, i32 %294, i32 %295, i32 %440, i32 %441) #2, !dbg !43
  %620 = extractvalue { float, float, float, float } %619, 0, !dbg !43
  %621 = extractvalue { float, float, float, float } %619, 1, !dbg !43
  %622 = extractvalue { float, float, float, float } %619, 2, !dbg !43
  %623 = extractvalue { float, float, float, float } %619, 3, !dbg !43
  %624 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %545, float %546, float %547, float %548, i32 %320, i32 %321, i32 %322, i32 %323, i32 %398, i32 %399) #2, !dbg !43
  %625 = extractvalue { float, float, float, float } %624, 0, !dbg !43
  %626 = extractvalue { float, float, float, float } %624, 1, !dbg !43
  %627 = extractvalue { float, float, float, float } %624, 2, !dbg !43
  %628 = extractvalue { float, float, float, float } %624, 3, !dbg !43
  %629 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %550, float %551, float %552, float %553, i32 %320, i32 %321, i32 %322, i32 %323, i32 %412, i32 %413) #2, !dbg !43
  %630 = extractvalue { float, float, float, float } %629, 0, !dbg !43
  %631 = extractvalue { float, float, float, float } %629, 1, !dbg !43
  %632 = extractvalue { float, float, float, float } %629, 2, !dbg !43
  %633 = extractvalue { float, float, float, float } %629, 3, !dbg !43
  %634 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %555, float %556, float %557, float %558, i32 %320, i32 %321, i32 %322, i32 %323, i32 %426, i32 %427) #2, !dbg !43
  %635 = extractvalue { float, float, float, float } %634, 0, !dbg !43
  %636 = extractvalue { float, float, float, float } %634, 1, !dbg !43
  %637 = extractvalue { float, float, float, float } %634, 2, !dbg !43
  %638 = extractvalue { float, float, float, float } %634, 3, !dbg !43
  %639 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %560, float %561, float %562, float %563, i32 %320, i32 %321, i32 %322, i32 %323, i32 %440, i32 %441) #2, !dbg !43
  %640 = extractvalue { float, float, float, float } %639, 0, !dbg !43
  %641 = extractvalue { float, float, float, float } %639, 1, !dbg !43
  %642 = extractvalue { float, float, float, float } %639, 2, !dbg !43
  %643 = extractvalue { float, float, float, float } %639, 3, !dbg !43
  %644 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %565, float %566, float %567, float %568, i32 %348, i32 %349, i32 %350, i32 %351, i32 %398, i32 %399) #2, !dbg !43
  %645 = extractvalue { float, float, float, float } %644, 0, !dbg !43
  %646 = extractvalue { float, float, float, float } %644, 1, !dbg !43
  %647 = extractvalue { float, float, float, float } %644, 2, !dbg !43
  %648 = extractvalue { float, float, float, float } %644, 3, !dbg !43
  %649 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %570, float %571, float %572, float %573, i32 %348, i32 %349, i32 %350, i32 %351, i32 %412, i32 %413) #2, !dbg !43
  %650 = extractvalue { float, float, float, float } %649, 0, !dbg !43
  %651 = extractvalue { float, float, float, float } %649, 1, !dbg !43
  %652 = extractvalue { float, float, float, float } %649, 2, !dbg !43
  %653 = extractvalue { float, float, float, float } %649, 3, !dbg !43
  %654 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %575, float %576, float %577, float %578, i32 %348, i32 %349, i32 %350, i32 %351, i32 %426, i32 %427) #2, !dbg !43
  %655 = extractvalue { float, float, float, float } %654, 0, !dbg !43
  %656 = extractvalue { float, float, float, float } %654, 1, !dbg !43
  %657 = extractvalue { float, float, float, float } %654, 2, !dbg !43
  %658 = extractvalue { float, float, float, float } %654, 3, !dbg !43
  %659 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %580, float %581, float %582, float %583, i32 %348, i32 %349, i32 %350, i32 %351, i32 %440, i32 %441) #2, !dbg !43
  %660 = extractvalue { float, float, float, float } %659, 0, !dbg !43
  %661 = extractvalue { float, float, float, float } %659, 1, !dbg !43
  %662 = extractvalue { float, float, float, float } %659, 2, !dbg !43
  %663 = extractvalue { float, float, float, float } %659, 3, !dbg !43
  %664 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %585, float %586, float %587, float %588, i32 %376, i32 %377, i32 %378, i32 %379, i32 %398, i32 %399) #2, !dbg !43
  %665 = extractvalue { float, float, float, float } %664, 0, !dbg !43
  %666 = extractvalue { float, float, float, float } %664, 1, !dbg !43
  %667 = extractvalue { float, float, float, float } %664, 2, !dbg !43
  %668 = extractvalue { float, float, float, float } %664, 3, !dbg !43
  %669 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %590, float %591, float %592, float %593, i32 %376, i32 %377, i32 %378, i32 %379, i32 %412, i32 %413) #2, !dbg !43
  %670 = extractvalue { float, float, float, float } %669, 0, !dbg !43
  %671 = extractvalue { float, float, float, float } %669, 1, !dbg !43
  %672 = extractvalue { float, float, float, float } %669, 2, !dbg !43
  %673 = extractvalue { float, float, float, float } %669, 3, !dbg !43
  %674 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %595, float %596, float %597, float %598, i32 %376, i32 %377, i32 %378, i32 %379, i32 %426, i32 %427) #2, !dbg !43
  %675 = extractvalue { float, float, float, float } %674, 0, !dbg !43
  %676 = extractvalue { float, float, float, float } %674, 1, !dbg !43
  %677 = extractvalue { float, float, float, float } %674, 2, !dbg !43
  %678 = extractvalue { float, float, float, float } %674, 3, !dbg !43
  %679 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %600, float %601, float %602, float %603, i32 %376, i32 %377, i32 %378, i32 %379, i32 %440, i32 %441) #2, !dbg !43
  %680 = extractvalue { float, float, float, float } %679, 0, !dbg !43
  %681 = extractvalue { float, float, float, float } %679, 1, !dbg !43
  %682 = extractvalue { float, float, float, float } %679, 2, !dbg !43
  %683 = extractvalue { float, float, float, float } %679, 3, !dbg !43
  %684 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %605, float %606, float %607, float %608, i32 %299, i32 %300, i32 %301, i32 %302, i32 %400, i32 %401) #2, !dbg !43
  %685 = extractvalue { float, float, float, float } %684, 0, !dbg !43
  %686 = extractvalue { float, float, float, float } %684, 1, !dbg !43
  %687 = extractvalue { float, float, float, float } %684, 2, !dbg !43
  %688 = extractvalue { float, float, float, float } %684, 3, !dbg !43
  %689 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %610, float %611, float %612, float %613, i32 %299, i32 %300, i32 %301, i32 %302, i32 %414, i32 %415) #2, !dbg !43
  %690 = extractvalue { float, float, float, float } %689, 0, !dbg !43
  %691 = extractvalue { float, float, float, float } %689, 1, !dbg !43
  %692 = extractvalue { float, float, float, float } %689, 2, !dbg !43
  %693 = extractvalue { float, float, float, float } %689, 3, !dbg !43
  %694 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %615, float %616, float %617, float %618, i32 %299, i32 %300, i32 %301, i32 %302, i32 %428, i32 %429) #2, !dbg !43
  %695 = extractvalue { float, float, float, float } %694, 0, !dbg !43
  %696 = extractvalue { float, float, float, float } %694, 1, !dbg !43
  %697 = extractvalue { float, float, float, float } %694, 2, !dbg !43
  %698 = extractvalue { float, float, float, float } %694, 3, !dbg !43
  %699 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %620, float %621, float %622, float %623, i32 %299, i32 %300, i32 %301, i32 %302, i32 %442, i32 %443) #2, !dbg !43
  %700 = extractvalue { float, float, float, float } %699, 0, !dbg !43
  %701 = extractvalue { float, float, float, float } %699, 1, !dbg !43
  %702 = extractvalue { float, float, float, float } %699, 2, !dbg !43
  %703 = extractvalue { float, float, float, float } %699, 3, !dbg !43
  %704 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %625, float %626, float %627, float %628, i32 %327, i32 %328, i32 %329, i32 %330, i32 %400, i32 %401) #2, !dbg !43
  %705 = extractvalue { float, float, float, float } %704, 0, !dbg !43
  %706 = extractvalue { float, float, float, float } %704, 1, !dbg !43
  %707 = extractvalue { float, float, float, float } %704, 2, !dbg !43
  %708 = extractvalue { float, float, float, float } %704, 3, !dbg !43
  %709 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %630, float %631, float %632, float %633, i32 %327, i32 %328, i32 %329, i32 %330, i32 %414, i32 %415) #2, !dbg !43
  %710 = extractvalue { float, float, float, float } %709, 0, !dbg !43
  %711 = extractvalue { float, float, float, float } %709, 1, !dbg !43
  %712 = extractvalue { float, float, float, float } %709, 2, !dbg !43
  %713 = extractvalue { float, float, float, float } %709, 3, !dbg !43
  %714 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %635, float %636, float %637, float %638, i32 %327, i32 %328, i32 %329, i32 %330, i32 %428, i32 %429) #2, !dbg !43
  %715 = extractvalue { float, float, float, float } %714, 0, !dbg !43
  %716 = extractvalue { float, float, float, float } %714, 1, !dbg !43
  %717 = extractvalue { float, float, float, float } %714, 2, !dbg !43
  %718 = extractvalue { float, float, float, float } %714, 3, !dbg !43
  %719 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %640, float %641, float %642, float %643, i32 %327, i32 %328, i32 %329, i32 %330, i32 %442, i32 %443) #2, !dbg !43
  %720 = extractvalue { float, float, float, float } %719, 0, !dbg !43
  %721 = extractvalue { float, float, float, float } %719, 1, !dbg !43
  %722 = extractvalue { float, float, float, float } %719, 2, !dbg !43
  %723 = extractvalue { float, float, float, float } %719, 3, !dbg !43
  %724 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %645, float %646, float %647, float %648, i32 %355, i32 %356, i32 %357, i32 %358, i32 %400, i32 %401) #2, !dbg !43
  %725 = extractvalue { float, float, float, float } %724, 0, !dbg !43
  %726 = extractvalue { float, float, float, float } %724, 1, !dbg !43
  %727 = extractvalue { float, float, float, float } %724, 2, !dbg !43
  %728 = extractvalue { float, float, float, float } %724, 3, !dbg !43
  %729 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %650, float %651, float %652, float %653, i32 %355, i32 %356, i32 %357, i32 %358, i32 %414, i32 %415) #2, !dbg !43
  %730 = extractvalue { float, float, float, float } %729, 0, !dbg !43
  %731 = extractvalue { float, float, float, float } %729, 1, !dbg !43
  %732 = extractvalue { float, float, float, float } %729, 2, !dbg !43
  %733 = extractvalue { float, float, float, float } %729, 3, !dbg !43
  %734 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %655, float %656, float %657, float %658, i32 %355, i32 %356, i32 %357, i32 %358, i32 %428, i32 %429) #2, !dbg !43
  %735 = extractvalue { float, float, float, float } %734, 0, !dbg !43
  %736 = extractvalue { float, float, float, float } %734, 1, !dbg !43
  %737 = extractvalue { float, float, float, float } %734, 2, !dbg !43
  %738 = extractvalue { float, float, float, float } %734, 3, !dbg !43
  %739 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %660, float %661, float %662, float %663, i32 %355, i32 %356, i32 %357, i32 %358, i32 %442, i32 %443) #2, !dbg !43
  %740 = extractvalue { float, float, float, float } %739, 0, !dbg !43
  %741 = extractvalue { float, float, float, float } %739, 1, !dbg !43
  %742 = extractvalue { float, float, float, float } %739, 2, !dbg !43
  %743 = extractvalue { float, float, float, float } %739, 3, !dbg !43
  %744 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %665, float %666, float %667, float %668, i32 %383, i32 %384, i32 %385, i32 %386, i32 %400, i32 %401) #2, !dbg !43
  %745 = extractvalue { float, float, float, float } %744, 0, !dbg !43
  %746 = extractvalue { float, float, float, float } %744, 1, !dbg !43
  %747 = extractvalue { float, float, float, float } %744, 2, !dbg !43
  %748 = extractvalue { float, float, float, float } %744, 3, !dbg !43
  %749 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %670, float %671, float %672, float %673, i32 %383, i32 %384, i32 %385, i32 %386, i32 %414, i32 %415) #2, !dbg !43
  %750 = extractvalue { float, float, float, float } %749, 0, !dbg !43
  %751 = extractvalue { float, float, float, float } %749, 1, !dbg !43
  %752 = extractvalue { float, float, float, float } %749, 2, !dbg !43
  %753 = extractvalue { float, float, float, float } %749, 3, !dbg !43
  %754 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %675, float %676, float %677, float %678, i32 %383, i32 %384, i32 %385, i32 %386, i32 %428, i32 %429) #2, !dbg !43
  %755 = extractvalue { float, float, float, float } %754, 0, !dbg !43
  %756 = extractvalue { float, float, float, float } %754, 1, !dbg !43
  %757 = extractvalue { float, float, float, float } %754, 2, !dbg !43
  %758 = extractvalue { float, float, float, float } %754, 3, !dbg !43
  %759 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %680, float %681, float %682, float %683, i32 %383, i32 %384, i32 %385, i32 %386, i32 %442, i32 %443) #2, !dbg !43
  %760 = extractvalue { float, float, float, float } %759, 0, !dbg !43
  %761 = extractvalue { float, float, float, float } %759, 1, !dbg !43
  %762 = extractvalue { float, float, float, float } %759, 2, !dbg !43
  %763 = extractvalue { float, float, float, float } %759, 3, !dbg !43
  %764 = getelementptr i8, ptr addrspace(1) %.pn16362, i64 128, !dbg !39
  %765 = getelementptr half, ptr addrspace(1) %.pn192363, i64 %96, !dbg !40
  %766 = getelementptr half, ptr addrspace(1) %.pn176364, i64 %96, !dbg !40
  %767 = getelementptr half, ptr addrspace(1) %.pn160365, i64 %96, !dbg !40
  %768 = getelementptr half, ptr addrspace(1) %.pn144366, i64 %96, !dbg !40
  %769 = add i32 %204, 1, !dbg !34
  %770 = icmp sgt i32 %769, 2, !dbg !34
  %771 = select i1 %770, i32 0, i32 %769, !dbg !34
  %772 = shl i32 %269, 6, !dbg !41
  %773 = sub i32 %.neg354, %772, !dbg !41
  %774 = icmp slt i32 %23, %773, !dbg !35
  %.idx288 = shl i32 %771, 14, !dbg !36
  %775 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx288, !dbg !36
  %776 = and i1 %270, %774, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %777 = getelementptr inbounds nuw half, ptr addrspace(3) %775, i32 %61, !dbg !36
  %778 = getelementptr inbounds nuw half, ptr addrspace(3) %775, i32 %63, !dbg !36
  %779 = getelementptr inbounds nuw half, ptr addrspace(3) %775, i32 %65, !dbg !36
  %780 = getelementptr inbounds nuw half, ptr addrspace(3) %775, i32 %67, !dbg !36
  %781 = getelementptr inbounds nuw half, ptr addrspace(3) %775, i32 %69, !dbg !36
  %782 = getelementptr inbounds nuw half, ptr addrspace(3) %775, i32 %71, !dbg !36
  %783 = getelementptr inbounds nuw half, ptr addrspace(3) %775, i32 %73, !dbg !36
  %784 = getelementptr inbounds nuw half, ptr addrspace(3) %775, i32 %75, !dbg !36
  %785 = select i1 %776, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %777, ptr addrspace(1) %764, i32 %785) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %778, ptr addrspace(1) %764, i32 %785) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %779, ptr addrspace(1) %764, i32 %785) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %780, ptr addrspace(1) %764, i32 %785) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %781, ptr addrspace(1) %764, i32 %785) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %782, ptr addrspace(1) %764, i32 %785) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %783, ptr addrspace(1) %764, i32 %785) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %784, ptr addrspace(1) %764, i32 %785) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %786 = icmp slt i32 %32, %773, !dbg !37
  %787 = icmp slt i32 %33, %773, !dbg !37
  %788 = icmp slt i32 %34, %773, !dbg !37
  %789 = icmp slt i32 %35, %773, !dbg !37
  %.idx289 = shl i32 %771, 13, !dbg !38
  %790 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %.idx289, !dbg !38
  %791 = and i1 %270, %786, !dbg !34
  %792 = and i1 %270, %787, !dbg !34
  %793 = and i1 %270, %788, !dbg !34
  %794 = and i1 %270, %789, !dbg !34
  %795 = getelementptr inbounds nuw half, ptr addrspace(3) %790, i32 %61, !dbg !38
  %796 = getelementptr inbounds nuw half, ptr addrspace(3) %790, i32 %63, !dbg !38
  %797 = getelementptr inbounds nuw half, ptr addrspace(3) %790, i32 %65, !dbg !38
  %798 = getelementptr inbounds nuw half, ptr addrspace(3) %790, i32 %67, !dbg !38
  %799 = select i1 %791, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %795, ptr addrspace(1) %765, i32 %799) #2, !dbg !38
  %800 = select i1 %792, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %796, ptr addrspace(1) %766, i32 %800) #2, !dbg !38
  %801 = select i1 %793, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %797, ptr addrspace(1) %767, i32 %801) #2, !dbg !38
  %802 = select i1 %794, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %798, ptr addrspace(1) %768, i32 %802) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %803 = add nuw nsw i32 %269, 1, !dbg !34
  %exitcond.not = icmp eq i32 %803, %53, !dbg !34
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %202, !dbg !34

._crit_edge.loopexit:                             ; preds = %202
  %804 = insertelement <64 x float> poison, float %685, i64 0, !dbg !44
  %805 = insertelement <64 x float> %804, float %686, i64 1, !dbg !44
  %806 = insertelement <64 x float> %805, float %687, i64 2, !dbg !44
  %807 = insertelement <64 x float> %806, float %688, i64 3, !dbg !44
  %808 = insertelement <64 x float> %807, float %690, i64 4, !dbg !44
  %809 = insertelement <64 x float> %808, float %691, i64 5, !dbg !44
  %810 = insertelement <64 x float> %809, float %692, i64 6, !dbg !44
  %811 = insertelement <64 x float> %810, float %693, i64 7, !dbg !44
  %812 = insertelement <64 x float> %811, float %695, i64 8, !dbg !44
  %813 = insertelement <64 x float> %812, float %696, i64 9, !dbg !44
  %814 = insertelement <64 x float> %813, float %697, i64 10, !dbg !44
  %815 = insertelement <64 x float> %814, float %698, i64 11, !dbg !44
  %816 = insertelement <64 x float> %815, float %700, i64 12, !dbg !44
  %817 = insertelement <64 x float> %816, float %701, i64 13, !dbg !44
  %818 = insertelement <64 x float> %817, float %702, i64 14, !dbg !44
  %819 = insertelement <64 x float> %818, float %703, i64 15, !dbg !44
  %820 = insertelement <64 x float> %819, float %705, i64 16, !dbg !44
  %821 = insertelement <64 x float> %820, float %706, i64 17, !dbg !44
  %822 = insertelement <64 x float> %821, float %707, i64 18, !dbg !44
  %823 = insertelement <64 x float> %822, float %708, i64 19, !dbg !44
  %824 = insertelement <64 x float> %823, float %710, i64 20, !dbg !44
  %825 = insertelement <64 x float> %824, float %711, i64 21, !dbg !44
  %826 = insertelement <64 x float> %825, float %712, i64 22, !dbg !44
  %827 = insertelement <64 x float> %826, float %713, i64 23, !dbg !44
  %828 = insertelement <64 x float> %827, float %715, i64 24, !dbg !44
  %829 = insertelement <64 x float> %828, float %716, i64 25, !dbg !44
  %830 = insertelement <64 x float> %829, float %717, i64 26, !dbg !44
  %831 = insertelement <64 x float> %830, float %718, i64 27, !dbg !44
  %832 = insertelement <64 x float> %831, float %720, i64 28, !dbg !44
  %833 = insertelement <64 x float> %832, float %721, i64 29, !dbg !44
  %834 = insertelement <64 x float> %833, float %722, i64 30, !dbg !44
  %835 = insertelement <64 x float> %834, float %723, i64 31, !dbg !44
  %836 = insertelement <64 x float> %835, float %725, i64 32, !dbg !44
  %837 = insertelement <64 x float> %836, float %726, i64 33, !dbg !44
  %838 = insertelement <64 x float> %837, float %727, i64 34, !dbg !44
  %839 = insertelement <64 x float> %838, float %728, i64 35, !dbg !44
  %840 = insertelement <64 x float> %839, float %730, i64 36, !dbg !44
  %841 = insertelement <64 x float> %840, float %731, i64 37, !dbg !44
  %842 = insertelement <64 x float> %841, float %732, i64 38, !dbg !44
  %843 = insertelement <64 x float> %842, float %733, i64 39, !dbg !44
  %844 = insertelement <64 x float> %843, float %735, i64 40, !dbg !44
  %845 = insertelement <64 x float> %844, float %736, i64 41, !dbg !44
  %846 = insertelement <64 x float> %845, float %737, i64 42, !dbg !44
  %847 = insertelement <64 x float> %846, float %738, i64 43, !dbg !44
  %848 = insertelement <64 x float> %847, float %740, i64 44, !dbg !44
  %849 = insertelement <64 x float> %848, float %741, i64 45, !dbg !44
  %850 = insertelement <64 x float> %849, float %742, i64 46, !dbg !44
  %851 = insertelement <64 x float> %850, float %743, i64 47, !dbg !44
  %852 = insertelement <64 x float> %851, float %745, i64 48, !dbg !44
  %853 = insertelement <64 x float> %852, float %746, i64 49, !dbg !44
  %854 = insertelement <64 x float> %853, float %747, i64 50, !dbg !44
  %855 = insertelement <64 x float> %854, float %748, i64 51, !dbg !44
  %856 = insertelement <64 x float> %855, float %750, i64 52, !dbg !44
  %857 = insertelement <64 x float> %856, float %751, i64 53, !dbg !44
  %858 = insertelement <64 x float> %857, float %752, i64 54, !dbg !44
  %859 = insertelement <64 x float> %858, float %753, i64 55, !dbg !44
  %860 = insertelement <64 x float> %859, float %755, i64 56, !dbg !44
  %861 = insertelement <64 x float> %860, float %756, i64 57, !dbg !44
  %862 = insertelement <64 x float> %861, float %757, i64 58, !dbg !44
  %863 = insertelement <64 x float> %862, float %758, i64 59, !dbg !44
  %864 = insertelement <64 x float> %863, float %760, i64 60, !dbg !44
  %865 = insertelement <64 x float> %864, float %761, i64 61, !dbg !44
  %866 = insertelement <64 x float> %865, float %762, i64 62, !dbg !44
  %867 = insertelement <64 x float> %866, float %763, i64 63, !dbg !44
  %868 = fptrunc <64 x float> %867 to <64 x half>, !dbg !44
  br label %._crit_edge, !dbg !45

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.._crit_edge_crit_edge
  %.pre-phi369 = phi i32 [ %.pre368, %.._crit_edge_crit_edge ], [ %175, %._crit_edge.loopexit ], !dbg !42
  %.pre-phi = phi i32 [ %.pre, %.._crit_edge_crit_edge ], [ %194, %._crit_edge.loopexit ], !dbg !42
  %869 = phi <64 x half> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %868, %._crit_edge.loopexit ]
  %870 = mul i32 %19, %17, !dbg !45
  %.decomposed560 = sub i32 %.decomposed, %870, !dbg !45
  %871 = add i32 %.decomposed560, %15, !dbg !46
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %872 = shl i32 %871, 7, !dbg !47
  %873 = or disjoint i32 %872, %32, !dbg !48
  %874 = or disjoint i32 %872, %33, !dbg !48
  %875 = or disjoint i32 %872, %34, !dbg !48
  %876 = or disjoint i32 %872, %35, !dbg !48
  %877 = or disjoint i32 %873, 64, !dbg !48
  %878 = or disjoint i32 %873, 80, !dbg !48
  %879 = or disjoint i32 %873, 96, !dbg !48
  %880 = or disjoint i32 %31, %872, !dbg !48
  %881 = or i32 %880, 112, !dbg !48
  %882 = mul i32 %873, %7, !dbg !49
  %883 = mul i32 %874, %7, !dbg !49
  %884 = mul i32 %875, %7, !dbg !49
  %885 = mul i32 %876, %7, !dbg !49
  %886 = mul i32 %877, %7, !dbg !49
  %887 = mul i32 %878, %7, !dbg !49
  %888 = mul i32 %879, %7, !dbg !49
  %889 = mul i32 %881, %7, !dbg !49
  %890 = sext i32 %882 to i64, !dbg !50
  %891 = getelementptr half, ptr addrspace(1) %2, i64 %890, !dbg !50
  %892 = sext i32 %883 to i64, !dbg !50
  %893 = getelementptr half, ptr addrspace(1) %2, i64 %892, !dbg !50
  %894 = sext i32 %884 to i64, !dbg !50
  %895 = getelementptr half, ptr addrspace(1) %2, i64 %894, !dbg !50
  %896 = sext i32 %885 to i64, !dbg !50
  %897 = getelementptr half, ptr addrspace(1) %2, i64 %896, !dbg !50
  %898 = sext i32 %886 to i64, !dbg !50
  %899 = getelementptr half, ptr addrspace(1) %2, i64 %898, !dbg !50
  %900 = sext i32 %887 to i64, !dbg !50
  %901 = getelementptr half, ptr addrspace(1) %2, i64 %900, !dbg !50
  %902 = sext i32 %888 to i64, !dbg !50
  %903 = getelementptr half, ptr addrspace(1) %2, i64 %902, !dbg !50
  %904 = sext i32 %889 to i64, !dbg !50
  %905 = getelementptr half, ptr addrspace(1) %2, i64 %904, !dbg !50
  %906 = sext i32 %24 to i64, !dbg !51
  %907 = getelementptr half, ptr addrspace(1) %891, i64 %906, !dbg !51
  %908 = getelementptr half, ptr addrspace(1) %893, i64 %906, !dbg !51
  %909 = getelementptr half, ptr addrspace(1) %895, i64 %906, !dbg !51
  %910 = getelementptr half, ptr addrspace(1) %897, i64 %906, !dbg !51
  %911 = getelementptr half, ptr addrspace(1) %899, i64 %906, !dbg !51
  %912 = getelementptr half, ptr addrspace(1) %901, i64 %906, !dbg !51
  %913 = getelementptr half, ptr addrspace(1) %903, i64 %906, !dbg !51
  %914 = getelementptr half, ptr addrspace(1) %905, i64 %906, !dbg !51
  %915 = icmp slt i32 %873, 1, !dbg !52
  %916 = icmp slt i32 %874, 1, !dbg !52
  %917 = icmp slt i32 %875, 1, !dbg !52
  %918 = icmp slt i32 %876, 1, !dbg !52
  %919 = icmp slt i32 %872, 0, !dbg !52
  %920 = icmp slt i32 %24, %3, !dbg !53
  %921 = and i1 %920, %915, !dbg !54
  %922 = and i1 %920, %916, !dbg !54
  %923 = and i1 %920, %917, !dbg !54
  %924 = and i1 %920, %918, !dbg !54
  %925 = and i1 %920, %919, !dbg !54
  %926 = shl nuw nsw i32 %21, 1, !dbg !42
  %927 = and i32 %926, 6, !dbg !42
  %928 = shl nuw nsw i32 %21, 4, !dbg !42
  %929 = and i32 %928, 192, !dbg !42
  %930 = or disjoint i32 %929, %927, !dbg !42
  %931 = shl nuw nsw i32 %28, 4, !dbg !42
  %932 = or disjoint i32 %930, %931, !dbg !42
  %933 = or disjoint i32 %932, %.pre-phi, !dbg !42
  %934 = or disjoint i32 %933, %.pre-phi369, !dbg !42
  %935 = and i32 %22, 1016, !dbg !42
  %936 = lshr i32 %934, 3, !dbg !42
  %937 = and i32 %936, 536870904, !dbg !42
  %938 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %937, !dbg !42
  %939 = getelementptr inbounds nuw half, ptr addrspace(3) %938, i32 %934, !dbg !42
  %940 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !42
  store <2 x half> %940, ptr addrspace(3) %939, align 4, !dbg !42
  %941 = or disjoint i32 %934, 512, !dbg !42
  %942 = lshr i32 %941, 3, !dbg !42
  %943 = and i32 %942, 536870904, !dbg !42
  %944 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %943, !dbg !42
  %945 = getelementptr inbounds nuw half, ptr addrspace(3) %944, i32 %941, !dbg !42
  %946 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !42
  store <2 x half> %946, ptr addrspace(3) %945, align 4, !dbg !42
  %947 = getelementptr inbounds nuw i8, ptr addrspace(3) %939, i32 32, !dbg !42
  %948 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !42
  store <2 x half> %948, ptr addrspace(3) %947, align 4, !dbg !42
  %949 = or disjoint i32 %934, 528, !dbg !42
  %950 = lshr i32 %949, 3, !dbg !42
  %951 = and i32 %950, 536870904, !dbg !42
  %952 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %951, !dbg !42
  %953 = getelementptr inbounds nuw half, ptr addrspace(3) %952, i32 %949, !dbg !42
  %954 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !42
  store <2 x half> %954, ptr addrspace(3) %953, align 4, !dbg !42
  %955 = getelementptr inbounds nuw i8, ptr addrspace(3) %939, i32 64, !dbg !42
  %956 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 8, i32 9>, !dbg !42
  store <2 x half> %956, ptr addrspace(3) %955, align 4, !dbg !42
  %957 = or disjoint i32 %934, 544, !dbg !42
  %958 = lshr i32 %957, 3, !dbg !42
  %959 = and i32 %958, 536870904, !dbg !42
  %960 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %959, !dbg !42
  %961 = getelementptr inbounds nuw half, ptr addrspace(3) %960, i32 %957, !dbg !42
  %962 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 10, i32 11>, !dbg !42
  store <2 x half> %962, ptr addrspace(3) %961, align 4, !dbg !42
  %963 = getelementptr inbounds nuw i8, ptr addrspace(3) %939, i32 96, !dbg !42
  %964 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 12, i32 13>, !dbg !42
  store <2 x half> %964, ptr addrspace(3) %963, align 4, !dbg !42
  %965 = or disjoint i32 %934, 560, !dbg !42
  %966 = lshr i32 %965, 3, !dbg !42
  %967 = and i32 %966, 536870904, !dbg !42
  %968 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %967, !dbg !42
  %969 = getelementptr inbounds nuw half, ptr addrspace(3) %968, i32 %965, !dbg !42
  %970 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 14, i32 15>, !dbg !42
  store <2 x half> %970, ptr addrspace(3) %969, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %971 = and i32 %21, 120, !dbg !42
  %972 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %971, !dbg !42
  %973 = getelementptr inbounds nuw half, ptr addrspace(3) %972, i32 %935, !dbg !42
  %974 = load <4 x i32>, ptr addrspace(3) %973, align 16, !dbg !42
  %975 = or disjoint i32 %935, 1024, !dbg !42
  %976 = lshr exact i32 %975, 3, !dbg !42
  %977 = and i32 %976, 248, !dbg !42
  %978 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %977, !dbg !42
  %979 = getelementptr inbounds nuw half, ptr addrspace(3) %978, i32 %975, !dbg !42
  %980 = load <4 x i32>, ptr addrspace(3) %979, align 16, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %981 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 16, i32 17>, !dbg !42
  store <2 x half> %981, ptr addrspace(3) %939, align 4, !dbg !42
  %982 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 18, i32 19>, !dbg !42
  store <2 x half> %982, ptr addrspace(3) %945, align 4, !dbg !42
  %983 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 20, i32 21>, !dbg !42
  store <2 x half> %983, ptr addrspace(3) %947, align 4, !dbg !42
  %984 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 22, i32 23>, !dbg !42
  store <2 x half> %984, ptr addrspace(3) %953, align 4, !dbg !42
  %985 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 24, i32 25>, !dbg !42
  store <2 x half> %985, ptr addrspace(3) %955, align 4, !dbg !42
  %986 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 26, i32 27>, !dbg !42
  store <2 x half> %986, ptr addrspace(3) %961, align 4, !dbg !42
  %987 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 28, i32 29>, !dbg !42
  store <2 x half> %987, ptr addrspace(3) %963, align 4, !dbg !42
  %988 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 30, i32 31>, !dbg !42
  store <2 x half> %988, ptr addrspace(3) %969, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %989 = load <4 x i32>, ptr addrspace(3) %973, align 16, !dbg !42
  %990 = load <4 x i32>, ptr addrspace(3) %979, align 16, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %991 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 32, i32 33>, !dbg !42
  store <2 x half> %991, ptr addrspace(3) %939, align 4, !dbg !42
  %992 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 34, i32 35>, !dbg !42
  store <2 x half> %992, ptr addrspace(3) %945, align 4, !dbg !42
  %993 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 36, i32 37>, !dbg !42
  store <2 x half> %993, ptr addrspace(3) %947, align 4, !dbg !42
  %994 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 38, i32 39>, !dbg !42
  store <2 x half> %994, ptr addrspace(3) %953, align 4, !dbg !42
  %995 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 40, i32 41>, !dbg !42
  store <2 x half> %995, ptr addrspace(3) %955, align 4, !dbg !42
  %996 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 42, i32 43>, !dbg !42
  store <2 x half> %996, ptr addrspace(3) %961, align 4, !dbg !42
  %997 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 44, i32 45>, !dbg !42
  store <2 x half> %997, ptr addrspace(3) %963, align 4, !dbg !42
  %998 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 46, i32 47>, !dbg !42
  store <2 x half> %998, ptr addrspace(3) %969, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %999 = load <4 x i32>, ptr addrspace(3) %973, align 16, !dbg !42
  %1000 = load <4 x i32>, ptr addrspace(3) %979, align 16, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %1001 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 48, i32 49>, !dbg !42
  store <2 x half> %1001, ptr addrspace(3) %939, align 4, !dbg !42
  %1002 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 50, i32 51>, !dbg !42
  store <2 x half> %1002, ptr addrspace(3) %945, align 4, !dbg !42
  %1003 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 52, i32 53>, !dbg !42
  store <2 x half> %1003, ptr addrspace(3) %947, align 4, !dbg !42
  %1004 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 54, i32 55>, !dbg !42
  store <2 x half> %1004, ptr addrspace(3) %953, align 4, !dbg !42
  %1005 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 56, i32 57>, !dbg !42
  store <2 x half> %1005, ptr addrspace(3) %955, align 4, !dbg !42
  %1006 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 58, i32 59>, !dbg !42
  store <2 x half> %1006, ptr addrspace(3) %961, align 4, !dbg !42
  %1007 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 60, i32 61>, !dbg !42
  store <2 x half> %1007, ptr addrspace(3) %963, align 4, !dbg !42
  %1008 = shufflevector <64 x half> %869, <64 x half> poison, <2 x i32> <i32 62, i32 63>, !dbg !42
  store <2 x half> %1008, ptr addrspace(3) %969, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %1009 = load <4 x i32>, ptr addrspace(3) %973, align 16, !dbg !42
  %1010 = load <4 x i32>, ptr addrspace(3) %979, align 16, !dbg !42
  %.extract = extractelement <4 x i32> %974, i64 0, !dbg !42
  %.extract292 = extractelement <4 x i32> %974, i64 1, !dbg !42
  %.extract294 = extractelement <4 x i32> %974, i64 2, !dbg !42
  %.extract296 = extractelement <4 x i32> %974, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract292, i32 %.extract294, i32 %.extract296, ptr addrspace(1) %907, i1 %921) #2, !dbg !42
  %.extract298 = extractelement <4 x i32> %980, i64 0, !dbg !42
  %.extract300 = extractelement <4 x i32> %980, i64 1, !dbg !42
  %.extract302 = extractelement <4 x i32> %980, i64 2, !dbg !42
  %.extract304 = extractelement <4 x i32> %980, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract298, i32 %.extract300, i32 %.extract302, i32 %.extract304, ptr addrspace(1) %908, i1 %922) #2, !dbg !42
  %.extract306 = extractelement <4 x i32> %989, i64 0, !dbg !42
  %.extract308 = extractelement <4 x i32> %989, i64 1, !dbg !42
  %.extract310 = extractelement <4 x i32> %989, i64 2, !dbg !42
  %.extract312 = extractelement <4 x i32> %989, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract306, i32 %.extract308, i32 %.extract310, i32 %.extract312, ptr addrspace(1) %909, i1 %923) #2, !dbg !42
  %.extract314 = extractelement <4 x i32> %990, i64 0, !dbg !42
  %.extract316 = extractelement <4 x i32> %990, i64 1, !dbg !42
  %.extract318 = extractelement <4 x i32> %990, i64 2, !dbg !42
  %.extract320 = extractelement <4 x i32> %990, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract314, i32 %.extract316, i32 %.extract318, i32 %.extract320, ptr addrspace(1) %910, i1 %924) #2, !dbg !42
  %.extract322 = extractelement <4 x i32> %999, i64 0, !dbg !42
  %.extract324 = extractelement <4 x i32> %999, i64 1, !dbg !42
  %.extract326 = extractelement <4 x i32> %999, i64 2, !dbg !42
  %.extract328 = extractelement <4 x i32> %999, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract322, i32 %.extract324, i32 %.extract326, i32 %.extract328, ptr addrspace(1) %911, i1 %925) #2, !dbg !42
  %.extract330 = extractelement <4 x i32> %1000, i64 0, !dbg !42
  %.extract332 = extractelement <4 x i32> %1000, i64 1, !dbg !42
  %.extract334 = extractelement <4 x i32> %1000, i64 2, !dbg !42
  %.extract336 = extractelement <4 x i32> %1000, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract330, i32 %.extract332, i32 %.extract334, i32 %.extract336, ptr addrspace(1) %912, i1 %925) #2, !dbg !42
  %.extract338 = extractelement <4 x i32> %1009, i64 0, !dbg !42
  %.extract340 = extractelement <4 x i32> %1009, i64 1, !dbg !42
  %.extract342 = extractelement <4 x i32> %1009, i64 2, !dbg !42
  %.extract344 = extractelement <4 x i32> %1009, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract338, i32 %.extract340, i32 %.extract342, i32 %.extract344, ptr addrspace(1) %913, i1 %925) #2, !dbg !42
  %.extract346 = extractelement <4 x i32> %1010, i64 0, !dbg !42
  %.extract348 = extractelement <4 x i32> %1010, i64 1, !dbg !42
  %.extract350 = extractelement <4 x i32> %1010, i64 2, !dbg !42
  %.extract352 = extractelement <4 x i32> %1010, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract346, i32 %.extract348, i32 %.extract350, i32 %.extract352, ptr addrspace(1) %914, i1 %925) #2, !dbg !42
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "gated_mlp.py", directory: "/home/ubuntu/anjiang/PTX_dataset/triton_ptx")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !1, file: !1, line: 68, type: !6, scopeLine: 68, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 91, column: 24, scope: !5)
!9 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !12)
!10 = distinct !DILexicalBlockFile(scope: !5, file: !11, discriminator: 0)
!11 = !DIFile(filename: "standard.py", directory: "/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language")
!12 = !DILocation(line: 93, column: 27, scope: !5)
!13 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !12)
!14 = !DILocation(line: 94, column: 38, scope: !5)
!15 = !DILocation(line: 95, column: 22, scope: !5)
!16 = !DILocation(line: 96, column: 29, scope: !5)
!17 = !DILocation(line: 97, column: 35, scope: !5)
!18 = !DILocation(line: 97, column: 48, scope: !5)
!19 = !DILocation(line: 98, column: 34, scope: !5)
!20 = !DILocation(line: 99, column: 40, scope: !5)
!21 = !DILocation(line: 109, column: 23, scope: !5)
!22 = !DILocation(line: 109, column: 51, scope: !5)
!23 = !DILocation(line: 109, column: 38, scope: !5)
!24 = !DILocation(line: 109, column: 68, scope: !5)
!25 = !DILocation(line: 111, column: 22, scope: !5)
!26 = !DILocation(line: 112, column: 29, scope: !5)
!27 = !DILocation(line: 112, column: 40, scope: !5)
!28 = !DILocation(line: 112, column: 52, scope: !5)
!29 = !DILocation(line: 112, column: 22, scope: !5)
!30 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !31)
!31 = !DILocation(line: 120, column: 33, scope: !5)
!32 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !31)
!33 = !DILocation(line: 129, column: 33, scope: !5)
!34 = !DILocation(line: 120, column: 22, scope: !5)
!35 = !DILocation(line: 123, column: 51, scope: !5)
!36 = !DILocation(line: 123, column: 20, scope: !5)
!37 = !DILocation(line: 124, column: 51, scope: !5)
!38 = !DILocation(line: 124, column: 20, scope: !5)
!39 = !DILocation(line: 128, column: 18, scope: !5)
!40 = !DILocation(line: 129, column: 18, scope: !5)
!41 = !DILocation(line: 123, column: 55, scope: !5)
!42 = !DILocation(line: 142, column: 21, scope: !5)
!43 = !DILocation(line: 126, column: 35, scope: !5)
!44 = !DILocation(line: 134, column: 23, scope: !5)
!45 = !DILocation(line: 98, column: 54, scope: !5)
!46 = !DILocation(line: 98, column: 27, scope: !5)
!47 = !DILocation(line: 138, column: 22, scope: !5)
!48 = !DILocation(line: 138, column: 37, scope: !5)
!49 = !DILocation(line: 140, column: 33, scope: !5)
!50 = !DILocation(line: 140, column: 21, scope: !5)
!51 = !DILocation(line: 140, column: 52, scope: !5)
!52 = !DILocation(line: 141, column: 33, scope: !5)
!53 = !DILocation(line: 141, column: 58, scope: !5)
!54 = !DILocation(line: 141, column: 39, scope: !5)
!55 = !DILocation(line: 142, column: 4, scope: !5)
