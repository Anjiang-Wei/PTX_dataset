#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 16], warpsPerCTA = [8, 1], order = [1, 0]}>
#loc = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":68:0)
#mma = #ttg.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [4, 2], instrShape = [16, 8]}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "cuda:80", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":68:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256x128xf32, #mma> loc(#loc1)
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x128xf16, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<256x128xf16, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<128> : tensor<256x128xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<1> : tensor<256x1xi32, #blocked> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg3, %c127_i32 : i32 loc(#loc52)
    %2 = arith.divsi %1, %c128_i32 : i32 loc(#loc53)
    %3 = arith.muli %2, %c8_i32 : i32 loc(#loc6)
    %4 = arith.divsi %0, %3 : i32 loc(#loc7)
    %5 = arith.muli %4, %c8_i32 : i32 loc(#loc8)
    %6 = arith.subi %c1_i32, %5 : i32 loc(#loc9)
    %7 = arith.minsi %6, %c8_i32 : i32 loc(#loc10)
    %8 = arith.remsi %0, %3 : i32 loc(#loc11)
    %9 = arith.remsi %8, %7 : i32 loc(#loc12)
    %10 = arith.addi %5, %9 : i32 loc(#loc13)
    %11 = arith.divsi %8, %7 : i32 loc(#loc14)
    %12 = arith.muli %11, %c128_i32 : i32 loc(#loc15)
    %13 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc16)
    %14 = tt.splat %12 : i32 -> tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc17)
    %15 = arith.addi %14, %13 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc17)
    %16 = tt.splat %arg3 : i32 -> tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc18)
    %17 = arith.remsi %15, %16 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc18)
    %18 = tt.expand_dims %13 {axis = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc19)
    %19 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<1x128x!tt.ptr<f16>, #blocked> loc(#loc20)
    %20 = tt.addptr %19, %18 : tensor<1x128x!tt.ptr<f16>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc20)
    %21 = tt.broadcast %20 : tensor<1x128x!tt.ptr<f16>, #blocked> -> tensor<256x128x!tt.ptr<f16>, #blocked> loc(#loc20)
    %22 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc21)
    %23 = tt.expand_dims %22 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked> loc(#loc21)
    %24 = tt.splat %arg6 : i32 -> tensor<128x1xi32, #blocked> loc(#loc22)
    %25 = arith.muli %23, %24 : tensor<128x1xi32, #blocked> loc(#loc22)
    %26 = tt.expand_dims %17 {axis = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc23)
    %27 = tt.broadcast %25 : tensor<128x1xi32, #blocked> -> tensor<128x128xi32, #blocked> loc(#loc24)
    %28 = tt.broadcast %26 : tensor<1x128xi32, #blocked> -> tensor<128x128xi32, #blocked> loc(#loc24)
    %29 = arith.addi %27, %28 : tensor<128x128xi32, #blocked> loc(#loc24)
    %30 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<128x128x!tt.ptr<f16>, #blocked> loc(#loc25)
    %31 = tt.addptr %30, %29 : tensor<128x128x!tt.ptr<f16>, #blocked>, tensor<128x128xi32, #blocked> loc(#loc25)
    %32 = arith.addi %arg4, %c127_i32 : i32 loc(#loc54)
    %33 = arith.divsi %32, %c128_i32 : i32 loc(#loc55)
    %34 = arith.muli %arg6, %c128_i32 : i32 loc(#loc27)
    %35 = tt.splat %34 : i32 -> tensor<128x128xi32, #blocked> loc(#loc28)
    %36 = ttg.local_alloc : () -> !ttg.memdesc<2x256x128xf16, #shared, #smem, mutable> loc(#loc29)
    %37 = ttg.local_alloc : () -> !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(#loc30)
    %38 = arith.cmpi sgt, %33, %c0_i32 : i32 loc(#loc31)
    %39 = tt.splat %arg4 : i32 -> tensor<1x128xi32, #blocked> loc(#loc32)
    %40 = arith.cmpi slt, %18, %39 : tensor<1x128xi32, #blocked> loc(#loc32)
    %41 = tt.broadcast %40 : tensor<1x128xi1, #blocked> -> tensor<256x128xi1, #blocked> loc(#loc29)
    %42 = ttg.memdesc_subview %36[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<256x128xf16, #shared, #smem, mutable, 2x256x128> loc(#loc29)
    %43 = tt.splat %38 : i1 -> tensor<256x128xi1, #blocked> loc(#loc31)
    %44 = arith.andi %43, %41 : tensor<256x128xi1, #blocked> loc(#loc31)
    %45 = ttg.async_copy_global_to_local %21, %42 mask %44 other %cst_1 : tensor<256x128x!tt.ptr<f16>, #blocked> -> <256x128xf16, #shared, #smem, mutable, 2x256x128> loc(#loc29)
    %46 = ttg.async_commit_group %45 loc(#loc29)
    %47 = tt.splat %arg4 : i32 -> tensor<128x1xi32, #blocked> loc(#loc33)
    %48 = arith.cmpi slt, %23, %47 : tensor<128x1xi32, #blocked> loc(#loc33)
    %49 = tt.broadcast %48 : tensor<128x1xi1, #blocked> -> tensor<128x128xi1, #blocked> loc(#loc30)
    %50 = ttg.memdesc_subview %37[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable, 2x128x128> loc(#loc30)
    %51 = tt.splat %38 : i1 -> tensor<128x128xi1, #blocked> loc(#loc31)
    %52 = arith.andi %51, %49 : tensor<128x128xi1, #blocked> loc(#loc31)
    %53 = ttg.async_copy_global_to_local %31, %50 mask %52 other %cst_0 : tensor<128x128x!tt.ptr<f16>, #blocked> -> <128x128xf16, #shared, #smem, mutable, 2x128x128> loc(#loc30)
    %54 = ttg.async_commit_group %53 loc(#loc30)
    %55 = arith.cmpi sgt, %33, %c1_i32 : i32 loc(#loc31)
    %56 = tt.addptr %21, %cst_2 : tensor<256x128x!tt.ptr<f16>, #blocked>, tensor<256x128xi32, #blocked> loc(#loc34)
    %57 = tt.addptr %31, %35 : tensor<128x128x!tt.ptr<f16>, #blocked>, tensor<128x128xi32, #blocked> loc(#loc28)
    %58 = arith.subi %arg4, %c128_i32 : i32 loc(#loc35)
    %59 = tt.splat %58 : i32 -> tensor<1x128xi32, #blocked> loc(#loc32)
    %60 = arith.cmpi slt, %18, %59 : tensor<1x128xi32, #blocked> loc(#loc32)
    %61 = tt.broadcast %60 : tensor<1x128xi1, #blocked> -> tensor<256x128xi1, #blocked> loc(#loc29)
    %62 = ttg.memdesc_subview %36[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<256x128xf16, #shared, #smem, mutable, 2x256x128> loc(#loc29)
    %63 = tt.splat %55 : i1 -> tensor<256x128xi1, #blocked> loc(#loc31)
    %64 = arith.andi %63, %61 : tensor<256x128xi1, #blocked> loc(#loc31)
    %65 = ttg.async_copy_global_to_local %56, %62 mask %64 other %cst_1 : tensor<256x128x!tt.ptr<f16>, #blocked> -> <256x128xf16, #shared, #smem, mutable, 2x256x128> loc(#loc29)
    %66 = ttg.async_commit_group %65 loc(#loc29)
    %67 = tt.splat %58 : i32 -> tensor<128x1xi32, #blocked> loc(#loc33)
    %68 = arith.cmpi slt, %23, %67 : tensor<128x1xi32, #blocked> loc(#loc33)
    %69 = tt.broadcast %68 : tensor<128x1xi1, #blocked> -> tensor<128x128xi1, #blocked> loc(#loc30)
    %70 = ttg.memdesc_subview %37[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable, 2x128x128> loc(#loc30)
    %71 = tt.splat %55 : i1 -> tensor<128x128xi1, #blocked> loc(#loc31)
    %72 = arith.andi %71, %69 : tensor<128x128xi1, #blocked> loc(#loc31)
    %73 = ttg.async_copy_global_to_local %57, %70 mask %72 other %cst_0 : tensor<128x128x!tt.ptr<f16>, #blocked> -> <128x128xf16, #shared, #smem, mutable, 2x128x128> loc(#loc30)
    %74 = ttg.async_commit_group %73 loc(#loc30)
    %75:9 = scf.for %arg8 = %c0_i32 to %33 step %c1_i32 iter_args(%arg9 = %cst, %arg10 = %56, %arg11 = %57, %arg12 = %c1_i32, %arg13 = %c-1_i32, %arg14 = %46, %arg15 = %66, %arg16 = %54, %arg17 = %74) -> (tensor<256x128xf32, #mma>, tensor<256x128x!tt.ptr<f16>, #blocked>, tensor<128x128x!tt.ptr<f16>, #blocked>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token)  : i32 {
      %98 = arith.subi %33, %c2_i32 : i32 loc(#loc31)
      %99 = arith.cmpi slt, %arg8, %98 : i32 loc(#loc31)
      %100 = arith.addi %arg13, %c1_i32 : i32 loc(#loc31)
      %101 = arith.cmpi sge, %100, %c2_i32 : i32 loc(#loc31)
      %102 = arith.select %101, %c0_i32, %100 : i32 loc(#loc31)
      %103 = ttg.async_wait %arg14, %arg16 {num = 2 : i32} loc(#loc29)
      %104 = ttg.memdesc_subview %36[%102, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<256x128xf16, #shared, #smem, mutable, 2x256x128> loc(#loc29)
      %105 = ttg.local_load %104 token %103 : !ttg.memdesc<256x128xf16, #shared, #smem, mutable, 2x256x128> -> tensor<256x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc29)
      %106 = ttg.memdesc_subview %37[%102, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable, 2x128x128> loc(#loc30)
      %107 = ttg.local_load %106 token %103 : !ttg.memdesc<128x128xf16, #shared, #smem, mutable, 2x128x128> -> tensor<128x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc30)
      %108 = tt.dot %105, %107, %arg9, inputPrecision = tf32 : tensor<256x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<128x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<256x128xf32, #mma> loc(#loc36)
      %109 = tt.addptr %arg10, %cst_2 : tensor<256x128x!tt.ptr<f16>, #blocked>, tensor<256x128xi32, #blocked> loc(#loc34)
      %110 = tt.addptr %arg11, %35 : tensor<128x128x!tt.ptr<f16>, #blocked>, tensor<128x128xi32, #blocked> loc(#loc28)
      %111 = arith.addi %arg12, %c1_i32 : i32 loc(#loc31)
      %112 = arith.cmpi sge, %111, %c2_i32 : i32 loc(#loc31)
      %113 = arith.select %112, %c0_i32, %111 : i32 loc(#loc31)
      %114 = arith.addi %arg8, %c2_i32 : i32 loc(#loc31)
      %115 = arith.muli %114, %c128_i32 : i32 loc(#loc37)
      %116 = arith.subi %arg4, %115 : i32 loc(#loc35)
      %117 = tt.splat %116 : i32 -> tensor<1x128xi32, #blocked> loc(#loc32)
      %118 = arith.cmpi slt, %18, %117 : tensor<1x128xi32, #blocked> loc(#loc32)
      %119 = tt.broadcast %118 : tensor<1x128xi1, #blocked> -> tensor<256x128xi1, #blocked> loc(#loc29)
      %120 = ttg.memdesc_subview %36[%113, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<256x128xf16, #shared, #smem, mutable, 2x256x128> loc(#loc29)
      %121 = tt.splat %99 : i1 -> tensor<256x128xi1, #blocked> loc(#loc31)
      %122 = arith.andi %121, %119 : tensor<256x128xi1, #blocked> loc(#loc31)
      %123 = ttg.async_copy_global_to_local %109, %120 mask %122 other %cst_1 : tensor<256x128x!tt.ptr<f16>, #blocked> -> <256x128xf16, #shared, #smem, mutable, 2x256x128> loc(#loc29)
      %124 = ttg.async_commit_group %123 loc(#loc29)
      %125 = tt.splat %116 : i32 -> tensor<128x1xi32, #blocked> loc(#loc33)
      %126 = arith.cmpi slt, %23, %125 : tensor<128x1xi32, #blocked> loc(#loc33)
      %127 = tt.broadcast %126 : tensor<128x1xi1, #blocked> -> tensor<128x128xi1, #blocked> loc(#loc30)
      %128 = ttg.memdesc_subview %37[%113, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable, 2x128x128> loc(#loc30)
      %129 = tt.splat %99 : i1 -> tensor<128x128xi1, #blocked> loc(#loc31)
      %130 = arith.andi %129, %127 : tensor<128x128xi1, #blocked> loc(#loc31)
      %131 = ttg.async_copy_global_to_local %110, %128 mask %130 other %cst_0 : tensor<128x128x!tt.ptr<f16>, #blocked> -> <128x128xf16, #shared, #smem, mutable, 2x128x128> loc(#loc30)
      %132 = ttg.async_commit_group %131 loc(#loc30)
      scf.yield %108, %109, %110, %113, %102, %arg15, %124, %arg17, %132 : tensor<256x128xf32, #mma>, tensor<256x128x!tt.ptr<f16>, #blocked>, tensor<128x128x!tt.ptr<f16>, #blocked>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token loc(#loc31)
    } loc(#loc31)
    %76 = ttg.async_wait  {num = 0 : i32} loc(#loc31)
    ttg.local_dealloc %37 : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(#loc31)
    ttg.local_dealloc %36 : !ttg.memdesc<2x256x128xf16, #shared, #smem, mutable> loc(#loc31)
    %77 = arith.truncf %75#0 : tensor<256x128xf32, #mma> to tensor<256x128xf16, #mma> loc(#loc38)
    %78 = arith.muli %10, %c256_i32 : i32 loc(#loc39)
    %79 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc40)
    %80 = tt.splat %78 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc41)
    %81 = arith.addi %80, %79 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc41)
    %82 = tt.expand_dims %81 {axis = 1 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<256x1xi32, #blocked> loc(#loc42)
    %83 = tt.splat %arg7 : i32 -> tensor<256x1xi32, #blocked> loc(#loc43)
    %84 = arith.muli %83, %82 : tensor<256x1xi32, #blocked> loc(#loc43)
    %85 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<256x1x!tt.ptr<f16>, #blocked> loc(#loc44)
    %86 = tt.addptr %85, %84 : tensor<256x1x!tt.ptr<f16>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc44)
    %87 = tt.expand_dims %15 {axis = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc45)
    %88 = tt.broadcast %86 : tensor<256x1x!tt.ptr<f16>, #blocked> -> tensor<256x128x!tt.ptr<f16>, #blocked> loc(#loc46)
    %89 = tt.broadcast %87 : tensor<1x128xi32, #blocked> -> tensor<256x128xi32, #blocked> loc(#loc46)
    %90 = tt.addptr %88, %89 : tensor<256x128x!tt.ptr<f16>, #blocked>, tensor<256x128xi32, #blocked> loc(#loc46)
    %91 = arith.cmpi slt, %82, %cst_3 : tensor<256x1xi32, #blocked> loc(#loc47)
    %92 = tt.splat %arg3 : i32 -> tensor<1x128xi32, #blocked> loc(#loc48)
    %93 = arith.cmpi slt, %87, %92 : tensor<1x128xi32, #blocked> loc(#loc48)
    %94 = tt.broadcast %91 : tensor<256x1xi1, #blocked> -> tensor<256x128xi1, #blocked> loc(#loc49)
    %95 = tt.broadcast %93 : tensor<1x128xi1, #blocked> -> tensor<256x128xi1, #blocked> loc(#loc49)
    %96 = arith.andi %94, %95 : tensor<256x128xi1, #blocked> loc(#loc49)
    %97 = ttg.convert_layout %77 : tensor<256x128xf16, #mma> -> tensor<256x128xf16, #blocked> loc(#loc50)
    tt.store %90, %97, %96 : tensor<256x128x!tt.ptr<f16>, #blocked> loc(#loc50)
    tt.return loc(#loc51)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":91:24)
#loc3 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":40:22)
#loc4 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":93:27)
#loc5 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":40:28)
#loc6 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":94:38)
#loc7 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":95:22)
#loc8 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":96:29)
#loc9 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":97:35)
#loc10 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":97:48)
#loc11 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":98:34)
#loc12 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":98:54)
#loc13 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":98:27)
#loc14 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":99:40)
#loc15 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":109:23)
#loc16 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":109:51)
#loc17 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":109:38)
#loc18 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":109:68)
#loc19 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":111:60)
#loc20 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":111:22)
#loc21 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":112:29)
#loc22 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":112:40)
#loc23 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":112:60)
#loc24 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":112:52)
#loc25 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":112:22)
#loc26 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":120:33)
#loc27 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":129:33)
#loc28 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":129:18)
#loc29 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":123:20)
#loc30 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":124:20)
#loc31 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":120:22)
#loc32 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":123:51)
#loc33 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":124:51)
#loc34 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":128:18)
#loc35 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":123:55)
#loc36 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":126:35)
#loc37 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":123:59)
#loc38 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":134:23)
#loc39 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":138:22)
#loc40 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":138:50)
#loc41 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":138:37)
#loc42 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":140:41)
#loc43 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":140:33)
#loc44 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":140:21)
#loc45 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":140:72)
#loc46 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":140:52)
#loc47 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":141:33)
#loc48 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":141:58)
#loc49 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":141:39)
#loc50 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":142:21)
#loc51 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py":142:4)
#loc52 = loc(callsite(#loc3 at #loc4))
#loc53 = loc(callsite(#loc5 at #loc4))
#loc54 = loc(callsite(#loc3 at #loc26))
#loc55 = loc(callsite(#loc5 at #loc26))
