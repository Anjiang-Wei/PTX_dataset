#loc = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0)
#loc47 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":26:0)
#loc76 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":174:0)
#loc78 = loc(unknown)
#loc81 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":166:0)
#loc85 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":284:0)
#loc89 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":259:0)
module {
  tt.func public @_attn_fwd(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0), %arg3: f32 loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0), %arg5: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0), %arg14: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0), %arg15: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0), %arg16: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0), %arg17: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0), %arg18: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":114:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %1 = tt.get_program_id y : i32 loc(#loc2)
    %2 = arith.divsi %1, %arg18 : i32 loc(#loc3)
    %3 = arith.remsi %1, %arg18 : i32 loc(#loc4)
    %4 = arith.extsi %2 : i32 to i64 loc(#loc5)
    %5 = arith.extsi %arg6 : i32 to i64 loc(#loc6)
    %6 = arith.muli %4, %5 : i64 loc(#loc6)
    %7 = arith.extsi %3 : i32 to i64 loc(#loc7)
    %8 = arith.extsi %arg7 : i32 to i64 loc(#loc8)
    %9 = arith.muli %7, %8 : i64 loc(#loc8)
    %10 = arith.addi %6, %9 : i64 loc(#loc9)
    %11 = tt.addptr %arg0, %10 : !tt.ptr<f16>, i64 loc(#loc10)
    %c128_i32 = arith.constant 128 : i32 loc(#loc11)
    %c128_i32_0 = arith.constant 128 : i32 loc(#loc11)
    %12 = arith.extsi %0 : i32 to i64 loc(#loc11)
    %13 = arith.extsi %c128_i32_0 : i32 to i64 loc(#loc11)
    %14 = arith.muli %12, %13 : i64 loc(#loc11)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc11)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc11)
    %15 = arith.cmpi sle, %14, %c2147483647_i64 : i64 loc(#loc11)
    %16 = arith.cmpi sge, %14, %c-2147483648_i64 : i64 loc(#loc11)
    %17 = arith.andi %15, %16 : i1 loc(#loc11)
    %18 = arith.muli %0, %c128_i32_0 : i32 loc(#loc11)
    %c32_i64 = arith.constant 32 : i64 loc(#loc12)
    %c64_i64 = arith.constant 64 : i64 loc(#loc12)
    %19 = arith.extsi %arg8 : i32 to i64 loc(#loc12)
    %c1_i64 = arith.constant 1 : i64 loc(#loc12)
    %c0_i32 = arith.constant 0 : i32 loc(#loc12)
    %20 = tt.make_tensor_ptr %11, [%c32_i64, %c64_i64], [%19, %c1_i64], [%18, %c0_i32] {order = array<i32: 1, 0>} : <tensor<128x64xf16>> loc(#loc12)
    %21 = tt.addptr %arg2, %10 : !tt.ptr<f16>, i64 loc(#loc13)
    %c4096_i64 = arith.constant 4096 : i64 loc(#loc14)
    %c64_i64_1 = arith.constant 64 : i64 loc(#loc14)
    %22 = arith.extsi %arg14 : i32 to i64 loc(#loc14)
    %c1_i64_2 = arith.constant 1 : i64 loc(#loc14)
    %c0_i32_3 = arith.constant 0 : i32 loc(#loc14)
    %c0_i32_4 = arith.constant 0 : i32 loc(#loc14)
    %23 = tt.make_tensor_ptr %21, [%c4096_i64, %c64_i64_1], [%22, %c1_i64_2], [%c0_i32_3, %c0_i32_4] {order = array<i32: 0, 1>} : <tensor<64x64xf16>> loc(#loc14)
    %24 = tt.addptr %arg1, %10 : !tt.ptr<f16>, i64 loc(#loc15)
    %c64_i64_5 = arith.constant 64 : i64 loc(#loc16)
    %c4096_i64_6 = arith.constant 4096 : i64 loc(#loc16)
    %c1_i64_7 = arith.constant 1 : i64 loc(#loc16)
    %25 = arith.extsi %arg11 : i32 to i64 loc(#loc16)
    %c0_i32_8 = arith.constant 0 : i32 loc(#loc16)
    %c0_i32_9 = arith.constant 0 : i32 loc(#loc16)
    %26 = tt.make_tensor_ptr %24, [%c64_i64_5, %c4096_i64_6], [%c1_i64_7, %25], [%c0_i32_8, %c0_i32_9] {order = array<i32: 0, 1>} : <tensor<64x64xf16>> loc(#loc16)
    %27 = tt.addptr %arg5, %10 : !tt.ptr<f16>, i64 loc(#loc17)
    %c128_i32_10 = arith.constant 128 : i32 loc(#loc18)
    %c128_i32_11 = arith.constant 128 : i32 loc(#loc18)
    %28 = arith.extsi %0 : i32 to i64 loc(#loc18)
    %29 = arith.extsi %c128_i32_11 : i32 to i64 loc(#loc18)
    %30 = arith.muli %28, %29 : i64 loc(#loc18)
    %c2147483647_i64_12 = arith.constant 2147483647 : i64 loc(#loc18)
    %c-2147483648_i64_13 = arith.constant -2147483648 : i64 loc(#loc18)
    %31 = arith.cmpi sle, %30, %c2147483647_i64_12 : i64 loc(#loc18)
    %32 = arith.cmpi sge, %30, %c-2147483648_i64_13 : i64 loc(#loc18)
    %33 = arith.andi %31, %32 : i1 loc(#loc18)
    %34 = arith.muli %0, %c128_i32_11 : i32 loc(#loc18)
    %c32_i64_14 = arith.constant 32 : i64 loc(#loc19)
    %c64_i64_15 = arith.constant 64 : i64 loc(#loc19)
    %35 = arith.extsi %arg17 : i32 to i64 loc(#loc19)
    %c1_i64_16 = arith.constant 1 : i64 loc(#loc19)
    %c0_i32_17 = arith.constant 0 : i32 loc(#loc19)
    %36 = tt.make_tensor_ptr %27, [%c32_i64_14, %c64_i64_15], [%35, %c1_i64_16], [%34, %c0_i32_17] {order = array<i32: 1, 0>} : <tensor<128x64xf16>> loc(#loc19)
    %c128_i32_18 = arith.constant 128 : i32 loc(#loc20)
    %c128_i32_19 = arith.constant 128 : i32 loc(#loc20)
    %37 = arith.extsi %0 : i32 to i64 loc(#loc20)
    %38 = arith.extsi %c128_i32_19 : i32 to i64 loc(#loc20)
    %39 = arith.muli %37, %38 : i64 loc(#loc20)
    %c2147483647_i64_20 = arith.constant 2147483647 : i64 loc(#loc20)
    %c-2147483648_i64_21 = arith.constant -2147483648 : i64 loc(#loc20)
    %40 = arith.cmpi sle, %39, %c2147483647_i64_20 : i64 loc(#loc20)
    %41 = arith.cmpi sge, %39, %c-2147483648_i64_21 : i64 loc(#loc20)
    %42 = arith.andi %40, %41 : i1 loc(#loc20)
    %43 = arith.muli %0, %c128_i32_19 : i32 loc(#loc20)
    %44 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc21)
    %45 = tt.splat %43 : i32 -> tensor<128xi32> loc(#loc22)
    %46 = arith.extsi %45 : tensor<128xi32> to tensor<128xi64> loc(#loc22)
    %47 = arith.extsi %44 : tensor<128xi32> to tensor<128xi64> loc(#loc22)
    %48 = arith.addi %46, %47 : tensor<128xi64> loc(#loc22)
    %c2147483647_i64_22 = arith.constant 2147483647 : i64 loc(#loc22)
    %c-2147483648_i64_23 = arith.constant -2147483648 : i64 loc(#loc22)
    %cst = arith.constant dense<2147483647> : tensor<128xi64> loc(#loc22)
    %49 = arith.cmpi sle, %48, %cst : tensor<128xi64> loc(#loc22)
    %cst_24 = arith.constant dense<-2147483648> : tensor<128xi64> loc(#loc22)
    %50 = arith.cmpi sge, %48, %cst_24 : tensor<128xi64> loc(#loc22)
    %51 = arith.andi %49, %50 : tensor<128xi1> loc(#loc22)
    %52 = arith.addi %45, %44 : tensor<128xi32> loc(#loc22)
    %53 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc23)
    %54 = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_128__(1,)cconstexpr_fp32_"() : () -> tensor<128xf32> loc(#loc24)
    %cst_25 = arith.constant 0x7F800000 : f32 loc(#loc25)
    %cst_26 = arith.constant 0x7F800000 : f32 loc(#loc25)
    %cst_27 = arith.constant dense<0x7F800000> : tensor<128xf32> loc(#loc25)
    %55 = arith.subf %54, %cst_27 : tensor<128xf32> loc(#loc25)
    %56 = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_128__(1,)cconstexpr_fp32_"() : () -> tensor<128xf32> loc(#loc26)
    %cst_28 = arith.constant 1.000000e+00 : f32 loc(#loc27)
    %cst_29 = arith.constant 1.000000e+00 : f32 loc(#loc27)
    %cst_30 = arith.constant dense<1.000000e+00> : tensor<128xf32> loc(#loc27)
    %57 = arith.addf %56, %cst_30 : tensor<128xf32> loc(#loc27)
    %58 = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_128__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() : () -> tensor<128x64xf32> loc(#loc28)
    %cst_31 = arith.constant 1.44269502 : f32 loc(#loc29)
    %cst_32 = arith.constant 1.44269502 : f32 loc(#loc29)
    %59 = arith.mulf %arg3, %cst_32 : f32 loc(#loc29)
    %60 = tt.load %20 : !tt.ptr<tensor<128x64xf16>> loc(#loc30)
    %61:3 = tt.call @"__main__._attn_fwd_inner__fp32S128_64S_fp32S128S_fp32S128S_fp16S128_64S_Pfp16S64_64S_Pfp16S64_64S_i32_fp32_i32S128S_i32S64S__(8,)cconstexpr_128__(9,)cconstexpr_64__(10,)cconstexpr_64__(11,)cconstexpr_3__(14,)cconstexpr_32__(15,)cconstexpr_4096__(16,)cconstexpr_False_"(%58, %57, %55, %60, %26, %23, %0, %59, %52, %53) : (tensor<128x64xf32>, tensor<128xf32>, tensor<128xf32>, tensor<128x64xf16>, !tt.ptr<tensor<64x64xf16>>, !tt.ptr<tensor<64x64xf16>>, i32, f32, tensor<128xi32>, tensor<64xi32>) -> (tensor<128x64xf32>, tensor<128xf32>, tensor<128xf32>) loc(#loc31)
    %62 = math.log2 %61#1 : tensor<128xf32> loc(#loc32)
    %63 = arith.addf %61#2, %62 : tensor<128xf32> loc(#loc33)
    %64 = tt.expand_dims %61#1 {axis = 1 : i32} : tensor<128xf32> -> tensor<128x1xf32> loc(#loc34)
    %65 = tt.broadcast %64 : tensor<128x1xf32> -> tensor<128x64xf32> loc(#loc35)
    %66 = arith.divf %61#0, %65 : tensor<128x64xf32> loc(#loc35)
    %c32_i32 = arith.constant 32 : i32 loc(#loc36)
    %c32_i32_33 = arith.constant 32 : i32 loc(#loc36)
    %67 = arith.extsi %1 : i32 to i64 loc(#loc36)
    %68 = arith.extsi %c32_i32_33 : i32 to i64 loc(#loc36)
    %69 = arith.muli %67, %68 : i64 loc(#loc36)
    %c2147483647_i64_34 = arith.constant 2147483647 : i64 loc(#loc36)
    %c-2147483648_i64_35 = arith.constant -2147483648 : i64 loc(#loc36)
    %70 = arith.cmpi sle, %69, %c2147483647_i64_34 : i64 loc(#loc36)
    %71 = arith.cmpi sge, %69, %c-2147483648_i64_35 : i64 loc(#loc36)
    %72 = arith.andi %70, %71 : i1 loc(#loc36)
    %73 = arith.muli %1, %c32_i32_33 : i32 loc(#loc36)
    %74 = tt.addptr %arg4, %73 : !tt.ptr<f32>, i32 loc(#loc37)
    %75 = tt.splat %74 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc38)
    %76 = tt.addptr %75, %52 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc38)
    tt.store %76, %63 : tensor<128x!tt.ptr<f32>> loc(#loc39)
    %77 = arith.truncf %66 : tensor<128x64xf32> to tensor<128x64xf16> loc(#loc40)
    tt.store %36, %77 : !tt.ptr<tensor<128x64xf16>> loc(#loc41)
    tt.return loc(#loc42)
  } loc(#loc)
  tt.func private @"triton.language.standard.zeros____(0, 0)cconstexpr_128__(1,)cconstexpr_fp32_"() -> tensor<128xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc44)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128xf32> loc(#loc44)
    tt.return %cst_0 : tensor<128xf32> loc(#loc45)
  ^bb1:  // no predecessors
    %0 = ub.poison : tensor<128xf32> loc(#loc46)
    tt.return %0 : tensor<128xf32> loc(#loc46)
  } loc(#loc43)
  tt.func private @"triton.language.standard.zeros____(0, 0)cconstexpr_128__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() -> tensor<128x64xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc44)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x64xf32> loc(#loc44)
    tt.return %cst_0 : tensor<128x64xf32> loc(#loc45)
  ^bb1:  // no predecessors
    %0 = ub.poison : tensor<128x64xf32> loc(#loc46)
    tt.return %0 : tensor<128x64xf32> loc(#loc46)
  } loc(#loc43)
  tt.func private @"__main__._attn_fwd_inner__fp32S128_64S_fp32S128S_fp32S128S_fp16S128_64S_Pfp16S64_64S_Pfp16S64_64S_i32_fp32_i32S128S_i32S64S__(8,)cconstexpr_128__(9,)cconstexpr_64__(10,)cconstexpr_64__(11,)cconstexpr_3__(14,)cconstexpr_32__(15,)cconstexpr_4096__(16,)cconstexpr_False_"(%arg0: tensor<128x64xf32> loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":26:0), %arg1: tensor<128xf32> loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":26:0), %arg2: tensor<128xf32> loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":26:0), %arg3: tensor<128x64xf16> loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":26:0), %arg4: !tt.ptr<tensor<64x64xf16>> loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":26:0), %arg5: !tt.ptr<tensor<64x64xf16>> loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":26:0), %arg6: i32 loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":26:0), %arg7: f32 loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":26:0), %arg8: tensor<128xi32> loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":26:0), %arg9: tensor<64xi32> loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":26:0)) -> (tensor<128x64xf32>, tensor<128xf32>, tensor<128xf32>) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc48)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc48)
    %c0_i32_0 = arith.constant 0 : i32 loc(#loc49)
    %0 = tt.advance %arg4, [%c0_i32_0, %c0_i32] : <tensor<64x64xf16>> loc(#loc49)
    %c0_i32_1 = arith.constant 0 : i32 loc(#loc50)
    %1 = tt.advance %arg5, [%c0_i32, %c0_i32_1] : <tensor<64x64xf16>> loc(#loc50)
    %c64_i32 = arith.constant 64 : i32 loc(#loc51)
    %2 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc51)
    %3 = arith.bitcast %c4096_i32 : i32 to i32 loc(#loc51)
    %4 = arith.bitcast %c64_i32 : i32 to i32 loc(#loc51)
    %5 = ub.poison {tt.divisibility = dense<64> : tensor<1xi32>} : i32 loc(#loc51)
    %6:6 = scf.for %arg10 = %2 to %3 step %4 iter_args(%arg11 = %5, %arg12 = %arg1, %arg13 = %arg0, %arg14 = %arg2, %arg15 = %1, %arg16 = %0) -> (i32, tensor<128xf32>, tensor<128x64xf32>, tensor<128xf32>, !tt.ptr<tensor<64x64xf16>>, !tt.ptr<tensor<64x64xf16>>)  : i32 {
      %10 = tt.load %arg16 : !tt.ptr<tensor<64x64xf16>> loc(#loc52)
      %cst = arith.constant 0.000000e+00 : f32 loc(#loc53)
      %cst_2 = arith.constant dense<0.000000e+00> : tensor<128x64xf32> loc(#loc53)
      %11 = tt.dot %arg3, %10, %cst_2, inputPrecision = tf32 : tensor<128x64xf16> * tensor<64x64xf16> -> tensor<128x64xf32> loc(#loc53)
      %12 = tt.call @"triton.language.standard.max__fp32S128_64S__(1,)cconstexpr_1__(2,)cconstexpr_False__(3,)cconstexpr_True__(4,)cconstexpr_False_"(%11) : (tensor<128x64xf32>) -> tensor<128xf32> loc(#loc54)
      %13 = tt.splat %arg7 : f32 -> tensor<128xf32> loc(#loc55)
      %14 = arith.mulf %12, %13 : tensor<128xf32> loc(#loc55)
      %15 = arith.maxnumf %arg14, %14 : tensor<128xf32> loc(#loc56)
      %16 = tt.splat %arg7 : f32 -> tensor<128x64xf32> loc(#loc57)
      %17 = arith.mulf %11, %16 : tensor<128x64xf32> loc(#loc57)
      %18 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xf32> -> tensor<128x1xf32> loc(#loc58)
      %19 = tt.broadcast %18 : tensor<128x1xf32> -> tensor<128x64xf32> loc(#loc59)
      %20 = arith.subf %17, %19 : tensor<128x64xf32> loc(#loc59)
      %21 = math.exp2 %20 : tensor<128x64xf32> loc(#loc60)
      %22 = tt.call @"triton.language.standard.sum__fp32S128_64S__(1,)cconstexpr_1__(2,)cconstexpr_False__(3,)cNone"(%21) : (tensor<128x64xf32>) -> tensor<128xf32> loc(#loc61)
      %23 = arith.subf %arg14, %15 : tensor<128xf32> loc(#loc62)
      %24 = math.exp2 %23 : tensor<128xf32> loc(#loc63)
      %25 = arith.mulf %arg12, %24 : tensor<128xf32> loc(#loc64)
      %26 = arith.addf %25, %22 : tensor<128xf32> loc(#loc65)
      %27 = tt.expand_dims %24 {axis = 1 : i32} : tensor<128xf32> -> tensor<128x1xf32> loc(#loc66)
      %28 = tt.broadcast %27 : tensor<128x1xf32> -> tensor<128x64xf32> loc(#loc67)
      %29 = arith.mulf %arg13, %28 : tensor<128x64xf32> loc(#loc67)
      %30 = tt.load %arg15 : !tt.ptr<tensor<64x64xf16>> loc(#loc68)
      %31 = arith.truncf %21 : tensor<128x64xf32> to tensor<128x64xf16> loc(#loc69)
      %cst_3 = arith.constant 0.000000e+00 : f32 loc(#loc70)
      %32 = tt.dot %31, %30, %29, inputPrecision = tf32 : tensor<128x64xf16> * tensor<64x64xf16> -> tensor<128x64xf32> loc(#loc70)
      %c64_i32_4 = arith.constant 64 : i32 loc(#loc71)
      %c0_i32_5 = arith.constant 0 : i32 loc(#loc71)
      %33 = tt.advance %arg15, [%c64_i32_4, %c0_i32_5] : <tensor<64x64xf16>> loc(#loc71)
      %c0_i32_6 = arith.constant 0 : i32 loc(#loc72)
      %c64_i32_7 = arith.constant 64 : i32 loc(#loc72)
      %34 = tt.advance %arg16, [%c0_i32_6, %c64_i32_7] : <tensor<64x64xf16>> loc(#loc72)
      scf.yield %arg10, %26, %32, %15, %33, %34 : i32, tensor<128xf32>, tensor<128x64xf32>, tensor<128xf32>, !tt.ptr<tensor<64x64xf16>>, !tt.ptr<tensor<64x64xf16>> loc(#loc73)
    } {tt.divisibility_arg1 = dense<64> : tensor<1xi32>} loc(#loc51)
    tt.return %6#2, %6#1, %6#3 : tensor<128x64xf32>, tensor<128xf32>, tensor<128xf32> loc(#loc74)
  ^bb1:  // no predecessors
    %7 = ub.poison : tensor<128x64xf32> loc(#loc75)
    %8 = ub.poison : tensor<128xf32> loc(#loc75)
    %9 = ub.poison : tensor<128xf32> loc(#loc75)
    tt.return %7, %8, %9 : tensor<128x64xf32>, tensor<128xf32>, tensor<128xf32> loc(#loc75)
  } loc(#loc47)
  tt.func private @"triton.language.standard.max__fp32S128_64S__(1,)cconstexpr_1__(2,)cconstexpr_False__(3,)cconstexpr_True__(4,)cconstexpr_False_"(%arg0: tensor<128x64xf32> loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":174:0)) -> tensor<128xf32> attributes {noinline = false} {
    %0 = "tt.reduce"(%arg0) <{axis = 1 : i32}> ({
    ^bb0(%arg1: f32 loc(unknown), %arg2: f32 loc(unknown)):
      %2 = tt.call @triton.language.standard._elementwise_max__fp32_fp32__(%arg1, %arg2) : (f32, f32) -> f32 loc(#loc77)
      tt.reduce.return %2 : f32 loc(#loc77)
    }) : (tensor<128x64xf32>) -> tensor<128xf32> loc(#loc77)
    tt.return %0 : tensor<128xf32> loc(#loc79)
  ^bb1:  // no predecessors
    %1 = ub.poison : tensor<128xf32> loc(#loc80)
    tt.return %1 : tensor<128xf32> loc(#loc80)
  } loc(#loc76)
  tt.func private @triton.language.standard._elementwise_max__fp32_fp32__(%arg0: f32 loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":166:0), %arg1: f32 loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":166:0)) -> f32 attributes {noinline = false} {
    %0 = arith.maxnumf %arg0, %arg1 : f32 loc(#loc82)
    tt.return %0 : f32 loc(#loc83)
  ^bb1:  // no predecessors
    %1 = ub.poison : f32 loc(#loc84)
    tt.return %1 : f32 loc(#loc84)
  } loc(#loc81)
  tt.func private @"triton.language.standard.sum__fp32S128_64S__(1,)cconstexpr_1__(2,)cconstexpr_False__(3,)cNone"(%arg0: tensor<128x64xf32> loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":284:0)) -> tensor<128xf32> attributes {noinline = false} {
    %0 = "tt.reduce"(%arg0) <{axis = 1 : i32}> ({
    ^bb0(%arg1: f32 loc(unknown), %arg2: f32 loc(unknown)):
      %2 = tt.call @triton.language.standard._sum_combine__fp32_fp32__(%arg1, %arg2) : (f32, f32) -> f32 loc(#loc86)
      tt.reduce.return %2 : f32 loc(#loc86)
    }) : (tensor<128x64xf32>) -> tensor<128xf32> loc(#loc86)
    tt.return %0 : tensor<128xf32> loc(#loc87)
  ^bb1:  // no predecessors
    %1 = ub.poison : tensor<128xf32> loc(#loc88)
    tt.return %1 : tensor<128xf32> loc(#loc88)
  } loc(#loc85)
  tt.func private @triton.language.standard._sum_combine__fp32_fp32__(%arg0: f32 loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":259:0), %arg1: f32 loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":259:0)) -> f32 attributes {noinline = false} {
    %0 = arith.addf %arg0, %arg1 : f32 loc(#loc90)
    tt.return %0 : f32 loc(#loc91)
  ^bb1:  // no predecessors
    %1 = ub.poison : f32 loc(#loc92)
    tt.return %1 : f32 loc(#loc92)
  } loc(#loc89)
} loc(#loc)
#loc1 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":127:28)
#loc2 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":128:27)
#loc3 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":129:22)
#loc4 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":130:21)
#loc5 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":131:26)
#loc6 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":131:38)
#loc7 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":131:59)
#loc8 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":131:71)
#loc9 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":131:50)
#loc10 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":135:17)
#loc11 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":138:27)
#loc12 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":140:8)
#loc13 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":143:17)
#loc14 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":148:8)
#loc15 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":151:17)
#loc16 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":156:8)
#loc17 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":159:19)
#loc18 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":162:27)
#loc19 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":164:8)
#loc20 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":167:23)
#loc21 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":167:46)
#loc22 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":167:33)
#loc23 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":168:26)
#loc24 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":170:19)
#loc25 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":170:50)
#loc26 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":171:19)
#loc27 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":171:50)
#loc28 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":172:19)
#loc29 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":175:16)
#loc30 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":177:16)
#loc31 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":185:82)
#loc32 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":198:24)
#loc33 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":198:11)
#loc34 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":199:20)
#loc35 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":199:16)
#loc36 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":200:26)
#loc37 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":200:17)
#loc38 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":200:34)
#loc39 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":201:21)
#loc40 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":202:33)
#loc41 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":202:26)
#loc42 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":202:4)
#loc43 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":117:0)
#loc44 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":126:31)
#loc45 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":126:11)
#loc46 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":126:4)
#loc48 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":40:17)
#loc49 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":41:42)
#loc50 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":42:42)
#loc51 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":44:33)
#loc52 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":47:20)
#loc53 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":48:23)
#loc54 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":55:46)
#loc55 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":55:51)
#loc56 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":55:35)
#loc57 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":56:22)
#loc58 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":56:38)
#loc59 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":56:33)
#loc60 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":57:25)
#loc61 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":58:25)
#loc62 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":60:35)
#loc63 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":60:29)
#loc64 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":61:20)
#loc65 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":61:28)
#loc66 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":63:26)
#loc67 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":63:20)
#loc68 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":65:20)
#loc69 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":69:21)
#loc70 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":70:27)
#loc71 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":73:46)
#loc72 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":74:46)
#loc73 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":74:8)
#loc74 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":75:11)
#loc75 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gqa.py":75:4)
#loc77 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":188:40)
#loc79 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":188:15)
#loc80 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":176:4)
#loc82 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":167:27)
#loc83 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":167:11)
#loc84 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":167:4)
#loc86 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":290:36)
#loc87 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":290:11)
#loc88 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":290:4)
#loc90 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":260:15)
#loc91 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":260:11)
#loc92 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":260:4)
