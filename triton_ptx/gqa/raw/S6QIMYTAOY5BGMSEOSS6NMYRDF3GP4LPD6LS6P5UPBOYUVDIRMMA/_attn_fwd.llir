; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @_attn_fwd(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, float %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, ptr addrspace(1) readnone captures(none) %19) local_unnamed_addr #0 !dbg !5 {
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %.frozen = freeze i32 %18, !dbg !10
  %23 = sdiv i32 %22, %.frozen, !dbg !10
  %24 = mul i32 %23, %.frozen, !dbg !11
  %.decomposed = sub i32 %22, %24, !dbg !11
  %25 = sext i32 %23 to i64, !dbg !12
  %26 = sext i32 %6 to i64, !dbg !13
  %27 = mul nsw i64 %25, %26, !dbg !13
  %28 = zext nneg i32 %.decomposed to i64, !dbg !14
  %29 = sext i32 %7 to i64, !dbg !15
  %30 = mul nsw i64 %28, %29, !dbg !15
  %31 = add nsw i64 %30, %27, !dbg !16
  %32 = getelementptr half, ptr addrspace(1) %0, i64 %31, !dbg !17
  %33 = shl i32 %21, 7, !dbg !18
  %34 = sext i32 %8 to i64, !dbg !19
  %35 = sext i32 %33 to i64, !dbg !19
  %36 = getelementptr half, ptr addrspace(1) %2, i64 %31, !dbg !20
  %37 = sext i32 %14 to i64, !dbg !21
  %38 = getelementptr half, ptr addrspace(1) %1, i64 %31, !dbg !22
  %39 = sext i32 %11 to i64, !dbg !23
  %40 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %41 = and i32 %40, 16, !dbg !24
  %42 = lshr i32 %40, 3, !dbg !24
  %43 = and i32 %42, 31, !dbg !24
  %44 = or disjoint i32 %43, 32, !dbg !24
  %45 = or disjoint i32 %43, 64, !dbg !24
  %46 = or i32 %42, 96, !dbg !24
  %47 = and i32 %40, 4, !dbg !24
  %.not4 = icmp eq i32 %47, 0, !dbg !24
  %48 = fmul float %3, 0x3FF7154760000000, !dbg !25
  %49 = zext nneg i32 %43 to i64, !dbg !26
  %50 = zext nneg i32 %44 to i64, !dbg !26
  %51 = zext nneg i32 %45 to i64, !dbg !26
  %52 = zext nneg i32 %46 to i64, !dbg !26
  %53 = or disjoint i64 %49, %35, !dbg !26
  %54 = or disjoint i64 %50, %35, !dbg !26
  %55 = or disjoint i64 %51, %35, !dbg !26
  %56 = or disjoint i64 %52, %35, !dbg !26
  %57 = mul nsw i64 %53, %34, !dbg !26
  %58 = mul nsw i64 %54, %34, !dbg !26
  %59 = mul nsw i64 %55, %34, !dbg !26
  %60 = mul nsw i64 %56, %34, !dbg !26
  %61 = shl nuw nsw i32 %40, 3, !dbg !26
  %62 = and i32 %61, 56, !dbg !26
  %63 = zext nneg i32 %62 to i64, !dbg !26
  %64 = getelementptr half, ptr addrspace(1) %32, i64 %57, !dbg !26
  %65 = getelementptr half, ptr addrspace(1) %64, i64 %63, !dbg !26
  %66 = getelementptr half, ptr addrspace(1) %32, i64 %58, !dbg !26
  %67 = getelementptr half, ptr addrspace(1) %66, i64 %63, !dbg !26
  %68 = getelementptr half, ptr addrspace(1) %32, i64 %59, !dbg !26
  %69 = getelementptr half, ptr addrspace(1) %68, i64 %63, !dbg !26
  %70 = getelementptr half, ptr addrspace(1) %32, i64 %60, !dbg !26
  %71 = getelementptr half, ptr addrspace(1) %70, i64 %63, !dbg !26
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %65) #2, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !26
  %74 = bitcast i32 %73 to <2 x half>, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !26
  %76 = bitcast i32 %75 to <2 x half>, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !26
  %78 = bitcast i32 %77 to <2 x half>, !dbg !26
  %79 = shufflevector <2 x half> %78, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %80 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !26
  %81 = bitcast i32 %80 to <2 x half>, !dbg !26
  %82 = shufflevector <2 x half> %81, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %67) #2, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !26
  %85 = bitcast i32 %84 to <2 x half>, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !26
  %87 = bitcast i32 %86 to <2 x half>, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !26
  %89 = bitcast i32 %88 to <2 x half>, !dbg !26
  %90 = shufflevector <2 x half> %89, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %91 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !26
  %92 = bitcast i32 %91 to <2 x half>, !dbg !26
  %93 = shufflevector <2 x half> %92, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %69) #2, !dbg !26
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !26
  %96 = bitcast i32 %95 to <2 x half>, !dbg !26
  %97 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !26
  %98 = bitcast i32 %97 to <2 x half>, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !26
  %100 = bitcast i32 %99 to <2 x half>, !dbg !26
  %101 = shufflevector <2 x half> %100, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %102 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !26
  %103 = bitcast i32 %102 to <2 x half>, !dbg !26
  %104 = shufflevector <2 x half> %103, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %71) #2, !dbg !26
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !26
  %107 = bitcast i32 %106 to <2 x half>, !dbg !26
  %108 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !26
  %109 = bitcast i32 %108 to <2 x half>, !dbg !26
  %110 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !26
  %111 = bitcast i32 %110 to <2 x half>, !dbg !26
  %112 = shufflevector <2 x half> %111, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %113 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !26
  %114 = bitcast i32 %113 to <2 x half>, !dbg !26
  %115 = shufflevector <2 x half> %114, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %116 = xor i32 %61, %40, !dbg !26
  %117 = and i32 %116, 56, !dbg !26
  %118 = shl nuw nsw i32 %43, 6, !dbg !26
  %119 = or disjoint i32 %118, %117, !dbg !26
  %120 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %119, !dbg !26
  %121 = shufflevector <2 x half> %74, <2 x half> %76, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %122 = shufflevector <8 x half> %121, <8 x half> %79, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %123 = shufflevector <8 x half> %122, <8 x half> %82, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %123, ptr addrspace(3) %120, align 16, !dbg !26
  %124 = or disjoint i32 %119, 2048, !dbg !26
  %125 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %124, !dbg !26
  %126 = shufflevector <2 x half> %85, <2 x half> %87, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %127 = shufflevector <8 x half> %126, <8 x half> %90, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %128 = shufflevector <8 x half> %127, <8 x half> %93, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %128, ptr addrspace(3) %125, align 16, !dbg !26
  %129 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %117, !dbg !26
  %130 = shl nuw nsw i32 %43, 7, !dbg !26
  %131 = getelementptr inbounds nuw i8, ptr addrspace(3) %129, i32 %130, !dbg !26
  %132 = getelementptr inbounds nuw i8, ptr addrspace(3) %131, i32 8192, !dbg !26
  %133 = shufflevector <2 x half> %96, <2 x half> %98, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %134 = shufflevector <8 x half> %133, <8 x half> %101, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %135 = shufflevector <8 x half> %134, <8 x half> %104, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %135, ptr addrspace(3) %132, align 16, !dbg !26
  %136 = getelementptr inbounds nuw i8, ptr addrspace(3) %131, i32 12288, !dbg !26
  %137 = shufflevector <2 x half> %107, <2 x half> %109, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %138 = shufflevector <8 x half> %137, <8 x half> %112, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %139 = shufflevector <8 x half> %138, <8 x half> %115, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %139, ptr addrspace(3) %136, align 16, !dbg !26
  %140 = mul nsw i64 %39, %49, !dbg !27
  %141 = mul nsw i64 %39, %50, !dbg !27
  %142 = getelementptr half, ptr addrspace(1) %38, i64 %140, !dbg !27
  %143 = getelementptr half, ptr addrspace(1) %142, i64 %63, !dbg !27
  %144 = getelementptr half, ptr addrspace(1) %38, i64 %141, !dbg !27
  %145 = getelementptr half, ptr addrspace(1) %144, i64 %63, !dbg !27
  %146 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %119, !dbg !27
  %147 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %124, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %146, ptr addrspace(1) %143, i32 16) #2, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %147, ptr addrspace(1) %145, i32 16) #2, !dbg !27
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !27
  %148 = mul nsw i64 %37, %49, !dbg !30
  %149 = mul nsw i64 %37, %50, !dbg !30
  %150 = getelementptr half, ptr addrspace(1) %36, i64 %148, !dbg !30
  %151 = getelementptr half, ptr addrspace(1) %150, i64 %63, !dbg !30
  %152 = getelementptr half, ptr addrspace(1) %36, i64 %149, !dbg !30
  %153 = getelementptr half, ptr addrspace(1) %152, i64 %63, !dbg !30
  %154 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %119, !dbg !30
  %155 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %124, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %154, ptr addrspace(1) %151, i32 16) #2, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %155, ptr addrspace(1) %153, i32 16) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %156 = or disjoint i64 %49, 64, !dbg !27
  %157 = or disjoint i64 %50, 64, !dbg !27
  %158 = mul nsw i64 %156, %39, !dbg !27
  %159 = mul nsw i64 %157, %39, !dbg !27
  %160 = getelementptr half, ptr addrspace(1) %38, i64 %158, !dbg !27
  %161 = getelementptr half, ptr addrspace(1) %160, i64 %63, !dbg !27
  %162 = getelementptr half, ptr addrspace(1) %38, i64 %159, !dbg !27
  %163 = getelementptr half, ptr addrspace(1) %162, i64 %63, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %164 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %119, !dbg !27
  %165 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %124, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %164, ptr addrspace(1) %161, i32 16) #2, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %165, ptr addrspace(1) %163, i32 16) #2, !dbg !27
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !27
  %166 = mul nsw i64 %156, %37, !dbg !30
  %167 = mul nsw i64 %157, %37, !dbg !30
  %168 = getelementptr half, ptr addrspace(1) %36, i64 %166, !dbg !30
  %169 = getelementptr half, ptr addrspace(1) %168, i64 %63, !dbg !30
  %170 = getelementptr half, ptr addrspace(1) %36, i64 %167, !dbg !30
  %171 = getelementptr half, ptr addrspace(1) %170, i64 %63, !dbg !30
  %172 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %119, !dbg !30
  %173 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %124, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %172, ptr addrspace(1) %169, i32 16) #2, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %173, ptr addrspace(1) %171, i32 16) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %174 = or disjoint i64 %49, 128, !dbg !27
  %175 = or disjoint i64 %50, 128, !dbg !27
  %176 = mul nsw i64 %174, %39, !dbg !27
  %177 = mul nsw i64 %175, %39, !dbg !27
  %178 = getelementptr half, ptr addrspace(1) %38, i64 %176, !dbg !27
  %179 = getelementptr half, ptr addrspace(1) %178, i64 %63, !dbg !27
  %180 = getelementptr half, ptr addrspace(1) %38, i64 %177, !dbg !27
  %181 = getelementptr half, ptr addrspace(1) %180, i64 %63, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %182 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %119, !dbg !27
  %183 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %124, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %182, ptr addrspace(1) %179, i32 16) #2, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %183, ptr addrspace(1) %181, i32 16) #2, !dbg !27
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !27
  %184 = mul nsw i64 %174, %37, !dbg !30
  %185 = mul nsw i64 %175, %37, !dbg !30
  %186 = getelementptr half, ptr addrspace(1) %36, i64 %184, !dbg !30
  %187 = getelementptr half, ptr addrspace(1) %186, i64 %63, !dbg !30
  %188 = getelementptr half, ptr addrspace(1) %36, i64 %185, !dbg !30
  %189 = getelementptr half, ptr addrspace(1) %188, i64 %63, !dbg !30
  %190 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %119, !dbg !30
  %191 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %124, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %190, ptr addrspace(1) %187, i32 16) #2, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %191, ptr addrspace(1) %189, i32 16) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %invariant.gep = getelementptr half, ptr addrspace(1) %38, i64 %63, !dbg !31
  %invariant.gep219 = getelementptr half, ptr addrspace(1) %36, i64 %63, !dbg !31
  %192 = and i32 %40, 3
  %193 = mul nuw nsw i32 %192, 72
  %194 = select i1 %.not4, i32 0, i32 288
  %195 = xor i32 %194, %193
  %196 = shl nuw nsw i32 %40, 6
  %197 = and i32 %196, 512
  %198 = or disjoint i32 %195, %197
  %199 = lshr exact i32 %41, 1
  %200 = xor i32 %198, %199
  %201 = shl nuw nsw i32 %40, 5
  %202 = and i32 %201, 1024
  %203 = or disjoint i32 %200, %202
  %204 = and i32 %201, 6144
  %205 = xor i32 %203, %204
  %206 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %205
  %207 = ptrtoint ptr addrspace(3) %206 to i32
  %208 = xor i32 %205, 16
  %209 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %208
  %210 = ptrtoint ptr addrspace(3) %209 to i32
  %211 = xor i32 %205, 32
  %212 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %211
  %213 = ptrtoint ptr addrspace(3) %212 to i32
  %214 = xor i32 %205, 48
  %215 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %214
  %216 = ptrtoint ptr addrspace(3) %215 to i32
  %and.ra = and i32 %40, 24
  %217 = xor i32 %195, %and.ra
  %218 = xor i32 %217, 32
  %219 = xor i32 %217, 544
  %220 = xor i32 %217, 1056
  %221 = xor i32 %217, 1568
  %222 = xor i32 %217, 2080
  %223 = xor i32 %217, 2592
  %224 = xor i32 %217, 3104
  %225 = xor i32 %217, 3616
  %226 = and i32 %196, 1536
  %227 = or disjoint i32 %195, %226
  %228 = xor i32 %227, 8
  %229 = xor i32 %227, 2056
  %230 = xor i32 %227, 16
  %231 = xor i32 %227, 2064
  %232 = xor i32 %227, 24
  %233 = xor i32 %227, 2072
  %234 = xor i32 %227, 32
  %235 = xor i32 %227, 2080
  %236 = xor i32 %227, 40
  %237 = xor i32 %227, 2088
  %238 = xor i32 %227, 48
  %239 = xor i32 %227, 2096
  %240 = xor i32 %227, 56
  %241 = xor i32 %227, 2104
  br label %242, !dbg !31

242:                                              ; preds = %20, %__nv_exp2f.exit150
  %243 = phi i32 [ -1, %20 ], [ %286, %__nv_exp2f.exit150 ]
  %244 = phi i32 [ 2, %20 ], [ %1289, %__nv_exp2f.exit150 ]
  %245 = phi i64 [ 128, %20 ], [ %1286, %__nv_exp2f.exit150 ]
  %246 = phi float [ 0xFFF0000000000000, %20 ], [ %629, %__nv_exp2f.exit150 ]
  %247 = phi float [ 0xFFF0000000000000, %20 ], [ %630, %__nv_exp2f.exit150 ]
  %248 = phi float [ 0.000000e+00, %20 ], [ %1247, %__nv_exp2f.exit150 ]
  %249 = phi float [ 0.000000e+00, %20 ], [ %1248, %__nv_exp2f.exit150 ]
  %250 = phi float [ 0.000000e+00, %20 ], [ %1249, %__nv_exp2f.exit150 ]
  %251 = phi float [ 0.000000e+00, %20 ], [ %1250, %__nv_exp2f.exit150 ]
  %252 = phi float [ 0.000000e+00, %20 ], [ %1252, %__nv_exp2f.exit150 ]
  %253 = phi float [ 0.000000e+00, %20 ], [ %1253, %__nv_exp2f.exit150 ]
  %254 = phi float [ 0.000000e+00, %20 ], [ %1254, %__nv_exp2f.exit150 ]
  %255 = phi float [ 0.000000e+00, %20 ], [ %1255, %__nv_exp2f.exit150 ]
  %256 = phi float [ 0.000000e+00, %20 ], [ %1257, %__nv_exp2f.exit150 ]
  %257 = phi float [ 0.000000e+00, %20 ], [ %1258, %__nv_exp2f.exit150 ]
  %258 = phi float [ 0.000000e+00, %20 ], [ %1259, %__nv_exp2f.exit150 ]
  %259 = phi float [ 0.000000e+00, %20 ], [ %1260, %__nv_exp2f.exit150 ]
  %260 = phi float [ 0.000000e+00, %20 ], [ %1262, %__nv_exp2f.exit150 ]
  %261 = phi float [ 0.000000e+00, %20 ], [ %1263, %__nv_exp2f.exit150 ]
  %262 = phi float [ 0.000000e+00, %20 ], [ %1264, %__nv_exp2f.exit150 ]
  %263 = phi float [ 0.000000e+00, %20 ], [ %1265, %__nv_exp2f.exit150 ]
  %264 = phi float [ 0.000000e+00, %20 ], [ %1267, %__nv_exp2f.exit150 ]
  %265 = phi float [ 0.000000e+00, %20 ], [ %1268, %__nv_exp2f.exit150 ]
  %266 = phi float [ 0.000000e+00, %20 ], [ %1269, %__nv_exp2f.exit150 ]
  %267 = phi float [ 0.000000e+00, %20 ], [ %1270, %__nv_exp2f.exit150 ]
  %268 = phi float [ 0.000000e+00, %20 ], [ %1272, %__nv_exp2f.exit150 ]
  %269 = phi float [ 0.000000e+00, %20 ], [ %1273, %__nv_exp2f.exit150 ]
  %270 = phi float [ 0.000000e+00, %20 ], [ %1274, %__nv_exp2f.exit150 ]
  %271 = phi float [ 0.000000e+00, %20 ], [ %1275, %__nv_exp2f.exit150 ]
  %272 = phi float [ 0.000000e+00, %20 ], [ %1277, %__nv_exp2f.exit150 ]
  %273 = phi float [ 0.000000e+00, %20 ], [ %1278, %__nv_exp2f.exit150 ]
  %274 = phi float [ 0.000000e+00, %20 ], [ %1279, %__nv_exp2f.exit150 ]
  %275 = phi float [ 0.000000e+00, %20 ], [ %1280, %__nv_exp2f.exit150 ]
  %276 = phi float [ 0.000000e+00, %20 ], [ %1282, %__nv_exp2f.exit150 ]
  %277 = phi float [ 0.000000e+00, %20 ], [ %1283, %__nv_exp2f.exit150 ]
  %278 = phi float [ 0.000000e+00, %20 ], [ %1284, %__nv_exp2f.exit150 ]
  %279 = phi float [ 0.000000e+00, %20 ], [ %1285, %__nv_exp2f.exit150 ]
  %280 = phi float [ 1.000000e+00, %20 ], [ %915, %__nv_exp2f.exit150 ]
  %281 = phi float [ 1.000000e+00, %20 ], [ %916, %__nv_exp2f.exit150 ]
  %282 = phi i32 [ 0, %20 ], [ %1304, %__nv_exp2f.exit150 ]
  %283 = icmp samesign ult i32 %282, 3904, !dbg !31
  %284 = add i32 %243, 1, !dbg !31
  %285 = icmp sgt i32 %284, 2, !dbg !31
  %286 = select i1 %285, i32 0, i32 %284, !dbg !31
  tail call void @llvm.nvvm.cp.async.wait.group(i32 4), !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %287 = shl i32 %286, 12, !dbg !27
  %288 = getelementptr half, ptr addrspace(3) @global_smem, i32 %287, !dbg !27
  %289 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %207) #2, !dbg !26
  %290 = extractvalue { i32, i32, i32, i32 } %289, 0, !dbg !26
  %291 = extractvalue { i32, i32, i32, i32 } %289, 1, !dbg !26
  %292 = extractvalue { i32, i32, i32, i32 } %289, 2, !dbg !26
  %293 = extractvalue { i32, i32, i32, i32 } %289, 3, !dbg !26
  %294 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %210) #2, !dbg !26
  %295 = extractvalue { i32, i32, i32, i32 } %294, 0, !dbg !26
  %296 = extractvalue { i32, i32, i32, i32 } %294, 1, !dbg !26
  %297 = extractvalue { i32, i32, i32, i32 } %294, 2, !dbg !26
  %298 = extractvalue { i32, i32, i32, i32 } %294, 3, !dbg !26
  %299 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %213) #2, !dbg !26
  %300 = extractvalue { i32, i32, i32, i32 } %299, 0, !dbg !26
  %301 = extractvalue { i32, i32, i32, i32 } %299, 1, !dbg !26
  %302 = extractvalue { i32, i32, i32, i32 } %299, 2, !dbg !26
  %303 = extractvalue { i32, i32, i32, i32 } %299, 3, !dbg !26
  %304 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %216) #2, !dbg !26
  %305 = extractvalue { i32, i32, i32, i32 } %304, 0, !dbg !26
  %306 = extractvalue { i32, i32, i32, i32 } %304, 1, !dbg !26
  %307 = extractvalue { i32, i32, i32, i32 } %304, 2, !dbg !26
  %308 = extractvalue { i32, i32, i32, i32 } %304, 3, !dbg !26
  %309 = getelementptr inbounds nuw half, ptr addrspace(3) %288, i32 %217, !dbg !27
  %310 = ptrtoint ptr addrspace(3) %309 to i32, !dbg !27
  %311 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %310) #2, !dbg !27
  %312 = extractvalue { i32, i32, i32, i32 } %311, 0, !dbg !27
  %313 = extractvalue { i32, i32, i32, i32 } %311, 1, !dbg !27
  %314 = extractvalue { i32, i32, i32, i32 } %311, 2, !dbg !27
  %315 = extractvalue { i32, i32, i32, i32 } %311, 3, !dbg !27
  %316 = getelementptr inbounds nuw half, ptr addrspace(3) %288, i32 %218, !dbg !27
  %317 = ptrtoint ptr addrspace(3) %316 to i32, !dbg !27
  %318 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %317) #2, !dbg !27
  %319 = extractvalue { i32, i32, i32, i32 } %318, 0, !dbg !27
  %320 = extractvalue { i32, i32, i32, i32 } %318, 1, !dbg !27
  %321 = extractvalue { i32, i32, i32, i32 } %318, 2, !dbg !27
  %322 = extractvalue { i32, i32, i32, i32 } %318, 3, !dbg !27
  %323 = getelementptr inbounds nuw i8, ptr addrspace(3) %309, i32 1024, !dbg !27
  %324 = ptrtoint ptr addrspace(3) %323 to i32, !dbg !27
  %325 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %324) #2, !dbg !27
  %326 = extractvalue { i32, i32, i32, i32 } %325, 0, !dbg !27
  %327 = extractvalue { i32, i32, i32, i32 } %325, 1, !dbg !27
  %328 = extractvalue { i32, i32, i32, i32 } %325, 2, !dbg !27
  %329 = extractvalue { i32, i32, i32, i32 } %325, 3, !dbg !27
  %330 = getelementptr inbounds nuw half, ptr addrspace(3) %288, i32 %219, !dbg !27
  %331 = ptrtoint ptr addrspace(3) %330 to i32, !dbg !27
  %332 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %331) #2, !dbg !27
  %333 = extractvalue { i32, i32, i32, i32 } %332, 0, !dbg !27
  %334 = extractvalue { i32, i32, i32, i32 } %332, 1, !dbg !27
  %335 = extractvalue { i32, i32, i32, i32 } %332, 2, !dbg !27
  %336 = extractvalue { i32, i32, i32, i32 } %332, 3, !dbg !27
  %337 = getelementptr inbounds nuw i8, ptr addrspace(3) %309, i32 2048, !dbg !27
  %338 = ptrtoint ptr addrspace(3) %337 to i32, !dbg !27
  %339 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %338) #2, !dbg !27
  %340 = extractvalue { i32, i32, i32, i32 } %339, 0, !dbg !27
  %341 = extractvalue { i32, i32, i32, i32 } %339, 1, !dbg !27
  %342 = extractvalue { i32, i32, i32, i32 } %339, 2, !dbg !27
  %343 = extractvalue { i32, i32, i32, i32 } %339, 3, !dbg !27
  %344 = getelementptr inbounds nuw half, ptr addrspace(3) %288, i32 %220, !dbg !27
  %345 = ptrtoint ptr addrspace(3) %344 to i32, !dbg !27
  %346 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %345) #2, !dbg !27
  %347 = extractvalue { i32, i32, i32, i32 } %346, 0, !dbg !27
  %348 = extractvalue { i32, i32, i32, i32 } %346, 1, !dbg !27
  %349 = extractvalue { i32, i32, i32, i32 } %346, 2, !dbg !27
  %350 = extractvalue { i32, i32, i32, i32 } %346, 3, !dbg !27
  %351 = getelementptr inbounds nuw i8, ptr addrspace(3) %309, i32 3072, !dbg !27
  %352 = ptrtoint ptr addrspace(3) %351 to i32, !dbg !27
  %353 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %352) #2, !dbg !27
  %354 = extractvalue { i32, i32, i32, i32 } %353, 0, !dbg !27
  %355 = extractvalue { i32, i32, i32, i32 } %353, 1, !dbg !27
  %356 = extractvalue { i32, i32, i32, i32 } %353, 2, !dbg !27
  %357 = extractvalue { i32, i32, i32, i32 } %353, 3, !dbg !27
  %358 = getelementptr inbounds nuw half, ptr addrspace(3) %288, i32 %221, !dbg !27
  %359 = ptrtoint ptr addrspace(3) %358 to i32, !dbg !27
  %360 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %359) #2, !dbg !27
  %361 = extractvalue { i32, i32, i32, i32 } %360, 0, !dbg !27
  %362 = extractvalue { i32, i32, i32, i32 } %360, 1, !dbg !27
  %363 = extractvalue { i32, i32, i32, i32 } %360, 2, !dbg !27
  %364 = extractvalue { i32, i32, i32, i32 } %360, 3, !dbg !27
  %365 = getelementptr inbounds nuw i8, ptr addrspace(3) %309, i32 4096, !dbg !27
  %366 = ptrtoint ptr addrspace(3) %365 to i32, !dbg !27
  %367 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %366) #2, !dbg !27
  %368 = extractvalue { i32, i32, i32, i32 } %367, 0, !dbg !27
  %369 = extractvalue { i32, i32, i32, i32 } %367, 1, !dbg !27
  %370 = extractvalue { i32, i32, i32, i32 } %367, 2, !dbg !27
  %371 = extractvalue { i32, i32, i32, i32 } %367, 3, !dbg !27
  %372 = getelementptr inbounds nuw half, ptr addrspace(3) %288, i32 %222, !dbg !27
  %373 = ptrtoint ptr addrspace(3) %372 to i32, !dbg !27
  %374 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %373) #2, !dbg !27
  %375 = extractvalue { i32, i32, i32, i32 } %374, 0, !dbg !27
  %376 = extractvalue { i32, i32, i32, i32 } %374, 1, !dbg !27
  %377 = extractvalue { i32, i32, i32, i32 } %374, 2, !dbg !27
  %378 = extractvalue { i32, i32, i32, i32 } %374, 3, !dbg !27
  %379 = getelementptr inbounds nuw i8, ptr addrspace(3) %309, i32 5120, !dbg !27
  %380 = ptrtoint ptr addrspace(3) %379 to i32, !dbg !27
  %381 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %380) #2, !dbg !27
  %382 = extractvalue { i32, i32, i32, i32 } %381, 0, !dbg !27
  %383 = extractvalue { i32, i32, i32, i32 } %381, 1, !dbg !27
  %384 = extractvalue { i32, i32, i32, i32 } %381, 2, !dbg !27
  %385 = extractvalue { i32, i32, i32, i32 } %381, 3, !dbg !27
  %386 = getelementptr inbounds nuw half, ptr addrspace(3) %288, i32 %223, !dbg !27
  %387 = ptrtoint ptr addrspace(3) %386 to i32, !dbg !27
  %388 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %387) #2, !dbg !27
  %389 = extractvalue { i32, i32, i32, i32 } %388, 0, !dbg !27
  %390 = extractvalue { i32, i32, i32, i32 } %388, 1, !dbg !27
  %391 = extractvalue { i32, i32, i32, i32 } %388, 2, !dbg !27
  %392 = extractvalue { i32, i32, i32, i32 } %388, 3, !dbg !27
  %393 = getelementptr inbounds nuw i8, ptr addrspace(3) %309, i32 6144, !dbg !27
  %394 = ptrtoint ptr addrspace(3) %393 to i32, !dbg !27
  %395 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %394) #2, !dbg !27
  %396 = extractvalue { i32, i32, i32, i32 } %395, 0, !dbg !27
  %397 = extractvalue { i32, i32, i32, i32 } %395, 1, !dbg !27
  %398 = extractvalue { i32, i32, i32, i32 } %395, 2, !dbg !27
  %399 = extractvalue { i32, i32, i32, i32 } %395, 3, !dbg !27
  %400 = getelementptr inbounds nuw half, ptr addrspace(3) %288, i32 %224, !dbg !27
  %401 = ptrtoint ptr addrspace(3) %400 to i32, !dbg !27
  %402 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %401) #2, !dbg !27
  %403 = extractvalue { i32, i32, i32, i32 } %402, 0, !dbg !27
  %404 = extractvalue { i32, i32, i32, i32 } %402, 1, !dbg !27
  %405 = extractvalue { i32, i32, i32, i32 } %402, 2, !dbg !27
  %406 = extractvalue { i32, i32, i32, i32 } %402, 3, !dbg !27
  %407 = getelementptr inbounds nuw i8, ptr addrspace(3) %309, i32 7168, !dbg !27
  %408 = ptrtoint ptr addrspace(3) %407 to i32, !dbg !27
  %409 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %408) #2, !dbg !27
  %410 = extractvalue { i32, i32, i32, i32 } %409, 0, !dbg !27
  %411 = extractvalue { i32, i32, i32, i32 } %409, 1, !dbg !27
  %412 = extractvalue { i32, i32, i32, i32 } %409, 2, !dbg !27
  %413 = extractvalue { i32, i32, i32, i32 } %409, 3, !dbg !27
  %414 = getelementptr inbounds nuw half, ptr addrspace(3) %288, i32 %225, !dbg !27
  %415 = ptrtoint ptr addrspace(3) %414 to i32, !dbg !27
  %416 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %415) #2, !dbg !27
  %417 = extractvalue { i32, i32, i32, i32 } %416, 0, !dbg !27
  %418 = extractvalue { i32, i32, i32, i32 } %416, 1, !dbg !27
  %419 = extractvalue { i32, i32, i32, i32 } %416, 2, !dbg !27
  %420 = extractvalue { i32, i32, i32, i32 } %416, 3, !dbg !27
  %421 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %290, i32 %291, i32 %292, i32 %293, i32 %312, i32 %313) #2, !dbg !32
  %422 = extractvalue { float, float, float, float } %421, 0, !dbg !32
  %423 = extractvalue { float, float, float, float } %421, 1, !dbg !32
  %424 = extractvalue { float, float, float, float } %421, 2, !dbg !32
  %425 = extractvalue { float, float, float, float } %421, 3, !dbg !32
  %426 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %290, i32 %291, i32 %292, i32 %293, i32 %326, i32 %327) #2, !dbg !32
  %427 = extractvalue { float, float, float, float } %426, 0, !dbg !32
  %428 = extractvalue { float, float, float, float } %426, 1, !dbg !32
  %429 = extractvalue { float, float, float, float } %426, 2, !dbg !32
  %430 = extractvalue { float, float, float, float } %426, 3, !dbg !32
  %431 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %290, i32 %291, i32 %292, i32 %293, i32 %340, i32 %341) #2, !dbg !32
  %432 = extractvalue { float, float, float, float } %431, 0, !dbg !32
  %433 = extractvalue { float, float, float, float } %431, 1, !dbg !32
  %434 = extractvalue { float, float, float, float } %431, 2, !dbg !32
  %435 = extractvalue { float, float, float, float } %431, 3, !dbg !32
  %436 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %290, i32 %291, i32 %292, i32 %293, i32 %354, i32 %355) #2, !dbg !32
  %437 = extractvalue { float, float, float, float } %436, 0, !dbg !32
  %438 = extractvalue { float, float, float, float } %436, 1, !dbg !32
  %439 = extractvalue { float, float, float, float } %436, 2, !dbg !32
  %440 = extractvalue { float, float, float, float } %436, 3, !dbg !32
  %441 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %290, i32 %291, i32 %292, i32 %293, i32 %368, i32 %369) #2, !dbg !32
  %442 = extractvalue { float, float, float, float } %441, 0, !dbg !32
  %443 = extractvalue { float, float, float, float } %441, 1, !dbg !32
  %444 = extractvalue { float, float, float, float } %441, 2, !dbg !32
  %445 = extractvalue { float, float, float, float } %441, 3, !dbg !32
  %446 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %290, i32 %291, i32 %292, i32 %293, i32 %382, i32 %383) #2, !dbg !32
  %447 = extractvalue { float, float, float, float } %446, 0, !dbg !32
  %448 = extractvalue { float, float, float, float } %446, 1, !dbg !32
  %449 = extractvalue { float, float, float, float } %446, 2, !dbg !32
  %450 = extractvalue { float, float, float, float } %446, 3, !dbg !32
  %451 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %290, i32 %291, i32 %292, i32 %293, i32 %396, i32 %397) #2, !dbg !32
  %452 = extractvalue { float, float, float, float } %451, 0, !dbg !32
  %453 = extractvalue { float, float, float, float } %451, 1, !dbg !32
  %454 = extractvalue { float, float, float, float } %451, 2, !dbg !32
  %455 = extractvalue { float, float, float, float } %451, 3, !dbg !32
  %456 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %290, i32 %291, i32 %292, i32 %293, i32 %410, i32 %411) #2, !dbg !32
  %457 = extractvalue { float, float, float, float } %456, 0, !dbg !32
  %458 = extractvalue { float, float, float, float } %456, 1, !dbg !32
  %459 = extractvalue { float, float, float, float } %456, 2, !dbg !32
  %460 = extractvalue { float, float, float, float } %456, 3, !dbg !32
  %461 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %422, float %423, float %424, float %425, i32 %295, i32 %296, i32 %297, i32 %298, i32 %314, i32 %315) #2, !dbg !32
  %462 = extractvalue { float, float, float, float } %461, 0, !dbg !32
  %463 = extractvalue { float, float, float, float } %461, 1, !dbg !32
  %464 = extractvalue { float, float, float, float } %461, 2, !dbg !32
  %465 = extractvalue { float, float, float, float } %461, 3, !dbg !32
  %466 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %427, float %428, float %429, float %430, i32 %295, i32 %296, i32 %297, i32 %298, i32 %328, i32 %329) #2, !dbg !32
  %467 = extractvalue { float, float, float, float } %466, 0, !dbg !32
  %468 = extractvalue { float, float, float, float } %466, 1, !dbg !32
  %469 = extractvalue { float, float, float, float } %466, 2, !dbg !32
  %470 = extractvalue { float, float, float, float } %466, 3, !dbg !32
  %471 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %432, float %433, float %434, float %435, i32 %295, i32 %296, i32 %297, i32 %298, i32 %342, i32 %343) #2, !dbg !32
  %472 = extractvalue { float, float, float, float } %471, 0, !dbg !32
  %473 = extractvalue { float, float, float, float } %471, 1, !dbg !32
  %474 = extractvalue { float, float, float, float } %471, 2, !dbg !32
  %475 = extractvalue { float, float, float, float } %471, 3, !dbg !32
  %476 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %437, float %438, float %439, float %440, i32 %295, i32 %296, i32 %297, i32 %298, i32 %356, i32 %357) #2, !dbg !32
  %477 = extractvalue { float, float, float, float } %476, 0, !dbg !32
  %478 = extractvalue { float, float, float, float } %476, 1, !dbg !32
  %479 = extractvalue { float, float, float, float } %476, 2, !dbg !32
  %480 = extractvalue { float, float, float, float } %476, 3, !dbg !32
  %481 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %442, float %443, float %444, float %445, i32 %295, i32 %296, i32 %297, i32 %298, i32 %370, i32 %371) #2, !dbg !32
  %482 = extractvalue { float, float, float, float } %481, 0, !dbg !32
  %483 = extractvalue { float, float, float, float } %481, 1, !dbg !32
  %484 = extractvalue { float, float, float, float } %481, 2, !dbg !32
  %485 = extractvalue { float, float, float, float } %481, 3, !dbg !32
  %486 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %447, float %448, float %449, float %450, i32 %295, i32 %296, i32 %297, i32 %298, i32 %384, i32 %385) #2, !dbg !32
  %487 = extractvalue { float, float, float, float } %486, 0, !dbg !32
  %488 = extractvalue { float, float, float, float } %486, 1, !dbg !32
  %489 = extractvalue { float, float, float, float } %486, 2, !dbg !32
  %490 = extractvalue { float, float, float, float } %486, 3, !dbg !32
  %491 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %452, float %453, float %454, float %455, i32 %295, i32 %296, i32 %297, i32 %298, i32 %398, i32 %399) #2, !dbg !32
  %492 = extractvalue { float, float, float, float } %491, 0, !dbg !32
  %493 = extractvalue { float, float, float, float } %491, 1, !dbg !32
  %494 = extractvalue { float, float, float, float } %491, 2, !dbg !32
  %495 = extractvalue { float, float, float, float } %491, 3, !dbg !32
  %496 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %457, float %458, float %459, float %460, i32 %295, i32 %296, i32 %297, i32 %298, i32 %412, i32 %413) #2, !dbg !32
  %497 = extractvalue { float, float, float, float } %496, 0, !dbg !32
  %498 = extractvalue { float, float, float, float } %496, 1, !dbg !32
  %499 = extractvalue { float, float, float, float } %496, 2, !dbg !32
  %500 = extractvalue { float, float, float, float } %496, 3, !dbg !32
  %501 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %462, float %463, float %464, float %465, i32 %300, i32 %301, i32 %302, i32 %303, i32 %319, i32 %320) #2, !dbg !32
  %502 = extractvalue { float, float, float, float } %501, 0, !dbg !32
  %503 = extractvalue { float, float, float, float } %501, 1, !dbg !32
  %504 = extractvalue { float, float, float, float } %501, 2, !dbg !32
  %505 = extractvalue { float, float, float, float } %501, 3, !dbg !32
  %506 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %467, float %468, float %469, float %470, i32 %300, i32 %301, i32 %302, i32 %303, i32 %333, i32 %334) #2, !dbg !32
  %507 = extractvalue { float, float, float, float } %506, 0, !dbg !32
  %508 = extractvalue { float, float, float, float } %506, 1, !dbg !32
  %509 = extractvalue { float, float, float, float } %506, 2, !dbg !32
  %510 = extractvalue { float, float, float, float } %506, 3, !dbg !32
  %511 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %472, float %473, float %474, float %475, i32 %300, i32 %301, i32 %302, i32 %303, i32 %347, i32 %348) #2, !dbg !32
  %512 = extractvalue { float, float, float, float } %511, 0, !dbg !32
  %513 = extractvalue { float, float, float, float } %511, 1, !dbg !32
  %514 = extractvalue { float, float, float, float } %511, 2, !dbg !32
  %515 = extractvalue { float, float, float, float } %511, 3, !dbg !32
  %516 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %477, float %478, float %479, float %480, i32 %300, i32 %301, i32 %302, i32 %303, i32 %361, i32 %362) #2, !dbg !32
  %517 = extractvalue { float, float, float, float } %516, 0, !dbg !32
  %518 = extractvalue { float, float, float, float } %516, 1, !dbg !32
  %519 = extractvalue { float, float, float, float } %516, 2, !dbg !32
  %520 = extractvalue { float, float, float, float } %516, 3, !dbg !32
  %521 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %482, float %483, float %484, float %485, i32 %300, i32 %301, i32 %302, i32 %303, i32 %375, i32 %376) #2, !dbg !32
  %522 = extractvalue { float, float, float, float } %521, 0, !dbg !32
  %523 = extractvalue { float, float, float, float } %521, 1, !dbg !32
  %524 = extractvalue { float, float, float, float } %521, 2, !dbg !32
  %525 = extractvalue { float, float, float, float } %521, 3, !dbg !32
  %526 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %487, float %488, float %489, float %490, i32 %300, i32 %301, i32 %302, i32 %303, i32 %389, i32 %390) #2, !dbg !32
  %527 = extractvalue { float, float, float, float } %526, 0, !dbg !32
  %528 = extractvalue { float, float, float, float } %526, 1, !dbg !32
  %529 = extractvalue { float, float, float, float } %526, 2, !dbg !32
  %530 = extractvalue { float, float, float, float } %526, 3, !dbg !32
  %531 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %492, float %493, float %494, float %495, i32 %300, i32 %301, i32 %302, i32 %303, i32 %403, i32 %404) #2, !dbg !32
  %532 = extractvalue { float, float, float, float } %531, 0, !dbg !32
  %533 = extractvalue { float, float, float, float } %531, 1, !dbg !32
  %534 = extractvalue { float, float, float, float } %531, 2, !dbg !32
  %535 = extractvalue { float, float, float, float } %531, 3, !dbg !32
  %536 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %497, float %498, float %499, float %500, i32 %300, i32 %301, i32 %302, i32 %303, i32 %417, i32 %418) #2, !dbg !32
  %537 = extractvalue { float, float, float, float } %536, 0, !dbg !32
  %538 = extractvalue { float, float, float, float } %536, 1, !dbg !32
  %539 = extractvalue { float, float, float, float } %536, 2, !dbg !32
  %540 = extractvalue { float, float, float, float } %536, 3, !dbg !32
  %541 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %502, float %503, float %504, float %505, i32 %305, i32 %306, i32 %307, i32 %308, i32 %321, i32 %322) #2, !dbg !32
  %542 = extractvalue { float, float, float, float } %541, 0, !dbg !32
  %543 = extractvalue { float, float, float, float } %541, 1, !dbg !32
  %544 = extractvalue { float, float, float, float } %541, 2, !dbg !32
  %545 = extractvalue { float, float, float, float } %541, 3, !dbg !32
  %546 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %507, float %508, float %509, float %510, i32 %305, i32 %306, i32 %307, i32 %308, i32 %335, i32 %336) #2, !dbg !32
  %547 = extractvalue { float, float, float, float } %546, 0, !dbg !32
  %548 = extractvalue { float, float, float, float } %546, 1, !dbg !32
  %549 = extractvalue { float, float, float, float } %546, 2, !dbg !32
  %550 = extractvalue { float, float, float, float } %546, 3, !dbg !32
  %551 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %512, float %513, float %514, float %515, i32 %305, i32 %306, i32 %307, i32 %308, i32 %349, i32 %350) #2, !dbg !32
  %552 = extractvalue { float, float, float, float } %551, 0, !dbg !32
  %553 = extractvalue { float, float, float, float } %551, 1, !dbg !32
  %554 = extractvalue { float, float, float, float } %551, 2, !dbg !32
  %555 = extractvalue { float, float, float, float } %551, 3, !dbg !32
  %556 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %517, float %518, float %519, float %520, i32 %305, i32 %306, i32 %307, i32 %308, i32 %363, i32 %364) #2, !dbg !32
  %557 = extractvalue { float, float, float, float } %556, 0, !dbg !32
  %558 = extractvalue { float, float, float, float } %556, 1, !dbg !32
  %559 = extractvalue { float, float, float, float } %556, 2, !dbg !32
  %560 = extractvalue { float, float, float, float } %556, 3, !dbg !32
  %561 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %522, float %523, float %524, float %525, i32 %305, i32 %306, i32 %307, i32 %308, i32 %377, i32 %378) #2, !dbg !32
  %562 = extractvalue { float, float, float, float } %561, 0, !dbg !32
  %563 = extractvalue { float, float, float, float } %561, 1, !dbg !32
  %564 = extractvalue { float, float, float, float } %561, 2, !dbg !32
  %565 = extractvalue { float, float, float, float } %561, 3, !dbg !32
  %566 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %527, float %528, float %529, float %530, i32 %305, i32 %306, i32 %307, i32 %308, i32 %391, i32 %392) #2, !dbg !32
  %567 = extractvalue { float, float, float, float } %566, 0, !dbg !32
  %568 = extractvalue { float, float, float, float } %566, 1, !dbg !32
  %569 = extractvalue { float, float, float, float } %566, 2, !dbg !32
  %570 = extractvalue { float, float, float, float } %566, 3, !dbg !32
  %571 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %532, float %533, float %534, float %535, i32 %305, i32 %306, i32 %307, i32 %308, i32 %405, i32 %406) #2, !dbg !32
  %572 = extractvalue { float, float, float, float } %571, 0, !dbg !32
  %573 = extractvalue { float, float, float, float } %571, 1, !dbg !32
  %574 = extractvalue { float, float, float, float } %571, 2, !dbg !32
  %575 = extractvalue { float, float, float, float } %571, 3, !dbg !32
  %576 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %537, float %538, float %539, float %540, i32 %305, i32 %306, i32 %307, i32 %308, i32 %419, i32 %420) #2, !dbg !32
  %577 = extractvalue { float, float, float, float } %576, 0, !dbg !32
  %578 = extractvalue { float, float, float, float } %576, 1, !dbg !32
  %579 = extractvalue { float, float, float, float } %576, 2, !dbg !32
  %580 = extractvalue { float, float, float, float } %576, 3, !dbg !32
  %581 = tail call float @llvm.maxnum.f32(float %542, float %543), !dbg !33
  %582 = tail call float @llvm.maxnum.f32(float %544, float %545), !dbg !33
  %583 = tail call float @llvm.maxnum.f32(float %581, float %547), !dbg !33
  %584 = tail call float @llvm.maxnum.f32(float %583, float %548), !dbg !33
  %585 = tail call float @llvm.maxnum.f32(float %582, float %549), !dbg !33
  %586 = tail call float @llvm.maxnum.f32(float %585, float %550), !dbg !33
  %587 = tail call float @llvm.maxnum.f32(float %584, float %552), !dbg !33
  %588 = tail call float @llvm.maxnum.f32(float %587, float %553), !dbg !33
  %589 = tail call float @llvm.maxnum.f32(float %586, float %554), !dbg !33
  %590 = tail call float @llvm.maxnum.f32(float %589, float %555), !dbg !33
  %591 = tail call float @llvm.maxnum.f32(float %588, float %557), !dbg !33
  %592 = tail call float @llvm.maxnum.f32(float %591, float %558), !dbg !33
  %593 = tail call float @llvm.maxnum.f32(float %590, float %559), !dbg !33
  %594 = tail call float @llvm.maxnum.f32(float %593, float %560), !dbg !33
  %595 = tail call float @llvm.maxnum.f32(float %592, float %562), !dbg !33
  %596 = tail call float @llvm.maxnum.f32(float %595, float %563), !dbg !33
  %597 = tail call float @llvm.maxnum.f32(float %594, float %564), !dbg !33
  %598 = tail call float @llvm.maxnum.f32(float %597, float %565), !dbg !33
  %599 = tail call float @llvm.maxnum.f32(float %596, float %567), !dbg !33
  %600 = tail call float @llvm.maxnum.f32(float %599, float %568), !dbg !33
  %601 = tail call float @llvm.maxnum.f32(float %598, float %569), !dbg !33
  %602 = tail call float @llvm.maxnum.f32(float %601, float %570), !dbg !33
  %603 = tail call float @llvm.maxnum.f32(float %600, float %572), !dbg !33
  %604 = tail call float @llvm.maxnum.f32(float %603, float %573), !dbg !33
  %605 = tail call float @llvm.maxnum.f32(float %602, float %574), !dbg !33
  %606 = tail call float @llvm.maxnum.f32(float %605, float %575), !dbg !33
  %607 = tail call float @llvm.maxnum.f32(float %604, float %577), !dbg !33
  %608 = tail call float @llvm.maxnum.f32(float %607, float %578), !dbg !33
  %609 = tail call float @llvm.maxnum.f32(float %606, float %579), !dbg !33
  %610 = tail call float @llvm.maxnum.f32(float %609, float %580), !dbg !33
  %611 = bitcast float %608 to i32, !dbg !36
  %612 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %611, i32 2, i32 31), !dbg !36
  %613 = bitcast i32 %612 to float, !dbg !36
  %614 = tail call float @llvm.maxnum.f32(float %608, float %613), !dbg !33
  %615 = bitcast float %614 to i32, !dbg !36
  %616 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %615, i32 1, i32 31), !dbg !36
  %617 = bitcast i32 %616 to float, !dbg !36
  %618 = tail call float @llvm.maxnum.f32(float %614, float %617), !dbg !33
  %619 = bitcast float %610 to i32, !dbg !36
  %620 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %619, i32 2, i32 31), !dbg !36
  %621 = bitcast i32 %620 to float, !dbg !36
  %622 = tail call float @llvm.maxnum.f32(float %610, float %621), !dbg !33
  %623 = bitcast float %622 to i32, !dbg !36
  %624 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %623, i32 1, i32 31), !dbg !36
  %625 = bitcast i32 %624 to float, !dbg !36
  %626 = tail call float @llvm.maxnum.f32(float %622, float %625), !dbg !33
  %627 = fmul float %48, %618, !dbg !37
  %628 = fmul float %48, %626, !dbg !37
  %629 = tail call float @llvm.maxnum.f32(float %246, float %627), !dbg !38
  %630 = tail call float @llvm.maxnum.f32(float %247, float %628), !dbg !38
  %631 = fmul float %48, %542, !dbg !39
  %632 = fmul float %48, %543, !dbg !39
  %633 = fmul float %48, %544, !dbg !39
  %634 = fmul float %48, %545, !dbg !39
  %635 = fmul float %48, %547, !dbg !39
  %636 = fmul float %48, %548, !dbg !39
  %637 = fmul float %48, %549, !dbg !39
  %638 = fmul float %48, %550, !dbg !39
  %639 = fmul float %48, %552, !dbg !39
  %640 = fmul float %48, %553, !dbg !39
  %641 = fmul float %48, %554, !dbg !39
  %642 = fmul float %48, %555, !dbg !39
  %643 = fmul float %48, %557, !dbg !39
  %644 = fmul float %48, %558, !dbg !39
  %645 = fmul float %48, %559, !dbg !39
  %646 = fmul float %48, %560, !dbg !39
  %647 = fmul float %48, %562, !dbg !39
  %648 = fmul float %48, %563, !dbg !39
  %649 = fmul float %48, %564, !dbg !39
  %650 = fmul float %48, %565, !dbg !39
  %651 = fmul float %48, %567, !dbg !39
  %652 = fmul float %48, %568, !dbg !39
  %653 = fmul float %48, %569, !dbg !39
  %654 = fmul float %48, %570, !dbg !39
  %655 = fmul float %48, %572, !dbg !39
  %656 = fmul float %48, %573, !dbg !39
  %657 = fmul float %48, %574, !dbg !39
  %658 = fmul float %48, %575, !dbg !39
  %659 = fmul float %48, %577, !dbg !39
  %660 = fmul float %48, %578, !dbg !39
  %661 = fmul float %48, %579, !dbg !39
  %662 = fmul float %48, %580, !dbg !39
  %663 = fsub float %631, %629, !dbg !40
  %664 = fsub float %632, %629, !dbg !40
  %665 = fsub float %633, %630, !dbg !40
  %666 = fsub float %634, %630, !dbg !40
  %667 = fsub float %635, %629, !dbg !40
  %668 = fsub float %636, %629, !dbg !40
  %669 = fsub float %637, %630, !dbg !40
  %670 = fsub float %638, %630, !dbg !40
  %671 = fsub float %639, %629, !dbg !40
  %672 = fsub float %640, %629, !dbg !40
  %673 = fsub float %641, %630, !dbg !40
  %674 = fsub float %642, %630, !dbg !40
  %675 = fsub float %643, %629, !dbg !40
  %676 = fsub float %644, %629, !dbg !40
  %677 = fsub float %645, %630, !dbg !40
  %678 = fsub float %646, %630, !dbg !40
  %679 = fsub float %647, %629, !dbg !40
  %680 = fsub float %648, %629, !dbg !40
  %681 = fsub float %649, %630, !dbg !40
  %682 = fsub float %650, %630, !dbg !40
  %683 = fsub float %651, %629, !dbg !40
  %684 = fsub float %652, %629, !dbg !40
  %685 = fsub float %653, %630, !dbg !40
  %686 = fsub float %654, %630, !dbg !40
  %687 = fsub float %655, %629, !dbg !40
  %688 = fsub float %656, %629, !dbg !40
  %689 = fsub float %657, %630, !dbg !40
  %690 = fsub float %658, %630, !dbg !40
  %691 = fsub float %659, %629, !dbg !40
  %692 = fsub float %660, %629, !dbg !40
  %693 = fsub float %661, %630, !dbg !40
  %694 = fsub float %662, %630, !dbg !40
  %695 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i = icmp eq i32 %695, 0, !dbg !41
  br i1 %.not.i, label %698, label %696, !dbg !41

696:                                              ; preds = %242
  %697 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %663) #2, !dbg !41
  br label %__nv_exp2f.exit, !dbg !41

698:                                              ; preds = %242
  %699 = tail call float @llvm.nvvm.ex2.approx.f(float %663) #2, !dbg !41
  br label %__nv_exp2f.exit, !dbg !41

__nv_exp2f.exit:                                  ; preds = %696, %698
  %.0.i = phi float [ %697, %696 ], [ %699, %698 ], !dbg !41
  %700 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i52 = icmp eq i32 %700, 0, !dbg !41
  br i1 %.not.i52, label %703, label %701, !dbg !41

701:                                              ; preds = %__nv_exp2f.exit
  %702 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %664) #2, !dbg !41
  br label %__nv_exp2f.exit54, !dbg !41

703:                                              ; preds = %__nv_exp2f.exit
  %704 = tail call float @llvm.nvvm.ex2.approx.f(float %664) #2, !dbg !41
  br label %__nv_exp2f.exit54, !dbg !41

__nv_exp2f.exit54:                                ; preds = %701, %703
  %.0.i53 = phi float [ %702, %701 ], [ %704, %703 ], !dbg !41
  %705 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i55 = icmp eq i32 %705, 0, !dbg !41
  br i1 %.not.i55, label %708, label %706, !dbg !41

706:                                              ; preds = %__nv_exp2f.exit54
  %707 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %665) #2, !dbg !41
  br label %__nv_exp2f.exit57, !dbg !41

708:                                              ; preds = %__nv_exp2f.exit54
  %709 = tail call float @llvm.nvvm.ex2.approx.f(float %665) #2, !dbg !41
  br label %__nv_exp2f.exit57, !dbg !41

__nv_exp2f.exit57:                                ; preds = %706, %708
  %.0.i56 = phi float [ %707, %706 ], [ %709, %708 ], !dbg !41
  %710 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i58 = icmp eq i32 %710, 0, !dbg !41
  br i1 %.not.i58, label %713, label %711, !dbg !41

711:                                              ; preds = %__nv_exp2f.exit57
  %712 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %666) #2, !dbg !41
  br label %__nv_exp2f.exit60, !dbg !41

713:                                              ; preds = %__nv_exp2f.exit57
  %714 = tail call float @llvm.nvvm.ex2.approx.f(float %666) #2, !dbg !41
  br label %__nv_exp2f.exit60, !dbg !41

__nv_exp2f.exit60:                                ; preds = %711, %713
  %.0.i59 = phi float [ %712, %711 ], [ %714, %713 ], !dbg !41
  %715 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i61 = icmp eq i32 %715, 0, !dbg !41
  br i1 %.not.i61, label %718, label %716, !dbg !41

716:                                              ; preds = %__nv_exp2f.exit60
  %717 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %667) #2, !dbg !41
  br label %__nv_exp2f.exit63, !dbg !41

718:                                              ; preds = %__nv_exp2f.exit60
  %719 = tail call float @llvm.nvvm.ex2.approx.f(float %667) #2, !dbg !41
  br label %__nv_exp2f.exit63, !dbg !41

__nv_exp2f.exit63:                                ; preds = %716, %718
  %.0.i62 = phi float [ %717, %716 ], [ %719, %718 ], !dbg !41
  %720 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i64 = icmp eq i32 %720, 0, !dbg !41
  br i1 %.not.i64, label %723, label %721, !dbg !41

721:                                              ; preds = %__nv_exp2f.exit63
  %722 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %668) #2, !dbg !41
  br label %__nv_exp2f.exit66, !dbg !41

723:                                              ; preds = %__nv_exp2f.exit63
  %724 = tail call float @llvm.nvvm.ex2.approx.f(float %668) #2, !dbg !41
  br label %__nv_exp2f.exit66, !dbg !41

__nv_exp2f.exit66:                                ; preds = %721, %723
  %.0.i65 = phi float [ %722, %721 ], [ %724, %723 ], !dbg !41
  %725 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i67 = icmp eq i32 %725, 0, !dbg !41
  br i1 %.not.i67, label %728, label %726, !dbg !41

726:                                              ; preds = %__nv_exp2f.exit66
  %727 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %669) #2, !dbg !41
  br label %__nv_exp2f.exit69, !dbg !41

728:                                              ; preds = %__nv_exp2f.exit66
  %729 = tail call float @llvm.nvvm.ex2.approx.f(float %669) #2, !dbg !41
  br label %__nv_exp2f.exit69, !dbg !41

__nv_exp2f.exit69:                                ; preds = %726, %728
  %.0.i68 = phi float [ %727, %726 ], [ %729, %728 ], !dbg !41
  %730 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i70 = icmp eq i32 %730, 0, !dbg !41
  br i1 %.not.i70, label %733, label %731, !dbg !41

731:                                              ; preds = %__nv_exp2f.exit69
  %732 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %670) #2, !dbg !41
  br label %__nv_exp2f.exit72, !dbg !41

733:                                              ; preds = %__nv_exp2f.exit69
  %734 = tail call float @llvm.nvvm.ex2.approx.f(float %670) #2, !dbg !41
  br label %__nv_exp2f.exit72, !dbg !41

__nv_exp2f.exit72:                                ; preds = %731, %733
  %.0.i71 = phi float [ %732, %731 ], [ %734, %733 ], !dbg !41
  %735 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i73 = icmp eq i32 %735, 0, !dbg !41
  br i1 %.not.i73, label %738, label %736, !dbg !41

736:                                              ; preds = %__nv_exp2f.exit72
  %737 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %671) #2, !dbg !41
  br label %__nv_exp2f.exit75, !dbg !41

738:                                              ; preds = %__nv_exp2f.exit72
  %739 = tail call float @llvm.nvvm.ex2.approx.f(float %671) #2, !dbg !41
  br label %__nv_exp2f.exit75, !dbg !41

__nv_exp2f.exit75:                                ; preds = %736, %738
  %.0.i74 = phi float [ %737, %736 ], [ %739, %738 ], !dbg !41
  %740 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i76 = icmp eq i32 %740, 0, !dbg !41
  br i1 %.not.i76, label %743, label %741, !dbg !41

741:                                              ; preds = %__nv_exp2f.exit75
  %742 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %672) #2, !dbg !41
  br label %__nv_exp2f.exit78, !dbg !41

743:                                              ; preds = %__nv_exp2f.exit75
  %744 = tail call float @llvm.nvvm.ex2.approx.f(float %672) #2, !dbg !41
  br label %__nv_exp2f.exit78, !dbg !41

__nv_exp2f.exit78:                                ; preds = %741, %743
  %.0.i77 = phi float [ %742, %741 ], [ %744, %743 ], !dbg !41
  %745 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i79 = icmp eq i32 %745, 0, !dbg !41
  br i1 %.not.i79, label %748, label %746, !dbg !41

746:                                              ; preds = %__nv_exp2f.exit78
  %747 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %673) #2, !dbg !41
  br label %__nv_exp2f.exit81, !dbg !41

748:                                              ; preds = %__nv_exp2f.exit78
  %749 = tail call float @llvm.nvvm.ex2.approx.f(float %673) #2, !dbg !41
  br label %__nv_exp2f.exit81, !dbg !41

__nv_exp2f.exit81:                                ; preds = %746, %748
  %.0.i80 = phi float [ %747, %746 ], [ %749, %748 ], !dbg !41
  %750 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i82 = icmp eq i32 %750, 0, !dbg !41
  br i1 %.not.i82, label %753, label %751, !dbg !41

751:                                              ; preds = %__nv_exp2f.exit81
  %752 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %674) #2, !dbg !41
  br label %__nv_exp2f.exit84, !dbg !41

753:                                              ; preds = %__nv_exp2f.exit81
  %754 = tail call float @llvm.nvvm.ex2.approx.f(float %674) #2, !dbg !41
  br label %__nv_exp2f.exit84, !dbg !41

__nv_exp2f.exit84:                                ; preds = %751, %753
  %.0.i83 = phi float [ %752, %751 ], [ %754, %753 ], !dbg !41
  %755 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i85 = icmp eq i32 %755, 0, !dbg !41
  br i1 %.not.i85, label %758, label %756, !dbg !41

756:                                              ; preds = %__nv_exp2f.exit84
  %757 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %675) #2, !dbg !41
  br label %__nv_exp2f.exit87, !dbg !41

758:                                              ; preds = %__nv_exp2f.exit84
  %759 = tail call float @llvm.nvvm.ex2.approx.f(float %675) #2, !dbg !41
  br label %__nv_exp2f.exit87, !dbg !41

__nv_exp2f.exit87:                                ; preds = %756, %758
  %.0.i86 = phi float [ %757, %756 ], [ %759, %758 ], !dbg !41
  %760 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i88 = icmp eq i32 %760, 0, !dbg !41
  br i1 %.not.i88, label %763, label %761, !dbg !41

761:                                              ; preds = %__nv_exp2f.exit87
  %762 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %676) #2, !dbg !41
  br label %__nv_exp2f.exit90, !dbg !41

763:                                              ; preds = %__nv_exp2f.exit87
  %764 = tail call float @llvm.nvvm.ex2.approx.f(float %676) #2, !dbg !41
  br label %__nv_exp2f.exit90, !dbg !41

__nv_exp2f.exit90:                                ; preds = %761, %763
  %.0.i89 = phi float [ %762, %761 ], [ %764, %763 ], !dbg !41
  %765 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i91 = icmp eq i32 %765, 0, !dbg !41
  br i1 %.not.i91, label %768, label %766, !dbg !41

766:                                              ; preds = %__nv_exp2f.exit90
  %767 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %677) #2, !dbg !41
  br label %__nv_exp2f.exit93, !dbg !41

768:                                              ; preds = %__nv_exp2f.exit90
  %769 = tail call float @llvm.nvvm.ex2.approx.f(float %677) #2, !dbg !41
  br label %__nv_exp2f.exit93, !dbg !41

__nv_exp2f.exit93:                                ; preds = %766, %768
  %.0.i92 = phi float [ %767, %766 ], [ %769, %768 ], !dbg !41
  %770 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i94 = icmp eq i32 %770, 0, !dbg !41
  br i1 %.not.i94, label %773, label %771, !dbg !41

771:                                              ; preds = %__nv_exp2f.exit93
  %772 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %678) #2, !dbg !41
  br label %__nv_exp2f.exit96, !dbg !41

773:                                              ; preds = %__nv_exp2f.exit93
  %774 = tail call float @llvm.nvvm.ex2.approx.f(float %678) #2, !dbg !41
  br label %__nv_exp2f.exit96, !dbg !41

__nv_exp2f.exit96:                                ; preds = %771, %773
  %.0.i95 = phi float [ %772, %771 ], [ %774, %773 ], !dbg !41
  %775 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i97 = icmp eq i32 %775, 0, !dbg !41
  br i1 %.not.i97, label %778, label %776, !dbg !41

776:                                              ; preds = %__nv_exp2f.exit96
  %777 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %679) #2, !dbg !41
  br label %__nv_exp2f.exit99, !dbg !41

778:                                              ; preds = %__nv_exp2f.exit96
  %779 = tail call float @llvm.nvvm.ex2.approx.f(float %679) #2, !dbg !41
  br label %__nv_exp2f.exit99, !dbg !41

__nv_exp2f.exit99:                                ; preds = %776, %778
  %.0.i98 = phi float [ %777, %776 ], [ %779, %778 ], !dbg !41
  %780 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i100 = icmp eq i32 %780, 0, !dbg !41
  br i1 %.not.i100, label %783, label %781, !dbg !41

781:                                              ; preds = %__nv_exp2f.exit99
  %782 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %680) #2, !dbg !41
  br label %__nv_exp2f.exit102, !dbg !41

783:                                              ; preds = %__nv_exp2f.exit99
  %784 = tail call float @llvm.nvvm.ex2.approx.f(float %680) #2, !dbg !41
  br label %__nv_exp2f.exit102, !dbg !41

__nv_exp2f.exit102:                               ; preds = %781, %783
  %.0.i101 = phi float [ %782, %781 ], [ %784, %783 ], !dbg !41
  %785 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i103 = icmp eq i32 %785, 0, !dbg !41
  br i1 %.not.i103, label %788, label %786, !dbg !41

786:                                              ; preds = %__nv_exp2f.exit102
  %787 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %681) #2, !dbg !41
  br label %__nv_exp2f.exit105, !dbg !41

788:                                              ; preds = %__nv_exp2f.exit102
  %789 = tail call float @llvm.nvvm.ex2.approx.f(float %681) #2, !dbg !41
  br label %__nv_exp2f.exit105, !dbg !41

__nv_exp2f.exit105:                               ; preds = %786, %788
  %.0.i104 = phi float [ %787, %786 ], [ %789, %788 ], !dbg !41
  %790 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i106 = icmp eq i32 %790, 0, !dbg !41
  br i1 %.not.i106, label %793, label %791, !dbg !41

791:                                              ; preds = %__nv_exp2f.exit105
  %792 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %682) #2, !dbg !41
  br label %__nv_exp2f.exit108, !dbg !41

793:                                              ; preds = %__nv_exp2f.exit105
  %794 = tail call float @llvm.nvvm.ex2.approx.f(float %682) #2, !dbg !41
  br label %__nv_exp2f.exit108, !dbg !41

__nv_exp2f.exit108:                               ; preds = %791, %793
  %.0.i107 = phi float [ %792, %791 ], [ %794, %793 ], !dbg !41
  %795 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i109 = icmp eq i32 %795, 0, !dbg !41
  br i1 %.not.i109, label %798, label %796, !dbg !41

796:                                              ; preds = %__nv_exp2f.exit108
  %797 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %683) #2, !dbg !41
  br label %__nv_exp2f.exit111, !dbg !41

798:                                              ; preds = %__nv_exp2f.exit108
  %799 = tail call float @llvm.nvvm.ex2.approx.f(float %683) #2, !dbg !41
  br label %__nv_exp2f.exit111, !dbg !41

__nv_exp2f.exit111:                               ; preds = %796, %798
  %.0.i110 = phi float [ %797, %796 ], [ %799, %798 ], !dbg !41
  %800 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i112 = icmp eq i32 %800, 0, !dbg !41
  br i1 %.not.i112, label %803, label %801, !dbg !41

801:                                              ; preds = %__nv_exp2f.exit111
  %802 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %684) #2, !dbg !41
  br label %__nv_exp2f.exit114, !dbg !41

803:                                              ; preds = %__nv_exp2f.exit111
  %804 = tail call float @llvm.nvvm.ex2.approx.f(float %684) #2, !dbg !41
  br label %__nv_exp2f.exit114, !dbg !41

__nv_exp2f.exit114:                               ; preds = %801, %803
  %.0.i113 = phi float [ %802, %801 ], [ %804, %803 ], !dbg !41
  %805 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i115 = icmp eq i32 %805, 0, !dbg !41
  br i1 %.not.i115, label %808, label %806, !dbg !41

806:                                              ; preds = %__nv_exp2f.exit114
  %807 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %685) #2, !dbg !41
  br label %__nv_exp2f.exit117, !dbg !41

808:                                              ; preds = %__nv_exp2f.exit114
  %809 = tail call float @llvm.nvvm.ex2.approx.f(float %685) #2, !dbg !41
  br label %__nv_exp2f.exit117, !dbg !41

__nv_exp2f.exit117:                               ; preds = %806, %808
  %.0.i116 = phi float [ %807, %806 ], [ %809, %808 ], !dbg !41
  %810 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i118 = icmp eq i32 %810, 0, !dbg !41
  br i1 %.not.i118, label %813, label %811, !dbg !41

811:                                              ; preds = %__nv_exp2f.exit117
  %812 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %686) #2, !dbg !41
  br label %__nv_exp2f.exit120, !dbg !41

813:                                              ; preds = %__nv_exp2f.exit117
  %814 = tail call float @llvm.nvvm.ex2.approx.f(float %686) #2, !dbg !41
  br label %__nv_exp2f.exit120, !dbg !41

__nv_exp2f.exit120:                               ; preds = %811, %813
  %.0.i119 = phi float [ %812, %811 ], [ %814, %813 ], !dbg !41
  %815 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i121 = icmp eq i32 %815, 0, !dbg !41
  br i1 %.not.i121, label %818, label %816, !dbg !41

816:                                              ; preds = %__nv_exp2f.exit120
  %817 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %687) #2, !dbg !41
  br label %__nv_exp2f.exit123, !dbg !41

818:                                              ; preds = %__nv_exp2f.exit120
  %819 = tail call float @llvm.nvvm.ex2.approx.f(float %687) #2, !dbg !41
  br label %__nv_exp2f.exit123, !dbg !41

__nv_exp2f.exit123:                               ; preds = %816, %818
  %.0.i122 = phi float [ %817, %816 ], [ %819, %818 ], !dbg !41
  %820 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i124 = icmp eq i32 %820, 0, !dbg !41
  br i1 %.not.i124, label %823, label %821, !dbg !41

821:                                              ; preds = %__nv_exp2f.exit123
  %822 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %688) #2, !dbg !41
  br label %__nv_exp2f.exit126, !dbg !41

823:                                              ; preds = %__nv_exp2f.exit123
  %824 = tail call float @llvm.nvvm.ex2.approx.f(float %688) #2, !dbg !41
  br label %__nv_exp2f.exit126, !dbg !41

__nv_exp2f.exit126:                               ; preds = %821, %823
  %.0.i125 = phi float [ %822, %821 ], [ %824, %823 ], !dbg !41
  %825 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i127 = icmp eq i32 %825, 0, !dbg !41
  br i1 %.not.i127, label %828, label %826, !dbg !41

826:                                              ; preds = %__nv_exp2f.exit126
  %827 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %689) #2, !dbg !41
  br label %__nv_exp2f.exit129, !dbg !41

828:                                              ; preds = %__nv_exp2f.exit126
  %829 = tail call float @llvm.nvvm.ex2.approx.f(float %689) #2, !dbg !41
  br label %__nv_exp2f.exit129, !dbg !41

__nv_exp2f.exit129:                               ; preds = %826, %828
  %.0.i128 = phi float [ %827, %826 ], [ %829, %828 ], !dbg !41
  %830 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i130 = icmp eq i32 %830, 0, !dbg !41
  br i1 %.not.i130, label %833, label %831, !dbg !41

831:                                              ; preds = %__nv_exp2f.exit129
  %832 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %690) #2, !dbg !41
  br label %__nv_exp2f.exit132, !dbg !41

833:                                              ; preds = %__nv_exp2f.exit129
  %834 = tail call float @llvm.nvvm.ex2.approx.f(float %690) #2, !dbg !41
  br label %__nv_exp2f.exit132, !dbg !41

__nv_exp2f.exit132:                               ; preds = %831, %833
  %.0.i131 = phi float [ %832, %831 ], [ %834, %833 ], !dbg !41
  %835 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i133 = icmp eq i32 %835, 0, !dbg !41
  br i1 %.not.i133, label %838, label %836, !dbg !41

836:                                              ; preds = %__nv_exp2f.exit132
  %837 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %691) #2, !dbg !41
  br label %__nv_exp2f.exit135, !dbg !41

838:                                              ; preds = %__nv_exp2f.exit132
  %839 = tail call float @llvm.nvvm.ex2.approx.f(float %691) #2, !dbg !41
  br label %__nv_exp2f.exit135, !dbg !41

__nv_exp2f.exit135:                               ; preds = %836, %838
  %.0.i134 = phi float [ %837, %836 ], [ %839, %838 ], !dbg !41
  %840 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i136 = icmp eq i32 %840, 0, !dbg !41
  br i1 %.not.i136, label %843, label %841, !dbg !41

841:                                              ; preds = %__nv_exp2f.exit135
  %842 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %692) #2, !dbg !41
  br label %__nv_exp2f.exit138, !dbg !41

843:                                              ; preds = %__nv_exp2f.exit135
  %844 = tail call float @llvm.nvvm.ex2.approx.f(float %692) #2, !dbg !41
  br label %__nv_exp2f.exit138, !dbg !41

__nv_exp2f.exit138:                               ; preds = %841, %843
  %.0.i137 = phi float [ %842, %841 ], [ %844, %843 ], !dbg !41
  %845 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i139 = icmp eq i32 %845, 0, !dbg !41
  br i1 %.not.i139, label %848, label %846, !dbg !41

846:                                              ; preds = %__nv_exp2f.exit138
  %847 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %693) #2, !dbg !41
  br label %__nv_exp2f.exit141, !dbg !41

848:                                              ; preds = %__nv_exp2f.exit138
  %849 = tail call float @llvm.nvvm.ex2.approx.f(float %693) #2, !dbg !41
  br label %__nv_exp2f.exit141, !dbg !41

__nv_exp2f.exit141:                               ; preds = %846, %848
  %.0.i140 = phi float [ %847, %846 ], [ %849, %848 ], !dbg !41
  %850 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i142 = icmp eq i32 %850, 0, !dbg !41
  br i1 %.not.i142, label %853, label %851, !dbg !41

851:                                              ; preds = %__nv_exp2f.exit141
  %852 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %694) #2, !dbg !41
  br label %__nv_exp2f.exit144, !dbg !41

853:                                              ; preds = %__nv_exp2f.exit141
  %854 = tail call float @llvm.nvvm.ex2.approx.f(float %694) #2, !dbg !41
  br label %__nv_exp2f.exit144, !dbg !41

__nv_exp2f.exit144:                               ; preds = %851, %853
  %.0.i143 = phi float [ %852, %851 ], [ %854, %853 ], !dbg !41
  %855 = fadd float %.0.i, %.0.i53, !dbg !42
  %856 = fadd float %.0.i56, %.0.i59, !dbg !42
  %857 = fadd float %855, %.0.i62, !dbg !42
  %858 = fadd float %857, %.0.i65, !dbg !42
  %859 = fadd float %856, %.0.i68, !dbg !42
  %860 = fadd float %859, %.0.i71, !dbg !42
  %861 = fadd float %858, %.0.i74, !dbg !42
  %862 = fadd float %861, %.0.i77, !dbg !42
  %863 = fadd float %860, %.0.i80, !dbg !42
  %864 = fadd float %863, %.0.i83, !dbg !42
  %865 = fadd float %862, %.0.i86, !dbg !42
  %866 = fadd float %865, %.0.i89, !dbg !42
  %867 = fadd float %864, %.0.i92, !dbg !42
  %868 = fadd float %867, %.0.i95, !dbg !42
  %869 = fadd float %866, %.0.i98, !dbg !42
  %870 = fadd float %869, %.0.i101, !dbg !42
  %871 = fadd float %868, %.0.i104, !dbg !42
  %872 = fadd float %871, %.0.i107, !dbg !42
  %873 = fadd float %870, %.0.i110, !dbg !42
  %874 = fadd float %873, %.0.i113, !dbg !42
  %875 = fadd float %872, %.0.i116, !dbg !42
  %876 = fadd float %875, %.0.i119, !dbg !42
  %877 = fadd float %874, %.0.i122, !dbg !42
  %878 = fadd float %877, %.0.i125, !dbg !42
  %879 = fadd float %876, %.0.i128, !dbg !42
  %880 = fadd float %879, %.0.i131, !dbg !42
  %881 = fadd float %878, %.0.i134, !dbg !42
  %882 = fadd float %881, %.0.i137, !dbg !42
  %883 = fadd float %880, %.0.i140, !dbg !42
  %884 = fadd float %883, %.0.i143, !dbg !42
  %885 = bitcast float %882 to i32, !dbg !43
  %886 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %885, i32 2, i32 31), !dbg !43
  %887 = bitcast i32 %886 to float, !dbg !43
  %888 = fadd float %882, %887, !dbg !42
  %889 = bitcast float %888 to i32, !dbg !43
  %890 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %889, i32 1, i32 31), !dbg !43
  %891 = bitcast i32 %890 to float, !dbg !43
  %892 = fadd float %888, %891, !dbg !42
  %893 = bitcast float %884 to i32, !dbg !43
  %894 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %893, i32 2, i32 31), !dbg !43
  %895 = bitcast i32 %894 to float, !dbg !43
  %896 = fadd float %884, %895, !dbg !42
  %897 = bitcast float %896 to i32, !dbg !43
  %898 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %897, i32 1, i32 31), !dbg !43
  %899 = bitcast i32 %898 to float, !dbg !43
  %900 = fadd float %896, %899, !dbg !42
  %901 = fsub float %246, %629, !dbg !44
  %902 = fsub float %247, %630, !dbg !44
  %903 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !45
  %.not.i145 = icmp eq i32 %903, 0, !dbg !45
  br i1 %.not.i145, label %906, label %904, !dbg !45

904:                                              ; preds = %__nv_exp2f.exit144
  %905 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %901) #2, !dbg !45
  br label %__nv_exp2f.exit147, !dbg !45

906:                                              ; preds = %__nv_exp2f.exit144
  %907 = tail call float @llvm.nvvm.ex2.approx.f(float %901) #2, !dbg !45
  br label %__nv_exp2f.exit147, !dbg !45

__nv_exp2f.exit147:                               ; preds = %904, %906
  %.0.i146 = phi float [ %905, %904 ], [ %907, %906 ], !dbg !45
  %908 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !45
  %.not.i148 = icmp eq i32 %908, 0, !dbg !45
  br i1 %.not.i148, label %911, label %909, !dbg !45

909:                                              ; preds = %__nv_exp2f.exit147
  %910 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %902) #2, !dbg !45
  br label %__nv_exp2f.exit150, !dbg !45

911:                                              ; preds = %__nv_exp2f.exit147
  %912 = tail call float @llvm.nvvm.ex2.approx.f(float %902) #2, !dbg !45
  br label %__nv_exp2f.exit150, !dbg !45

__nv_exp2f.exit150:                               ; preds = %909, %911
  %.0.i149 = phi float [ %910, %909 ], [ %912, %911 ], !dbg !45
  %913 = fmul float %280, %.0.i146, !dbg !46
  %914 = fmul float %281, %.0.i149, !dbg !46
  %915 = fadd float %892, %913, !dbg !47
  %916 = fadd float %900, %914, !dbg !47
  %917 = fmul float %248, %.0.i146, !dbg !48
  %918 = fmul float %249, %.0.i146, !dbg !48
  %919 = fmul float %250, %.0.i149, !dbg !48
  %920 = fmul float %251, %.0.i149, !dbg !48
  %921 = fmul float %252, %.0.i146, !dbg !48
  %922 = fmul float %253, %.0.i146, !dbg !48
  %923 = fmul float %254, %.0.i149, !dbg !48
  %924 = fmul float %255, %.0.i149, !dbg !48
  %925 = fmul float %256, %.0.i146, !dbg !48
  %926 = fmul float %257, %.0.i146, !dbg !48
  %927 = fmul float %258, %.0.i149, !dbg !48
  %928 = fmul float %259, %.0.i149, !dbg !48
  %929 = fmul float %260, %.0.i146, !dbg !48
  %930 = fmul float %261, %.0.i146, !dbg !48
  %931 = fmul float %262, %.0.i149, !dbg !48
  %932 = fmul float %263, %.0.i149, !dbg !48
  %933 = fmul float %264, %.0.i146, !dbg !48
  %934 = fmul float %265, %.0.i146, !dbg !48
  %935 = fmul float %266, %.0.i149, !dbg !48
  %936 = fmul float %267, %.0.i149, !dbg !48
  %937 = fmul float %268, %.0.i146, !dbg !48
  %938 = fmul float %269, %.0.i146, !dbg !48
  %939 = fmul float %270, %.0.i149, !dbg !48
  %940 = fmul float %271, %.0.i149, !dbg !48
  %941 = fmul float %272, %.0.i146, !dbg !48
  %942 = fmul float %273, %.0.i146, !dbg !48
  %943 = fmul float %274, %.0.i149, !dbg !48
  %944 = fmul float %275, %.0.i149, !dbg !48
  %945 = fmul float %276, %.0.i146, !dbg !48
  %946 = fmul float %277, %.0.i146, !dbg !48
  %947 = fmul float %278, %.0.i149, !dbg !48
  %948 = fmul float %279, %.0.i149, !dbg !48
  %949 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %287, !dbg !30
  %950 = getelementptr inbounds nuw half, ptr addrspace(3) %949, i32 %227, !dbg !30
  %951 = ptrtoint ptr addrspace(3) %950 to i32, !dbg !30
  %952 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %951) #2, !dbg !30
  %953 = extractvalue { i32, i32, i32, i32 } %952, 0, !dbg !30
  %954 = extractvalue { i32, i32, i32, i32 } %952, 1, !dbg !30
  %955 = extractvalue { i32, i32, i32, i32 } %952, 2, !dbg !30
  %956 = extractvalue { i32, i32, i32, i32 } %952, 3, !dbg !30
  %957 = getelementptr inbounds nuw i8, ptr addrspace(3) %950, i32 4096, !dbg !30
  %958 = ptrtoint ptr addrspace(3) %957 to i32, !dbg !30
  %959 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %958) #2, !dbg !30
  %960 = extractvalue { i32, i32, i32, i32 } %959, 0, !dbg !30
  %961 = extractvalue { i32, i32, i32, i32 } %959, 1, !dbg !30
  %962 = extractvalue { i32, i32, i32, i32 } %959, 2, !dbg !30
  %963 = extractvalue { i32, i32, i32, i32 } %959, 3, !dbg !30
  %964 = getelementptr inbounds nuw half, ptr addrspace(3) %949, i32 %228, !dbg !30
  %965 = ptrtoint ptr addrspace(3) %964 to i32, !dbg !30
  %966 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %965) #2, !dbg !30
  %967 = extractvalue { i32, i32, i32, i32 } %966, 0, !dbg !30
  %968 = extractvalue { i32, i32, i32, i32 } %966, 1, !dbg !30
  %969 = extractvalue { i32, i32, i32, i32 } %966, 2, !dbg !30
  %970 = extractvalue { i32, i32, i32, i32 } %966, 3, !dbg !30
  %971 = getelementptr inbounds nuw half, ptr addrspace(3) %949, i32 %229, !dbg !30
  %972 = ptrtoint ptr addrspace(3) %971 to i32, !dbg !30
  %973 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %972) #2, !dbg !30
  %974 = extractvalue { i32, i32, i32, i32 } %973, 0, !dbg !30
  %975 = extractvalue { i32, i32, i32, i32 } %973, 1, !dbg !30
  %976 = extractvalue { i32, i32, i32, i32 } %973, 2, !dbg !30
  %977 = extractvalue { i32, i32, i32, i32 } %973, 3, !dbg !30
  %978 = getelementptr inbounds nuw half, ptr addrspace(3) %949, i32 %230, !dbg !30
  %979 = ptrtoint ptr addrspace(3) %978 to i32, !dbg !30
  %980 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %979) #2, !dbg !30
  %981 = extractvalue { i32, i32, i32, i32 } %980, 0, !dbg !30
  %982 = extractvalue { i32, i32, i32, i32 } %980, 1, !dbg !30
  %983 = extractvalue { i32, i32, i32, i32 } %980, 2, !dbg !30
  %984 = extractvalue { i32, i32, i32, i32 } %980, 3, !dbg !30
  %985 = getelementptr inbounds nuw half, ptr addrspace(3) %949, i32 %231, !dbg !30
  %986 = ptrtoint ptr addrspace(3) %985 to i32, !dbg !30
  %987 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %986) #2, !dbg !30
  %988 = extractvalue { i32, i32, i32, i32 } %987, 0, !dbg !30
  %989 = extractvalue { i32, i32, i32, i32 } %987, 1, !dbg !30
  %990 = extractvalue { i32, i32, i32, i32 } %987, 2, !dbg !30
  %991 = extractvalue { i32, i32, i32, i32 } %987, 3, !dbg !30
  %992 = getelementptr inbounds nuw half, ptr addrspace(3) %949, i32 %232, !dbg !30
  %993 = ptrtoint ptr addrspace(3) %992 to i32, !dbg !30
  %994 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %993) #2, !dbg !30
  %995 = extractvalue { i32, i32, i32, i32 } %994, 0, !dbg !30
  %996 = extractvalue { i32, i32, i32, i32 } %994, 1, !dbg !30
  %997 = extractvalue { i32, i32, i32, i32 } %994, 2, !dbg !30
  %998 = extractvalue { i32, i32, i32, i32 } %994, 3, !dbg !30
  %999 = getelementptr inbounds nuw half, ptr addrspace(3) %949, i32 %233, !dbg !30
  %1000 = ptrtoint ptr addrspace(3) %999 to i32, !dbg !30
  %1001 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1000) #2, !dbg !30
  %1002 = extractvalue { i32, i32, i32, i32 } %1001, 0, !dbg !30
  %1003 = extractvalue { i32, i32, i32, i32 } %1001, 1, !dbg !30
  %1004 = extractvalue { i32, i32, i32, i32 } %1001, 2, !dbg !30
  %1005 = extractvalue { i32, i32, i32, i32 } %1001, 3, !dbg !30
  %1006 = getelementptr inbounds nuw half, ptr addrspace(3) %949, i32 %234, !dbg !30
  %1007 = ptrtoint ptr addrspace(3) %1006 to i32, !dbg !30
  %1008 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1007) #2, !dbg !30
  %1009 = extractvalue { i32, i32, i32, i32 } %1008, 0, !dbg !30
  %1010 = extractvalue { i32, i32, i32, i32 } %1008, 1, !dbg !30
  %1011 = extractvalue { i32, i32, i32, i32 } %1008, 2, !dbg !30
  %1012 = extractvalue { i32, i32, i32, i32 } %1008, 3, !dbg !30
  %1013 = getelementptr inbounds nuw half, ptr addrspace(3) %949, i32 %235, !dbg !30
  %1014 = ptrtoint ptr addrspace(3) %1013 to i32, !dbg !30
  %1015 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1014) #2, !dbg !30
  %1016 = extractvalue { i32, i32, i32, i32 } %1015, 0, !dbg !30
  %1017 = extractvalue { i32, i32, i32, i32 } %1015, 1, !dbg !30
  %1018 = extractvalue { i32, i32, i32, i32 } %1015, 2, !dbg !30
  %1019 = extractvalue { i32, i32, i32, i32 } %1015, 3, !dbg !30
  %1020 = getelementptr inbounds nuw half, ptr addrspace(3) %949, i32 %236, !dbg !30
  %1021 = ptrtoint ptr addrspace(3) %1020 to i32, !dbg !30
  %1022 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1021) #2, !dbg !30
  %1023 = extractvalue { i32, i32, i32, i32 } %1022, 0, !dbg !30
  %1024 = extractvalue { i32, i32, i32, i32 } %1022, 1, !dbg !30
  %1025 = extractvalue { i32, i32, i32, i32 } %1022, 2, !dbg !30
  %1026 = extractvalue { i32, i32, i32, i32 } %1022, 3, !dbg !30
  %1027 = getelementptr inbounds nuw half, ptr addrspace(3) %949, i32 %237, !dbg !30
  %1028 = ptrtoint ptr addrspace(3) %1027 to i32, !dbg !30
  %1029 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1028) #2, !dbg !30
  %1030 = extractvalue { i32, i32, i32, i32 } %1029, 0, !dbg !30
  %1031 = extractvalue { i32, i32, i32, i32 } %1029, 1, !dbg !30
  %1032 = extractvalue { i32, i32, i32, i32 } %1029, 2, !dbg !30
  %1033 = extractvalue { i32, i32, i32, i32 } %1029, 3, !dbg !30
  %1034 = getelementptr inbounds nuw half, ptr addrspace(3) %949, i32 %238, !dbg !30
  %1035 = ptrtoint ptr addrspace(3) %1034 to i32, !dbg !30
  %1036 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1035) #2, !dbg !30
  %1037 = extractvalue { i32, i32, i32, i32 } %1036, 0, !dbg !30
  %1038 = extractvalue { i32, i32, i32, i32 } %1036, 1, !dbg !30
  %1039 = extractvalue { i32, i32, i32, i32 } %1036, 2, !dbg !30
  %1040 = extractvalue { i32, i32, i32, i32 } %1036, 3, !dbg !30
  %1041 = getelementptr inbounds nuw half, ptr addrspace(3) %949, i32 %239, !dbg !30
  %1042 = ptrtoint ptr addrspace(3) %1041 to i32, !dbg !30
  %1043 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1042) #2, !dbg !30
  %1044 = extractvalue { i32, i32, i32, i32 } %1043, 0, !dbg !30
  %1045 = extractvalue { i32, i32, i32, i32 } %1043, 1, !dbg !30
  %1046 = extractvalue { i32, i32, i32, i32 } %1043, 2, !dbg !30
  %1047 = extractvalue { i32, i32, i32, i32 } %1043, 3, !dbg !30
  %1048 = getelementptr inbounds nuw half, ptr addrspace(3) %949, i32 %240, !dbg !30
  %1049 = ptrtoint ptr addrspace(3) %1048 to i32, !dbg !30
  %1050 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1049) #2, !dbg !30
  %1051 = extractvalue { i32, i32, i32, i32 } %1050, 0, !dbg !30
  %1052 = extractvalue { i32, i32, i32, i32 } %1050, 1, !dbg !30
  %1053 = extractvalue { i32, i32, i32, i32 } %1050, 2, !dbg !30
  %1054 = extractvalue { i32, i32, i32, i32 } %1050, 3, !dbg !30
  %1055 = getelementptr inbounds nuw half, ptr addrspace(3) %949, i32 %241, !dbg !30
  %1056 = ptrtoint ptr addrspace(3) %1055 to i32, !dbg !30
  %1057 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1056) #2, !dbg !30
  %1058 = extractvalue { i32, i32, i32, i32 } %1057, 0, !dbg !30
  %1059 = extractvalue { i32, i32, i32, i32 } %1057, 1, !dbg !30
  %1060 = extractvalue { i32, i32, i32, i32 } %1057, 2, !dbg !30
  %1061 = extractvalue { i32, i32, i32, i32 } %1057, 3, !dbg !30
  %1062 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !49
  %1063 = insertelement <2 x float> %1062, float %.0.i53, i64 1, !dbg !49
  %1064 = fptrunc <2 x float> %1063 to <2 x half>, !dbg !49
  %1065 = insertelement <2 x float> poison, float %.0.i56, i64 0, !dbg !49
  %1066 = insertelement <2 x float> %1065, float %.0.i59, i64 1, !dbg !49
  %1067 = fptrunc <2 x float> %1066 to <2 x half>, !dbg !49
  %1068 = insertelement <2 x float> poison, float %.0.i62, i64 0, !dbg !49
  %1069 = insertelement <2 x float> %1068, float %.0.i65, i64 1, !dbg !49
  %1070 = fptrunc <2 x float> %1069 to <2 x half>, !dbg !49
  %1071 = insertelement <2 x float> poison, float %.0.i68, i64 0, !dbg !49
  %1072 = insertelement <2 x float> %1071, float %.0.i71, i64 1, !dbg !49
  %1073 = fptrunc <2 x float> %1072 to <2 x half>, !dbg !49
  %1074 = insertelement <2 x float> poison, float %.0.i74, i64 0, !dbg !49
  %1075 = insertelement <2 x float> %1074, float %.0.i77, i64 1, !dbg !49
  %1076 = fptrunc <2 x float> %1075 to <2 x half>, !dbg !49
  %1077 = insertelement <2 x float> poison, float %.0.i80, i64 0, !dbg !49
  %1078 = insertelement <2 x float> %1077, float %.0.i83, i64 1, !dbg !49
  %1079 = fptrunc <2 x float> %1078 to <2 x half>, !dbg !49
  %1080 = insertelement <2 x float> poison, float %.0.i86, i64 0, !dbg !49
  %1081 = insertelement <2 x float> %1080, float %.0.i89, i64 1, !dbg !49
  %1082 = fptrunc <2 x float> %1081 to <2 x half>, !dbg !49
  %1083 = insertelement <2 x float> poison, float %.0.i92, i64 0, !dbg !49
  %1084 = insertelement <2 x float> %1083, float %.0.i95, i64 1, !dbg !49
  %1085 = fptrunc <2 x float> %1084 to <2 x half>, !dbg !49
  %1086 = insertelement <2 x float> poison, float %.0.i98, i64 0, !dbg !49
  %1087 = insertelement <2 x float> %1086, float %.0.i101, i64 1, !dbg !49
  %1088 = fptrunc <2 x float> %1087 to <2 x half>, !dbg !49
  %1089 = insertelement <2 x float> poison, float %.0.i104, i64 0, !dbg !49
  %1090 = insertelement <2 x float> %1089, float %.0.i107, i64 1, !dbg !49
  %1091 = fptrunc <2 x float> %1090 to <2 x half>, !dbg !49
  %1092 = insertelement <2 x float> poison, float %.0.i110, i64 0, !dbg !49
  %1093 = insertelement <2 x float> %1092, float %.0.i113, i64 1, !dbg !49
  %1094 = fptrunc <2 x float> %1093 to <2 x half>, !dbg !49
  %1095 = insertelement <2 x float> poison, float %.0.i116, i64 0, !dbg !49
  %1096 = insertelement <2 x float> %1095, float %.0.i119, i64 1, !dbg !49
  %1097 = fptrunc <2 x float> %1096 to <2 x half>, !dbg !49
  %1098 = insertelement <2 x float> poison, float %.0.i122, i64 0, !dbg !49
  %1099 = insertelement <2 x float> %1098, float %.0.i125, i64 1, !dbg !49
  %1100 = fptrunc <2 x float> %1099 to <2 x half>, !dbg !49
  %1101 = insertelement <2 x float> poison, float %.0.i128, i64 0, !dbg !49
  %1102 = insertelement <2 x float> %1101, float %.0.i131, i64 1, !dbg !49
  %1103 = fptrunc <2 x float> %1102 to <2 x half>, !dbg !49
  %1104 = insertelement <2 x float> poison, float %.0.i134, i64 0, !dbg !49
  %1105 = insertelement <2 x float> %1104, float %.0.i137, i64 1, !dbg !49
  %1106 = fptrunc <2 x float> %1105 to <2 x half>, !dbg !49
  %1107 = insertelement <2 x float> poison, float %.0.i140, i64 0, !dbg !49
  %1108 = insertelement <2 x float> %1107, float %.0.i143, i64 1, !dbg !49
  %1109 = fptrunc <2 x float> %1108 to <2 x half>, !dbg !49
  %1110 = bitcast <2 x half> %1064 to i32, !dbg !50
  %1111 = bitcast <2 x half> %1067 to i32, !dbg !50
  %1112 = bitcast <2 x half> %1070 to i32, !dbg !50
  %1113 = bitcast <2 x half> %1073 to i32, !dbg !50
  %1114 = bitcast <2 x half> %1076 to i32, !dbg !50
  %1115 = bitcast <2 x half> %1079 to i32, !dbg !50
  %1116 = bitcast <2 x half> %1082 to i32, !dbg !50
  %1117 = bitcast <2 x half> %1085 to i32, !dbg !50
  %1118 = bitcast <2 x half> %1088 to i32, !dbg !50
  %1119 = bitcast <2 x half> %1091 to i32, !dbg !50
  %1120 = bitcast <2 x half> %1094 to i32, !dbg !50
  %1121 = bitcast <2 x half> %1097 to i32, !dbg !50
  %1122 = bitcast <2 x half> %1100 to i32, !dbg !50
  %1123 = bitcast <2 x half> %1103 to i32, !dbg !50
  %1124 = bitcast <2 x half> %1106 to i32, !dbg !50
  %1125 = bitcast <2 x half> %1109 to i32, !dbg !50
  %1126 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %917, float %918, float %919, float %920, i32 %1110, i32 %1111, i32 %1112, i32 %1113, i32 %953, i32 %954) #2, !dbg !50
  %1127 = extractvalue { float, float, float, float } %1126, 0, !dbg !50
  %1128 = extractvalue { float, float, float, float } %1126, 1, !dbg !50
  %1129 = extractvalue { float, float, float, float } %1126, 2, !dbg !50
  %1130 = extractvalue { float, float, float, float } %1126, 3, !dbg !50
  %1131 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %921, float %922, float %923, float %924, i32 %1110, i32 %1111, i32 %1112, i32 %1113, i32 %967, i32 %968) #2, !dbg !50
  %1132 = extractvalue { float, float, float, float } %1131, 0, !dbg !50
  %1133 = extractvalue { float, float, float, float } %1131, 1, !dbg !50
  %1134 = extractvalue { float, float, float, float } %1131, 2, !dbg !50
  %1135 = extractvalue { float, float, float, float } %1131, 3, !dbg !50
  %1136 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %925, float %926, float %927, float %928, i32 %1110, i32 %1111, i32 %1112, i32 %1113, i32 %981, i32 %982) #2, !dbg !50
  %1137 = extractvalue { float, float, float, float } %1136, 0, !dbg !50
  %1138 = extractvalue { float, float, float, float } %1136, 1, !dbg !50
  %1139 = extractvalue { float, float, float, float } %1136, 2, !dbg !50
  %1140 = extractvalue { float, float, float, float } %1136, 3, !dbg !50
  %1141 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %929, float %930, float %931, float %932, i32 %1110, i32 %1111, i32 %1112, i32 %1113, i32 %995, i32 %996) #2, !dbg !50
  %1142 = extractvalue { float, float, float, float } %1141, 0, !dbg !50
  %1143 = extractvalue { float, float, float, float } %1141, 1, !dbg !50
  %1144 = extractvalue { float, float, float, float } %1141, 2, !dbg !50
  %1145 = extractvalue { float, float, float, float } %1141, 3, !dbg !50
  %1146 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %933, float %934, float %935, float %936, i32 %1110, i32 %1111, i32 %1112, i32 %1113, i32 %1009, i32 %1010) #2, !dbg !50
  %1147 = extractvalue { float, float, float, float } %1146, 0, !dbg !50
  %1148 = extractvalue { float, float, float, float } %1146, 1, !dbg !50
  %1149 = extractvalue { float, float, float, float } %1146, 2, !dbg !50
  %1150 = extractvalue { float, float, float, float } %1146, 3, !dbg !50
  %1151 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %937, float %938, float %939, float %940, i32 %1110, i32 %1111, i32 %1112, i32 %1113, i32 %1023, i32 %1024) #2, !dbg !50
  %1152 = extractvalue { float, float, float, float } %1151, 0, !dbg !50
  %1153 = extractvalue { float, float, float, float } %1151, 1, !dbg !50
  %1154 = extractvalue { float, float, float, float } %1151, 2, !dbg !50
  %1155 = extractvalue { float, float, float, float } %1151, 3, !dbg !50
  %1156 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %941, float %942, float %943, float %944, i32 %1110, i32 %1111, i32 %1112, i32 %1113, i32 %1037, i32 %1038) #2, !dbg !50
  %1157 = extractvalue { float, float, float, float } %1156, 0, !dbg !50
  %1158 = extractvalue { float, float, float, float } %1156, 1, !dbg !50
  %1159 = extractvalue { float, float, float, float } %1156, 2, !dbg !50
  %1160 = extractvalue { float, float, float, float } %1156, 3, !dbg !50
  %1161 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %945, float %946, float %947, float %948, i32 %1110, i32 %1111, i32 %1112, i32 %1113, i32 %1051, i32 %1052) #2, !dbg !50
  %1162 = extractvalue { float, float, float, float } %1161, 0, !dbg !50
  %1163 = extractvalue { float, float, float, float } %1161, 1, !dbg !50
  %1164 = extractvalue { float, float, float, float } %1161, 2, !dbg !50
  %1165 = extractvalue { float, float, float, float } %1161, 3, !dbg !50
  %1166 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1127, float %1128, float %1129, float %1130, i32 %1114, i32 %1115, i32 %1116, i32 %1117, i32 %955, i32 %956) #2, !dbg !50
  %1167 = extractvalue { float, float, float, float } %1166, 0, !dbg !50
  %1168 = extractvalue { float, float, float, float } %1166, 1, !dbg !50
  %1169 = extractvalue { float, float, float, float } %1166, 2, !dbg !50
  %1170 = extractvalue { float, float, float, float } %1166, 3, !dbg !50
  %1171 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1132, float %1133, float %1134, float %1135, i32 %1114, i32 %1115, i32 %1116, i32 %1117, i32 %969, i32 %970) #2, !dbg !50
  %1172 = extractvalue { float, float, float, float } %1171, 0, !dbg !50
  %1173 = extractvalue { float, float, float, float } %1171, 1, !dbg !50
  %1174 = extractvalue { float, float, float, float } %1171, 2, !dbg !50
  %1175 = extractvalue { float, float, float, float } %1171, 3, !dbg !50
  %1176 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1137, float %1138, float %1139, float %1140, i32 %1114, i32 %1115, i32 %1116, i32 %1117, i32 %983, i32 %984) #2, !dbg !50
  %1177 = extractvalue { float, float, float, float } %1176, 0, !dbg !50
  %1178 = extractvalue { float, float, float, float } %1176, 1, !dbg !50
  %1179 = extractvalue { float, float, float, float } %1176, 2, !dbg !50
  %1180 = extractvalue { float, float, float, float } %1176, 3, !dbg !50
  %1181 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1142, float %1143, float %1144, float %1145, i32 %1114, i32 %1115, i32 %1116, i32 %1117, i32 %997, i32 %998) #2, !dbg !50
  %1182 = extractvalue { float, float, float, float } %1181, 0, !dbg !50
  %1183 = extractvalue { float, float, float, float } %1181, 1, !dbg !50
  %1184 = extractvalue { float, float, float, float } %1181, 2, !dbg !50
  %1185 = extractvalue { float, float, float, float } %1181, 3, !dbg !50
  %1186 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1147, float %1148, float %1149, float %1150, i32 %1114, i32 %1115, i32 %1116, i32 %1117, i32 %1011, i32 %1012) #2, !dbg !50
  %1187 = extractvalue { float, float, float, float } %1186, 0, !dbg !50
  %1188 = extractvalue { float, float, float, float } %1186, 1, !dbg !50
  %1189 = extractvalue { float, float, float, float } %1186, 2, !dbg !50
  %1190 = extractvalue { float, float, float, float } %1186, 3, !dbg !50
  %1191 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1152, float %1153, float %1154, float %1155, i32 %1114, i32 %1115, i32 %1116, i32 %1117, i32 %1025, i32 %1026) #2, !dbg !50
  %1192 = extractvalue { float, float, float, float } %1191, 0, !dbg !50
  %1193 = extractvalue { float, float, float, float } %1191, 1, !dbg !50
  %1194 = extractvalue { float, float, float, float } %1191, 2, !dbg !50
  %1195 = extractvalue { float, float, float, float } %1191, 3, !dbg !50
  %1196 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1157, float %1158, float %1159, float %1160, i32 %1114, i32 %1115, i32 %1116, i32 %1117, i32 %1039, i32 %1040) #2, !dbg !50
  %1197 = extractvalue { float, float, float, float } %1196, 0, !dbg !50
  %1198 = extractvalue { float, float, float, float } %1196, 1, !dbg !50
  %1199 = extractvalue { float, float, float, float } %1196, 2, !dbg !50
  %1200 = extractvalue { float, float, float, float } %1196, 3, !dbg !50
  %1201 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1162, float %1163, float %1164, float %1165, i32 %1114, i32 %1115, i32 %1116, i32 %1117, i32 %1053, i32 %1054) #2, !dbg !50
  %1202 = extractvalue { float, float, float, float } %1201, 0, !dbg !50
  %1203 = extractvalue { float, float, float, float } %1201, 1, !dbg !50
  %1204 = extractvalue { float, float, float, float } %1201, 2, !dbg !50
  %1205 = extractvalue { float, float, float, float } %1201, 3, !dbg !50
  %1206 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1167, float %1168, float %1169, float %1170, i32 %1118, i32 %1119, i32 %1120, i32 %1121, i32 %960, i32 %961) #2, !dbg !50
  %1207 = extractvalue { float, float, float, float } %1206, 0, !dbg !50
  %1208 = extractvalue { float, float, float, float } %1206, 1, !dbg !50
  %1209 = extractvalue { float, float, float, float } %1206, 2, !dbg !50
  %1210 = extractvalue { float, float, float, float } %1206, 3, !dbg !50
  %1211 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1172, float %1173, float %1174, float %1175, i32 %1118, i32 %1119, i32 %1120, i32 %1121, i32 %974, i32 %975) #2, !dbg !50
  %1212 = extractvalue { float, float, float, float } %1211, 0, !dbg !50
  %1213 = extractvalue { float, float, float, float } %1211, 1, !dbg !50
  %1214 = extractvalue { float, float, float, float } %1211, 2, !dbg !50
  %1215 = extractvalue { float, float, float, float } %1211, 3, !dbg !50
  %1216 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1177, float %1178, float %1179, float %1180, i32 %1118, i32 %1119, i32 %1120, i32 %1121, i32 %988, i32 %989) #2, !dbg !50
  %1217 = extractvalue { float, float, float, float } %1216, 0, !dbg !50
  %1218 = extractvalue { float, float, float, float } %1216, 1, !dbg !50
  %1219 = extractvalue { float, float, float, float } %1216, 2, !dbg !50
  %1220 = extractvalue { float, float, float, float } %1216, 3, !dbg !50
  %1221 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1182, float %1183, float %1184, float %1185, i32 %1118, i32 %1119, i32 %1120, i32 %1121, i32 %1002, i32 %1003) #2, !dbg !50
  %1222 = extractvalue { float, float, float, float } %1221, 0, !dbg !50
  %1223 = extractvalue { float, float, float, float } %1221, 1, !dbg !50
  %1224 = extractvalue { float, float, float, float } %1221, 2, !dbg !50
  %1225 = extractvalue { float, float, float, float } %1221, 3, !dbg !50
  %1226 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1187, float %1188, float %1189, float %1190, i32 %1118, i32 %1119, i32 %1120, i32 %1121, i32 %1016, i32 %1017) #2, !dbg !50
  %1227 = extractvalue { float, float, float, float } %1226, 0, !dbg !50
  %1228 = extractvalue { float, float, float, float } %1226, 1, !dbg !50
  %1229 = extractvalue { float, float, float, float } %1226, 2, !dbg !50
  %1230 = extractvalue { float, float, float, float } %1226, 3, !dbg !50
  %1231 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1192, float %1193, float %1194, float %1195, i32 %1118, i32 %1119, i32 %1120, i32 %1121, i32 %1030, i32 %1031) #2, !dbg !50
  %1232 = extractvalue { float, float, float, float } %1231, 0, !dbg !50
  %1233 = extractvalue { float, float, float, float } %1231, 1, !dbg !50
  %1234 = extractvalue { float, float, float, float } %1231, 2, !dbg !50
  %1235 = extractvalue { float, float, float, float } %1231, 3, !dbg !50
  %1236 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1197, float %1198, float %1199, float %1200, i32 %1118, i32 %1119, i32 %1120, i32 %1121, i32 %1044, i32 %1045) #2, !dbg !50
  %1237 = extractvalue { float, float, float, float } %1236, 0, !dbg !50
  %1238 = extractvalue { float, float, float, float } %1236, 1, !dbg !50
  %1239 = extractvalue { float, float, float, float } %1236, 2, !dbg !50
  %1240 = extractvalue { float, float, float, float } %1236, 3, !dbg !50
  %1241 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1202, float %1203, float %1204, float %1205, i32 %1118, i32 %1119, i32 %1120, i32 %1121, i32 %1058, i32 %1059) #2, !dbg !50
  %1242 = extractvalue { float, float, float, float } %1241, 0, !dbg !50
  %1243 = extractvalue { float, float, float, float } %1241, 1, !dbg !50
  %1244 = extractvalue { float, float, float, float } %1241, 2, !dbg !50
  %1245 = extractvalue { float, float, float, float } %1241, 3, !dbg !50
  %1246 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1207, float %1208, float %1209, float %1210, i32 %1122, i32 %1123, i32 %1124, i32 %1125, i32 %962, i32 %963) #2, !dbg !50
  %1247 = extractvalue { float, float, float, float } %1246, 0, !dbg !50
  %1248 = extractvalue { float, float, float, float } %1246, 1, !dbg !50
  %1249 = extractvalue { float, float, float, float } %1246, 2, !dbg !50
  %1250 = extractvalue { float, float, float, float } %1246, 3, !dbg !50
  %1251 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1212, float %1213, float %1214, float %1215, i32 %1122, i32 %1123, i32 %1124, i32 %1125, i32 %976, i32 %977) #2, !dbg !50
  %1252 = extractvalue { float, float, float, float } %1251, 0, !dbg !50
  %1253 = extractvalue { float, float, float, float } %1251, 1, !dbg !50
  %1254 = extractvalue { float, float, float, float } %1251, 2, !dbg !50
  %1255 = extractvalue { float, float, float, float } %1251, 3, !dbg !50
  %1256 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1217, float %1218, float %1219, float %1220, i32 %1122, i32 %1123, i32 %1124, i32 %1125, i32 %990, i32 %991) #2, !dbg !50
  %1257 = extractvalue { float, float, float, float } %1256, 0, !dbg !50
  %1258 = extractvalue { float, float, float, float } %1256, 1, !dbg !50
  %1259 = extractvalue { float, float, float, float } %1256, 2, !dbg !50
  %1260 = extractvalue { float, float, float, float } %1256, 3, !dbg !50
  %1261 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1222, float %1223, float %1224, float %1225, i32 %1122, i32 %1123, i32 %1124, i32 %1125, i32 %1004, i32 %1005) #2, !dbg !50
  %1262 = extractvalue { float, float, float, float } %1261, 0, !dbg !50
  %1263 = extractvalue { float, float, float, float } %1261, 1, !dbg !50
  %1264 = extractvalue { float, float, float, float } %1261, 2, !dbg !50
  %1265 = extractvalue { float, float, float, float } %1261, 3, !dbg !50
  %1266 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1227, float %1228, float %1229, float %1230, i32 %1122, i32 %1123, i32 %1124, i32 %1125, i32 %1018, i32 %1019) #2, !dbg !50
  %1267 = extractvalue { float, float, float, float } %1266, 0, !dbg !50
  %1268 = extractvalue { float, float, float, float } %1266, 1, !dbg !50
  %1269 = extractvalue { float, float, float, float } %1266, 2, !dbg !50
  %1270 = extractvalue { float, float, float, float } %1266, 3, !dbg !50
  %1271 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1232, float %1233, float %1234, float %1235, i32 %1122, i32 %1123, i32 %1124, i32 %1125, i32 %1032, i32 %1033) #2, !dbg !50
  %1272 = extractvalue { float, float, float, float } %1271, 0, !dbg !50
  %1273 = extractvalue { float, float, float, float } %1271, 1, !dbg !50
  %1274 = extractvalue { float, float, float, float } %1271, 2, !dbg !50
  %1275 = extractvalue { float, float, float, float } %1271, 3, !dbg !50
  %1276 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1237, float %1238, float %1239, float %1240, i32 %1122, i32 %1123, i32 %1124, i32 %1125, i32 %1046, i32 %1047) #2, !dbg !50
  %1277 = extractvalue { float, float, float, float } %1276, 0, !dbg !50
  %1278 = extractvalue { float, float, float, float } %1276, 1, !dbg !50
  %1279 = extractvalue { float, float, float, float } %1276, 2, !dbg !50
  %1280 = extractvalue { float, float, float, float } %1276, 3, !dbg !50
  %1281 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1242, float %1243, float %1244, float %1245, i32 %1122, i32 %1123, i32 %1124, i32 %1125, i32 %1060, i32 %1061) #2, !dbg !50
  %1282 = extractvalue { float, float, float, float } %1281, 0, !dbg !50
  %1283 = extractvalue { float, float, float, float } %1281, 1, !dbg !50
  %1284 = extractvalue { float, float, float, float } %1281, 2, !dbg !50
  %1285 = extractvalue { float, float, float, float } %1281, 3, !dbg !50
  %1286 = add nuw nsw i64 %245, 64, !dbg !51
  %1287 = add i32 %244, 1, !dbg !31
  %1288 = icmp sgt i32 %1287, 2, !dbg !31
  %1289 = select i1 %1288, i32 0, i32 %1287, !dbg !31
  %1290 = or disjoint i64 %1286, %49, !dbg !27
  %1291 = or disjoint i64 %1286, %50, !dbg !27
  %1292 = mul i64 %1290, %39, !dbg !27
  %1293 = mul i64 %1291, %39, !dbg !27
  %gep = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %1292, !dbg !27
  %gep218 = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %1293, !dbg !27
  %1294 = shl i32 %1289, 12, !dbg !27
  %1295 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1294, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %1296 = getelementptr inbounds nuw half, ptr addrspace(3) %1295, i32 %119, !dbg !27
  %1297 = getelementptr inbounds nuw half, ptr addrspace(3) %1295, i32 %124, !dbg !27
  %1298 = select i1 %283, i32 16, i32 0, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1296, ptr addrspace(1) %gep, i32 %1298) #2, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1297, ptr addrspace(1) %gep218, i32 %1298) #2, !dbg !27
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !27
  %1299 = mul i64 %1290, %37, !dbg !30
  %1300 = mul i64 %1291, %37, !dbg !30
  %gep220 = getelementptr half, ptr addrspace(1) %invariant.gep219, i64 %1299, !dbg !30
  %gep222 = getelementptr half, ptr addrspace(1) %invariant.gep219, i64 %1300, !dbg !30
  %1301 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %1294, !dbg !30
  %1302 = getelementptr inbounds nuw half, ptr addrspace(3) %1301, i32 %119, !dbg !30
  %1303 = getelementptr inbounds nuw half, ptr addrspace(3) %1301, i32 %124, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1302, ptr addrspace(1) %gep220, i32 %1298) #2, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1303, ptr addrspace(1) %gep222, i32 %1298) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %1304 = add nuw nsw i32 %282, 64, !dbg !31
  %1305 = icmp samesign ult i32 %282, 4032, !dbg !31
  br i1 %1305, label %242, label %1306, !dbg !31

1306:                                             ; preds = %__nv_exp2f.exit150
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %1307 = fcmp olt float %915, 0x3810000000000000, !dbg !52
  %1308 = fmul float %915, 0x4160000000000000, !dbg !52
  %.02.i = select i1 %1307, float %1308, float %915, !dbg !52
  %i.i.0.i = select i1 %1307, float -2.300000e+01, float 0.000000e+00, !dbg !52
  %1309 = bitcast float %.02.i to i32, !dbg !52
  %1310 = add i32 %1309, -1060439283, !dbg !52
  %1311 = and i32 %1310, -8388608, !dbg !52
  %1312 = sub i32 %1309, %1311, !dbg !52
  %1313 = bitcast i32 %1312 to float, !dbg !52
  %1314 = sitofp i32 %1311 to float, !dbg !52
  %1315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not.i151 = icmp eq i32 %1315, 0, !dbg !52
  %1316 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1314, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !52
  %1317 = tail call float @llvm.nvvm.fma.rn.f(float %1314, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !52
  %.08.i = select i1 %.not.i151, float %1317, float %1316, !dbg !52
  %1318 = fadd float %1313, -1.000000e+00, !dbg !52
  %1319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not1.i = icmp eq i32 %1319, 0, !dbg !52
  %1320 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3FB8D64FE0000000, float %1318, float 0xBFC58FE600000000) #2, !dbg !52
  %1321 = tail call float @llvm.nvvm.fma.rn.f(float 0x3FB8D64FE0000000, float %1318, float 0xBFC58FE600000000) #2, !dbg !52
  %.010.i = select i1 %.not1.i, float %1321, float %1320, !dbg !52
  %1322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not2.i = icmp eq i32 %1322, 0, !dbg !52
  %1323 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %1318, float 0x3FC5F9E540000000) #2, !dbg !52
  %1324 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %1318, float 0x3FC5F9E540000000) #2, !dbg !52
  %.011.i = select i1 %.not2.i, float %1324, float %1323, !dbg !52
  %1325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not3.i = icmp eq i32 %1325, 0, !dbg !52
  %1326 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %1318, float 0xBFC6E9C860000000) #2, !dbg !52
  %1327 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %1318, float 0xBFC6E9C860000000) #2, !dbg !52
  %.012.i = select i1 %.not3.i, float %1327, float %1326, !dbg !52
  %1328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not4.i = icmp eq i32 %1328, 0, !dbg !52
  %1329 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %1318, float 0x3FCA417E80000000) #2, !dbg !52
  %1330 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %1318, float 0x3FCA417E80000000) #2, !dbg !52
  %.09.i = select i1 %.not4.i, float %1330, float %1329, !dbg !52
  %1331 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not5.i = icmp eq i32 %1331, 0, !dbg !52
  %1332 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %1318, float 0xBFCEC79160000000) #2, !dbg !52
  %1333 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %1318, float 0xBFCEC79160000000) #2, !dbg !52
  %.05.i = select i1 %.not5.i, float %1333, float %1332, !dbg !52
  %1334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not6.i = icmp eq i32 %1334, 0, !dbg !52
  %1335 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %1318, float 0x3FD277F320000000) #2, !dbg !52
  %1336 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %1318, float 0x3FD277F320000000) #2, !dbg !52
  %.01.i = select i1 %.not6.i, float %1336, float %1335, !dbg !52
  %1337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not7.i = icmp eq i32 %1337, 0, !dbg !52
  %1338 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %1318, float 0xBFD7154920000000) #2, !dbg !52
  %1339 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %1318, float 0xBFD7154920000000) #2, !dbg !52
  %.0.i152 = select i1 %.not7.i, float %1339, float %1338, !dbg !52
  %1340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not8.i = icmp eq i32 %1340, 0, !dbg !52
  %1341 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i152, float %1318, float 0x3FDEC70940000000) #2, !dbg !52
  %1342 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i152, float %1318, float 0x3FDEC70940000000) #2, !dbg !52
  %.07.i = select i1 %.not8.i, float %1342, float %1341, !dbg !52
  %1343 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not9.i = icmp eq i32 %1343, 0, !dbg !52
  %1344 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %1318, float 0xBFE7154760000000) #2, !dbg !52
  %1345 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %1318, float 0xBFE7154760000000) #2, !dbg !52
  %.06.i = select i1 %.not9.i, float %1345, float %1344, !dbg !52
  %1346 = fmul float %1318, %.06.i, !dbg !52
  %1347 = fmul float %1318, %1346, !dbg !52
  %1348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not10.i = icmp eq i32 %1348, 0, !dbg !52
  %1349 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1318, float 0x3FF7154760000000, float %1347) #2, !dbg !52
  %1350 = tail call float @llvm.nvvm.fma.rn.f(float %1318, float 0x3FF7154760000000, float %1347) #2, !dbg !52
  %.04.i = select i1 %.not10.i, float %1350, float %1349, !dbg !52
  %1351 = fadd float %.08.i, %.04.i, !dbg !52
  %1352 = icmp ugt i32 %1309, 2139095039, !dbg !52
  br i1 %1352, label %__nv_fmaf_rn.exit.i.i, label %__nv_log2f.exit, !dbg !52

__nv_fmaf_rn.exit.i.i:                            ; preds = %1306
  %1353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not11.i = icmp eq i32 %1353, 0, !dbg !52
  %1354 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %1355 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %.03.i = select i1 %.not11.i, float %1355, float %1354, !dbg !52
  br label %__nv_log2f.exit, !dbg !52

__nv_log2f.exit:                                  ; preds = %1306, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %1351, %1306 ], !dbg !52
  %1356 = fcmp olt float %916, 0x3810000000000000, !dbg !52
  %1357 = fmul float %916, 0x4160000000000000, !dbg !52
  %.02.i153 = select i1 %1356, float %1357, float %916, !dbg !52
  %i.i.0.i154 = select i1 %1356, float -2.300000e+01, float 0.000000e+00, !dbg !52
  %1358 = bitcast float %.02.i153 to i32, !dbg !52
  %1359 = add i32 %1358, -1060439283, !dbg !52
  %1360 = and i32 %1359, -8388608, !dbg !52
  %1361 = sub i32 %1358, %1360, !dbg !52
  %1362 = bitcast i32 %1361 to float, !dbg !52
  %1363 = sitofp i32 %1360 to float, !dbg !52
  %1364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not.i155 = icmp eq i32 %1364, 0, !dbg !52
  %1365 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1363, float 0x3E80000000000000, float %i.i.0.i154) #2, !dbg !52
  %1366 = tail call float @llvm.nvvm.fma.rn.f(float %1363, float 0x3E80000000000000, float %i.i.0.i154) #2, !dbg !52
  %.08.i156 = select i1 %.not.i155, float %1366, float %1365, !dbg !52
  %1367 = fadd float %1362, -1.000000e+00, !dbg !52
  %1368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not1.i157 = icmp eq i32 %1368, 0, !dbg !52
  %1369 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3FB8D64FE0000000, float %1367, float 0xBFC58FE600000000) #2, !dbg !52
  %1370 = tail call float @llvm.nvvm.fma.rn.f(float 0x3FB8D64FE0000000, float %1367, float 0xBFC58FE600000000) #2, !dbg !52
  %.010.i158 = select i1 %.not1.i157, float %1370, float %1369, !dbg !52
  %1371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not2.i159 = icmp eq i32 %1371, 0, !dbg !52
  %1372 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i158, float %1367, float 0x3FC5F9E540000000) #2, !dbg !52
  %1373 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i158, float %1367, float 0x3FC5F9E540000000) #2, !dbg !52
  %.011.i160 = select i1 %.not2.i159, float %1373, float %1372, !dbg !52
  %1374 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not3.i161 = icmp eq i32 %1374, 0, !dbg !52
  %1375 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i160, float %1367, float 0xBFC6E9C860000000) #2, !dbg !52
  %1376 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i160, float %1367, float 0xBFC6E9C860000000) #2, !dbg !52
  %.012.i162 = select i1 %.not3.i161, float %1376, float %1375, !dbg !52
  %1377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not4.i163 = icmp eq i32 %1377, 0, !dbg !52
  %1378 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i162, float %1367, float 0x3FCA417E80000000) #2, !dbg !52
  %1379 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i162, float %1367, float 0x3FCA417E80000000) #2, !dbg !52
  %.09.i164 = select i1 %.not4.i163, float %1379, float %1378, !dbg !52
  %1380 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not5.i165 = icmp eq i32 %1380, 0, !dbg !52
  %1381 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i164, float %1367, float 0xBFCEC79160000000) #2, !dbg !52
  %1382 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i164, float %1367, float 0xBFCEC79160000000) #2, !dbg !52
  %.05.i166 = select i1 %.not5.i165, float %1382, float %1381, !dbg !52
  %1383 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not6.i167 = icmp eq i32 %1383, 0, !dbg !52
  %1384 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i166, float %1367, float 0x3FD277F320000000) #2, !dbg !52
  %1385 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i166, float %1367, float 0x3FD277F320000000) #2, !dbg !52
  %.01.i168 = select i1 %.not6.i167, float %1385, float %1384, !dbg !52
  %1386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not7.i169 = icmp eq i32 %1386, 0, !dbg !52
  %1387 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i168, float %1367, float 0xBFD7154920000000) #2, !dbg !52
  %1388 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i168, float %1367, float 0xBFD7154920000000) #2, !dbg !52
  %.0.i170 = select i1 %.not7.i169, float %1388, float %1387, !dbg !52
  %1389 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not8.i171 = icmp eq i32 %1389, 0, !dbg !52
  %1390 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i170, float %1367, float 0x3FDEC70940000000) #2, !dbg !52
  %1391 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i170, float %1367, float 0x3FDEC70940000000) #2, !dbg !52
  %.07.i172 = select i1 %.not8.i171, float %1391, float %1390, !dbg !52
  %1392 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not9.i173 = icmp eq i32 %1392, 0, !dbg !52
  %1393 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i172, float %1367, float 0xBFE7154760000000) #2, !dbg !52
  %1394 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i172, float %1367, float 0xBFE7154760000000) #2, !dbg !52
  %.06.i174 = select i1 %.not9.i173, float %1394, float %1393, !dbg !52
  %1395 = fmul float %1367, %.06.i174, !dbg !52
  %1396 = fmul float %1367, %1395, !dbg !52
  %1397 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not10.i175 = icmp eq i32 %1397, 0, !dbg !52
  %1398 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1367, float 0x3FF7154760000000, float %1396) #2, !dbg !52
  %1399 = tail call float @llvm.nvvm.fma.rn.f(float %1367, float 0x3FF7154760000000, float %1396) #2, !dbg !52
  %.04.i176 = select i1 %.not10.i175, float %1399, float %1398, !dbg !52
  %1400 = fadd float %.08.i156, %.04.i176, !dbg !52
  %1401 = icmp ugt i32 %1358, 2139095039, !dbg !52
  br i1 %1401, label %__nv_fmaf_rn.exit.i.i179, label %__nv_log2f.exit182, !dbg !52

__nv_fmaf_rn.exit.i.i179:                         ; preds = %__nv_log2f.exit
  %1402 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not11.i180 = icmp eq i32 %1402, 0, !dbg !52
  %1403 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i153, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %1404 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i153, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %.03.i181 = select i1 %.not11.i180, float %1404, float %1403, !dbg !52
  br label %__nv_log2f.exit182, !dbg !52

__nv_log2f.exit182:                               ; preds = %__nv_log2f.exit, %__nv_fmaf_rn.exit.i.i179
  %r.i.0.i177 = phi float [ %.03.i181, %__nv_fmaf_rn.exit.i.i179 ], [ %1400, %__nv_log2f.exit ], !dbg !52
  %1405 = and i32 %40, 128, !dbg !24
  %1406 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !52
  %r.i.1.i = select i1 %1406, float 0xFFF0000000000000, float %r.i.0.i, !dbg !52
  %1407 = getelementptr half, ptr addrspace(1) %5, i64 %31, !dbg !53
  %1408 = sext i32 %17 to i64, !dbg !54
  %1409 = and i32 %40, 127, !dbg !24
  %1410 = or disjoint i32 %33, %1409, !dbg !55
  %1411 = icmp eq i32 %1405, 0, !dbg !24
  %1412 = fcmp oeq float %.02.i153, 0.000000e+00, !dbg !52
  %r.i.1.i178 = select i1 %1412, float 0xFFF0000000000000, float %r.i.0.i177, !dbg !52
  %1413 = fadd float %629, %r.i.1.i, !dbg !56
  %1414 = fadd float %630, %r.i.1.i178, !dbg !56
  %1415 = tail call float @llvm.nvvm.div.full(float %1247, float %915), !dbg !57
  %1416 = tail call float @llvm.nvvm.div.full(float %1248, float %915), !dbg !57
  %1417 = tail call float @llvm.nvvm.div.full(float %1249, float %916), !dbg !57
  %1418 = tail call float @llvm.nvvm.div.full(float %1250, float %916), !dbg !57
  %1419 = tail call float @llvm.nvvm.div.full(float %1252, float %915), !dbg !57
  %1420 = tail call float @llvm.nvvm.div.full(float %1253, float %915), !dbg !57
  %1421 = tail call float @llvm.nvvm.div.full(float %1254, float %916), !dbg !57
  %1422 = tail call float @llvm.nvvm.div.full(float %1255, float %916), !dbg !57
  %1423 = tail call float @llvm.nvvm.div.full(float %1257, float %915), !dbg !57
  %1424 = tail call float @llvm.nvvm.div.full(float %1258, float %915), !dbg !57
  %1425 = tail call float @llvm.nvvm.div.full(float %1259, float %916), !dbg !57
  %1426 = tail call float @llvm.nvvm.div.full(float %1260, float %916), !dbg !57
  %1427 = tail call float @llvm.nvvm.div.full(float %1262, float %915), !dbg !57
  %1428 = tail call float @llvm.nvvm.div.full(float %1263, float %915), !dbg !57
  %1429 = tail call float @llvm.nvvm.div.full(float %1264, float %916), !dbg !57
  %1430 = tail call float @llvm.nvvm.div.full(float %1265, float %916), !dbg !57
  %1431 = tail call float @llvm.nvvm.div.full(float %1267, float %915), !dbg !57
  %1432 = tail call float @llvm.nvvm.div.full(float %1268, float %915), !dbg !57
  %1433 = tail call float @llvm.nvvm.div.full(float %1269, float %916), !dbg !57
  %1434 = tail call float @llvm.nvvm.div.full(float %1270, float %916), !dbg !57
  %1435 = tail call float @llvm.nvvm.div.full(float %1272, float %915), !dbg !57
  %1436 = tail call float @llvm.nvvm.div.full(float %1273, float %915), !dbg !57
  %1437 = tail call float @llvm.nvvm.div.full(float %1274, float %916), !dbg !57
  %1438 = tail call float @llvm.nvvm.div.full(float %1275, float %916), !dbg !57
  %1439 = tail call float @llvm.nvvm.div.full(float %1277, float %915), !dbg !57
  %1440 = tail call float @llvm.nvvm.div.full(float %1278, float %915), !dbg !57
  %1441 = tail call float @llvm.nvvm.div.full(float %1279, float %916), !dbg !57
  %1442 = tail call float @llvm.nvvm.div.full(float %1280, float %916), !dbg !57
  %1443 = tail call float @llvm.nvvm.div.full(float %1282, float %915), !dbg !57
  %1444 = tail call float @llvm.nvvm.div.full(float %1283, float %915), !dbg !57
  %1445 = tail call float @llvm.nvvm.div.full(float %1284, float %916), !dbg !57
  %1446 = tail call float @llvm.nvvm.div.full(float %1285, float %916), !dbg !57
  %1447 = shl nuw nsw i32 %22, 5, !dbg !58
  %1448 = zext nneg i32 %1447 to i64, !dbg !59
  %1449 = getelementptr float, ptr addrspace(1) %4, i64 %1448, !dbg !59
  %1450 = sext i32 %1410 to i64, !dbg !60
  %1451 = getelementptr float, ptr addrspace(1) %1449, i64 %1450, !dbg !60
  %1452 = lshr i32 %40, 2, !dbg !61
  %1453 = and i32 %1452, 7, !dbg !61
  %1454 = lshr i32 %40, 1, !dbg !61
  %1455 = and i32 %1454, 48, !dbg !61
  %1456 = lshr exact i32 %1405, 1, !dbg !61
  %1457 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1455, !dbg !61
  %1458 = getelementptr inbounds nuw float, ptr addrspace(3) %1457, i32 %1453, !dbg !61
  %1459 = getelementptr inbounds nuw float, ptr addrspace(3) %1458, i32 %1456, !dbg !61
  store float %1413, ptr addrspace(3) %1459, align 4, !dbg !61
  %1460 = getelementptr inbounds nuw i8, ptr addrspace(3) %1459, i32 32, !dbg !61
  store float %1414, ptr addrspace(3) %1460, align 4, !dbg !61
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !61
  %1461 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1409, !dbg !61
  %1462 = load i32, ptr addrspace(3) %1461, align 4, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1462, ptr addrspace(1) %1451, i1 %1411) #2, !dbg !61
  %1463 = insertelement <2 x float> poison, float %1415, i64 0, !dbg !62
  %1464 = insertelement <2 x float> %1463, float %1416, i64 1, !dbg !62
  %1465 = fptrunc <2 x float> %1464 to <2 x half>, !dbg !62
  %1466 = insertelement <2 x float> poison, float %1417, i64 0, !dbg !62
  %1467 = insertelement <2 x float> %1466, float %1418, i64 1, !dbg !62
  %1468 = fptrunc <2 x float> %1467 to <2 x half>, !dbg !62
  %1469 = insertelement <2 x float> poison, float %1419, i64 0, !dbg !62
  %1470 = insertelement <2 x float> %1469, float %1420, i64 1, !dbg !62
  %1471 = fptrunc <2 x float> %1470 to <2 x half>, !dbg !62
  %1472 = insertelement <2 x float> poison, float %1421, i64 0, !dbg !62
  %1473 = insertelement <2 x float> %1472, float %1422, i64 1, !dbg !62
  %1474 = fptrunc <2 x float> %1473 to <2 x half>, !dbg !62
  %1475 = insertelement <2 x float> poison, float %1423, i64 0, !dbg !62
  %1476 = insertelement <2 x float> %1475, float %1424, i64 1, !dbg !62
  %1477 = fptrunc <2 x float> %1476 to <2 x half>, !dbg !62
  %1478 = insertelement <2 x float> poison, float %1425, i64 0, !dbg !62
  %1479 = insertelement <2 x float> %1478, float %1426, i64 1, !dbg !62
  %1480 = fptrunc <2 x float> %1479 to <2 x half>, !dbg !62
  %1481 = insertelement <2 x float> poison, float %1427, i64 0, !dbg !62
  %1482 = insertelement <2 x float> %1481, float %1428, i64 1, !dbg !62
  %1483 = fptrunc <2 x float> %1482 to <2 x half>, !dbg !62
  %1484 = insertelement <2 x float> poison, float %1429, i64 0, !dbg !62
  %1485 = insertelement <2 x float> %1484, float %1430, i64 1, !dbg !62
  %1486 = fptrunc <2 x float> %1485 to <2 x half>, !dbg !62
  %1487 = insertelement <2 x float> poison, float %1431, i64 0, !dbg !62
  %1488 = insertelement <2 x float> %1487, float %1432, i64 1, !dbg !62
  %1489 = fptrunc <2 x float> %1488 to <2 x half>, !dbg !62
  %1490 = insertelement <2 x float> poison, float %1433, i64 0, !dbg !62
  %1491 = insertelement <2 x float> %1490, float %1434, i64 1, !dbg !62
  %1492 = fptrunc <2 x float> %1491 to <2 x half>, !dbg !62
  %1493 = insertelement <2 x float> poison, float %1435, i64 0, !dbg !62
  %1494 = insertelement <2 x float> %1493, float %1436, i64 1, !dbg !62
  %1495 = fptrunc <2 x float> %1494 to <2 x half>, !dbg !62
  %1496 = insertelement <2 x float> poison, float %1437, i64 0, !dbg !62
  %1497 = insertelement <2 x float> %1496, float %1438, i64 1, !dbg !62
  %1498 = fptrunc <2 x float> %1497 to <2 x half>, !dbg !62
  %1499 = insertelement <2 x float> poison, float %1439, i64 0, !dbg !62
  %1500 = insertelement <2 x float> %1499, float %1440, i64 1, !dbg !62
  %1501 = fptrunc <2 x float> %1500 to <2 x half>, !dbg !62
  %1502 = insertelement <2 x float> poison, float %1441, i64 0, !dbg !62
  %1503 = insertelement <2 x float> %1502, float %1442, i64 1, !dbg !62
  %1504 = fptrunc <2 x float> %1503 to <2 x half>, !dbg !62
  %1505 = insertelement <2 x float> poison, float %1443, i64 0, !dbg !62
  %1506 = insertelement <2 x float> %1505, float %1444, i64 1, !dbg !62
  %1507 = fptrunc <2 x float> %1506 to <2 x half>, !dbg !62
  %1508 = insertelement <2 x float> poison, float %1445, i64 0, !dbg !62
  %1509 = insertelement <2 x float> %1508, float %1446, i64 1, !dbg !62
  %1510 = fptrunc <2 x float> %1509 to <2 x half>, !dbg !62
  %1511 = mul nsw i64 %53, %1408, !dbg !63
  %1512 = mul nsw i64 %54, %1408, !dbg !63
  %1513 = mul nsw i64 %55, %1408, !dbg !63
  %1514 = mul nsw i64 %56, %1408, !dbg !63
  %1515 = getelementptr half, ptr addrspace(1) %1407, i64 %1511, !dbg !63
  %1516 = getelementptr half, ptr addrspace(1) %1515, i64 %63, !dbg !63
  %1517 = getelementptr half, ptr addrspace(1) %1407, i64 %1512, !dbg !63
  %1518 = getelementptr half, ptr addrspace(1) %1517, i64 %63, !dbg !63
  %1519 = getelementptr half, ptr addrspace(1) %1407, i64 %1513, !dbg !63
  %1520 = getelementptr half, ptr addrspace(1) %1519, i64 %63, !dbg !63
  %1521 = getelementptr half, ptr addrspace(1) %1407, i64 %1514, !dbg !63
  %1522 = getelementptr half, ptr addrspace(1) %1521, i64 %63, !dbg !63
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !63
  %1523 = shl nuw nsw i32 %40, 1, !dbg !63
  %1524 = and i32 %1523, 6, !dbg !63
  %1525 = shl nuw nsw i32 %40, 4, !dbg !63
  %1526 = and i32 %1525, 192, !dbg !63
  %1527 = or disjoint i32 %1526, %1524, !dbg !63
  %1528 = shl nuw nsw i32 %41, 4, !dbg !63
  %1529 = or disjoint i32 %1527, %1528, !dbg !63
  %1530 = and i32 %201, 3072, !dbg !63
  %1531 = or disjoint i32 %1529, %1530, !dbg !63
  %1532 = shl nuw nsw i32 %1405, 5, !dbg !63
  %1533 = or disjoint i32 %1531, %1532, !dbg !63
  %1534 = and i32 %61, 2040, !dbg !63
  %1535 = lshr i32 %1533, 3, !dbg !63
  %1536 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1535, !dbg !63
  %1537 = getelementptr inbounds nuw half, ptr addrspace(3) %1536, i32 %1533, !dbg !63
  store <2 x half> %1465, ptr addrspace(3) %1537, align 4, !dbg !63
  %1538 = or disjoint i32 %1533, 512, !dbg !63
  %1539 = lshr i32 %1538, 3, !dbg !63
  %1540 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1539, !dbg !63
  %1541 = getelementptr inbounds nuw half, ptr addrspace(3) %1540, i32 %1538, !dbg !63
  store <2 x half> %1468, ptr addrspace(3) %1541, align 4, !dbg !63
  %1542 = getelementptr inbounds nuw i8, ptr addrspace(3) %1537, i32 16, !dbg !63
  store <2 x half> %1471, ptr addrspace(3) %1542, align 4, !dbg !63
  %1543 = or disjoint i32 %1533, 520, !dbg !63
  %1544 = lshr i32 %1543, 3, !dbg !63
  %1545 = and i32 %1544, 536870904, !dbg !63
  %1546 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1545, !dbg !63
  %1547 = getelementptr inbounds nuw half, ptr addrspace(3) %1546, i32 %1543, !dbg !63
  store <2 x half> %1474, ptr addrspace(3) %1547, align 4, !dbg !63
  %1548 = getelementptr inbounds nuw i8, ptr addrspace(3) %1537, i32 32, !dbg !63
  store <2 x half> %1477, ptr addrspace(3) %1548, align 4, !dbg !63
  %1549 = or disjoint i32 %1533, 528, !dbg !63
  %1550 = lshr i32 %1549, 3, !dbg !63
  %1551 = and i32 %1550, 536870904, !dbg !63
  %1552 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1551, !dbg !63
  %1553 = getelementptr inbounds nuw half, ptr addrspace(3) %1552, i32 %1549, !dbg !63
  store <2 x half> %1480, ptr addrspace(3) %1553, align 4, !dbg !63
  %1554 = getelementptr inbounds nuw i8, ptr addrspace(3) %1537, i32 48, !dbg !63
  store <2 x half> %1483, ptr addrspace(3) %1554, align 4, !dbg !63
  %1555 = or disjoint i32 %1533, 536, !dbg !63
  %1556 = lshr i32 %1555, 3, !dbg !63
  %1557 = and i32 %1556, 536870904, !dbg !63
  %1558 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1557, !dbg !63
  %1559 = getelementptr inbounds nuw half, ptr addrspace(3) %1558, i32 %1555, !dbg !63
  store <2 x half> %1486, ptr addrspace(3) %1559, align 4, !dbg !63
  %1560 = getelementptr inbounds nuw i8, ptr addrspace(3) %1537, i32 64, !dbg !63
  store <2 x half> %1489, ptr addrspace(3) %1560, align 4, !dbg !63
  %1561 = or disjoint i32 %1533, 544, !dbg !63
  %1562 = lshr i32 %1561, 3, !dbg !63
  %1563 = and i32 %1562, 536870904, !dbg !63
  %1564 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1563, !dbg !63
  %1565 = getelementptr inbounds nuw half, ptr addrspace(3) %1564, i32 %1561, !dbg !63
  store <2 x half> %1492, ptr addrspace(3) %1565, align 4, !dbg !63
  %1566 = getelementptr inbounds nuw i8, ptr addrspace(3) %1537, i32 80, !dbg !63
  store <2 x half> %1495, ptr addrspace(3) %1566, align 4, !dbg !63
  %1567 = or disjoint i32 %1533, 552, !dbg !63
  %1568 = lshr i32 %1567, 3, !dbg !63
  %1569 = and i32 %1568, 536870904, !dbg !63
  %1570 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1569, !dbg !63
  %1571 = getelementptr inbounds nuw half, ptr addrspace(3) %1570, i32 %1567, !dbg !63
  store <2 x half> %1498, ptr addrspace(3) %1571, align 4, !dbg !63
  %1572 = getelementptr inbounds nuw i8, ptr addrspace(3) %1537, i32 96, !dbg !63
  store <2 x half> %1501, ptr addrspace(3) %1572, align 4, !dbg !63
  %1573 = or disjoint i32 %1533, 560, !dbg !63
  %1574 = lshr i32 %1573, 3, !dbg !63
  %1575 = and i32 %1574, 536870904, !dbg !63
  %1576 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1575, !dbg !63
  %1577 = getelementptr inbounds nuw half, ptr addrspace(3) %1576, i32 %1573, !dbg !63
  store <2 x half> %1504, ptr addrspace(3) %1577, align 4, !dbg !63
  %1578 = getelementptr inbounds nuw i8, ptr addrspace(3) %1537, i32 112, !dbg !63
  store <2 x half> %1507, ptr addrspace(3) %1578, align 4, !dbg !63
  %1579 = or disjoint i32 %1533, 568, !dbg !63
  %1580 = lshr i32 %1579, 3, !dbg !63
  %1581 = and i32 %1580, 536870904, !dbg !63
  %1582 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1581, !dbg !63
  %1583 = getelementptr inbounds nuw half, ptr addrspace(3) %1582, i32 %1579, !dbg !63
  store <2 x half> %1510, ptr addrspace(3) %1583, align 4, !dbg !63
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !63
  %1584 = and i32 %40, 248, !dbg !63
  %1585 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1584, !dbg !63
  %1586 = getelementptr inbounds nuw half, ptr addrspace(3) %1585, i32 %1534, !dbg !63
  %1587 = load <4 x i32>, ptr addrspace(3) %1586, align 16, !dbg !63
  %1588 = or disjoint i32 %1534, 2048, !dbg !63
  %1589 = lshr exact i32 %1588, 3, !dbg !63
  %1590 = and i32 %1589, 504, !dbg !63
  %1591 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1590, !dbg !63
  %1592 = getelementptr inbounds nuw half, ptr addrspace(3) %1591, i32 %1588, !dbg !63
  %1593 = load <4 x i32>, ptr addrspace(3) %1592, align 16, !dbg !63
  %1594 = or disjoint i32 %1534, 4096, !dbg !63
  %1595 = lshr exact i32 %1594, 3, !dbg !63
  %1596 = and i32 %1595, 760, !dbg !63
  %1597 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1596, !dbg !63
  %1598 = getelementptr inbounds nuw half, ptr addrspace(3) %1597, i32 %1594, !dbg !63
  %1599 = load <4 x i32>, ptr addrspace(3) %1598, align 16, !dbg !63
  %1600 = or i32 %61, 6144, !dbg !63
  %1601 = lshr exact i32 %1600, 3, !dbg !63
  %1602 = and i32 %1601, 1016, !dbg !63
  %1603 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1602, !dbg !63
  %1604 = getelementptr inbounds nuw half, ptr addrspace(3) %1603, i32 %1600, !dbg !63
  %1605 = load <4 x i32>, ptr addrspace(3) %1604, align 16, !dbg !63
  %.extract = extractelement <4 x i32> %1587, i64 0, !dbg !63
  %.extract185 = extractelement <4 x i32> %1587, i64 1, !dbg !63
  %.extract187 = extractelement <4 x i32> %1587, i64 2, !dbg !63
  %.extract189 = extractelement <4 x i32> %1587, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract, i32 %.extract185, i32 %.extract187, i32 %.extract189, ptr addrspace(1) %1516) #2, !dbg !63
  %.extract191 = extractelement <4 x i32> %1593, i64 0, !dbg !63
  %.extract193 = extractelement <4 x i32> %1593, i64 1, !dbg !63
  %.extract195 = extractelement <4 x i32> %1593, i64 2, !dbg !63
  %.extract197 = extractelement <4 x i32> %1593, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract191, i32 %.extract193, i32 %.extract195, i32 %.extract197, ptr addrspace(1) %1518) #2, !dbg !63
  %.extract199 = extractelement <4 x i32> %1599, i64 0, !dbg !63
  %.extract201 = extractelement <4 x i32> %1599, i64 1, !dbg !63
  %.extract203 = extractelement <4 x i32> %1599, i64 2, !dbg !63
  %.extract205 = extractelement <4 x i32> %1599, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract199, i32 %.extract201, i32 %.extract203, i32 %.extract205, ptr addrspace(1) %1520) #2, !dbg !63
  %.extract207 = extractelement <4 x i32> %1605, i64 0, !dbg !63
  %.extract209 = extractelement <4 x i32> %1605, i64 1, !dbg !63
  %.extract211 = extractelement <4 x i32> %1605, i64 2, !dbg !63
  %.extract213 = extractelement <4 x i32> %1605, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract207, i32 %.extract209, i32 %.extract211, i32 %.extract213, ptr addrspace(1) %1522) #2, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #1

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "gqa.py", directory: "/home/ubuntu/anjiang/PTX_dataset/triton_ptx")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "_attn_fwd", linkageName: "_attn_fwd", scope: !1, file: !1, line: 114, type: !6, scopeLine: 114, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 127, column: 28, scope: !5)
!9 = !DILocation(line: 128, column: 27, scope: !5)
!10 = !DILocation(line: 129, column: 22, scope: !5)
!11 = !DILocation(line: 130, column: 21, scope: !5)
!12 = !DILocation(line: 131, column: 26, scope: !5)
!13 = !DILocation(line: 131, column: 38, scope: !5)
!14 = !DILocation(line: 131, column: 59, scope: !5)
!15 = !DILocation(line: 131, column: 71, scope: !5)
!16 = !DILocation(line: 131, column: 50, scope: !5)
!17 = !DILocation(line: 135, column: 17, scope: !5)
!18 = !DILocation(line: 138, column: 27, scope: !5)
!19 = !DILocation(line: 140, column: 8, scope: !5)
!20 = !DILocation(line: 143, column: 17, scope: !5)
!21 = !DILocation(line: 148, column: 8, scope: !5)
!22 = !DILocation(line: 151, column: 17, scope: !5)
!23 = !DILocation(line: 156, column: 8, scope: !5)
!24 = !DILocation(line: 167, column: 46, scope: !5)
!25 = !DILocation(line: 175, column: 16, scope: !5)
!26 = !DILocation(line: 177, column: 16, scope: !5)
!27 = !DILocation(line: 47, column: 20, scope: !28, inlinedAt: !29)
!28 = distinct !DILexicalBlockFile(scope: !5, file: !1, discriminator: 0)
!29 = !DILocation(line: 185, column: 82, scope: !5)
!30 = !DILocation(line: 65, column: 20, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 44, column: 33, scope: !28, inlinedAt: !29)
!32 = !DILocation(line: 48, column: 23, scope: !28, inlinedAt: !29)
!33 = !DILocation(line: 167, column: 27, scope: !34, inlinedAt: !29)
!34 = distinct !DILexicalBlockFile(scope: !5, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language")
!36 = !DILocation(line: 188, column: 40, scope: !34, inlinedAt: !29)
!37 = !DILocation(line: 55, column: 51, scope: !28, inlinedAt: !29)
!38 = !DILocation(line: 55, column: 35, scope: !28, inlinedAt: !29)
!39 = !DILocation(line: 56, column: 22, scope: !28, inlinedAt: !29)
!40 = !DILocation(line: 56, column: 33, scope: !28, inlinedAt: !29)
!41 = !DILocation(line: 57, column: 25, scope: !28, inlinedAt: !29)
!42 = !DILocation(line: 260, column: 15, scope: !34, inlinedAt: !29)
!43 = !DILocation(line: 290, column: 36, scope: !34, inlinedAt: !29)
!44 = !DILocation(line: 60, column: 35, scope: !28, inlinedAt: !29)
!45 = !DILocation(line: 60, column: 29, scope: !28, inlinedAt: !29)
!46 = !DILocation(line: 61, column: 20, scope: !28, inlinedAt: !29)
!47 = !DILocation(line: 61, column: 28, scope: !28, inlinedAt: !29)
!48 = !DILocation(line: 63, column: 20, scope: !28, inlinedAt: !29)
!49 = !DILocation(line: 69, column: 21, scope: !28, inlinedAt: !29)
!50 = !DILocation(line: 70, column: 27, scope: !28, inlinedAt: !29)
!51 = !DILocation(line: 73, column: 46, scope: !28, inlinedAt: !29)
!52 = !DILocation(line: 198, column: 24, scope: !5)
!53 = !DILocation(line: 159, column: 19, scope: !5)
!54 = !DILocation(line: 164, column: 8, scope: !5)
!55 = !DILocation(line: 167, column: 33, scope: !5)
!56 = !DILocation(line: 198, column: 11, scope: !5)
!57 = !DILocation(line: 199, column: 16, scope: !5)
!58 = !DILocation(line: 200, column: 26, scope: !5)
!59 = !DILocation(line: 200, column: 17, scope: !5)
!60 = !DILocation(line: 200, column: 34, scope: !5)
!61 = !DILocation(line: 201, column: 21, scope: !5)
!62 = !DILocation(line: 202, column: 33, scope: !5)
!63 = !DILocation(line: 202, column: 26, scope: !5)
!64 = !DILocation(line: 202, column: 4, scope: !5)
