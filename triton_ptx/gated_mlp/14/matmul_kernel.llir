; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @matmul_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = add i32 %3, 127, !dbg !9
  %12 = sdiv i32 %11, 128, !dbg !13
  %13 = shl nsw i32 %12, 3, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %14 = sdiv i32 %10, %.frozen, !dbg !15
  %15 = shl i32 %14, 3, !dbg !16
  %16 = sub i32 1, %15, !dbg !17
  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 8), !dbg !18
  %18 = mul i32 %14, %.frozen, !dbg !19
  %.decomposed = sub i32 %10, %18, !dbg !19
  %19 = sdiv i32 %.decomposed, %17, !dbg !20
  %20 = shl i32 %19, 7, !dbg !21
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !22
  %22 = shl nuw nsw i32 %21, 3, !dbg !22
  %23 = and i32 %22, 56, !dbg !22
  %24 = and i32 %22, 120, !dbg !22
  %25 = or disjoint i32 %20, %24, !dbg !23
  %26 = srem i32 %25, %3, !dbg !24
  %27 = and i32 %21, 16, !dbg !25
  %28 = lshr i32 %21, 4, !dbg !25
  %29 = and i32 %28, 7, !dbg !25
  %30 = or disjoint i32 %29, 8, !dbg !25
  %31 = or disjoint i32 %29, 16, !dbg !25
  %32 = or disjoint i32 %29, 24, !dbg !25
  %33 = or disjoint i32 %29, 32, !dbg !25
  %34 = or disjoint i32 %29, 40, !dbg !25
  %35 = or disjoint i32 %29, 48, !dbg !25
  %36 = or i32 %28, 56, !dbg !25
  %37 = zext nneg i32 %23 to i64, !dbg !26
  %38 = getelementptr half, ptr addrspace(1) %0, i64 %37, !dbg !26
  %39 = mul i32 %6, %29, !dbg !27
  %40 = mul i32 %6, %30, !dbg !27
  %41 = mul i32 %6, %31, !dbg !27
  %42 = mul i32 %6, %32, !dbg !27
  %43 = mul i32 %6, %33, !dbg !27
  %44 = mul i32 %6, %34, !dbg !27
  %45 = mul i32 %6, %35, !dbg !27
  %46 = mul i32 %6, %36, !dbg !27
  %47 = add i32 %26, %39, !dbg !28
  %48 = add i32 %26, %40, !dbg !28
  %49 = add i32 %26, %41, !dbg !28
  %50 = add i32 %26, %42, !dbg !28
  %51 = add i32 %26, %43, !dbg !28
  %52 = add i32 %26, %44, !dbg !28
  %53 = add i32 %26, %45, !dbg !28
  %54 = add i32 %26, %46, !dbg !28
  %55 = sext i32 %47 to i64, !dbg !29
  %56 = getelementptr half, ptr addrspace(1) %1, i64 %55, !dbg !29
  %57 = sext i32 %48 to i64, !dbg !29
  %58 = getelementptr half, ptr addrspace(1) %1, i64 %57, !dbg !29
  %59 = sext i32 %49 to i64, !dbg !29
  %60 = getelementptr half, ptr addrspace(1) %1, i64 %59, !dbg !29
  %61 = sext i32 %50 to i64, !dbg !29
  %62 = getelementptr half, ptr addrspace(1) %1, i64 %61, !dbg !29
  %63 = sext i32 %51 to i64, !dbg !29
  %64 = getelementptr half, ptr addrspace(1) %1, i64 %63, !dbg !29
  %65 = sext i32 %52 to i64, !dbg !29
  %66 = getelementptr half, ptr addrspace(1) %1, i64 %65, !dbg !29
  %67 = sext i32 %53 to i64, !dbg !29
  %68 = getelementptr half, ptr addrspace(1) %1, i64 %67, !dbg !29
  %69 = sext i32 %54 to i64, !dbg !29
  %70 = getelementptr half, ptr addrspace(1) %1, i64 %69, !dbg !29
  %71 = add i32 %4, 63, !dbg !30
  %72 = sdiv i32 %71, 64, !dbg !32
  %73 = shl i32 %6, 6, !dbg !33
  %74 = icmp sgt i32 %71, 63, !dbg !34
  %75 = icmp slt i32 %23, %4, !dbg !35
  %76 = and i1 %75, %74, !dbg !34
  %77 = xor i32 %22, %21, !dbg !36
  %78 = and i32 %77, 56, !dbg !36
  %79 = shl nuw nsw i32 %21, 3, !dbg !36
  %80 = and i32 %79, 960, !dbg !36
  %81 = or disjoint i32 %80, %78, !dbg !36
  %82 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %81, !dbg !36
  %83 = or disjoint i32 %81, 1024, !dbg !36
  %84 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %83, !dbg !36
  %85 = or disjoint i32 %81, 2048, !dbg !36
  %86 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %85, !dbg !36
  %87 = or disjoint i32 %81, 3072, !dbg !36
  %88 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %87, !dbg !36
  %89 = select i1 %76, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %82, ptr addrspace(1) %38, i32 %89) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %84, ptr addrspace(1) %38, i32 %89) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %86, ptr addrspace(1) %38, i32 %89) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %88, ptr addrspace(1) %38, i32 %89) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %90 = icmp slt i32 %29, %4, !dbg !37
  %91 = icmp slt i32 %30, %4, !dbg !37
  %92 = icmp slt i32 %31, %4, !dbg !37
  %93 = icmp slt i32 %32, %4, !dbg !37
  %94 = icmp slt i32 %33, %4, !dbg !37
  %95 = icmp slt i32 %34, %4, !dbg !37
  %96 = icmp slt i32 %35, %4, !dbg !37
  %97 = icmp slt i32 %36, %4, !dbg !37
  %98 = and i1 %90, %74, !dbg !34
  %99 = and i1 %91, %74, !dbg !34
  %100 = and i1 %92, %74, !dbg !34
  %101 = and i1 %93, %74, !dbg !34
  %102 = and i1 %94, %74, !dbg !34
  %103 = and i1 %95, %74, !dbg !34
  %104 = and i1 %96, %74, !dbg !34
  %105 = and i1 %97, %74, !dbg !34
  %106 = lshr i32 %21, 1, !dbg !38
  %107 = and i32 %106, 56, !dbg !38
  %108 = xor i32 %107, %24, !dbg !38
  %109 = shl nuw nsw i32 %29, 7, !dbg !38
  %110 = or disjoint i32 %108, %109, !dbg !38
  %111 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %110, !dbg !38
  %112 = or disjoint i32 %110, 1024, !dbg !38
  %113 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %112, !dbg !38
  %114 = or disjoint i32 %110, 2048, !dbg !38
  %115 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %114, !dbg !38
  %116 = or disjoint i32 %110, 3072, !dbg !38
  %117 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %116, !dbg !38
  %118 = or disjoint i32 %110, 4096, !dbg !38
  %119 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %118, !dbg !38
  %120 = or disjoint i32 %110, 5120, !dbg !38
  %121 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %120, !dbg !38
  %122 = or disjoint i32 %110, 6144, !dbg !38
  %123 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %122, !dbg !38
  %124 = or disjoint i32 %110, 7168, !dbg !38
  %125 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %124, !dbg !38
  %126 = select i1 %98, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %111, ptr addrspace(1) %56, i32 %126) #2, !dbg !38
  %127 = select i1 %99, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %113, ptr addrspace(1) %58, i32 %127) #2, !dbg !38
  %128 = select i1 %100, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %115, ptr addrspace(1) %60, i32 %128) #2, !dbg !38
  %129 = select i1 %101, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %117, ptr addrspace(1) %62, i32 %129) #2, !dbg !38
  %130 = select i1 %102, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %119, ptr addrspace(1) %64, i32 %130) #2, !dbg !38
  %131 = select i1 %103, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %121, ptr addrspace(1) %66, i32 %131) #2, !dbg !38
  %132 = select i1 %104, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %123, ptr addrspace(1) %68, i32 %132) #2, !dbg !38
  %133 = select i1 %105, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %125, ptr addrspace(1) %70, i32 %133) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %134 = icmp sgt i32 %71, 127, !dbg !34
  %135 = getelementptr i8, ptr addrspace(1) %38, i64 128, !dbg !39
  %136 = sext i32 %73 to i64, !dbg !40
  %137 = getelementptr half, ptr addrspace(1) %56, i64 %136, !dbg !40
  %138 = getelementptr half, ptr addrspace(1) %58, i64 %136, !dbg !40
  %139 = getelementptr half, ptr addrspace(1) %60, i64 %136, !dbg !40
  %140 = getelementptr half, ptr addrspace(1) %62, i64 %136, !dbg !40
  %141 = getelementptr half, ptr addrspace(1) %64, i64 %136, !dbg !40
  %142 = getelementptr half, ptr addrspace(1) %66, i64 %136, !dbg !40
  %143 = getelementptr half, ptr addrspace(1) %68, i64 %136, !dbg !40
  %144 = getelementptr half, ptr addrspace(1) %70, i64 %136, !dbg !40
  %145 = add i32 %4, -64, !dbg !41
  %146 = icmp slt i32 %23, %145, !dbg !35
  %147 = and i1 %134, %146, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %148 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %81, !dbg !36
  %149 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %83, !dbg !36
  %150 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %85, !dbg !36
  %151 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %87, !dbg !36
  %152 = select i1 %147, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %148, ptr addrspace(1) %135, i32 %152) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %149, ptr addrspace(1) %135, i32 %152) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %150, ptr addrspace(1) %135, i32 %152) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %151, ptr addrspace(1) %135, i32 %152) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %153 = icmp slt i32 %29, %145, !dbg !37
  %154 = icmp slt i32 %30, %145, !dbg !37
  %155 = icmp slt i32 %31, %145, !dbg !37
  %156 = icmp slt i32 %32, %145, !dbg !37
  %157 = icmp slt i32 %33, %145, !dbg !37
  %158 = icmp slt i32 %34, %145, !dbg !37
  %159 = icmp slt i32 %35, %145, !dbg !37
  %160 = icmp slt i32 %36, %145, !dbg !37
  %161 = and i1 %134, %153, !dbg !34
  %162 = and i1 %134, %154, !dbg !34
  %163 = and i1 %134, %155, !dbg !34
  %164 = and i1 %134, %156, !dbg !34
  %165 = and i1 %134, %157, !dbg !34
  %166 = and i1 %134, %158, !dbg !34
  %167 = and i1 %134, %159, !dbg !34
  %168 = and i1 %134, %160, !dbg !34
  %169 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %110, !dbg !38
  %170 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %112, !dbg !38
  %171 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %114, !dbg !38
  %172 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %116, !dbg !38
  %173 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %118, !dbg !38
  %174 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %120, !dbg !38
  %175 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %122, !dbg !38
  %176 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %124, !dbg !38
  %177 = select i1 %161, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %169, ptr addrspace(1) %137, i32 %177) #2, !dbg !38
  %178 = select i1 %162, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %170, ptr addrspace(1) %138, i32 %178) #2, !dbg !38
  %179 = select i1 %163, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %171, ptr addrspace(1) %139, i32 %179) #2, !dbg !38
  %180 = select i1 %164, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %172, ptr addrspace(1) %140, i32 %180) #2, !dbg !38
  %181 = select i1 %165, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %173, ptr addrspace(1) %141, i32 %181) #2, !dbg !38
  %182 = select i1 %166, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %174, ptr addrspace(1) %142, i32 %182) #2, !dbg !38
  %183 = select i1 %167, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %175, ptr addrspace(1) %143, i32 %183) #2, !dbg !38
  %184 = select i1 %168, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %176, ptr addrspace(1) %144, i32 %184) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %185 = icmp sgt i32 %71, 191, !dbg !34
  %186 = getelementptr i8, ptr addrspace(1) %38, i64 256, !dbg !39
  %187 = getelementptr half, ptr addrspace(1) %137, i64 %136, !dbg !40
  %188 = getelementptr half, ptr addrspace(1) %138, i64 %136, !dbg !40
  %189 = getelementptr half, ptr addrspace(1) %139, i64 %136, !dbg !40
  %190 = getelementptr half, ptr addrspace(1) %140, i64 %136, !dbg !40
  %191 = getelementptr half, ptr addrspace(1) %141, i64 %136, !dbg !40
  %192 = getelementptr half, ptr addrspace(1) %142, i64 %136, !dbg !40
  %193 = getelementptr half, ptr addrspace(1) %143, i64 %136, !dbg !40
  %194 = getelementptr half, ptr addrspace(1) %144, i64 %136, !dbg !40
  %195 = add i32 %4, -128, !dbg !41
  %196 = icmp slt i32 %23, %195, !dbg !35
  %197 = and i1 %185, %196, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %198 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %81, !dbg !36
  %199 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %83, !dbg !36
  %200 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %85, !dbg !36
  %201 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %87, !dbg !36
  %202 = select i1 %197, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %198, ptr addrspace(1) %186, i32 %202) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %199, ptr addrspace(1) %186, i32 %202) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %200, ptr addrspace(1) %186, i32 %202) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %201, ptr addrspace(1) %186, i32 %202) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %203 = icmp slt i32 %29, %195, !dbg !37
  %204 = icmp slt i32 %30, %195, !dbg !37
  %205 = icmp slt i32 %31, %195, !dbg !37
  %206 = icmp slt i32 %32, %195, !dbg !37
  %207 = icmp slt i32 %33, %195, !dbg !37
  %208 = icmp slt i32 %34, %195, !dbg !37
  %209 = icmp slt i32 %35, %195, !dbg !37
  %210 = icmp slt i32 %36, %195, !dbg !37
  %211 = and i1 %185, %203, !dbg !34
  %212 = and i1 %185, %204, !dbg !34
  %213 = and i1 %185, %205, !dbg !34
  %214 = and i1 %185, %206, !dbg !34
  %215 = and i1 %185, %207, !dbg !34
  %216 = and i1 %185, %208, !dbg !34
  %217 = and i1 %185, %209, !dbg !34
  %218 = and i1 %185, %210, !dbg !34
  %219 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %110, !dbg !38
  %220 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %112, !dbg !38
  %221 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %114, !dbg !38
  %222 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %116, !dbg !38
  %223 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %118, !dbg !38
  %224 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %120, !dbg !38
  %225 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %122, !dbg !38
  %226 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %124, !dbg !38
  %227 = select i1 %211, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %219, ptr addrspace(1) %187, i32 %227) #2, !dbg !38
  %228 = select i1 %212, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %220, ptr addrspace(1) %188, i32 %228) #2, !dbg !38
  %229 = select i1 %213, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %221, ptr addrspace(1) %189, i32 %229) #2, !dbg !38
  %230 = select i1 %214, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %222, ptr addrspace(1) %190, i32 %230) #2, !dbg !38
  %231 = select i1 %215, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %223, ptr addrspace(1) %191, i32 %231) #2, !dbg !38
  %232 = select i1 %216, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %224, ptr addrspace(1) %192, i32 %232) #2, !dbg !38
  %233 = select i1 %217, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %225, ptr addrspace(1) %193, i32 %233) #2, !dbg !38
  %234 = select i1 %218, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %226, ptr addrspace(1) %194, i32 %234) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  br i1 %74, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !34

.._crit_edge_crit_edge:                           ; preds = %9
  %.pre = lshr i32 %21, 2, !dbg !42
  %.pre370 = and i32 %.pre, 24, !dbg !42
  br label %._crit_edge, !dbg !34

.lr.ph:                                           ; preds = %9
  %235 = lshr exact i32 %27, 1, !dbg !38
  %236 = and i32 %21, 4, !dbg !22
  %237 = icmp eq i32 %236, 0, !dbg !22
  %238 = add nsw i32 %72, -3
  %239 = and i32 %21, 3
  %240 = mul nuw nsw i32 %239, 72
  %241 = select i1 %237, i32 0, i32 288
  %242 = xor i32 %241, %240
  %243 = shl nuw nsw i32 %21, 6
  %244 = and i32 %243, 512
  %245 = or disjoint i32 %242, %244
  %246 = xor i32 %245, %235
  %247 = xor i32 %246, 16
  %248 = xor i32 %246, 32
  %249 = xor i32 %246, 48
  %250 = xor i32 %246, 1040
  %251 = xor i32 %246, 1056
  %252 = xor i32 %246, 1072
  %253 = xor i32 %246, 2064
  %254 = xor i32 %246, 2080
  %255 = xor i32 %246, 2096
  %256 = xor i32 %246, 3088
  %257 = xor i32 %246, 3104
  %258 = xor i32 %246, 3120
  %259 = mul nuw nsw i32 %239, 136
  %260 = select i1 %237, i32 0, i32 544
  %261 = xor i32 %260, %259
  %262 = shl nuw nsw i32 %21, 7
  %263 = and i32 %262, 3072
  %264 = or disjoint i32 %261, %263
  %265 = lshr i32 %21, 2
  %266 = and i32 %265, 24
  %267 = xor i32 %264, %266
  %268 = xor i32 %267, 32
  %269 = xor i32 %267, 4128
  %270 = xor i32 %267, 64
  %271 = xor i32 %267, 4160
  %272 = xor i32 %267, 96
  %273 = xor i32 %267, 4192
  %.neg356 = add nsw i32 %4, -192
  br label %274, !dbg !34

274:                                              ; preds = %.lr.ph, %274
  %275 = phi i32 [ -1, %.lr.ph ], [ %345, %274 ]
  %276 = phi i32 [ 2, %.lr.ph ], [ %847, %274 ]
  %.pn82368 = phi ptr addrspace(1) [ %194, %.lr.ph ], [ %844, %274 ]
  %.pn98367 = phi ptr addrspace(1) [ %193, %.lr.ph ], [ %843, %274 ]
  %.pn114366 = phi ptr addrspace(1) [ %192, %.lr.ph ], [ %842, %274 ]
  %.pn130365 = phi ptr addrspace(1) [ %191, %.lr.ph ], [ %841, %274 ]
  %.pn146364 = phi ptr addrspace(1) [ %190, %.lr.ph ], [ %840, %274 ]
  %.pn162363 = phi ptr addrspace(1) [ %189, %.lr.ph ], [ %839, %274 ]
  %.pn178362 = phi ptr addrspace(1) [ %188, %.lr.ph ], [ %838, %274 ]
  %.pn194361 = phi ptr addrspace(1) [ %187, %.lr.ph ], [ %837, %274 ]
  %.pn18360 = phi ptr addrspace(1) [ %186, %.lr.ph ], [ %836, %274 ]
  %277 = phi float [ 0.000000e+00, %.lr.ph ], [ %757, %274 ]
  %278 = phi float [ 0.000000e+00, %.lr.ph ], [ %758, %274 ]
  %279 = phi float [ 0.000000e+00, %.lr.ph ], [ %759, %274 ]
  %280 = phi float [ 0.000000e+00, %.lr.ph ], [ %760, %274 ]
  %281 = phi float [ 0.000000e+00, %.lr.ph ], [ %762, %274 ]
  %282 = phi float [ 0.000000e+00, %.lr.ph ], [ %763, %274 ]
  %283 = phi float [ 0.000000e+00, %.lr.ph ], [ %764, %274 ]
  %284 = phi float [ 0.000000e+00, %.lr.ph ], [ %765, %274 ]
  %285 = phi float [ 0.000000e+00, %.lr.ph ], [ %767, %274 ]
  %286 = phi float [ 0.000000e+00, %.lr.ph ], [ %768, %274 ]
  %287 = phi float [ 0.000000e+00, %.lr.ph ], [ %769, %274 ]
  %288 = phi float [ 0.000000e+00, %.lr.ph ], [ %770, %274 ]
  %289 = phi float [ 0.000000e+00, %.lr.ph ], [ %772, %274 ]
  %290 = phi float [ 0.000000e+00, %.lr.ph ], [ %773, %274 ]
  %291 = phi float [ 0.000000e+00, %.lr.ph ], [ %774, %274 ]
  %292 = phi float [ 0.000000e+00, %.lr.ph ], [ %775, %274 ]
  %293 = phi float [ 0.000000e+00, %.lr.ph ], [ %777, %274 ]
  %294 = phi float [ 0.000000e+00, %.lr.ph ], [ %778, %274 ]
  %295 = phi float [ 0.000000e+00, %.lr.ph ], [ %779, %274 ]
  %296 = phi float [ 0.000000e+00, %.lr.ph ], [ %780, %274 ]
  %297 = phi float [ 0.000000e+00, %.lr.ph ], [ %782, %274 ]
  %298 = phi float [ 0.000000e+00, %.lr.ph ], [ %783, %274 ]
  %299 = phi float [ 0.000000e+00, %.lr.ph ], [ %784, %274 ]
  %300 = phi float [ 0.000000e+00, %.lr.ph ], [ %785, %274 ]
  %301 = phi float [ 0.000000e+00, %.lr.ph ], [ %787, %274 ]
  %302 = phi float [ 0.000000e+00, %.lr.ph ], [ %788, %274 ]
  %303 = phi float [ 0.000000e+00, %.lr.ph ], [ %789, %274 ]
  %304 = phi float [ 0.000000e+00, %.lr.ph ], [ %790, %274 ]
  %305 = phi float [ 0.000000e+00, %.lr.ph ], [ %792, %274 ]
  %306 = phi float [ 0.000000e+00, %.lr.ph ], [ %793, %274 ]
  %307 = phi float [ 0.000000e+00, %.lr.ph ], [ %794, %274 ]
  %308 = phi float [ 0.000000e+00, %.lr.ph ], [ %795, %274 ]
  %309 = phi float [ 0.000000e+00, %.lr.ph ], [ %797, %274 ]
  %310 = phi float [ 0.000000e+00, %.lr.ph ], [ %798, %274 ]
  %311 = phi float [ 0.000000e+00, %.lr.ph ], [ %799, %274 ]
  %312 = phi float [ 0.000000e+00, %.lr.ph ], [ %800, %274 ]
  %313 = phi float [ 0.000000e+00, %.lr.ph ], [ %802, %274 ]
  %314 = phi float [ 0.000000e+00, %.lr.ph ], [ %803, %274 ]
  %315 = phi float [ 0.000000e+00, %.lr.ph ], [ %804, %274 ]
  %316 = phi float [ 0.000000e+00, %.lr.ph ], [ %805, %274 ]
  %317 = phi float [ 0.000000e+00, %.lr.ph ], [ %807, %274 ]
  %318 = phi float [ 0.000000e+00, %.lr.ph ], [ %808, %274 ]
  %319 = phi float [ 0.000000e+00, %.lr.ph ], [ %809, %274 ]
  %320 = phi float [ 0.000000e+00, %.lr.ph ], [ %810, %274 ]
  %321 = phi float [ 0.000000e+00, %.lr.ph ], [ %812, %274 ]
  %322 = phi float [ 0.000000e+00, %.lr.ph ], [ %813, %274 ]
  %323 = phi float [ 0.000000e+00, %.lr.ph ], [ %814, %274 ]
  %324 = phi float [ 0.000000e+00, %.lr.ph ], [ %815, %274 ]
  %325 = phi float [ 0.000000e+00, %.lr.ph ], [ %817, %274 ]
  %326 = phi float [ 0.000000e+00, %.lr.ph ], [ %818, %274 ]
  %327 = phi float [ 0.000000e+00, %.lr.ph ], [ %819, %274 ]
  %328 = phi float [ 0.000000e+00, %.lr.ph ], [ %820, %274 ]
  %329 = phi float [ 0.000000e+00, %.lr.ph ], [ %822, %274 ]
  %330 = phi float [ 0.000000e+00, %.lr.ph ], [ %823, %274 ]
  %331 = phi float [ 0.000000e+00, %.lr.ph ], [ %824, %274 ]
  %332 = phi float [ 0.000000e+00, %.lr.ph ], [ %825, %274 ]
  %333 = phi float [ 0.000000e+00, %.lr.ph ], [ %827, %274 ]
  %334 = phi float [ 0.000000e+00, %.lr.ph ], [ %828, %274 ]
  %335 = phi float [ 0.000000e+00, %.lr.ph ], [ %829, %274 ]
  %336 = phi float [ 0.000000e+00, %.lr.ph ], [ %830, %274 ]
  %337 = phi float [ 0.000000e+00, %.lr.ph ], [ %832, %274 ]
  %338 = phi float [ 0.000000e+00, %.lr.ph ], [ %833, %274 ]
  %339 = phi float [ 0.000000e+00, %.lr.ph ], [ %834, %274 ]
  %340 = phi float [ 0.000000e+00, %.lr.ph ], [ %835, %274 ]
  %341 = phi i32 [ 0, %.lr.ph ], [ %891, %274 ]
  %342 = icmp slt i32 %341, %238, !dbg !34
  %343 = add i32 %275, 1, !dbg !34
  %344 = icmp sgt i32 %343, 2, !dbg !34
  %345 = select i1 %344, i32 0, i32 %343, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 4), !dbg !36
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %.idx = shl i32 %345, 13, !dbg !36
  %346 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %.idx, !dbg !36
  %347 = getelementptr inbounds nuw half, ptr addrspace(3) %346, i32 %246, !dbg !36
  %348 = ptrtoint ptr addrspace(3) %347 to i32, !dbg !36
  %349 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %348) #2, !dbg !36
  %350 = extractvalue { i32, i32, i32, i32 } %349, 0, !dbg !36
  %351 = extractvalue { i32, i32, i32, i32 } %349, 1, !dbg !36
  %352 = extractvalue { i32, i32, i32, i32 } %349, 2, !dbg !36
  %353 = extractvalue { i32, i32, i32, i32 } %349, 3, !dbg !36
  %354 = getelementptr inbounds nuw half, ptr addrspace(3) %346, i32 %247, !dbg !36
  %355 = ptrtoint ptr addrspace(3) %354 to i32, !dbg !36
  %356 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %355) #2, !dbg !36
  %357 = extractvalue { i32, i32, i32, i32 } %356, 0, !dbg !36
  %358 = extractvalue { i32, i32, i32, i32 } %356, 1, !dbg !36
  %359 = extractvalue { i32, i32, i32, i32 } %356, 2, !dbg !36
  %360 = extractvalue { i32, i32, i32, i32 } %356, 3, !dbg !36
  %361 = getelementptr inbounds nuw half, ptr addrspace(3) %346, i32 %248, !dbg !36
  %362 = ptrtoint ptr addrspace(3) %361 to i32, !dbg !36
  %363 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %362) #2, !dbg !36
  %364 = extractvalue { i32, i32, i32, i32 } %363, 0, !dbg !36
  %365 = extractvalue { i32, i32, i32, i32 } %363, 1, !dbg !36
  %366 = extractvalue { i32, i32, i32, i32 } %363, 2, !dbg !36
  %367 = extractvalue { i32, i32, i32, i32 } %363, 3, !dbg !36
  %368 = getelementptr inbounds nuw half, ptr addrspace(3) %346, i32 %249, !dbg !36
  %369 = ptrtoint ptr addrspace(3) %368 to i32, !dbg !36
  %370 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %369) #2, !dbg !36
  %371 = extractvalue { i32, i32, i32, i32 } %370, 0, !dbg !36
  %372 = extractvalue { i32, i32, i32, i32 } %370, 1, !dbg !36
  %373 = extractvalue { i32, i32, i32, i32 } %370, 2, !dbg !36
  %374 = extractvalue { i32, i32, i32, i32 } %370, 3, !dbg !36
  %375 = getelementptr inbounds nuw i8, ptr addrspace(3) %347, i32 2048, !dbg !36
  %376 = ptrtoint ptr addrspace(3) %375 to i32, !dbg !36
  %377 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %376) #2, !dbg !36
  %378 = extractvalue { i32, i32, i32, i32 } %377, 0, !dbg !36
  %379 = extractvalue { i32, i32, i32, i32 } %377, 1, !dbg !36
  %380 = extractvalue { i32, i32, i32, i32 } %377, 2, !dbg !36
  %381 = extractvalue { i32, i32, i32, i32 } %377, 3, !dbg !36
  %382 = getelementptr inbounds nuw half, ptr addrspace(3) %346, i32 %250, !dbg !36
  %383 = ptrtoint ptr addrspace(3) %382 to i32, !dbg !36
  %384 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %383) #2, !dbg !36
  %385 = extractvalue { i32, i32, i32, i32 } %384, 0, !dbg !36
  %386 = extractvalue { i32, i32, i32, i32 } %384, 1, !dbg !36
  %387 = extractvalue { i32, i32, i32, i32 } %384, 2, !dbg !36
  %388 = extractvalue { i32, i32, i32, i32 } %384, 3, !dbg !36
  %389 = getelementptr inbounds nuw half, ptr addrspace(3) %346, i32 %251, !dbg !36
  %390 = ptrtoint ptr addrspace(3) %389 to i32, !dbg !36
  %391 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %390) #2, !dbg !36
  %392 = extractvalue { i32, i32, i32, i32 } %391, 0, !dbg !36
  %393 = extractvalue { i32, i32, i32, i32 } %391, 1, !dbg !36
  %394 = extractvalue { i32, i32, i32, i32 } %391, 2, !dbg !36
  %395 = extractvalue { i32, i32, i32, i32 } %391, 3, !dbg !36
  %396 = getelementptr inbounds nuw half, ptr addrspace(3) %346, i32 %252, !dbg !36
  %397 = ptrtoint ptr addrspace(3) %396 to i32, !dbg !36
  %398 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %397) #2, !dbg !36
  %399 = extractvalue { i32, i32, i32, i32 } %398, 0, !dbg !36
  %400 = extractvalue { i32, i32, i32, i32 } %398, 1, !dbg !36
  %401 = extractvalue { i32, i32, i32, i32 } %398, 2, !dbg !36
  %402 = extractvalue { i32, i32, i32, i32 } %398, 3, !dbg !36
  %403 = getelementptr inbounds nuw i8, ptr addrspace(3) %347, i32 4096, !dbg !36
  %404 = ptrtoint ptr addrspace(3) %403 to i32, !dbg !36
  %405 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %404) #2, !dbg !36
  %406 = extractvalue { i32, i32, i32, i32 } %405, 0, !dbg !36
  %407 = extractvalue { i32, i32, i32, i32 } %405, 1, !dbg !36
  %408 = extractvalue { i32, i32, i32, i32 } %405, 2, !dbg !36
  %409 = extractvalue { i32, i32, i32, i32 } %405, 3, !dbg !36
  %410 = getelementptr inbounds nuw half, ptr addrspace(3) %346, i32 %253, !dbg !36
  %411 = ptrtoint ptr addrspace(3) %410 to i32, !dbg !36
  %412 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %411) #2, !dbg !36
  %413 = extractvalue { i32, i32, i32, i32 } %412, 0, !dbg !36
  %414 = extractvalue { i32, i32, i32, i32 } %412, 1, !dbg !36
  %415 = extractvalue { i32, i32, i32, i32 } %412, 2, !dbg !36
  %416 = extractvalue { i32, i32, i32, i32 } %412, 3, !dbg !36
  %417 = getelementptr inbounds nuw half, ptr addrspace(3) %346, i32 %254, !dbg !36
  %418 = ptrtoint ptr addrspace(3) %417 to i32, !dbg !36
  %419 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %418) #2, !dbg !36
  %420 = extractvalue { i32, i32, i32, i32 } %419, 0, !dbg !36
  %421 = extractvalue { i32, i32, i32, i32 } %419, 1, !dbg !36
  %422 = extractvalue { i32, i32, i32, i32 } %419, 2, !dbg !36
  %423 = extractvalue { i32, i32, i32, i32 } %419, 3, !dbg !36
  %424 = getelementptr inbounds nuw half, ptr addrspace(3) %346, i32 %255, !dbg !36
  %425 = ptrtoint ptr addrspace(3) %424 to i32, !dbg !36
  %426 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %425) #2, !dbg !36
  %427 = extractvalue { i32, i32, i32, i32 } %426, 0, !dbg !36
  %428 = extractvalue { i32, i32, i32, i32 } %426, 1, !dbg !36
  %429 = extractvalue { i32, i32, i32, i32 } %426, 2, !dbg !36
  %430 = extractvalue { i32, i32, i32, i32 } %426, 3, !dbg !36
  %431 = getelementptr inbounds nuw i8, ptr addrspace(3) %347, i32 6144, !dbg !36
  %432 = ptrtoint ptr addrspace(3) %431 to i32, !dbg !36
  %433 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %432) #2, !dbg !36
  %434 = extractvalue { i32, i32, i32, i32 } %433, 0, !dbg !36
  %435 = extractvalue { i32, i32, i32, i32 } %433, 1, !dbg !36
  %436 = extractvalue { i32, i32, i32, i32 } %433, 2, !dbg !36
  %437 = extractvalue { i32, i32, i32, i32 } %433, 3, !dbg !36
  %438 = getelementptr inbounds nuw half, ptr addrspace(3) %346, i32 %256, !dbg !36
  %439 = ptrtoint ptr addrspace(3) %438 to i32, !dbg !36
  %440 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %439) #2, !dbg !36
  %441 = extractvalue { i32, i32, i32, i32 } %440, 0, !dbg !36
  %442 = extractvalue { i32, i32, i32, i32 } %440, 1, !dbg !36
  %443 = extractvalue { i32, i32, i32, i32 } %440, 2, !dbg !36
  %444 = extractvalue { i32, i32, i32, i32 } %440, 3, !dbg !36
  %445 = getelementptr inbounds nuw half, ptr addrspace(3) %346, i32 %257, !dbg !36
  %446 = ptrtoint ptr addrspace(3) %445 to i32, !dbg !36
  %447 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %446) #2, !dbg !36
  %448 = extractvalue { i32, i32, i32, i32 } %447, 0, !dbg !36
  %449 = extractvalue { i32, i32, i32, i32 } %447, 1, !dbg !36
  %450 = extractvalue { i32, i32, i32, i32 } %447, 2, !dbg !36
  %451 = extractvalue { i32, i32, i32, i32 } %447, 3, !dbg !36
  %452 = getelementptr inbounds nuw half, ptr addrspace(3) %346, i32 %258, !dbg !36
  %453 = ptrtoint ptr addrspace(3) %452 to i32, !dbg !36
  %454 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %453) #2, !dbg !36
  %455 = extractvalue { i32, i32, i32, i32 } %454, 0, !dbg !36
  %456 = extractvalue { i32, i32, i32, i32 } %454, 1, !dbg !36
  %457 = extractvalue { i32, i32, i32, i32 } %454, 2, !dbg !36
  %458 = extractvalue { i32, i32, i32, i32 } %454, 3, !dbg !36
  %.idx289 = shl i32 %345, 14, !dbg !38
  %459 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx289, !dbg !38
  %460 = getelementptr inbounds nuw half, ptr addrspace(3) %459, i32 %267, !dbg !38
  %461 = ptrtoint ptr addrspace(3) %460 to i32, !dbg !38
  %462 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %461) #2, !dbg !38
  %463 = extractvalue { i32, i32, i32, i32 } %462, 0, !dbg !38
  %464 = extractvalue { i32, i32, i32, i32 } %462, 1, !dbg !38
  %465 = extractvalue { i32, i32, i32, i32 } %462, 2, !dbg !38
  %466 = extractvalue { i32, i32, i32, i32 } %462, 3, !dbg !38
  %467 = getelementptr inbounds nuw i8, ptr addrspace(3) %460, i32 8192, !dbg !38
  %468 = ptrtoint ptr addrspace(3) %467 to i32, !dbg !38
  %469 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %468) #2, !dbg !38
  %470 = extractvalue { i32, i32, i32, i32 } %469, 0, !dbg !38
  %471 = extractvalue { i32, i32, i32, i32 } %469, 1, !dbg !38
  %472 = extractvalue { i32, i32, i32, i32 } %469, 2, !dbg !38
  %473 = extractvalue { i32, i32, i32, i32 } %469, 3, !dbg !38
  %474 = getelementptr inbounds nuw half, ptr addrspace(3) %459, i32 %268, !dbg !38
  %475 = ptrtoint ptr addrspace(3) %474 to i32, !dbg !38
  %476 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %475) #2, !dbg !38
  %477 = extractvalue { i32, i32, i32, i32 } %476, 0, !dbg !38
  %478 = extractvalue { i32, i32, i32, i32 } %476, 1, !dbg !38
  %479 = extractvalue { i32, i32, i32, i32 } %476, 2, !dbg !38
  %480 = extractvalue { i32, i32, i32, i32 } %476, 3, !dbg !38
  %481 = getelementptr inbounds nuw half, ptr addrspace(3) %459, i32 %269, !dbg !38
  %482 = ptrtoint ptr addrspace(3) %481 to i32, !dbg !38
  %483 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %482) #2, !dbg !38
  %484 = extractvalue { i32, i32, i32, i32 } %483, 0, !dbg !38
  %485 = extractvalue { i32, i32, i32, i32 } %483, 1, !dbg !38
  %486 = extractvalue { i32, i32, i32, i32 } %483, 2, !dbg !38
  %487 = extractvalue { i32, i32, i32, i32 } %483, 3, !dbg !38
  %488 = getelementptr inbounds nuw half, ptr addrspace(3) %459, i32 %270, !dbg !38
  %489 = ptrtoint ptr addrspace(3) %488 to i32, !dbg !38
  %490 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %489) #2, !dbg !38
  %491 = extractvalue { i32, i32, i32, i32 } %490, 0, !dbg !38
  %492 = extractvalue { i32, i32, i32, i32 } %490, 1, !dbg !38
  %493 = extractvalue { i32, i32, i32, i32 } %490, 2, !dbg !38
  %494 = extractvalue { i32, i32, i32, i32 } %490, 3, !dbg !38
  %495 = getelementptr inbounds nuw half, ptr addrspace(3) %459, i32 %271, !dbg !38
  %496 = ptrtoint ptr addrspace(3) %495 to i32, !dbg !38
  %497 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %496) #2, !dbg !38
  %498 = extractvalue { i32, i32, i32, i32 } %497, 0, !dbg !38
  %499 = extractvalue { i32, i32, i32, i32 } %497, 1, !dbg !38
  %500 = extractvalue { i32, i32, i32, i32 } %497, 2, !dbg !38
  %501 = extractvalue { i32, i32, i32, i32 } %497, 3, !dbg !38
  %502 = getelementptr inbounds nuw half, ptr addrspace(3) %459, i32 %272, !dbg !38
  %503 = ptrtoint ptr addrspace(3) %502 to i32, !dbg !38
  %504 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %503) #2, !dbg !38
  %505 = extractvalue { i32, i32, i32, i32 } %504, 0, !dbg !38
  %506 = extractvalue { i32, i32, i32, i32 } %504, 1, !dbg !38
  %507 = extractvalue { i32, i32, i32, i32 } %504, 2, !dbg !38
  %508 = extractvalue { i32, i32, i32, i32 } %504, 3, !dbg !38
  %509 = getelementptr inbounds nuw half, ptr addrspace(3) %459, i32 %273, !dbg !38
  %510 = ptrtoint ptr addrspace(3) %509 to i32, !dbg !38
  %511 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %510) #2, !dbg !38
  %512 = extractvalue { i32, i32, i32, i32 } %511, 0, !dbg !38
  %513 = extractvalue { i32, i32, i32, i32 } %511, 1, !dbg !38
  %514 = extractvalue { i32, i32, i32, i32 } %511, 2, !dbg !38
  %515 = extractvalue { i32, i32, i32, i32 } %511, 3, !dbg !38
  %516 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %277, float %278, float %279, float %280, i32 %350, i32 %351, i32 %352, i32 %353, i32 %463, i32 %464) #2, !dbg !43
  %517 = extractvalue { float, float, float, float } %516, 0, !dbg !43
  %518 = extractvalue { float, float, float, float } %516, 1, !dbg !43
  %519 = extractvalue { float, float, float, float } %516, 2, !dbg !43
  %520 = extractvalue { float, float, float, float } %516, 3, !dbg !43
  %521 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %281, float %282, float %283, float %284, i32 %350, i32 %351, i32 %352, i32 %353, i32 %477, i32 %478) #2, !dbg !43
  %522 = extractvalue { float, float, float, float } %521, 0, !dbg !43
  %523 = extractvalue { float, float, float, float } %521, 1, !dbg !43
  %524 = extractvalue { float, float, float, float } %521, 2, !dbg !43
  %525 = extractvalue { float, float, float, float } %521, 3, !dbg !43
  %526 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %285, float %286, float %287, float %288, i32 %350, i32 %351, i32 %352, i32 %353, i32 %491, i32 %492) #2, !dbg !43
  %527 = extractvalue { float, float, float, float } %526, 0, !dbg !43
  %528 = extractvalue { float, float, float, float } %526, 1, !dbg !43
  %529 = extractvalue { float, float, float, float } %526, 2, !dbg !43
  %530 = extractvalue { float, float, float, float } %526, 3, !dbg !43
  %531 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %289, float %290, float %291, float %292, i32 %350, i32 %351, i32 %352, i32 %353, i32 %505, i32 %506) #2, !dbg !43
  %532 = extractvalue { float, float, float, float } %531, 0, !dbg !43
  %533 = extractvalue { float, float, float, float } %531, 1, !dbg !43
  %534 = extractvalue { float, float, float, float } %531, 2, !dbg !43
  %535 = extractvalue { float, float, float, float } %531, 3, !dbg !43
  %536 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %293, float %294, float %295, float %296, i32 %378, i32 %379, i32 %380, i32 %381, i32 %463, i32 %464) #2, !dbg !43
  %537 = extractvalue { float, float, float, float } %536, 0, !dbg !43
  %538 = extractvalue { float, float, float, float } %536, 1, !dbg !43
  %539 = extractvalue { float, float, float, float } %536, 2, !dbg !43
  %540 = extractvalue { float, float, float, float } %536, 3, !dbg !43
  %541 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %297, float %298, float %299, float %300, i32 %378, i32 %379, i32 %380, i32 %381, i32 %477, i32 %478) #2, !dbg !43
  %542 = extractvalue { float, float, float, float } %541, 0, !dbg !43
  %543 = extractvalue { float, float, float, float } %541, 1, !dbg !43
  %544 = extractvalue { float, float, float, float } %541, 2, !dbg !43
  %545 = extractvalue { float, float, float, float } %541, 3, !dbg !43
  %546 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %301, float %302, float %303, float %304, i32 %378, i32 %379, i32 %380, i32 %381, i32 %491, i32 %492) #2, !dbg !43
  %547 = extractvalue { float, float, float, float } %546, 0, !dbg !43
  %548 = extractvalue { float, float, float, float } %546, 1, !dbg !43
  %549 = extractvalue { float, float, float, float } %546, 2, !dbg !43
  %550 = extractvalue { float, float, float, float } %546, 3, !dbg !43
  %551 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %305, float %306, float %307, float %308, i32 %378, i32 %379, i32 %380, i32 %381, i32 %505, i32 %506) #2, !dbg !43
  %552 = extractvalue { float, float, float, float } %551, 0, !dbg !43
  %553 = extractvalue { float, float, float, float } %551, 1, !dbg !43
  %554 = extractvalue { float, float, float, float } %551, 2, !dbg !43
  %555 = extractvalue { float, float, float, float } %551, 3, !dbg !43
  %556 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %309, float %310, float %311, float %312, i32 %406, i32 %407, i32 %408, i32 %409, i32 %463, i32 %464) #2, !dbg !43
  %557 = extractvalue { float, float, float, float } %556, 0, !dbg !43
  %558 = extractvalue { float, float, float, float } %556, 1, !dbg !43
  %559 = extractvalue { float, float, float, float } %556, 2, !dbg !43
  %560 = extractvalue { float, float, float, float } %556, 3, !dbg !43
  %561 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %313, float %314, float %315, float %316, i32 %406, i32 %407, i32 %408, i32 %409, i32 %477, i32 %478) #2, !dbg !43
  %562 = extractvalue { float, float, float, float } %561, 0, !dbg !43
  %563 = extractvalue { float, float, float, float } %561, 1, !dbg !43
  %564 = extractvalue { float, float, float, float } %561, 2, !dbg !43
  %565 = extractvalue { float, float, float, float } %561, 3, !dbg !43
  %566 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %317, float %318, float %319, float %320, i32 %406, i32 %407, i32 %408, i32 %409, i32 %491, i32 %492) #2, !dbg !43
  %567 = extractvalue { float, float, float, float } %566, 0, !dbg !43
  %568 = extractvalue { float, float, float, float } %566, 1, !dbg !43
  %569 = extractvalue { float, float, float, float } %566, 2, !dbg !43
  %570 = extractvalue { float, float, float, float } %566, 3, !dbg !43
  %571 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %321, float %322, float %323, float %324, i32 %406, i32 %407, i32 %408, i32 %409, i32 %505, i32 %506) #2, !dbg !43
  %572 = extractvalue { float, float, float, float } %571, 0, !dbg !43
  %573 = extractvalue { float, float, float, float } %571, 1, !dbg !43
  %574 = extractvalue { float, float, float, float } %571, 2, !dbg !43
  %575 = extractvalue { float, float, float, float } %571, 3, !dbg !43
  %576 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %325, float %326, float %327, float %328, i32 %434, i32 %435, i32 %436, i32 %437, i32 %463, i32 %464) #2, !dbg !43
  %577 = extractvalue { float, float, float, float } %576, 0, !dbg !43
  %578 = extractvalue { float, float, float, float } %576, 1, !dbg !43
  %579 = extractvalue { float, float, float, float } %576, 2, !dbg !43
  %580 = extractvalue { float, float, float, float } %576, 3, !dbg !43
  %581 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %329, float %330, float %331, float %332, i32 %434, i32 %435, i32 %436, i32 %437, i32 %477, i32 %478) #2, !dbg !43
  %582 = extractvalue { float, float, float, float } %581, 0, !dbg !43
  %583 = extractvalue { float, float, float, float } %581, 1, !dbg !43
  %584 = extractvalue { float, float, float, float } %581, 2, !dbg !43
  %585 = extractvalue { float, float, float, float } %581, 3, !dbg !43
  %586 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %333, float %334, float %335, float %336, i32 %434, i32 %435, i32 %436, i32 %437, i32 %491, i32 %492) #2, !dbg !43
  %587 = extractvalue { float, float, float, float } %586, 0, !dbg !43
  %588 = extractvalue { float, float, float, float } %586, 1, !dbg !43
  %589 = extractvalue { float, float, float, float } %586, 2, !dbg !43
  %590 = extractvalue { float, float, float, float } %586, 3, !dbg !43
  %591 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %337, float %338, float %339, float %340, i32 %434, i32 %435, i32 %436, i32 %437, i32 %505, i32 %506) #2, !dbg !43
  %592 = extractvalue { float, float, float, float } %591, 0, !dbg !43
  %593 = extractvalue { float, float, float, float } %591, 1, !dbg !43
  %594 = extractvalue { float, float, float, float } %591, 2, !dbg !43
  %595 = extractvalue { float, float, float, float } %591, 3, !dbg !43
  %596 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %517, float %518, float %519, float %520, i32 %357, i32 %358, i32 %359, i32 %360, i32 %465, i32 %466) #2, !dbg !43
  %597 = extractvalue { float, float, float, float } %596, 0, !dbg !43
  %598 = extractvalue { float, float, float, float } %596, 1, !dbg !43
  %599 = extractvalue { float, float, float, float } %596, 2, !dbg !43
  %600 = extractvalue { float, float, float, float } %596, 3, !dbg !43
  %601 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %522, float %523, float %524, float %525, i32 %357, i32 %358, i32 %359, i32 %360, i32 %479, i32 %480) #2, !dbg !43
  %602 = extractvalue { float, float, float, float } %601, 0, !dbg !43
  %603 = extractvalue { float, float, float, float } %601, 1, !dbg !43
  %604 = extractvalue { float, float, float, float } %601, 2, !dbg !43
  %605 = extractvalue { float, float, float, float } %601, 3, !dbg !43
  %606 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %527, float %528, float %529, float %530, i32 %357, i32 %358, i32 %359, i32 %360, i32 %493, i32 %494) #2, !dbg !43
  %607 = extractvalue { float, float, float, float } %606, 0, !dbg !43
  %608 = extractvalue { float, float, float, float } %606, 1, !dbg !43
  %609 = extractvalue { float, float, float, float } %606, 2, !dbg !43
  %610 = extractvalue { float, float, float, float } %606, 3, !dbg !43
  %611 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %532, float %533, float %534, float %535, i32 %357, i32 %358, i32 %359, i32 %360, i32 %507, i32 %508) #2, !dbg !43
  %612 = extractvalue { float, float, float, float } %611, 0, !dbg !43
  %613 = extractvalue { float, float, float, float } %611, 1, !dbg !43
  %614 = extractvalue { float, float, float, float } %611, 2, !dbg !43
  %615 = extractvalue { float, float, float, float } %611, 3, !dbg !43
  %616 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %537, float %538, float %539, float %540, i32 %385, i32 %386, i32 %387, i32 %388, i32 %465, i32 %466) #2, !dbg !43
  %617 = extractvalue { float, float, float, float } %616, 0, !dbg !43
  %618 = extractvalue { float, float, float, float } %616, 1, !dbg !43
  %619 = extractvalue { float, float, float, float } %616, 2, !dbg !43
  %620 = extractvalue { float, float, float, float } %616, 3, !dbg !43
  %621 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %542, float %543, float %544, float %545, i32 %385, i32 %386, i32 %387, i32 %388, i32 %479, i32 %480) #2, !dbg !43
  %622 = extractvalue { float, float, float, float } %621, 0, !dbg !43
  %623 = extractvalue { float, float, float, float } %621, 1, !dbg !43
  %624 = extractvalue { float, float, float, float } %621, 2, !dbg !43
  %625 = extractvalue { float, float, float, float } %621, 3, !dbg !43
  %626 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %547, float %548, float %549, float %550, i32 %385, i32 %386, i32 %387, i32 %388, i32 %493, i32 %494) #2, !dbg !43
  %627 = extractvalue { float, float, float, float } %626, 0, !dbg !43
  %628 = extractvalue { float, float, float, float } %626, 1, !dbg !43
  %629 = extractvalue { float, float, float, float } %626, 2, !dbg !43
  %630 = extractvalue { float, float, float, float } %626, 3, !dbg !43
  %631 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %552, float %553, float %554, float %555, i32 %385, i32 %386, i32 %387, i32 %388, i32 %507, i32 %508) #2, !dbg !43
  %632 = extractvalue { float, float, float, float } %631, 0, !dbg !43
  %633 = extractvalue { float, float, float, float } %631, 1, !dbg !43
  %634 = extractvalue { float, float, float, float } %631, 2, !dbg !43
  %635 = extractvalue { float, float, float, float } %631, 3, !dbg !43
  %636 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %557, float %558, float %559, float %560, i32 %413, i32 %414, i32 %415, i32 %416, i32 %465, i32 %466) #2, !dbg !43
  %637 = extractvalue { float, float, float, float } %636, 0, !dbg !43
  %638 = extractvalue { float, float, float, float } %636, 1, !dbg !43
  %639 = extractvalue { float, float, float, float } %636, 2, !dbg !43
  %640 = extractvalue { float, float, float, float } %636, 3, !dbg !43
  %641 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %562, float %563, float %564, float %565, i32 %413, i32 %414, i32 %415, i32 %416, i32 %479, i32 %480) #2, !dbg !43
  %642 = extractvalue { float, float, float, float } %641, 0, !dbg !43
  %643 = extractvalue { float, float, float, float } %641, 1, !dbg !43
  %644 = extractvalue { float, float, float, float } %641, 2, !dbg !43
  %645 = extractvalue { float, float, float, float } %641, 3, !dbg !43
  %646 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %567, float %568, float %569, float %570, i32 %413, i32 %414, i32 %415, i32 %416, i32 %493, i32 %494) #2, !dbg !43
  %647 = extractvalue { float, float, float, float } %646, 0, !dbg !43
  %648 = extractvalue { float, float, float, float } %646, 1, !dbg !43
  %649 = extractvalue { float, float, float, float } %646, 2, !dbg !43
  %650 = extractvalue { float, float, float, float } %646, 3, !dbg !43
  %651 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %572, float %573, float %574, float %575, i32 %413, i32 %414, i32 %415, i32 %416, i32 %507, i32 %508) #2, !dbg !43
  %652 = extractvalue { float, float, float, float } %651, 0, !dbg !43
  %653 = extractvalue { float, float, float, float } %651, 1, !dbg !43
  %654 = extractvalue { float, float, float, float } %651, 2, !dbg !43
  %655 = extractvalue { float, float, float, float } %651, 3, !dbg !43
  %656 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %577, float %578, float %579, float %580, i32 %441, i32 %442, i32 %443, i32 %444, i32 %465, i32 %466) #2, !dbg !43
  %657 = extractvalue { float, float, float, float } %656, 0, !dbg !43
  %658 = extractvalue { float, float, float, float } %656, 1, !dbg !43
  %659 = extractvalue { float, float, float, float } %656, 2, !dbg !43
  %660 = extractvalue { float, float, float, float } %656, 3, !dbg !43
  %661 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %582, float %583, float %584, float %585, i32 %441, i32 %442, i32 %443, i32 %444, i32 %479, i32 %480) #2, !dbg !43
  %662 = extractvalue { float, float, float, float } %661, 0, !dbg !43
  %663 = extractvalue { float, float, float, float } %661, 1, !dbg !43
  %664 = extractvalue { float, float, float, float } %661, 2, !dbg !43
  %665 = extractvalue { float, float, float, float } %661, 3, !dbg !43
  %666 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %587, float %588, float %589, float %590, i32 %441, i32 %442, i32 %443, i32 %444, i32 %493, i32 %494) #2, !dbg !43
  %667 = extractvalue { float, float, float, float } %666, 0, !dbg !43
  %668 = extractvalue { float, float, float, float } %666, 1, !dbg !43
  %669 = extractvalue { float, float, float, float } %666, 2, !dbg !43
  %670 = extractvalue { float, float, float, float } %666, 3, !dbg !43
  %671 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %592, float %593, float %594, float %595, i32 %441, i32 %442, i32 %443, i32 %444, i32 %507, i32 %508) #2, !dbg !43
  %672 = extractvalue { float, float, float, float } %671, 0, !dbg !43
  %673 = extractvalue { float, float, float, float } %671, 1, !dbg !43
  %674 = extractvalue { float, float, float, float } %671, 2, !dbg !43
  %675 = extractvalue { float, float, float, float } %671, 3, !dbg !43
  %676 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %597, float %598, float %599, float %600, i32 %364, i32 %365, i32 %366, i32 %367, i32 %470, i32 %471) #2, !dbg !43
  %677 = extractvalue { float, float, float, float } %676, 0, !dbg !43
  %678 = extractvalue { float, float, float, float } %676, 1, !dbg !43
  %679 = extractvalue { float, float, float, float } %676, 2, !dbg !43
  %680 = extractvalue { float, float, float, float } %676, 3, !dbg !43
  %681 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %602, float %603, float %604, float %605, i32 %364, i32 %365, i32 %366, i32 %367, i32 %484, i32 %485) #2, !dbg !43
  %682 = extractvalue { float, float, float, float } %681, 0, !dbg !43
  %683 = extractvalue { float, float, float, float } %681, 1, !dbg !43
  %684 = extractvalue { float, float, float, float } %681, 2, !dbg !43
  %685 = extractvalue { float, float, float, float } %681, 3, !dbg !43
  %686 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %607, float %608, float %609, float %610, i32 %364, i32 %365, i32 %366, i32 %367, i32 %498, i32 %499) #2, !dbg !43
  %687 = extractvalue { float, float, float, float } %686, 0, !dbg !43
  %688 = extractvalue { float, float, float, float } %686, 1, !dbg !43
  %689 = extractvalue { float, float, float, float } %686, 2, !dbg !43
  %690 = extractvalue { float, float, float, float } %686, 3, !dbg !43
  %691 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %612, float %613, float %614, float %615, i32 %364, i32 %365, i32 %366, i32 %367, i32 %512, i32 %513) #2, !dbg !43
  %692 = extractvalue { float, float, float, float } %691, 0, !dbg !43
  %693 = extractvalue { float, float, float, float } %691, 1, !dbg !43
  %694 = extractvalue { float, float, float, float } %691, 2, !dbg !43
  %695 = extractvalue { float, float, float, float } %691, 3, !dbg !43
  %696 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %617, float %618, float %619, float %620, i32 %392, i32 %393, i32 %394, i32 %395, i32 %470, i32 %471) #2, !dbg !43
  %697 = extractvalue { float, float, float, float } %696, 0, !dbg !43
  %698 = extractvalue { float, float, float, float } %696, 1, !dbg !43
  %699 = extractvalue { float, float, float, float } %696, 2, !dbg !43
  %700 = extractvalue { float, float, float, float } %696, 3, !dbg !43
  %701 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %622, float %623, float %624, float %625, i32 %392, i32 %393, i32 %394, i32 %395, i32 %484, i32 %485) #2, !dbg !43
  %702 = extractvalue { float, float, float, float } %701, 0, !dbg !43
  %703 = extractvalue { float, float, float, float } %701, 1, !dbg !43
  %704 = extractvalue { float, float, float, float } %701, 2, !dbg !43
  %705 = extractvalue { float, float, float, float } %701, 3, !dbg !43
  %706 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %627, float %628, float %629, float %630, i32 %392, i32 %393, i32 %394, i32 %395, i32 %498, i32 %499) #2, !dbg !43
  %707 = extractvalue { float, float, float, float } %706, 0, !dbg !43
  %708 = extractvalue { float, float, float, float } %706, 1, !dbg !43
  %709 = extractvalue { float, float, float, float } %706, 2, !dbg !43
  %710 = extractvalue { float, float, float, float } %706, 3, !dbg !43
  %711 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %632, float %633, float %634, float %635, i32 %392, i32 %393, i32 %394, i32 %395, i32 %512, i32 %513) #2, !dbg !43
  %712 = extractvalue { float, float, float, float } %711, 0, !dbg !43
  %713 = extractvalue { float, float, float, float } %711, 1, !dbg !43
  %714 = extractvalue { float, float, float, float } %711, 2, !dbg !43
  %715 = extractvalue { float, float, float, float } %711, 3, !dbg !43
  %716 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %637, float %638, float %639, float %640, i32 %420, i32 %421, i32 %422, i32 %423, i32 %470, i32 %471) #2, !dbg !43
  %717 = extractvalue { float, float, float, float } %716, 0, !dbg !43
  %718 = extractvalue { float, float, float, float } %716, 1, !dbg !43
  %719 = extractvalue { float, float, float, float } %716, 2, !dbg !43
  %720 = extractvalue { float, float, float, float } %716, 3, !dbg !43
  %721 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %642, float %643, float %644, float %645, i32 %420, i32 %421, i32 %422, i32 %423, i32 %484, i32 %485) #2, !dbg !43
  %722 = extractvalue { float, float, float, float } %721, 0, !dbg !43
  %723 = extractvalue { float, float, float, float } %721, 1, !dbg !43
  %724 = extractvalue { float, float, float, float } %721, 2, !dbg !43
  %725 = extractvalue { float, float, float, float } %721, 3, !dbg !43
  %726 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %647, float %648, float %649, float %650, i32 %420, i32 %421, i32 %422, i32 %423, i32 %498, i32 %499) #2, !dbg !43
  %727 = extractvalue { float, float, float, float } %726, 0, !dbg !43
  %728 = extractvalue { float, float, float, float } %726, 1, !dbg !43
  %729 = extractvalue { float, float, float, float } %726, 2, !dbg !43
  %730 = extractvalue { float, float, float, float } %726, 3, !dbg !43
  %731 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %652, float %653, float %654, float %655, i32 %420, i32 %421, i32 %422, i32 %423, i32 %512, i32 %513) #2, !dbg !43
  %732 = extractvalue { float, float, float, float } %731, 0, !dbg !43
  %733 = extractvalue { float, float, float, float } %731, 1, !dbg !43
  %734 = extractvalue { float, float, float, float } %731, 2, !dbg !43
  %735 = extractvalue { float, float, float, float } %731, 3, !dbg !43
  %736 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %657, float %658, float %659, float %660, i32 %448, i32 %449, i32 %450, i32 %451, i32 %470, i32 %471) #2, !dbg !43
  %737 = extractvalue { float, float, float, float } %736, 0, !dbg !43
  %738 = extractvalue { float, float, float, float } %736, 1, !dbg !43
  %739 = extractvalue { float, float, float, float } %736, 2, !dbg !43
  %740 = extractvalue { float, float, float, float } %736, 3, !dbg !43
  %741 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %662, float %663, float %664, float %665, i32 %448, i32 %449, i32 %450, i32 %451, i32 %484, i32 %485) #2, !dbg !43
  %742 = extractvalue { float, float, float, float } %741, 0, !dbg !43
  %743 = extractvalue { float, float, float, float } %741, 1, !dbg !43
  %744 = extractvalue { float, float, float, float } %741, 2, !dbg !43
  %745 = extractvalue { float, float, float, float } %741, 3, !dbg !43
  %746 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %667, float %668, float %669, float %670, i32 %448, i32 %449, i32 %450, i32 %451, i32 %498, i32 %499) #2, !dbg !43
  %747 = extractvalue { float, float, float, float } %746, 0, !dbg !43
  %748 = extractvalue { float, float, float, float } %746, 1, !dbg !43
  %749 = extractvalue { float, float, float, float } %746, 2, !dbg !43
  %750 = extractvalue { float, float, float, float } %746, 3, !dbg !43
  %751 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %672, float %673, float %674, float %675, i32 %448, i32 %449, i32 %450, i32 %451, i32 %512, i32 %513) #2, !dbg !43
  %752 = extractvalue { float, float, float, float } %751, 0, !dbg !43
  %753 = extractvalue { float, float, float, float } %751, 1, !dbg !43
  %754 = extractvalue { float, float, float, float } %751, 2, !dbg !43
  %755 = extractvalue { float, float, float, float } %751, 3, !dbg !43
  %756 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %677, float %678, float %679, float %680, i32 %371, i32 %372, i32 %373, i32 %374, i32 %472, i32 %473) #2, !dbg !43
  %757 = extractvalue { float, float, float, float } %756, 0, !dbg !43
  %758 = extractvalue { float, float, float, float } %756, 1, !dbg !43
  %759 = extractvalue { float, float, float, float } %756, 2, !dbg !43
  %760 = extractvalue { float, float, float, float } %756, 3, !dbg !43
  %761 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %682, float %683, float %684, float %685, i32 %371, i32 %372, i32 %373, i32 %374, i32 %486, i32 %487) #2, !dbg !43
  %762 = extractvalue { float, float, float, float } %761, 0, !dbg !43
  %763 = extractvalue { float, float, float, float } %761, 1, !dbg !43
  %764 = extractvalue { float, float, float, float } %761, 2, !dbg !43
  %765 = extractvalue { float, float, float, float } %761, 3, !dbg !43
  %766 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %687, float %688, float %689, float %690, i32 %371, i32 %372, i32 %373, i32 %374, i32 %500, i32 %501) #2, !dbg !43
  %767 = extractvalue { float, float, float, float } %766, 0, !dbg !43
  %768 = extractvalue { float, float, float, float } %766, 1, !dbg !43
  %769 = extractvalue { float, float, float, float } %766, 2, !dbg !43
  %770 = extractvalue { float, float, float, float } %766, 3, !dbg !43
  %771 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %692, float %693, float %694, float %695, i32 %371, i32 %372, i32 %373, i32 %374, i32 %514, i32 %515) #2, !dbg !43
  %772 = extractvalue { float, float, float, float } %771, 0, !dbg !43
  %773 = extractvalue { float, float, float, float } %771, 1, !dbg !43
  %774 = extractvalue { float, float, float, float } %771, 2, !dbg !43
  %775 = extractvalue { float, float, float, float } %771, 3, !dbg !43
  %776 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %697, float %698, float %699, float %700, i32 %399, i32 %400, i32 %401, i32 %402, i32 %472, i32 %473) #2, !dbg !43
  %777 = extractvalue { float, float, float, float } %776, 0, !dbg !43
  %778 = extractvalue { float, float, float, float } %776, 1, !dbg !43
  %779 = extractvalue { float, float, float, float } %776, 2, !dbg !43
  %780 = extractvalue { float, float, float, float } %776, 3, !dbg !43
  %781 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %702, float %703, float %704, float %705, i32 %399, i32 %400, i32 %401, i32 %402, i32 %486, i32 %487) #2, !dbg !43
  %782 = extractvalue { float, float, float, float } %781, 0, !dbg !43
  %783 = extractvalue { float, float, float, float } %781, 1, !dbg !43
  %784 = extractvalue { float, float, float, float } %781, 2, !dbg !43
  %785 = extractvalue { float, float, float, float } %781, 3, !dbg !43
  %786 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %707, float %708, float %709, float %710, i32 %399, i32 %400, i32 %401, i32 %402, i32 %500, i32 %501) #2, !dbg !43
  %787 = extractvalue { float, float, float, float } %786, 0, !dbg !43
  %788 = extractvalue { float, float, float, float } %786, 1, !dbg !43
  %789 = extractvalue { float, float, float, float } %786, 2, !dbg !43
  %790 = extractvalue { float, float, float, float } %786, 3, !dbg !43
  %791 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %712, float %713, float %714, float %715, i32 %399, i32 %400, i32 %401, i32 %402, i32 %514, i32 %515) #2, !dbg !43
  %792 = extractvalue { float, float, float, float } %791, 0, !dbg !43
  %793 = extractvalue { float, float, float, float } %791, 1, !dbg !43
  %794 = extractvalue { float, float, float, float } %791, 2, !dbg !43
  %795 = extractvalue { float, float, float, float } %791, 3, !dbg !43
  %796 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %717, float %718, float %719, float %720, i32 %427, i32 %428, i32 %429, i32 %430, i32 %472, i32 %473) #2, !dbg !43
  %797 = extractvalue { float, float, float, float } %796, 0, !dbg !43
  %798 = extractvalue { float, float, float, float } %796, 1, !dbg !43
  %799 = extractvalue { float, float, float, float } %796, 2, !dbg !43
  %800 = extractvalue { float, float, float, float } %796, 3, !dbg !43
  %801 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %722, float %723, float %724, float %725, i32 %427, i32 %428, i32 %429, i32 %430, i32 %486, i32 %487) #2, !dbg !43
  %802 = extractvalue { float, float, float, float } %801, 0, !dbg !43
  %803 = extractvalue { float, float, float, float } %801, 1, !dbg !43
  %804 = extractvalue { float, float, float, float } %801, 2, !dbg !43
  %805 = extractvalue { float, float, float, float } %801, 3, !dbg !43
  %806 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %727, float %728, float %729, float %730, i32 %427, i32 %428, i32 %429, i32 %430, i32 %500, i32 %501) #2, !dbg !43
  %807 = extractvalue { float, float, float, float } %806, 0, !dbg !43
  %808 = extractvalue { float, float, float, float } %806, 1, !dbg !43
  %809 = extractvalue { float, float, float, float } %806, 2, !dbg !43
  %810 = extractvalue { float, float, float, float } %806, 3, !dbg !43
  %811 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %732, float %733, float %734, float %735, i32 %427, i32 %428, i32 %429, i32 %430, i32 %514, i32 %515) #2, !dbg !43
  %812 = extractvalue { float, float, float, float } %811, 0, !dbg !43
  %813 = extractvalue { float, float, float, float } %811, 1, !dbg !43
  %814 = extractvalue { float, float, float, float } %811, 2, !dbg !43
  %815 = extractvalue { float, float, float, float } %811, 3, !dbg !43
  %816 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %737, float %738, float %739, float %740, i32 %455, i32 %456, i32 %457, i32 %458, i32 %472, i32 %473) #2, !dbg !43
  %817 = extractvalue { float, float, float, float } %816, 0, !dbg !43
  %818 = extractvalue { float, float, float, float } %816, 1, !dbg !43
  %819 = extractvalue { float, float, float, float } %816, 2, !dbg !43
  %820 = extractvalue { float, float, float, float } %816, 3, !dbg !43
  %821 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %742, float %743, float %744, float %745, i32 %455, i32 %456, i32 %457, i32 %458, i32 %486, i32 %487) #2, !dbg !43
  %822 = extractvalue { float, float, float, float } %821, 0, !dbg !43
  %823 = extractvalue { float, float, float, float } %821, 1, !dbg !43
  %824 = extractvalue { float, float, float, float } %821, 2, !dbg !43
  %825 = extractvalue { float, float, float, float } %821, 3, !dbg !43
  %826 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %747, float %748, float %749, float %750, i32 %455, i32 %456, i32 %457, i32 %458, i32 %500, i32 %501) #2, !dbg !43
  %827 = extractvalue { float, float, float, float } %826, 0, !dbg !43
  %828 = extractvalue { float, float, float, float } %826, 1, !dbg !43
  %829 = extractvalue { float, float, float, float } %826, 2, !dbg !43
  %830 = extractvalue { float, float, float, float } %826, 3, !dbg !43
  %831 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %752, float %753, float %754, float %755, i32 %455, i32 %456, i32 %457, i32 %458, i32 %514, i32 %515) #2, !dbg !43
  %832 = extractvalue { float, float, float, float } %831, 0, !dbg !43
  %833 = extractvalue { float, float, float, float } %831, 1, !dbg !43
  %834 = extractvalue { float, float, float, float } %831, 2, !dbg !43
  %835 = extractvalue { float, float, float, float } %831, 3, !dbg !43
  %836 = getelementptr i8, ptr addrspace(1) %.pn18360, i64 128, !dbg !39
  %837 = getelementptr half, ptr addrspace(1) %.pn194361, i64 %136, !dbg !40
  %838 = getelementptr half, ptr addrspace(1) %.pn178362, i64 %136, !dbg !40
  %839 = getelementptr half, ptr addrspace(1) %.pn162363, i64 %136, !dbg !40
  %840 = getelementptr half, ptr addrspace(1) %.pn146364, i64 %136, !dbg !40
  %841 = getelementptr half, ptr addrspace(1) %.pn130365, i64 %136, !dbg !40
  %842 = getelementptr half, ptr addrspace(1) %.pn114366, i64 %136, !dbg !40
  %843 = getelementptr half, ptr addrspace(1) %.pn98367, i64 %136, !dbg !40
  %844 = getelementptr half, ptr addrspace(1) %.pn82368, i64 %136, !dbg !40
  %845 = add i32 %276, 1, !dbg !34
  %846 = icmp sgt i32 %845, 2, !dbg !34
  %847 = select i1 %846, i32 0, i32 %845, !dbg !34
  %848 = shl i32 %341, 6, !dbg !41
  %849 = sub i32 %.neg356, %848, !dbg !41
  %850 = icmp slt i32 %23, %849, !dbg !35
  %.idx290 = shl i32 %847, 13, !dbg !36
  %851 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %.idx290, !dbg !36
  %852 = and i1 %342, %850, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %853 = getelementptr inbounds nuw half, ptr addrspace(3) %851, i32 %81, !dbg !36
  %854 = getelementptr inbounds nuw half, ptr addrspace(3) %851, i32 %83, !dbg !36
  %855 = getelementptr inbounds nuw half, ptr addrspace(3) %851, i32 %85, !dbg !36
  %856 = getelementptr inbounds nuw half, ptr addrspace(3) %851, i32 %87, !dbg !36
  %857 = select i1 %852, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %853, ptr addrspace(1) %836, i32 %857) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %854, ptr addrspace(1) %836, i32 %857) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %855, ptr addrspace(1) %836, i32 %857) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %856, ptr addrspace(1) %836, i32 %857) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %858 = icmp slt i32 %29, %849, !dbg !37
  %859 = icmp slt i32 %30, %849, !dbg !37
  %860 = icmp slt i32 %31, %849, !dbg !37
  %861 = icmp slt i32 %32, %849, !dbg !37
  %862 = icmp slt i32 %33, %849, !dbg !37
  %863 = icmp slt i32 %34, %849, !dbg !37
  %864 = icmp slt i32 %35, %849, !dbg !37
  %865 = icmp slt i32 %36, %849, !dbg !37
  %.idx291 = shl i32 %847, 14, !dbg !38
  %866 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx291, !dbg !38
  %867 = and i1 %342, %858, !dbg !34
  %868 = and i1 %342, %859, !dbg !34
  %869 = and i1 %342, %860, !dbg !34
  %870 = and i1 %342, %861, !dbg !34
  %871 = and i1 %342, %862, !dbg !34
  %872 = and i1 %342, %863, !dbg !34
  %873 = and i1 %342, %864, !dbg !34
  %874 = and i1 %342, %865, !dbg !34
  %875 = getelementptr inbounds nuw half, ptr addrspace(3) %866, i32 %110, !dbg !38
  %876 = getelementptr inbounds nuw half, ptr addrspace(3) %866, i32 %112, !dbg !38
  %877 = getelementptr inbounds nuw half, ptr addrspace(3) %866, i32 %114, !dbg !38
  %878 = getelementptr inbounds nuw half, ptr addrspace(3) %866, i32 %116, !dbg !38
  %879 = getelementptr inbounds nuw half, ptr addrspace(3) %866, i32 %118, !dbg !38
  %880 = getelementptr inbounds nuw half, ptr addrspace(3) %866, i32 %120, !dbg !38
  %881 = getelementptr inbounds nuw half, ptr addrspace(3) %866, i32 %122, !dbg !38
  %882 = getelementptr inbounds nuw half, ptr addrspace(3) %866, i32 %124, !dbg !38
  %883 = select i1 %867, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %875, ptr addrspace(1) %837, i32 %883) #2, !dbg !38
  %884 = select i1 %868, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %876, ptr addrspace(1) %838, i32 %884) #2, !dbg !38
  %885 = select i1 %869, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %877, ptr addrspace(1) %839, i32 %885) #2, !dbg !38
  %886 = select i1 %870, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %878, ptr addrspace(1) %840, i32 %886) #2, !dbg !38
  %887 = select i1 %871, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %879, ptr addrspace(1) %841, i32 %887) #2, !dbg !38
  %888 = select i1 %872, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %880, ptr addrspace(1) %842, i32 %888) #2, !dbg !38
  %889 = select i1 %873, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %881, ptr addrspace(1) %843, i32 %889) #2, !dbg !38
  %890 = select i1 %874, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %882, ptr addrspace(1) %844, i32 %890) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %891 = add nuw nsw i32 %341, 1, !dbg !34
  %exitcond.not = icmp eq i32 %891, %72, !dbg !34
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %274, !dbg !34

._crit_edge.loopexit:                             ; preds = %274
  %892 = insertelement <64 x float> poison, float %757, i64 0, !dbg !44
  %893 = insertelement <64 x float> %892, float %758, i64 1, !dbg !44
  %894 = insertelement <64 x float> %893, float %759, i64 2, !dbg !44
  %895 = insertelement <64 x float> %894, float %760, i64 3, !dbg !44
  %896 = insertelement <64 x float> %895, float %762, i64 4, !dbg !44
  %897 = insertelement <64 x float> %896, float %763, i64 5, !dbg !44
  %898 = insertelement <64 x float> %897, float %764, i64 6, !dbg !44
  %899 = insertelement <64 x float> %898, float %765, i64 7, !dbg !44
  %900 = insertelement <64 x float> %899, float %767, i64 8, !dbg !44
  %901 = insertelement <64 x float> %900, float %768, i64 9, !dbg !44
  %902 = insertelement <64 x float> %901, float %769, i64 10, !dbg !44
  %903 = insertelement <64 x float> %902, float %770, i64 11, !dbg !44
  %904 = insertelement <64 x float> %903, float %772, i64 12, !dbg !44
  %905 = insertelement <64 x float> %904, float %773, i64 13, !dbg !44
  %906 = insertelement <64 x float> %905, float %774, i64 14, !dbg !44
  %907 = insertelement <64 x float> %906, float %775, i64 15, !dbg !44
  %908 = insertelement <64 x float> %907, float %777, i64 16, !dbg !44
  %909 = insertelement <64 x float> %908, float %778, i64 17, !dbg !44
  %910 = insertelement <64 x float> %909, float %779, i64 18, !dbg !44
  %911 = insertelement <64 x float> %910, float %780, i64 19, !dbg !44
  %912 = insertelement <64 x float> %911, float %782, i64 20, !dbg !44
  %913 = insertelement <64 x float> %912, float %783, i64 21, !dbg !44
  %914 = insertelement <64 x float> %913, float %784, i64 22, !dbg !44
  %915 = insertelement <64 x float> %914, float %785, i64 23, !dbg !44
  %916 = insertelement <64 x float> %915, float %787, i64 24, !dbg !44
  %917 = insertelement <64 x float> %916, float %788, i64 25, !dbg !44
  %918 = insertelement <64 x float> %917, float %789, i64 26, !dbg !44
  %919 = insertelement <64 x float> %918, float %790, i64 27, !dbg !44
  %920 = insertelement <64 x float> %919, float %792, i64 28, !dbg !44
  %921 = insertelement <64 x float> %920, float %793, i64 29, !dbg !44
  %922 = insertelement <64 x float> %921, float %794, i64 30, !dbg !44
  %923 = insertelement <64 x float> %922, float %795, i64 31, !dbg !44
  %924 = insertelement <64 x float> %923, float %797, i64 32, !dbg !44
  %925 = insertelement <64 x float> %924, float %798, i64 33, !dbg !44
  %926 = insertelement <64 x float> %925, float %799, i64 34, !dbg !44
  %927 = insertelement <64 x float> %926, float %800, i64 35, !dbg !44
  %928 = insertelement <64 x float> %927, float %802, i64 36, !dbg !44
  %929 = insertelement <64 x float> %928, float %803, i64 37, !dbg !44
  %930 = insertelement <64 x float> %929, float %804, i64 38, !dbg !44
  %931 = insertelement <64 x float> %930, float %805, i64 39, !dbg !44
  %932 = insertelement <64 x float> %931, float %807, i64 40, !dbg !44
  %933 = insertelement <64 x float> %932, float %808, i64 41, !dbg !44
  %934 = insertelement <64 x float> %933, float %809, i64 42, !dbg !44
  %935 = insertelement <64 x float> %934, float %810, i64 43, !dbg !44
  %936 = insertelement <64 x float> %935, float %812, i64 44, !dbg !44
  %937 = insertelement <64 x float> %936, float %813, i64 45, !dbg !44
  %938 = insertelement <64 x float> %937, float %814, i64 46, !dbg !44
  %939 = insertelement <64 x float> %938, float %815, i64 47, !dbg !44
  %940 = insertelement <64 x float> %939, float %817, i64 48, !dbg !44
  %941 = insertelement <64 x float> %940, float %818, i64 49, !dbg !44
  %942 = insertelement <64 x float> %941, float %819, i64 50, !dbg !44
  %943 = insertelement <64 x float> %942, float %820, i64 51, !dbg !44
  %944 = insertelement <64 x float> %943, float %822, i64 52, !dbg !44
  %945 = insertelement <64 x float> %944, float %823, i64 53, !dbg !44
  %946 = insertelement <64 x float> %945, float %824, i64 54, !dbg !44
  %947 = insertelement <64 x float> %946, float %825, i64 55, !dbg !44
  %948 = insertelement <64 x float> %947, float %827, i64 56, !dbg !44
  %949 = insertelement <64 x float> %948, float %828, i64 57, !dbg !44
  %950 = insertelement <64 x float> %949, float %829, i64 58, !dbg !44
  %951 = insertelement <64 x float> %950, float %830, i64 59, !dbg !44
  %952 = insertelement <64 x float> %951, float %832, i64 60, !dbg !44
  %953 = insertelement <64 x float> %952, float %833, i64 61, !dbg !44
  %954 = insertelement <64 x float> %953, float %834, i64 62, !dbg !44
  %955 = insertelement <64 x float> %954, float %835, i64 63, !dbg !44
  %956 = fptrunc <64 x float> %955 to <64 x half>, !dbg !44
  br label %._crit_edge, !dbg !45

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.._crit_edge_crit_edge
  %.pre-phi371 = phi i32 [ %.pre370, %.._crit_edge_crit_edge ], [ %266, %._crit_edge.loopexit ], !dbg !42
  %957 = phi <64 x half> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %956, %._crit_edge.loopexit ]
  %958 = mul i32 %19, %17, !dbg !45
  %.decomposed562 = sub i32 %.decomposed, %958, !dbg !45
  %959 = add i32 %.decomposed562, %15, !dbg !46
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %960 = shl i32 %959, 6, !dbg !47
  %961 = or disjoint i32 %960, %29, !dbg !48
  %962 = or disjoint i32 %960, %30, !dbg !48
  %963 = or disjoint i32 %960, %31, !dbg !48
  %964 = or disjoint i32 %960, %32, !dbg !48
  %965 = or disjoint i32 %960, %33, !dbg !48
  %966 = or disjoint i32 %960, %34, !dbg !48
  %967 = or disjoint i32 %960, %35, !dbg !48
  %968 = or disjoint i32 %960, %36, !dbg !48
  %969 = mul i32 %961, %7, !dbg !49
  %970 = mul i32 %962, %7, !dbg !49
  %971 = mul i32 %963, %7, !dbg !49
  %972 = mul i32 %964, %7, !dbg !49
  %973 = mul i32 %965, %7, !dbg !49
  %974 = mul i32 %966, %7, !dbg !49
  %975 = mul i32 %967, %7, !dbg !49
  %976 = mul i32 %968, %7, !dbg !49
  %977 = sext i32 %969 to i64, !dbg !50
  %978 = getelementptr half, ptr addrspace(1) %2, i64 %977, !dbg !50
  %979 = sext i32 %970 to i64, !dbg !50
  %980 = getelementptr half, ptr addrspace(1) %2, i64 %979, !dbg !50
  %981 = sext i32 %971 to i64, !dbg !50
  %982 = getelementptr half, ptr addrspace(1) %2, i64 %981, !dbg !50
  %983 = sext i32 %972 to i64, !dbg !50
  %984 = getelementptr half, ptr addrspace(1) %2, i64 %983, !dbg !50
  %985 = sext i32 %973 to i64, !dbg !50
  %986 = getelementptr half, ptr addrspace(1) %2, i64 %985, !dbg !50
  %987 = sext i32 %974 to i64, !dbg !50
  %988 = getelementptr half, ptr addrspace(1) %2, i64 %987, !dbg !50
  %989 = sext i32 %975 to i64, !dbg !50
  %990 = getelementptr half, ptr addrspace(1) %2, i64 %989, !dbg !50
  %991 = sext i32 %976 to i64, !dbg !50
  %992 = getelementptr half, ptr addrspace(1) %2, i64 %991, !dbg !50
  %993 = sext i32 %25 to i64, !dbg !51
  %994 = getelementptr half, ptr addrspace(1) %978, i64 %993, !dbg !51
  %995 = getelementptr half, ptr addrspace(1) %980, i64 %993, !dbg !51
  %996 = getelementptr half, ptr addrspace(1) %982, i64 %993, !dbg !51
  %997 = getelementptr half, ptr addrspace(1) %984, i64 %993, !dbg !51
  %998 = getelementptr half, ptr addrspace(1) %986, i64 %993, !dbg !51
  %999 = getelementptr half, ptr addrspace(1) %988, i64 %993, !dbg !51
  %1000 = getelementptr half, ptr addrspace(1) %990, i64 %993, !dbg !51
  %1001 = getelementptr half, ptr addrspace(1) %992, i64 %993, !dbg !51
  %1002 = icmp slt i32 %961, 1, !dbg !52
  %1003 = icmp slt i32 %962, 1, !dbg !52
  %1004 = icmp slt i32 %963, 1, !dbg !52
  %1005 = icmp slt i32 %964, 1, !dbg !52
  %1006 = icmp slt i32 %965, 1, !dbg !52
  %1007 = icmp slt i32 %966, 1, !dbg !52
  %1008 = icmp slt i32 %967, 1, !dbg !52
  %1009 = icmp slt i32 %968, 1, !dbg !52
  %1010 = icmp slt i32 %25, %3, !dbg !53
  %1011 = and i1 %1010, %1002, !dbg !54
  %1012 = and i1 %1010, %1003, !dbg !54
  %1013 = and i1 %1010, %1004, !dbg !54
  %1014 = and i1 %1010, %1005, !dbg !54
  %1015 = and i1 %1010, %1006, !dbg !54
  %1016 = and i1 %1010, %1007, !dbg !54
  %1017 = and i1 %1010, %1008, !dbg !54
  %1018 = and i1 %1010, %1009, !dbg !54
  %1019 = shl nuw nsw i32 %21, 1, !dbg !42
  %1020 = and i32 %1019, 6, !dbg !42
  %1021 = shl nuw nsw i32 %21, 5, !dbg !42
  %1022 = and i32 %1021, 384, !dbg !42
  %1023 = or disjoint i32 %1022, %1020, !dbg !42
  %1024 = shl nuw nsw i32 %27, 5, !dbg !42
  %1025 = or disjoint i32 %1023, %1024, !dbg !42
  %1026 = or disjoint i32 %1025, %.pre-phi371, !dbg !42
  %1027 = and i32 %22, 1016, !dbg !42
  %1028 = lshr i32 %1025, 4, !dbg !42
  %1029 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1028, !dbg !42
  %1030 = getelementptr inbounds nuw half, ptr addrspace(3) %1029, i32 %1026, !dbg !42
  %1031 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !42
  store <2 x half> %1031, ptr addrspace(3) %1030, align 4, !dbg !42
  %1032 = or disjoint i32 %1026, 1024, !dbg !42
  %1033 = lshr i32 %1032, 4, !dbg !42
  %1034 = and i32 %1033, 268435448, !dbg !42
  %1035 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1034, !dbg !42
  %1036 = getelementptr inbounds nuw half, ptr addrspace(3) %1035, i32 %1032, !dbg !42
  %1037 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !42
  store <2 x half> %1037, ptr addrspace(3) %1036, align 4, !dbg !42
  %1038 = getelementptr inbounds nuw i8, ptr addrspace(3) %1030, i32 64, !dbg !42
  %1039 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !42
  store <2 x half> %1039, ptr addrspace(3) %1038, align 4, !dbg !42
  %1040 = or disjoint i32 %1026, 1056, !dbg !42
  %1041 = lshr i32 %1040, 4, !dbg !42
  %1042 = and i32 %1041, 268435448, !dbg !42
  %1043 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1042, !dbg !42
  %1044 = getelementptr inbounds nuw half, ptr addrspace(3) %1043, i32 %1040, !dbg !42
  %1045 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !42
  store <2 x half> %1045, ptr addrspace(3) %1044, align 4, !dbg !42
  %1046 = getelementptr inbounds nuw i8, ptr addrspace(3) %1030, i32 128, !dbg !42
  %1047 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 8, i32 9>, !dbg !42
  store <2 x half> %1047, ptr addrspace(3) %1046, align 4, !dbg !42
  %1048 = or disjoint i32 %1026, 1088, !dbg !42
  %1049 = lshr i32 %1048, 4, !dbg !42
  %1050 = and i32 %1049, 268435448, !dbg !42
  %1051 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1050, !dbg !42
  %1052 = getelementptr inbounds nuw half, ptr addrspace(3) %1051, i32 %1048, !dbg !42
  %1053 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 10, i32 11>, !dbg !42
  store <2 x half> %1053, ptr addrspace(3) %1052, align 4, !dbg !42
  %1054 = getelementptr inbounds nuw i8, ptr addrspace(3) %1030, i32 192, !dbg !42
  %1055 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 12, i32 13>, !dbg !42
  store <2 x half> %1055, ptr addrspace(3) %1054, align 4, !dbg !42
  %1056 = or disjoint i32 %1026, 1120, !dbg !42
  %1057 = lshr i32 %1056, 4, !dbg !42
  %1058 = and i32 %1057, 268435448, !dbg !42
  %1059 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1058, !dbg !42
  %1060 = getelementptr inbounds nuw half, ptr addrspace(3) %1059, i32 %1056, !dbg !42
  %1061 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 14, i32 15>, !dbg !42
  store <2 x half> %1061, ptr addrspace(3) %1060, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %1062 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %107, !dbg !42
  %1063 = getelementptr inbounds nuw half, ptr addrspace(3) %1062, i32 %1027, !dbg !42
  %1064 = load <4 x i32>, ptr addrspace(3) %1063, align 16, !dbg !42
  %1065 = or disjoint i32 %1027, 1024, !dbg !42
  %1066 = lshr i32 %1065, 4, !dbg !42
  %1067 = and i32 %1066, 120, !dbg !42
  %1068 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1067, !dbg !42
  %1069 = getelementptr inbounds nuw half, ptr addrspace(3) %1068, i32 %1065, !dbg !42
  %1070 = load <4 x i32>, ptr addrspace(3) %1069, align 16, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %1071 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 16, i32 17>, !dbg !42
  store <2 x half> %1071, ptr addrspace(3) %1030, align 4, !dbg !42
  %1072 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 18, i32 19>, !dbg !42
  store <2 x half> %1072, ptr addrspace(3) %1036, align 4, !dbg !42
  %1073 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 20, i32 21>, !dbg !42
  store <2 x half> %1073, ptr addrspace(3) %1038, align 4, !dbg !42
  %1074 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 22, i32 23>, !dbg !42
  store <2 x half> %1074, ptr addrspace(3) %1044, align 4, !dbg !42
  %1075 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 24, i32 25>, !dbg !42
  store <2 x half> %1075, ptr addrspace(3) %1046, align 4, !dbg !42
  %1076 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 26, i32 27>, !dbg !42
  store <2 x half> %1076, ptr addrspace(3) %1052, align 4, !dbg !42
  %1077 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 28, i32 29>, !dbg !42
  store <2 x half> %1077, ptr addrspace(3) %1054, align 4, !dbg !42
  %1078 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 30, i32 31>, !dbg !42
  store <2 x half> %1078, ptr addrspace(3) %1060, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %1079 = load <4 x i32>, ptr addrspace(3) %1063, align 16, !dbg !42
  %1080 = load <4 x i32>, ptr addrspace(3) %1069, align 16, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %1081 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 32, i32 33>, !dbg !42
  store <2 x half> %1081, ptr addrspace(3) %1030, align 4, !dbg !42
  %1082 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 34, i32 35>, !dbg !42
  store <2 x half> %1082, ptr addrspace(3) %1036, align 4, !dbg !42
  %1083 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 36, i32 37>, !dbg !42
  store <2 x half> %1083, ptr addrspace(3) %1038, align 4, !dbg !42
  %1084 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 38, i32 39>, !dbg !42
  store <2 x half> %1084, ptr addrspace(3) %1044, align 4, !dbg !42
  %1085 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 40, i32 41>, !dbg !42
  store <2 x half> %1085, ptr addrspace(3) %1046, align 4, !dbg !42
  %1086 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 42, i32 43>, !dbg !42
  store <2 x half> %1086, ptr addrspace(3) %1052, align 4, !dbg !42
  %1087 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 44, i32 45>, !dbg !42
  store <2 x half> %1087, ptr addrspace(3) %1054, align 4, !dbg !42
  %1088 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 46, i32 47>, !dbg !42
  store <2 x half> %1088, ptr addrspace(3) %1060, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %1089 = load <4 x i32>, ptr addrspace(3) %1063, align 16, !dbg !42
  %1090 = load <4 x i32>, ptr addrspace(3) %1069, align 16, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %1091 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 48, i32 49>, !dbg !42
  store <2 x half> %1091, ptr addrspace(3) %1030, align 4, !dbg !42
  %1092 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 50, i32 51>, !dbg !42
  store <2 x half> %1092, ptr addrspace(3) %1036, align 4, !dbg !42
  %1093 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 52, i32 53>, !dbg !42
  store <2 x half> %1093, ptr addrspace(3) %1038, align 4, !dbg !42
  %1094 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 54, i32 55>, !dbg !42
  store <2 x half> %1094, ptr addrspace(3) %1044, align 4, !dbg !42
  %1095 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 56, i32 57>, !dbg !42
  store <2 x half> %1095, ptr addrspace(3) %1046, align 4, !dbg !42
  %1096 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 58, i32 59>, !dbg !42
  store <2 x half> %1096, ptr addrspace(3) %1052, align 4, !dbg !42
  %1097 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 60, i32 61>, !dbg !42
  store <2 x half> %1097, ptr addrspace(3) %1054, align 4, !dbg !42
  %1098 = shufflevector <64 x half> %957, <64 x half> poison, <2 x i32> <i32 62, i32 63>, !dbg !42
  store <2 x half> %1098, ptr addrspace(3) %1060, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %1099 = load <4 x i32>, ptr addrspace(3) %1063, align 16, !dbg !42
  %1100 = load <4 x i32>, ptr addrspace(3) %1069, align 16, !dbg !42
  %.extract = extractelement <4 x i32> %1064, i64 0, !dbg !42
  %.extract295 = extractelement <4 x i32> %1064, i64 1, !dbg !42
  %.extract297 = extractelement <4 x i32> %1064, i64 2, !dbg !42
  %.extract299 = extractelement <4 x i32> %1064, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract295, i32 %.extract297, i32 %.extract299, ptr addrspace(1) %994, i1 %1011) #2, !dbg !42
  %.extract301 = extractelement <4 x i32> %1070, i64 0, !dbg !42
  %.extract303 = extractelement <4 x i32> %1070, i64 1, !dbg !42
  %.extract305 = extractelement <4 x i32> %1070, i64 2, !dbg !42
  %.extract307 = extractelement <4 x i32> %1070, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract301, i32 %.extract303, i32 %.extract305, i32 %.extract307, ptr addrspace(1) %995, i1 %1012) #2, !dbg !42
  %.extract309 = extractelement <4 x i32> %1079, i64 0, !dbg !42
  %.extract311 = extractelement <4 x i32> %1079, i64 1, !dbg !42
  %.extract313 = extractelement <4 x i32> %1079, i64 2, !dbg !42
  %.extract315 = extractelement <4 x i32> %1079, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract309, i32 %.extract311, i32 %.extract313, i32 %.extract315, ptr addrspace(1) %996, i1 %1013) #2, !dbg !42
  %.extract317 = extractelement <4 x i32> %1080, i64 0, !dbg !42
  %.extract319 = extractelement <4 x i32> %1080, i64 1, !dbg !42
  %.extract321 = extractelement <4 x i32> %1080, i64 2, !dbg !42
  %.extract323 = extractelement <4 x i32> %1080, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract317, i32 %.extract319, i32 %.extract321, i32 %.extract323, ptr addrspace(1) %997, i1 %1014) #2, !dbg !42
  %.extract325 = extractelement <4 x i32> %1089, i64 0, !dbg !42
  %.extract327 = extractelement <4 x i32> %1089, i64 1, !dbg !42
  %.extract329 = extractelement <4 x i32> %1089, i64 2, !dbg !42
  %.extract331 = extractelement <4 x i32> %1089, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract325, i32 %.extract327, i32 %.extract329, i32 %.extract331, ptr addrspace(1) %998, i1 %1015) #2, !dbg !42
  %.extract333 = extractelement <4 x i32> %1090, i64 0, !dbg !42
  %.extract335 = extractelement <4 x i32> %1090, i64 1, !dbg !42
  %.extract337 = extractelement <4 x i32> %1090, i64 2, !dbg !42
  %.extract339 = extractelement <4 x i32> %1090, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract333, i32 %.extract335, i32 %.extract337, i32 %.extract339, ptr addrspace(1) %999, i1 %1016) #2, !dbg !42
  %.extract341 = extractelement <4 x i32> %1099, i64 0, !dbg !42
  %.extract343 = extractelement <4 x i32> %1099, i64 1, !dbg !42
  %.extract345 = extractelement <4 x i32> %1099, i64 2, !dbg !42
  %.extract347 = extractelement <4 x i32> %1099, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract341, i32 %.extract343, i32 %.extract345, i32 %.extract347, ptr addrspace(1) %1000, i1 %1017) #2, !dbg !42
  %.extract349 = extractelement <4 x i32> %1100, i64 0, !dbg !42
  %.extract351 = extractelement <4 x i32> %1100, i64 1, !dbg !42
  %.extract353 = extractelement <4 x i32> %1100, i64 2, !dbg !42
  %.extract355 = extractelement <4 x i32> %1100, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract349, i32 %.extract351, i32 %.extract353, i32 %.extract355, ptr addrspace(1) %1001, i1 %1018) #2, !dbg !42
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "gated_mlp.py", directory: "/home/ubuntu/anjiang/PTX_dataset/triton_ptx")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !1, file: !1, line: 68, type: !6, scopeLine: 68, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 91, column: 24, scope: !5)
!9 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !12)
!10 = distinct !DILexicalBlockFile(scope: !5, file: !11, discriminator: 0)
!11 = !DIFile(filename: "standard.py", directory: "/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language")
!12 = !DILocation(line: 93, column: 27, scope: !5)
!13 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !12)
!14 = !DILocation(line: 94, column: 38, scope: !5)
!15 = !DILocation(line: 95, column: 22, scope: !5)
!16 = !DILocation(line: 96, column: 29, scope: !5)
!17 = !DILocation(line: 97, column: 35, scope: !5)
!18 = !DILocation(line: 97, column: 48, scope: !5)
!19 = !DILocation(line: 98, column: 34, scope: !5)
!20 = !DILocation(line: 99, column: 40, scope: !5)
!21 = !DILocation(line: 109, column: 23, scope: !5)
!22 = !DILocation(line: 109, column: 51, scope: !5)
!23 = !DILocation(line: 109, column: 38, scope: !5)
!24 = !DILocation(line: 109, column: 68, scope: !5)
!25 = !DILocation(line: 110, column: 26, scope: !5)
!26 = !DILocation(line: 111, column: 22, scope: !5)
!27 = !DILocation(line: 112, column: 40, scope: !5)
!28 = !DILocation(line: 112, column: 52, scope: !5)
!29 = !DILocation(line: 112, column: 22, scope: !5)
!30 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !31)
!31 = !DILocation(line: 120, column: 33, scope: !5)
!32 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !31)
!33 = !DILocation(line: 129, column: 33, scope: !5)
!34 = !DILocation(line: 120, column: 22, scope: !5)
!35 = !DILocation(line: 123, column: 51, scope: !5)
!36 = !DILocation(line: 123, column: 20, scope: !5)
!37 = !DILocation(line: 124, column: 51, scope: !5)
!38 = !DILocation(line: 124, column: 20, scope: !5)
!39 = !DILocation(line: 128, column: 18, scope: !5)
!40 = !DILocation(line: 129, column: 18, scope: !5)
!41 = !DILocation(line: 123, column: 55, scope: !5)
!42 = !DILocation(line: 142, column: 21, scope: !5)
!43 = !DILocation(line: 126, column: 35, scope: !5)
!44 = !DILocation(line: 134, column: 23, scope: !5)
!45 = !DILocation(line: 98, column: 54, scope: !5)
!46 = !DILocation(line: 98, column: 27, scope: !5)
!47 = !DILocation(line: 138, column: 22, scope: !5)
!48 = !DILocation(line: 138, column: 37, scope: !5)
!49 = !DILocation(line: 140, column: 33, scope: !5)
!50 = !DILocation(line: 140, column: 21, scope: !5)
!51 = !DILocation(line: 140, column: 52, scope: !5)
!52 = !DILocation(line: 141, column: 33, scope: !5)
!53 = !DILocation(line: 141, column: 58, scope: !5)
!54 = !DILocation(line: 141, column: 39, scope: !5)
!55 = !DILocation(line: 142, column: 4, scope: !5)
