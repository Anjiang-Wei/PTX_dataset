; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @matmul_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = add i32 %3, 31, !dbg !9
  %12 = sdiv i32 %11, 32, !dbg !13
  %13 = shl nsw i32 %12, 3, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %14 = sdiv i32 %10, %.frozen, !dbg !15
  %15 = shl i32 %14, 3, !dbg !16
  %16 = sub i32 1, %15, !dbg !17
  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 8), !dbg !18
  %18 = mul i32 %14, %.frozen, !dbg !19
  %.decomposed = sub i32 %10, %18, !dbg !19
  %19 = sdiv i32 %.decomposed, %17, !dbg !20
  %20 = shl i32 %19, 5, !dbg !21
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !22
  %22 = shl nuw nsw i32 %21, 3, !dbg !22
  %23 = and i32 %22, 24, !dbg !22
  %24 = or disjoint i32 %20, %23, !dbg !23
  %25 = srem i32 %24, %3, !dbg !24
  %26 = and i32 %21, 4, !dbg !25
  %27 = shl nuw nsw i32 %26, 3, !dbg !25
  %28 = or disjoint i32 %23, %27, !dbg !25
  %29 = zext nneg i32 %28 to i64, !dbg !26
  %30 = getelementptr half, ptr addrspace(1) %0, i64 %29, !dbg !26
  %31 = and i32 %21, 8, !dbg !27
  %32 = and i32 %21, 16, !dbg !27
  %33 = and i32 %21, 32, !dbg !27
  %34 = and i32 %21, 64, !dbg !27
  %35 = lshr i32 %21, 2, !dbg !27
  %36 = and i32 %35, 31, !dbg !27
  %37 = or disjoint i32 %36, 32, !dbg !27
  %38 = mul i32 %6, %36, !dbg !28
  %39 = mul i32 %6, %37, !dbg !28
  %40 = add i32 %25, %38, !dbg !29
  %41 = add i32 %25, %39, !dbg !29
  %42 = sext i32 %40 to i64, !dbg !30
  %43 = getelementptr half, ptr addrspace(1) %1, i64 %42, !dbg !30
  %44 = sext i32 %41 to i64, !dbg !30
  %45 = getelementptr half, ptr addrspace(1) %1, i64 %44, !dbg !30
  %46 = add i32 %4, 63, !dbg !31
  %47 = sdiv i32 %46, 64, !dbg !33
  %48 = shl i32 %6, 6, !dbg !34
  %49 = icmp sgt i32 %46, 63, !dbg !35
  %50 = icmp slt i32 %28, %4, !dbg !36
  %51 = and i1 %50, %49, !dbg !35
  %and.ra244 = and i32 %21, 56, !dbg !37
  %52 = xor i32 %28, %and.ra244, !dbg !37
  %53 = and i32 %22, 960, !dbg !37
  %54 = or disjoint i32 %52, %53, !dbg !37
  %55 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %54, !dbg !37
  %56 = or disjoint i32 %54, 1024, !dbg !37
  %57 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %56, !dbg !37
  %58 = or disjoint i32 %54, 2048, !dbg !37
  %59 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %58, !dbg !37
  %60 = or disjoint i32 %54, 3072, !dbg !37
  %61 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %60, !dbg !37
  %62 = or disjoint i32 %54, 4096, !dbg !37
  %63 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %62, !dbg !37
  %64 = or disjoint i32 %54, 5120, !dbg !37
  %65 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %64, !dbg !37
  %66 = or disjoint i32 %54, 6144, !dbg !37
  %67 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %66, !dbg !37
  %68 = or disjoint i32 %54, 7168, !dbg !37
  %69 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %68, !dbg !37
  %70 = select i1 %51, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %55, ptr addrspace(1) %30, i32 %70) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %57, ptr addrspace(1) %30, i32 %70) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %59, ptr addrspace(1) %30, i32 %70) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %61, ptr addrspace(1) %30, i32 %70) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %63, ptr addrspace(1) %30, i32 %70) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %65, ptr addrspace(1) %30, i32 %70) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %67, ptr addrspace(1) %30, i32 %70) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %69, ptr addrspace(1) %30, i32 %70) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %71 = icmp slt i32 %36, %4, !dbg !38
  %72 = icmp slt i32 %37, %4, !dbg !38
  %73 = and i1 %71, %49, !dbg !35
  %74 = and i1 %72, %49, !dbg !35
  %75 = xor i32 %22, %21, !dbg !39
  %76 = and i32 %75, 24, !dbg !39
  %77 = shl nuw nsw i32 %36, 5, !dbg !39
  %78 = or disjoint i32 %77, %76, !dbg !39
  %79 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %78, !dbg !39
  %80 = or disjoint i32 %78, 1024, !dbg !39
  %81 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %80, !dbg !39
  %82 = select i1 %73, i32 16, i32 0, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %79, ptr addrspace(1) %43, i32 %82) #2, !dbg !39
  %83 = select i1 %74, i32 16, i32 0, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %81, ptr addrspace(1) %45, i32 %83) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %84 = icmp sgt i32 %46, 127, !dbg !35
  %85 = getelementptr i8, ptr addrspace(1) %30, i64 128, !dbg !40
  %86 = sext i32 %48 to i64, !dbg !41
  %87 = getelementptr half, ptr addrspace(1) %43, i64 %86, !dbg !41
  %88 = getelementptr half, ptr addrspace(1) %45, i64 %86, !dbg !41
  %89 = add i32 %4, -64, !dbg !42
  %90 = icmp slt i32 %28, %89, !dbg !36
  %91 = and i1 %84, %90, !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  %92 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %54, !dbg !37
  %93 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %56, !dbg !37
  %94 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %58, !dbg !37
  %95 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %60, !dbg !37
  %96 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %62, !dbg !37
  %97 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %64, !dbg !37
  %98 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %66, !dbg !37
  %99 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %68, !dbg !37
  %100 = select i1 %91, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %92, ptr addrspace(1) %85, i32 %100) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %93, ptr addrspace(1) %85, i32 %100) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %94, ptr addrspace(1) %85, i32 %100) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %95, ptr addrspace(1) %85, i32 %100) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %96, ptr addrspace(1) %85, i32 %100) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %97, ptr addrspace(1) %85, i32 %100) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %98, ptr addrspace(1) %85, i32 %100) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %99, ptr addrspace(1) %85, i32 %100) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %101 = icmp slt i32 %36, %89, !dbg !38
  %102 = icmp slt i32 %37, %89, !dbg !38
  %103 = and i1 %84, %101, !dbg !35
  %104 = and i1 %84, %102, !dbg !35
  %105 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 53248), i32 %78, !dbg !39
  %106 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 53248), i32 %80, !dbg !39
  %107 = select i1 %103, i32 16, i32 0, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %105, ptr addrspace(1) %87, i32 %107) #2, !dbg !39
  %108 = select i1 %104, i32 16, i32 0, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %106, ptr addrspace(1) %88, i32 %108) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %109 = icmp sgt i32 %46, 191, !dbg !35
  %110 = getelementptr i8, ptr addrspace(1) %30, i64 256, !dbg !40
  %111 = getelementptr half, ptr addrspace(1) %87, i64 %86, !dbg !41
  %112 = getelementptr half, ptr addrspace(1) %88, i64 %86, !dbg !41
  %113 = add i32 %4, -128, !dbg !42
  %114 = icmp slt i32 %28, %113, !dbg !36
  %115 = and i1 %109, %114, !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  %116 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %54, !dbg !37
  %117 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %56, !dbg !37
  %118 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %58, !dbg !37
  %119 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %60, !dbg !37
  %120 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %62, !dbg !37
  %121 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %64, !dbg !37
  %122 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %66, !dbg !37
  %123 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %68, !dbg !37
  %124 = select i1 %115, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %116, ptr addrspace(1) %110, i32 %124) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %117, ptr addrspace(1) %110, i32 %124) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %118, ptr addrspace(1) %110, i32 %124) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %119, ptr addrspace(1) %110, i32 %124) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %120, ptr addrspace(1) %110, i32 %124) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %121, ptr addrspace(1) %110, i32 %124) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %122, ptr addrspace(1) %110, i32 %124) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %123, ptr addrspace(1) %110, i32 %124) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %125 = icmp slt i32 %36, %113, !dbg !38
  %126 = icmp slt i32 %37, %113, !dbg !38
  %127 = and i1 %109, %125, !dbg !35
  %128 = and i1 %109, %126, !dbg !35
  %129 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %78, !dbg !39
  %130 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %80, !dbg !39
  %131 = select i1 %127, i32 16, i32 0, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %129, ptr addrspace(1) %111, i32 %131) #2, !dbg !39
  %132 = select i1 %128, i32 16, i32 0, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %130, ptr addrspace(1) %112, i32 %132) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  br i1 %49, label %.lr.ph, label %._crit_edge, !dbg !35

.lr.ph:                                           ; preds = %9
  %.not = icmp eq i32 %26, 0, !dbg !25
  %133 = and i32 %21, 2, !dbg !22
  %134 = icmp eq i32 %133, 0, !dbg !22
  %135 = add nsw i32 %47, -3
  %136 = and i32 %21, 3
  %137 = mul nuw nsw i32 %136, 72
  %138 = select i1 %.not, i32 0, i32 288
  %139 = xor i32 %138, %137
  %140 = shl nuw nsw i32 %31, 6
  %141 = or disjoint i32 %139, %140
  %142 = lshr exact i32 %32, 1
  %143 = xor i32 %141, %142
  %144 = shl nuw nsw i32 %33, 5
  %145 = or disjoint i32 %143, %144
  %146 = shl nuw nsw i32 %34, 5
  %147 = xor i32 %145, %146
  %148 = xor i32 %147, 16
  %149 = xor i32 %147, 32
  %150 = xor i32 %147, 48
  %151 = xor i32 %147, 4096
  %152 = xor i32 %147, 4112
  %153 = xor i32 %147, 4128
  %154 = xor i32 %147, 4144
  %155 = shl nuw nsw i32 %21, 5
  %156 = select i1 %134, i32 0, i32 72
  %157 = select i1 %.not, i32 0, i32 144
  %158 = and i32 %155, 800
  %159 = or disjoint i32 %158, %156
  %160 = or disjoint i32 %159, %157
  %161 = xor i32 %160, 8
  %162 = xor i32 %160, 1032
  %163 = xor i32 %160, 16
  %164 = xor i32 %160, 1040
  %165 = xor i32 %160, 24
  %166 = xor i32 %160, 1048
  %.neg246 = add nsw i32 %4, -192
  br label %167, !dbg !35

167:                                              ; preds = %.lr.ph, %167
  %168 = phi i32 [ -1, %.lr.ph ], [ %206, %167 ]
  %169 = phi i32 [ 2, %.lr.ph ], [ %486, %167 ]
  %.pn146256 = phi ptr addrspace(1) [ %112, %.lr.ph ], [ %483, %167 ]
  %.pn162255 = phi ptr addrspace(1) [ %111, %.lr.ph ], [ %482, %167 ]
  %.pn18254 = phi ptr addrspace(1) [ %110, %.lr.ph ], [ %481, %167 ]
  %170 = phi float [ 0.000000e+00, %.lr.ph ], [ %442, %167 ]
  %171 = phi float [ 0.000000e+00, %.lr.ph ], [ %443, %167 ]
  %172 = phi float [ 0.000000e+00, %.lr.ph ], [ %444, %167 ]
  %173 = phi float [ 0.000000e+00, %.lr.ph ], [ %445, %167 ]
  %174 = phi float [ 0.000000e+00, %.lr.ph ], [ %447, %167 ]
  %175 = phi float [ 0.000000e+00, %.lr.ph ], [ %448, %167 ]
  %176 = phi float [ 0.000000e+00, %.lr.ph ], [ %449, %167 ]
  %177 = phi float [ 0.000000e+00, %.lr.ph ], [ %450, %167 ]
  %178 = phi float [ 0.000000e+00, %.lr.ph ], [ %452, %167 ]
  %179 = phi float [ 0.000000e+00, %.lr.ph ], [ %453, %167 ]
  %180 = phi float [ 0.000000e+00, %.lr.ph ], [ %454, %167 ]
  %181 = phi float [ 0.000000e+00, %.lr.ph ], [ %455, %167 ]
  %182 = phi float [ 0.000000e+00, %.lr.ph ], [ %457, %167 ]
  %183 = phi float [ 0.000000e+00, %.lr.ph ], [ %458, %167 ]
  %184 = phi float [ 0.000000e+00, %.lr.ph ], [ %459, %167 ]
  %185 = phi float [ 0.000000e+00, %.lr.ph ], [ %460, %167 ]
  %186 = phi float [ 0.000000e+00, %.lr.ph ], [ %462, %167 ]
  %187 = phi float [ 0.000000e+00, %.lr.ph ], [ %463, %167 ]
  %188 = phi float [ 0.000000e+00, %.lr.ph ], [ %464, %167 ]
  %189 = phi float [ 0.000000e+00, %.lr.ph ], [ %465, %167 ]
  %190 = phi float [ 0.000000e+00, %.lr.ph ], [ %467, %167 ]
  %191 = phi float [ 0.000000e+00, %.lr.ph ], [ %468, %167 ]
  %192 = phi float [ 0.000000e+00, %.lr.ph ], [ %469, %167 ]
  %193 = phi float [ 0.000000e+00, %.lr.ph ], [ %470, %167 ]
  %194 = phi float [ 0.000000e+00, %.lr.ph ], [ %472, %167 ]
  %195 = phi float [ 0.000000e+00, %.lr.ph ], [ %473, %167 ]
  %196 = phi float [ 0.000000e+00, %.lr.ph ], [ %474, %167 ]
  %197 = phi float [ 0.000000e+00, %.lr.ph ], [ %475, %167 ]
  %198 = phi float [ 0.000000e+00, %.lr.ph ], [ %477, %167 ]
  %199 = phi float [ 0.000000e+00, %.lr.ph ], [ %478, %167 ]
  %200 = phi float [ 0.000000e+00, %.lr.ph ], [ %479, %167 ]
  %201 = phi float [ 0.000000e+00, %.lr.ph ], [ %480, %167 ]
  %202 = phi i32 [ 0, %.lr.ph ], [ %510, %167 ]
  %203 = icmp slt i32 %202, %135, !dbg !35
  %204 = add i32 %168, 1, !dbg !35
  %205 = icmp sgt i32 %204, 2, !dbg !35
  %206 = select i1 %205, i32 0, i32 %204, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 4), !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  %.idx = shl i32 %206, 14, !dbg !37
  %207 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !37
  %208 = getelementptr inbounds nuw half, ptr addrspace(3) %207, i32 %147, !dbg !37
  %209 = ptrtoint ptr addrspace(3) %208 to i32, !dbg !37
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %209) #2, !dbg !37
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !37
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !37
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !37
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !37
  %215 = getelementptr inbounds nuw half, ptr addrspace(3) %207, i32 %148, !dbg !37
  %216 = ptrtoint ptr addrspace(3) %215 to i32, !dbg !37
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %216) #2, !dbg !37
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !37
  %219 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !37
  %220 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !37
  %221 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !37
  %222 = getelementptr inbounds nuw half, ptr addrspace(3) %207, i32 %149, !dbg !37
  %223 = ptrtoint ptr addrspace(3) %222 to i32, !dbg !37
  %224 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %223) #2, !dbg !37
  %225 = extractvalue { i32, i32, i32, i32 } %224, 0, !dbg !37
  %226 = extractvalue { i32, i32, i32, i32 } %224, 1, !dbg !37
  %227 = extractvalue { i32, i32, i32, i32 } %224, 2, !dbg !37
  %228 = extractvalue { i32, i32, i32, i32 } %224, 3, !dbg !37
  %229 = getelementptr inbounds nuw half, ptr addrspace(3) %207, i32 %150, !dbg !37
  %230 = ptrtoint ptr addrspace(3) %229 to i32, !dbg !37
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %230) #2, !dbg !37
  %232 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !37
  %233 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !37
  %234 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !37
  %235 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !37
  %236 = getelementptr inbounds nuw half, ptr addrspace(3) %207, i32 %151, !dbg !37
  %237 = ptrtoint ptr addrspace(3) %236 to i32, !dbg !37
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %237) #2, !dbg !37
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !37
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !37
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !37
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !37
  %243 = getelementptr inbounds nuw half, ptr addrspace(3) %207, i32 %152, !dbg !37
  %244 = ptrtoint ptr addrspace(3) %243 to i32, !dbg !37
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %244) #2, !dbg !37
  %246 = extractvalue { i32, i32, i32, i32 } %245, 0, !dbg !37
  %247 = extractvalue { i32, i32, i32, i32 } %245, 1, !dbg !37
  %248 = extractvalue { i32, i32, i32, i32 } %245, 2, !dbg !37
  %249 = extractvalue { i32, i32, i32, i32 } %245, 3, !dbg !37
  %250 = getelementptr inbounds nuw half, ptr addrspace(3) %207, i32 %153, !dbg !37
  %251 = ptrtoint ptr addrspace(3) %250 to i32, !dbg !37
  %252 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %251) #2, !dbg !37
  %253 = extractvalue { i32, i32, i32, i32 } %252, 0, !dbg !37
  %254 = extractvalue { i32, i32, i32, i32 } %252, 1, !dbg !37
  %255 = extractvalue { i32, i32, i32, i32 } %252, 2, !dbg !37
  %256 = extractvalue { i32, i32, i32, i32 } %252, 3, !dbg !37
  %257 = getelementptr inbounds nuw half, ptr addrspace(3) %207, i32 %154, !dbg !37
  %258 = ptrtoint ptr addrspace(3) %257 to i32, !dbg !37
  %259 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %258) #2, !dbg !37
  %260 = extractvalue { i32, i32, i32, i32 } %259, 0, !dbg !37
  %261 = extractvalue { i32, i32, i32, i32 } %259, 1, !dbg !37
  %262 = extractvalue { i32, i32, i32, i32 } %259, 2, !dbg !37
  %263 = extractvalue { i32, i32, i32, i32 } %259, 3, !dbg !37
  %.idx209 = shl i32 %206, 12, !dbg !39
  %264 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %.idx209, !dbg !39
  %265 = getelementptr inbounds nuw half, ptr addrspace(3) %264, i32 %160, !dbg !39
  %266 = ptrtoint ptr addrspace(3) %265 to i32, !dbg !39
  %267 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %266) #2, !dbg !39
  %268 = extractvalue { i32, i32, i32, i32 } %267, 0, !dbg !39
  %269 = extractvalue { i32, i32, i32, i32 } %267, 1, !dbg !39
  %270 = extractvalue { i32, i32, i32, i32 } %267, 2, !dbg !39
  %271 = extractvalue { i32, i32, i32, i32 } %267, 3, !dbg !39
  %272 = getelementptr inbounds nuw i8, ptr addrspace(3) %265, i32 2048, !dbg !39
  %273 = ptrtoint ptr addrspace(3) %272 to i32, !dbg !39
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %273) #2, !dbg !39
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !39
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !39
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !39
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !39
  %279 = getelementptr inbounds nuw half, ptr addrspace(3) %264, i32 %161, !dbg !39
  %280 = ptrtoint ptr addrspace(3) %279 to i32, !dbg !39
  %281 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %280) #2, !dbg !39
  %282 = extractvalue { i32, i32, i32, i32 } %281, 0, !dbg !39
  %283 = extractvalue { i32, i32, i32, i32 } %281, 1, !dbg !39
  %284 = extractvalue { i32, i32, i32, i32 } %281, 2, !dbg !39
  %285 = extractvalue { i32, i32, i32, i32 } %281, 3, !dbg !39
  %286 = getelementptr inbounds nuw half, ptr addrspace(3) %264, i32 %162, !dbg !39
  %287 = ptrtoint ptr addrspace(3) %286 to i32, !dbg !39
  %288 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %287) #2, !dbg !39
  %289 = extractvalue { i32, i32, i32, i32 } %288, 0, !dbg !39
  %290 = extractvalue { i32, i32, i32, i32 } %288, 1, !dbg !39
  %291 = extractvalue { i32, i32, i32, i32 } %288, 2, !dbg !39
  %292 = extractvalue { i32, i32, i32, i32 } %288, 3, !dbg !39
  %293 = getelementptr inbounds nuw half, ptr addrspace(3) %264, i32 %163, !dbg !39
  %294 = ptrtoint ptr addrspace(3) %293 to i32, !dbg !39
  %295 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %294) #2, !dbg !39
  %296 = extractvalue { i32, i32, i32, i32 } %295, 0, !dbg !39
  %297 = extractvalue { i32, i32, i32, i32 } %295, 1, !dbg !39
  %298 = extractvalue { i32, i32, i32, i32 } %295, 2, !dbg !39
  %299 = extractvalue { i32, i32, i32, i32 } %295, 3, !dbg !39
  %300 = getelementptr inbounds nuw half, ptr addrspace(3) %264, i32 %164, !dbg !39
  %301 = ptrtoint ptr addrspace(3) %300 to i32, !dbg !39
  %302 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %301) #2, !dbg !39
  %303 = extractvalue { i32, i32, i32, i32 } %302, 0, !dbg !39
  %304 = extractvalue { i32, i32, i32, i32 } %302, 1, !dbg !39
  %305 = extractvalue { i32, i32, i32, i32 } %302, 2, !dbg !39
  %306 = extractvalue { i32, i32, i32, i32 } %302, 3, !dbg !39
  %307 = getelementptr inbounds nuw half, ptr addrspace(3) %264, i32 %165, !dbg !39
  %308 = ptrtoint ptr addrspace(3) %307 to i32, !dbg !39
  %309 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %308) #2, !dbg !39
  %310 = extractvalue { i32, i32, i32, i32 } %309, 0, !dbg !39
  %311 = extractvalue { i32, i32, i32, i32 } %309, 1, !dbg !39
  %312 = extractvalue { i32, i32, i32, i32 } %309, 2, !dbg !39
  %313 = extractvalue { i32, i32, i32, i32 } %309, 3, !dbg !39
  %314 = getelementptr inbounds nuw half, ptr addrspace(3) %264, i32 %166, !dbg !39
  %315 = ptrtoint ptr addrspace(3) %314 to i32, !dbg !39
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %315) #2, !dbg !39
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !39
  %318 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !39
  %319 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !39
  %320 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !39
  %321 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %170, float %171, float %172, float %173, i32 %211, i32 %212, i32 %213, i32 %214, i32 %268, i32 %269) #2, !dbg !43
  %322 = extractvalue { float, float, float, float } %321, 0, !dbg !43
  %323 = extractvalue { float, float, float, float } %321, 1, !dbg !43
  %324 = extractvalue { float, float, float, float } %321, 2, !dbg !43
  %325 = extractvalue { float, float, float, float } %321, 3, !dbg !43
  %326 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %174, float %175, float %176, float %177, i32 %211, i32 %212, i32 %213, i32 %214, i32 %282, i32 %283) #2, !dbg !43
  %327 = extractvalue { float, float, float, float } %326, 0, !dbg !43
  %328 = extractvalue { float, float, float, float } %326, 1, !dbg !43
  %329 = extractvalue { float, float, float, float } %326, 2, !dbg !43
  %330 = extractvalue { float, float, float, float } %326, 3, !dbg !43
  %331 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %178, float %179, float %180, float %181, i32 %211, i32 %212, i32 %213, i32 %214, i32 %296, i32 %297) #2, !dbg !43
  %332 = extractvalue { float, float, float, float } %331, 0, !dbg !43
  %333 = extractvalue { float, float, float, float } %331, 1, !dbg !43
  %334 = extractvalue { float, float, float, float } %331, 2, !dbg !43
  %335 = extractvalue { float, float, float, float } %331, 3, !dbg !43
  %336 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %182, float %183, float %184, float %185, i32 %211, i32 %212, i32 %213, i32 %214, i32 %310, i32 %311) #2, !dbg !43
  %337 = extractvalue { float, float, float, float } %336, 0, !dbg !43
  %338 = extractvalue { float, float, float, float } %336, 1, !dbg !43
  %339 = extractvalue { float, float, float, float } %336, 2, !dbg !43
  %340 = extractvalue { float, float, float, float } %336, 3, !dbg !43
  %341 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %186, float %187, float %188, float %189, i32 %239, i32 %240, i32 %241, i32 %242, i32 %268, i32 %269) #2, !dbg !43
  %342 = extractvalue { float, float, float, float } %341, 0, !dbg !43
  %343 = extractvalue { float, float, float, float } %341, 1, !dbg !43
  %344 = extractvalue { float, float, float, float } %341, 2, !dbg !43
  %345 = extractvalue { float, float, float, float } %341, 3, !dbg !43
  %346 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %190, float %191, float %192, float %193, i32 %239, i32 %240, i32 %241, i32 %242, i32 %282, i32 %283) #2, !dbg !43
  %347 = extractvalue { float, float, float, float } %346, 0, !dbg !43
  %348 = extractvalue { float, float, float, float } %346, 1, !dbg !43
  %349 = extractvalue { float, float, float, float } %346, 2, !dbg !43
  %350 = extractvalue { float, float, float, float } %346, 3, !dbg !43
  %351 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %194, float %195, float %196, float %197, i32 %239, i32 %240, i32 %241, i32 %242, i32 %296, i32 %297) #2, !dbg !43
  %352 = extractvalue { float, float, float, float } %351, 0, !dbg !43
  %353 = extractvalue { float, float, float, float } %351, 1, !dbg !43
  %354 = extractvalue { float, float, float, float } %351, 2, !dbg !43
  %355 = extractvalue { float, float, float, float } %351, 3, !dbg !43
  %356 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %198, float %199, float %200, float %201, i32 %239, i32 %240, i32 %241, i32 %242, i32 %310, i32 %311) #2, !dbg !43
  %357 = extractvalue { float, float, float, float } %356, 0, !dbg !43
  %358 = extractvalue { float, float, float, float } %356, 1, !dbg !43
  %359 = extractvalue { float, float, float, float } %356, 2, !dbg !43
  %360 = extractvalue { float, float, float, float } %356, 3, !dbg !43
  %361 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %322, float %323, float %324, float %325, i32 %218, i32 %219, i32 %220, i32 %221, i32 %270, i32 %271) #2, !dbg !43
  %362 = extractvalue { float, float, float, float } %361, 0, !dbg !43
  %363 = extractvalue { float, float, float, float } %361, 1, !dbg !43
  %364 = extractvalue { float, float, float, float } %361, 2, !dbg !43
  %365 = extractvalue { float, float, float, float } %361, 3, !dbg !43
  %366 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %327, float %328, float %329, float %330, i32 %218, i32 %219, i32 %220, i32 %221, i32 %284, i32 %285) #2, !dbg !43
  %367 = extractvalue { float, float, float, float } %366, 0, !dbg !43
  %368 = extractvalue { float, float, float, float } %366, 1, !dbg !43
  %369 = extractvalue { float, float, float, float } %366, 2, !dbg !43
  %370 = extractvalue { float, float, float, float } %366, 3, !dbg !43
  %371 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %332, float %333, float %334, float %335, i32 %218, i32 %219, i32 %220, i32 %221, i32 %298, i32 %299) #2, !dbg !43
  %372 = extractvalue { float, float, float, float } %371, 0, !dbg !43
  %373 = extractvalue { float, float, float, float } %371, 1, !dbg !43
  %374 = extractvalue { float, float, float, float } %371, 2, !dbg !43
  %375 = extractvalue { float, float, float, float } %371, 3, !dbg !43
  %376 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %337, float %338, float %339, float %340, i32 %218, i32 %219, i32 %220, i32 %221, i32 %312, i32 %313) #2, !dbg !43
  %377 = extractvalue { float, float, float, float } %376, 0, !dbg !43
  %378 = extractvalue { float, float, float, float } %376, 1, !dbg !43
  %379 = extractvalue { float, float, float, float } %376, 2, !dbg !43
  %380 = extractvalue { float, float, float, float } %376, 3, !dbg !43
  %381 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %342, float %343, float %344, float %345, i32 %246, i32 %247, i32 %248, i32 %249, i32 %270, i32 %271) #2, !dbg !43
  %382 = extractvalue { float, float, float, float } %381, 0, !dbg !43
  %383 = extractvalue { float, float, float, float } %381, 1, !dbg !43
  %384 = extractvalue { float, float, float, float } %381, 2, !dbg !43
  %385 = extractvalue { float, float, float, float } %381, 3, !dbg !43
  %386 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %347, float %348, float %349, float %350, i32 %246, i32 %247, i32 %248, i32 %249, i32 %284, i32 %285) #2, !dbg !43
  %387 = extractvalue { float, float, float, float } %386, 0, !dbg !43
  %388 = extractvalue { float, float, float, float } %386, 1, !dbg !43
  %389 = extractvalue { float, float, float, float } %386, 2, !dbg !43
  %390 = extractvalue { float, float, float, float } %386, 3, !dbg !43
  %391 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %352, float %353, float %354, float %355, i32 %246, i32 %247, i32 %248, i32 %249, i32 %298, i32 %299) #2, !dbg !43
  %392 = extractvalue { float, float, float, float } %391, 0, !dbg !43
  %393 = extractvalue { float, float, float, float } %391, 1, !dbg !43
  %394 = extractvalue { float, float, float, float } %391, 2, !dbg !43
  %395 = extractvalue { float, float, float, float } %391, 3, !dbg !43
  %396 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %357, float %358, float %359, float %360, i32 %246, i32 %247, i32 %248, i32 %249, i32 %312, i32 %313) #2, !dbg !43
  %397 = extractvalue { float, float, float, float } %396, 0, !dbg !43
  %398 = extractvalue { float, float, float, float } %396, 1, !dbg !43
  %399 = extractvalue { float, float, float, float } %396, 2, !dbg !43
  %400 = extractvalue { float, float, float, float } %396, 3, !dbg !43
  %401 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %362, float %363, float %364, float %365, i32 %225, i32 %226, i32 %227, i32 %228, i32 %275, i32 %276) #2, !dbg !43
  %402 = extractvalue { float, float, float, float } %401, 0, !dbg !43
  %403 = extractvalue { float, float, float, float } %401, 1, !dbg !43
  %404 = extractvalue { float, float, float, float } %401, 2, !dbg !43
  %405 = extractvalue { float, float, float, float } %401, 3, !dbg !43
  %406 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %367, float %368, float %369, float %370, i32 %225, i32 %226, i32 %227, i32 %228, i32 %289, i32 %290) #2, !dbg !43
  %407 = extractvalue { float, float, float, float } %406, 0, !dbg !43
  %408 = extractvalue { float, float, float, float } %406, 1, !dbg !43
  %409 = extractvalue { float, float, float, float } %406, 2, !dbg !43
  %410 = extractvalue { float, float, float, float } %406, 3, !dbg !43
  %411 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %372, float %373, float %374, float %375, i32 %225, i32 %226, i32 %227, i32 %228, i32 %303, i32 %304) #2, !dbg !43
  %412 = extractvalue { float, float, float, float } %411, 0, !dbg !43
  %413 = extractvalue { float, float, float, float } %411, 1, !dbg !43
  %414 = extractvalue { float, float, float, float } %411, 2, !dbg !43
  %415 = extractvalue { float, float, float, float } %411, 3, !dbg !43
  %416 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %377, float %378, float %379, float %380, i32 %225, i32 %226, i32 %227, i32 %228, i32 %317, i32 %318) #2, !dbg !43
  %417 = extractvalue { float, float, float, float } %416, 0, !dbg !43
  %418 = extractvalue { float, float, float, float } %416, 1, !dbg !43
  %419 = extractvalue { float, float, float, float } %416, 2, !dbg !43
  %420 = extractvalue { float, float, float, float } %416, 3, !dbg !43
  %421 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %382, float %383, float %384, float %385, i32 %253, i32 %254, i32 %255, i32 %256, i32 %275, i32 %276) #2, !dbg !43
  %422 = extractvalue { float, float, float, float } %421, 0, !dbg !43
  %423 = extractvalue { float, float, float, float } %421, 1, !dbg !43
  %424 = extractvalue { float, float, float, float } %421, 2, !dbg !43
  %425 = extractvalue { float, float, float, float } %421, 3, !dbg !43
  %426 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %387, float %388, float %389, float %390, i32 %253, i32 %254, i32 %255, i32 %256, i32 %289, i32 %290) #2, !dbg !43
  %427 = extractvalue { float, float, float, float } %426, 0, !dbg !43
  %428 = extractvalue { float, float, float, float } %426, 1, !dbg !43
  %429 = extractvalue { float, float, float, float } %426, 2, !dbg !43
  %430 = extractvalue { float, float, float, float } %426, 3, !dbg !43
  %431 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %392, float %393, float %394, float %395, i32 %253, i32 %254, i32 %255, i32 %256, i32 %303, i32 %304) #2, !dbg !43
  %432 = extractvalue { float, float, float, float } %431, 0, !dbg !43
  %433 = extractvalue { float, float, float, float } %431, 1, !dbg !43
  %434 = extractvalue { float, float, float, float } %431, 2, !dbg !43
  %435 = extractvalue { float, float, float, float } %431, 3, !dbg !43
  %436 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %397, float %398, float %399, float %400, i32 %253, i32 %254, i32 %255, i32 %256, i32 %317, i32 %318) #2, !dbg !43
  %437 = extractvalue { float, float, float, float } %436, 0, !dbg !43
  %438 = extractvalue { float, float, float, float } %436, 1, !dbg !43
  %439 = extractvalue { float, float, float, float } %436, 2, !dbg !43
  %440 = extractvalue { float, float, float, float } %436, 3, !dbg !43
  %441 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %402, float %403, float %404, float %405, i32 %232, i32 %233, i32 %234, i32 %235, i32 %277, i32 %278) #2, !dbg !43
  %442 = extractvalue { float, float, float, float } %441, 0, !dbg !43
  %443 = extractvalue { float, float, float, float } %441, 1, !dbg !43
  %444 = extractvalue { float, float, float, float } %441, 2, !dbg !43
  %445 = extractvalue { float, float, float, float } %441, 3, !dbg !43
  %446 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %407, float %408, float %409, float %410, i32 %232, i32 %233, i32 %234, i32 %235, i32 %291, i32 %292) #2, !dbg !43
  %447 = extractvalue { float, float, float, float } %446, 0, !dbg !43
  %448 = extractvalue { float, float, float, float } %446, 1, !dbg !43
  %449 = extractvalue { float, float, float, float } %446, 2, !dbg !43
  %450 = extractvalue { float, float, float, float } %446, 3, !dbg !43
  %451 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %412, float %413, float %414, float %415, i32 %232, i32 %233, i32 %234, i32 %235, i32 %305, i32 %306) #2, !dbg !43
  %452 = extractvalue { float, float, float, float } %451, 0, !dbg !43
  %453 = extractvalue { float, float, float, float } %451, 1, !dbg !43
  %454 = extractvalue { float, float, float, float } %451, 2, !dbg !43
  %455 = extractvalue { float, float, float, float } %451, 3, !dbg !43
  %456 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %417, float %418, float %419, float %420, i32 %232, i32 %233, i32 %234, i32 %235, i32 %319, i32 %320) #2, !dbg !43
  %457 = extractvalue { float, float, float, float } %456, 0, !dbg !43
  %458 = extractvalue { float, float, float, float } %456, 1, !dbg !43
  %459 = extractvalue { float, float, float, float } %456, 2, !dbg !43
  %460 = extractvalue { float, float, float, float } %456, 3, !dbg !43
  %461 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %422, float %423, float %424, float %425, i32 %260, i32 %261, i32 %262, i32 %263, i32 %277, i32 %278) #2, !dbg !43
  %462 = extractvalue { float, float, float, float } %461, 0, !dbg !43
  %463 = extractvalue { float, float, float, float } %461, 1, !dbg !43
  %464 = extractvalue { float, float, float, float } %461, 2, !dbg !43
  %465 = extractvalue { float, float, float, float } %461, 3, !dbg !43
  %466 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %427, float %428, float %429, float %430, i32 %260, i32 %261, i32 %262, i32 %263, i32 %291, i32 %292) #2, !dbg !43
  %467 = extractvalue { float, float, float, float } %466, 0, !dbg !43
  %468 = extractvalue { float, float, float, float } %466, 1, !dbg !43
  %469 = extractvalue { float, float, float, float } %466, 2, !dbg !43
  %470 = extractvalue { float, float, float, float } %466, 3, !dbg !43
  %471 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %432, float %433, float %434, float %435, i32 %260, i32 %261, i32 %262, i32 %263, i32 %305, i32 %306) #2, !dbg !43
  %472 = extractvalue { float, float, float, float } %471, 0, !dbg !43
  %473 = extractvalue { float, float, float, float } %471, 1, !dbg !43
  %474 = extractvalue { float, float, float, float } %471, 2, !dbg !43
  %475 = extractvalue { float, float, float, float } %471, 3, !dbg !43
  %476 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %437, float %438, float %439, float %440, i32 %260, i32 %261, i32 %262, i32 %263, i32 %319, i32 %320) #2, !dbg !43
  %477 = extractvalue { float, float, float, float } %476, 0, !dbg !43
  %478 = extractvalue { float, float, float, float } %476, 1, !dbg !43
  %479 = extractvalue { float, float, float, float } %476, 2, !dbg !43
  %480 = extractvalue { float, float, float, float } %476, 3, !dbg !43
  %481 = getelementptr i8, ptr addrspace(1) %.pn18254, i64 128, !dbg !40
  %482 = getelementptr half, ptr addrspace(1) %.pn162255, i64 %86, !dbg !41
  %483 = getelementptr half, ptr addrspace(1) %.pn146256, i64 %86, !dbg !41
  %484 = add i32 %169, 1, !dbg !35
  %485 = icmp sgt i32 %484, 2, !dbg !35
  %486 = select i1 %485, i32 0, i32 %484, !dbg !35
  %487 = shl i32 %202, 6, !dbg !42
  %488 = sub i32 %.neg246, %487, !dbg !42
  %489 = icmp slt i32 %28, %488, !dbg !36
  %.idx210 = shl i32 %486, 14, !dbg !37
  %490 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx210, !dbg !37
  %491 = and i1 %203, %489, !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  %492 = getelementptr inbounds nuw half, ptr addrspace(3) %490, i32 %54, !dbg !37
  %493 = getelementptr inbounds nuw half, ptr addrspace(3) %490, i32 %56, !dbg !37
  %494 = getelementptr inbounds nuw half, ptr addrspace(3) %490, i32 %58, !dbg !37
  %495 = getelementptr inbounds nuw half, ptr addrspace(3) %490, i32 %60, !dbg !37
  %496 = getelementptr inbounds nuw half, ptr addrspace(3) %490, i32 %62, !dbg !37
  %497 = getelementptr inbounds nuw half, ptr addrspace(3) %490, i32 %64, !dbg !37
  %498 = getelementptr inbounds nuw half, ptr addrspace(3) %490, i32 %66, !dbg !37
  %499 = getelementptr inbounds nuw half, ptr addrspace(3) %490, i32 %68, !dbg !37
  %500 = select i1 %491, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %492, ptr addrspace(1) %481, i32 %500) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %493, ptr addrspace(1) %481, i32 %500) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %494, ptr addrspace(1) %481, i32 %500) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %495, ptr addrspace(1) %481, i32 %500) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %496, ptr addrspace(1) %481, i32 %500) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %497, ptr addrspace(1) %481, i32 %500) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %498, ptr addrspace(1) %481, i32 %500) #2, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %499, ptr addrspace(1) %481, i32 %500) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %501 = icmp slt i32 %36, %488, !dbg !38
  %502 = icmp slt i32 %37, %488, !dbg !38
  %.idx211 = shl i32 %486, 12, !dbg !39
  %503 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %.idx211, !dbg !39
  %504 = and i1 %203, %501, !dbg !35
  %505 = and i1 %203, %502, !dbg !35
  %506 = getelementptr inbounds nuw half, ptr addrspace(3) %503, i32 %78, !dbg !39
  %507 = getelementptr inbounds nuw half, ptr addrspace(3) %503, i32 %80, !dbg !39
  %508 = select i1 %504, i32 16, i32 0, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %506, ptr addrspace(1) %482, i32 %508) #2, !dbg !39
  %509 = select i1 %505, i32 16, i32 0, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %507, ptr addrspace(1) %483, i32 %509) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %510 = add nuw nsw i32 %202, 1, !dbg !35
  %exitcond.not = icmp eq i32 %510, %47, !dbg !35
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %167, !dbg !35

._crit_edge.loopexit:                             ; preds = %167
  %511 = insertelement <32 x float> poison, float %442, i64 0, !dbg !44
  %512 = insertelement <32 x float> %511, float %443, i64 1, !dbg !44
  %513 = insertelement <32 x float> %512, float %444, i64 2, !dbg !44
  %514 = insertelement <32 x float> %513, float %445, i64 3, !dbg !44
  %515 = insertelement <32 x float> %514, float %447, i64 4, !dbg !44
  %516 = insertelement <32 x float> %515, float %448, i64 5, !dbg !44
  %517 = insertelement <32 x float> %516, float %449, i64 6, !dbg !44
  %518 = insertelement <32 x float> %517, float %450, i64 7, !dbg !44
  %519 = insertelement <32 x float> %518, float %452, i64 8, !dbg !44
  %520 = insertelement <32 x float> %519, float %453, i64 9, !dbg !44
  %521 = insertelement <32 x float> %520, float %454, i64 10, !dbg !44
  %522 = insertelement <32 x float> %521, float %455, i64 11, !dbg !44
  %523 = insertelement <32 x float> %522, float %457, i64 12, !dbg !44
  %524 = insertelement <32 x float> %523, float %458, i64 13, !dbg !44
  %525 = insertelement <32 x float> %524, float %459, i64 14, !dbg !44
  %526 = insertelement <32 x float> %525, float %460, i64 15, !dbg !44
  %527 = insertelement <32 x float> %526, float %462, i64 16, !dbg !44
  %528 = insertelement <32 x float> %527, float %463, i64 17, !dbg !44
  %529 = insertelement <32 x float> %528, float %464, i64 18, !dbg !44
  %530 = insertelement <32 x float> %529, float %465, i64 19, !dbg !44
  %531 = insertelement <32 x float> %530, float %467, i64 20, !dbg !44
  %532 = insertelement <32 x float> %531, float %468, i64 21, !dbg !44
  %533 = insertelement <32 x float> %532, float %469, i64 22, !dbg !44
  %534 = insertelement <32 x float> %533, float %470, i64 23, !dbg !44
  %535 = insertelement <32 x float> %534, float %472, i64 24, !dbg !44
  %536 = insertelement <32 x float> %535, float %473, i64 25, !dbg !44
  %537 = insertelement <32 x float> %536, float %474, i64 26, !dbg !44
  %538 = insertelement <32 x float> %537, float %475, i64 27, !dbg !44
  %539 = insertelement <32 x float> %538, float %477, i64 28, !dbg !44
  %540 = insertelement <32 x float> %539, float %478, i64 29, !dbg !44
  %541 = insertelement <32 x float> %540, float %479, i64 30, !dbg !44
  %542 = insertelement <32 x float> %541, float %480, i64 31, !dbg !44
  %543 = fptrunc <32 x float> %542 to <32 x half>, !dbg !44
  br label %._crit_edge, !dbg !45

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %9
  %544 = phi <32 x half> [ zeroinitializer, %9 ], [ %543, %._crit_edge.loopexit ]
  %545 = mul i32 %19, %17, !dbg !45
  %.decomposed352 = sub i32 %.decomposed, %545, !dbg !45
  %546 = add i32 %.decomposed352, %15, !dbg !46
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %547 = shl i32 %546, 7, !dbg !47
  %548 = or disjoint i32 %547, %36, !dbg !48
  %549 = or disjoint i32 %547, %37, !dbg !48
  %550 = or disjoint i32 %548, 64, !dbg !48
  %551 = or disjoint i32 %548, 96, !dbg !48
  %552 = mul i32 %548, %7, !dbg !49
  %553 = mul i32 %549, %7, !dbg !49
  %554 = mul i32 %550, %7, !dbg !49
  %555 = mul i32 %551, %7, !dbg !49
  %556 = sext i32 %552 to i64, !dbg !50
  %557 = getelementptr half, ptr addrspace(1) %2, i64 %556, !dbg !50
  %558 = sext i32 %553 to i64, !dbg !50
  %559 = getelementptr half, ptr addrspace(1) %2, i64 %558, !dbg !50
  %560 = sext i32 %554 to i64, !dbg !50
  %561 = getelementptr half, ptr addrspace(1) %2, i64 %560, !dbg !50
  %562 = sext i32 %555 to i64, !dbg !50
  %563 = getelementptr half, ptr addrspace(1) %2, i64 %562, !dbg !50
  %564 = sext i32 %24 to i64, !dbg !51
  %565 = getelementptr half, ptr addrspace(1) %557, i64 %564, !dbg !51
  %566 = getelementptr half, ptr addrspace(1) %559, i64 %564, !dbg !51
  %567 = getelementptr half, ptr addrspace(1) %561, i64 %564, !dbg !51
  %568 = getelementptr half, ptr addrspace(1) %563, i64 %564, !dbg !51
  %569 = icmp slt i32 %548, 1, !dbg !52
  %570 = icmp slt i32 %549, 1, !dbg !52
  %571 = icmp slt i32 %547, 0, !dbg !52
  %572 = icmp slt i32 %24, %3, !dbg !53
  %573 = and i1 %572, %569, !dbg !54
  %574 = and i1 %572, %570, !dbg !54
  %575 = and i1 %572, %571, !dbg !54
  %576 = shl nuw nsw i32 %21, 1, !dbg !55
  %577 = and i32 %576, 6, !dbg !55
  %578 = shl nuw nsw i32 %31, 3, !dbg !55
  %579 = shl nuw nsw i32 %32, 3, !dbg !55
  %580 = shl nuw nsw i32 %33, 4, !dbg !55
  %581 = or disjoint i32 %577, %580, !dbg !55
  %582 = or disjoint i32 %581, %578, !dbg !55
  %583 = or disjoint i32 %582, %27, !dbg !55
  %584 = or disjoint i32 %583, %579, !dbg !55
  %585 = shl nuw nsw i32 %34, 4, !dbg !55
  %586 = xor i32 %584, %585, !dbg !55
  %587 = and i32 %22, 832, !dbg !55
  %588 = or disjoint i32 %579, %587, !dbg !55
  %589 = or disjoint i32 %588, %28, !dbg !55
  %590 = lshr i32 %586, 2, !dbg !55
  %591 = and i32 %590, 1073741816, !dbg !55
  %592 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %591, !dbg !55
  %593 = getelementptr inbounds nuw half, ptr addrspace(3) %592, i32 %586, !dbg !55
  %594 = shufflevector <32 x half> %544, <32 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !55
  store <2 x half> %594, ptr addrspace(3) %593, align 4, !dbg !55
  %595 = xor i32 %586, 256, !dbg !55
  %596 = lshr i32 %595, 2, !dbg !55
  %597 = and i32 %596, 1073741816, !dbg !55
  %598 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %597, !dbg !55
  %599 = getelementptr inbounds nuw half, ptr addrspace(3) %598, i32 %595, !dbg !55
  %600 = shufflevector <32 x half> %544, <32 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !55
  store <2 x half> %600, ptr addrspace(3) %599, align 4, !dbg !55
  %601 = xor i32 %586, 8, !dbg !55
  %602 = getelementptr inbounds nuw half, ptr addrspace(3) %592, i32 %601, !dbg !55
  %603 = shufflevector <32 x half> %544, <32 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !55
  store <2 x half> %603, ptr addrspace(3) %602, align 4, !dbg !55
  %604 = xor i32 %586, 264, !dbg !55
  %605 = lshr i32 %604, 2, !dbg !55
  %606 = and i32 %605, 1073741816, !dbg !55
  %607 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %606, !dbg !55
  %608 = getelementptr inbounds nuw half, ptr addrspace(3) %607, i32 %604, !dbg !55
  %609 = shufflevector <32 x half> %544, <32 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !55
  store <2 x half> %609, ptr addrspace(3) %608, align 4, !dbg !55
  %610 = xor i32 %586, 16, !dbg !55
  %611 = getelementptr inbounds nuw half, ptr addrspace(3) %592, i32 %610, !dbg !55
  %612 = shufflevector <32 x half> %544, <32 x half> poison, <2 x i32> <i32 8, i32 9>, !dbg !55
  store <2 x half> %612, ptr addrspace(3) %611, align 4, !dbg !55
  %613 = xor i32 %586, 272, !dbg !55
  %614 = lshr i32 %613, 2, !dbg !55
  %615 = and i32 %614, 1073741816, !dbg !55
  %616 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %615, !dbg !55
  %617 = getelementptr inbounds nuw half, ptr addrspace(3) %616, i32 %613, !dbg !55
  %618 = shufflevector <32 x half> %544, <32 x half> poison, <2 x i32> <i32 10, i32 11>, !dbg !55
  store <2 x half> %618, ptr addrspace(3) %617, align 4, !dbg !55
  %619 = xor i32 %586, 24, !dbg !55
  %620 = getelementptr inbounds nuw half, ptr addrspace(3) %592, i32 %619, !dbg !55
  %621 = shufflevector <32 x half> %544, <32 x half> poison, <2 x i32> <i32 12, i32 13>, !dbg !55
  store <2 x half> %621, ptr addrspace(3) %620, align 4, !dbg !55
  %622 = xor i32 %586, 280, !dbg !55
  %623 = lshr i32 %622, 2, !dbg !55
  %624 = and i32 %623, 1073741816, !dbg !55
  %625 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %624, !dbg !55
  %626 = getelementptr inbounds nuw half, ptr addrspace(3) %625, i32 %622, !dbg !55
  %627 = shufflevector <32 x half> %544, <32 x half> poison, <2 x i32> <i32 14, i32 15>, !dbg !55
  store <2 x half> %627, ptr addrspace(3) %626, align 4, !dbg !55
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !55
  %628 = lshr exact i32 %589, 2, !dbg !55
  %629 = and i32 %628, 248, !dbg !55
  %630 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %629, !dbg !55
  %631 = getelementptr inbounds nuw half, ptr addrspace(3) %630, i32 %589, !dbg !55
  %632 = load <4 x i32>, ptr addrspace(3) %631, align 16, !dbg !55
  %633 = or disjoint i32 %589, 1024, !dbg !55
  %634 = lshr exact i32 %633, 2, !dbg !55
  %635 = and i32 %634, 536870904, !dbg !55
  %636 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %635, !dbg !55
  %637 = getelementptr inbounds nuw half, ptr addrspace(3) %636, i32 %633, !dbg !55
  %638 = load <4 x i32>, ptr addrspace(3) %637, align 16, !dbg !55
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !55
  %639 = shufflevector <32 x half> %544, <32 x half> poison, <2 x i32> <i32 16, i32 17>, !dbg !55
  store <2 x half> %639, ptr addrspace(3) %593, align 4, !dbg !55
  %640 = shufflevector <32 x half> %544, <32 x half> poison, <2 x i32> <i32 18, i32 19>, !dbg !55
  store <2 x half> %640, ptr addrspace(3) %599, align 4, !dbg !55
  %641 = shufflevector <32 x half> %544, <32 x half> poison, <2 x i32> <i32 20, i32 21>, !dbg !55
  store <2 x half> %641, ptr addrspace(3) %602, align 4, !dbg !55
  %642 = shufflevector <32 x half> %544, <32 x half> poison, <2 x i32> <i32 22, i32 23>, !dbg !55
  store <2 x half> %642, ptr addrspace(3) %608, align 4, !dbg !55
  %643 = shufflevector <32 x half> %544, <32 x half> poison, <2 x i32> <i32 24, i32 25>, !dbg !55
  store <2 x half> %643, ptr addrspace(3) %611, align 4, !dbg !55
  %644 = shufflevector <32 x half> %544, <32 x half> poison, <2 x i32> <i32 26, i32 27>, !dbg !55
  store <2 x half> %644, ptr addrspace(3) %617, align 4, !dbg !55
  %645 = shufflevector <32 x half> %544, <32 x half> poison, <2 x i32> <i32 28, i32 29>, !dbg !55
  store <2 x half> %645, ptr addrspace(3) %620, align 4, !dbg !55
  %646 = shufflevector <32 x half> %544, <32 x half> poison, <2 x i32> <i32 30, i32 31>, !dbg !55
  store <2 x half> %646, ptr addrspace(3) %626, align 4, !dbg !55
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !55
  %647 = load <4 x i32>, ptr addrspace(3) %631, align 16, !dbg !55
  %648 = load <4 x i32>, ptr addrspace(3) %637, align 16, !dbg !55
  %.extract = extractelement <4 x i32> %632, i64 0, !dbg !55
  %.extract215 = extractelement <4 x i32> %632, i64 1, !dbg !55
  %.extract217 = extractelement <4 x i32> %632, i64 2, !dbg !55
  %.extract219 = extractelement <4 x i32> %632, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract215, i32 %.extract217, i32 %.extract219, ptr addrspace(1) %565, i1 %573) #2, !dbg !55
  %.extract221 = extractelement <4 x i32> %638, i64 0, !dbg !55
  %.extract223 = extractelement <4 x i32> %638, i64 1, !dbg !55
  %.extract225 = extractelement <4 x i32> %638, i64 2, !dbg !55
  %.extract227 = extractelement <4 x i32> %638, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract221, i32 %.extract223, i32 %.extract225, i32 %.extract227, ptr addrspace(1) %566, i1 %574) #2, !dbg !55
  %.extract229 = extractelement <4 x i32> %647, i64 0, !dbg !55
  %.extract231 = extractelement <4 x i32> %647, i64 1, !dbg !55
  %.extract233 = extractelement <4 x i32> %647, i64 2, !dbg !55
  %.extract235 = extractelement <4 x i32> %647, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract229, i32 %.extract231, i32 %.extract233, i32 %.extract235, ptr addrspace(1) %567, i1 %575) #2, !dbg !55
  %.extract237 = extractelement <4 x i32> %648, i64 0, !dbg !55
  %.extract239 = extractelement <4 x i32> %648, i64 1, !dbg !55
  %.extract241 = extractelement <4 x i32> %648, i64 2, !dbg !55
  %.extract243 = extractelement <4 x i32> %648, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract237, i32 %.extract239, i32 %.extract241, i32 %.extract243, ptr addrspace(1) %568, i1 %575) #2, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "gated_mlp.py", directory: "/home/ubuntu/anjiang/PTX_dataset/triton_ptx")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !1, file: !1, line: 68, type: !6, scopeLine: 68, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 91, column: 24, scope: !5)
!9 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !12)
!10 = distinct !DILexicalBlockFile(scope: !5, file: !11, discriminator: 0)
!11 = !DIFile(filename: "standard.py", directory: "/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language")
!12 = !DILocation(line: 93, column: 27, scope: !5)
!13 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !12)
!14 = !DILocation(line: 94, column: 38, scope: !5)
!15 = !DILocation(line: 95, column: 22, scope: !5)
!16 = !DILocation(line: 96, column: 29, scope: !5)
!17 = !DILocation(line: 97, column: 35, scope: !5)
!18 = !DILocation(line: 97, column: 48, scope: !5)
!19 = !DILocation(line: 98, column: 34, scope: !5)
!20 = !DILocation(line: 99, column: 40, scope: !5)
!21 = !DILocation(line: 109, column: 23, scope: !5)
!22 = !DILocation(line: 109, column: 51, scope: !5)
!23 = !DILocation(line: 109, column: 38, scope: !5)
!24 = !DILocation(line: 109, column: 68, scope: !5)
!25 = !DILocation(line: 111, column: 60, scope: !5)
!26 = !DILocation(line: 111, column: 22, scope: !5)
!27 = !DILocation(line: 112, column: 29, scope: !5)
!28 = !DILocation(line: 112, column: 40, scope: !5)
!29 = !DILocation(line: 112, column: 52, scope: !5)
!30 = !DILocation(line: 112, column: 22, scope: !5)
!31 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !32)
!32 = !DILocation(line: 120, column: 33, scope: !5)
!33 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !32)
!34 = !DILocation(line: 129, column: 33, scope: !5)
!35 = !DILocation(line: 120, column: 22, scope: !5)
!36 = !DILocation(line: 123, column: 51, scope: !5)
!37 = !DILocation(line: 123, column: 20, scope: !5)
!38 = !DILocation(line: 124, column: 51, scope: !5)
!39 = !DILocation(line: 124, column: 20, scope: !5)
!40 = !DILocation(line: 128, column: 18, scope: !5)
!41 = !DILocation(line: 129, column: 18, scope: !5)
!42 = !DILocation(line: 123, column: 55, scope: !5)
!43 = !DILocation(line: 126, column: 35, scope: !5)
!44 = !DILocation(line: 134, column: 23, scope: !5)
!45 = !DILocation(line: 98, column: 54, scope: !5)
!46 = !DILocation(line: 98, column: 27, scope: !5)
!47 = !DILocation(line: 138, column: 22, scope: !5)
!48 = !DILocation(line: 138, column: 37, scope: !5)
!49 = !DILocation(line: 140, column: 33, scope: !5)
!50 = !DILocation(line: 140, column: 21, scope: !5)
!51 = !DILocation(line: 140, column: 52, scope: !5)
!52 = !DILocation(line: 141, column: 33, scope: !5)
!53 = !DILocation(line: 141, column: 58, scope: !5)
!54 = !DILocation(line: 141, column: 39, scope: !5)
!55 = !DILocation(line: 142, column: 21, scope: !5)
!56 = !DILocation(line: 142, column: 4, scope: !5)
