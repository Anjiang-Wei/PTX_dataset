//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_80
.address_size 64

	// .globl	matmul_kernel           // -- Begin function matmul_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @matmul_kernel
.visible .entry matmul_kernel(
	.param .u64 .ptr .global .align 1 matmul_kernel_param_0,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_1,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_2,
	.param .u32 matmul_kernel_param_3,
	.param .u32 matmul_kernel_param_4,
	.param .u32 matmul_kernel_param_5,
	.param .u32 matmul_kernel_param_6,
	.param .u32 matmul_kernel_param_7,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_8
)
.reqntid 128
{
	.reg .pred 	%p<24>;
	.reg .b32 	%r<675>;
	.reg .b64 	%rd<55>;
	.loc	1 68 0                          // gated_mlp.py:68:0
$L__func_begin0:
	.loc	1 68 0                          // gated_mlp.py:68:0

// %bb.0:
	ld.param.b32 	%r140, [matmul_kernel_param_7];
	ld.param.b32 	%r139, [matmul_kernel_param_4];
	ld.param.b32 	%r138, [matmul_kernel_param_3];
	ld.param.b64 	%rd12, [matmul_kernel_param_2];
	ld.param.b64 	%rd11, [matmul_kernel_param_1];
	ld.param.b64 	%rd10, [matmul_kernel_param_0];
$L__tmp0:
	.loc	1 91 24                         // gated_mlp.py:91:24
	mov.u32 	%r171, %ctaid.x;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:93:27 ]
	add.s32 	%r172, %r138, 31;
	.loc	2 40 28                         // standard.py:40:28 @[ gated_mlp.py:93:27 ]
	shr.s32 	%r173, %r172, 31;
	shr.u32 	%r174, %r173, 27;
	add.s32 	%r175, %r172, %r174;
	shr.s32 	%r176, %r175, 5;
$L__tmp2:
	.loc	1 94 38                         // gated_mlp.py:94:38
	shl.b32 	%r178, %r176, 3;
	.loc	1 95 22                         // gated_mlp.py:95:22
	div.s32 	%r179, %r171, %r178;
	ld.param.b32 	%r180, [matmul_kernel_param_6];
	.loc	1 96 29                         // gated_mlp.py:96:29
	shl.b32 	%r1, %r179, 3;
	.loc	1 97 35                         // gated_mlp.py:97:35
	sub.s32 	%r181, 1, %r1;
	.loc	1 97 48                         // gated_mlp.py:97:48
	min.s32 	%r2, %r181, 8;
	.loc	1 98 34                         // gated_mlp.py:98:34
	mul.lo.s32 	%r182, %r179, %r178;
	sub.s32 	%r3, %r171, %r182;
	.loc	1 99 40                         // gated_mlp.py:99:40
	div.s32 	%r4, %r3, %r2;
	.loc	1 109 23                        // gated_mlp.py:109:23
	shl.b32 	%r183, %r4, 5;
	.loc	1 109 51                        // gated_mlp.py:109:51
	mov.u32 	%r5, %tid.x;
	shl.b32 	%r6, %r5, 3;
	and.b32 	%r7, %r6, 24;
	.loc	1 109 38                        // gated_mlp.py:109:38
	or.b32 	%r8, %r183, %r7;
	.loc	1 109 68                        // gated_mlp.py:109:68
	rem.s32 	%r184, %r8, %r138;
	.loc	1 111 22                        // gated_mlp.py:111:22
	mul.wide.u32 	%rd28, %r7, 2;
	add.s64 	%rd13, %rd10, %rd28;
	.loc	1 112 29                        // gated_mlp.py:112:29
	and.b32 	%r9, %r5, 4;
	and.b32 	%r10, %r5, 8;
	and.b32 	%r11, %r5, 16;
	and.b32 	%r12, %r5, 32;
	and.b32 	%r13, %r5, 64;
	bfe.u32 	%r14, %r5, 2, 5;
	.loc	1 112 52                        // gated_mlp.py:112:52
	mad.lo.s32 	%r185, %r180, %r14, %r184;
	.loc	1 112 22                        // gated_mlp.py:112:22
	mul.wide.s32 	%rd29, %r185, 2;
	add.s64 	%rd17, %rd11, %rd29;
$L__tmp3:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:120:33 ]
	add.s32 	%r186, %r139, 31;
$L__tmp4:
	.loc	1 129 33                        // gated_mlp.py:129:33
	shl.b32 	%r190, %r180, 5;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p1, %r186, 31;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p2, %r7, %r139;
	.loc	1 123 20                        // gated_mlp.py:123:20
	xor.b32 	%r191, %r6, %r5;
	and.b32 	%r192, %r191, 24;
	shl.b32 	%r193, %r14, 5;
	or.b32 	%r16, %r193, %r192;
	shl.b32 	%r194, %r16, 1;
	mov.b32 	%r195, global_smem;
	add.s32 	%r141, %r195, %r194;
	add.s32 	%r143, %r141, 2048;
	add.s32 	%r145, %r141, 4096;
	add.s32 	%r147, %r141, 6144;
	selp.b32 	%r196, 16, 0, %p1;
	selp.b32 	%r144, %r196, 0, %p2;
	// begin inline asm
	cp.async.cg.shared.global [ %r141 + 0 ], [ %rd13 + 0 ], 0x10, %r144;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r143 + 0 ], [ %rd13 + 0 ], 0x10, %r144;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r145 + 0 ], [ %rd13 + 0 ], 0x10, %r144;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r147 + 0 ], [ %rd13 + 0 ], 0x10, %r144;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p3, %r14, %r139;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r17, %r141, 24576;
	selp.b32 	%r150, %r196, 0, %p3;
	// begin inline asm
	cp.async.cg.shared.global [ %r17 + 0 ], [ %rd17 + 0 ], 0x10, %r150;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p4, %r186, 63;
	.loc	1 128 18                        // gated_mlp.py:128:18
	add.s64 	%rd18, %rd13, 64;
	.loc	1 129 18                        // gated_mlp.py:129:18
	mul.wide.s32 	%rd30, %r190, 2;
	add.s64 	%rd22, %rd17, %rd30;
	.loc	1 123 55                        // gated_mlp.py:123:55
	add.s32 	%r197, %r139, -32;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p5, %r7, %r197;
	.loc	1 123 20                        // gated_mlp.py:123:20
	bar.sync 	0;
	add.s32 	%r151, %r141, 8192;
	add.s32 	%r153, %r141, 10240;
	add.s32 	%r155, %r141, 12288;
	add.s32 	%r157, %r141, 14336;
	selp.b32 	%r198, 16, 0, %p5;
	selp.b32 	%r154, %r198, 0, %p4;
	// begin inline asm
	cp.async.cg.shared.global [ %r151 + 0 ], [ %rd18 + 0 ], 0x10, %r154;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r153 + 0 ], [ %rd18 + 0 ], 0x10, %r154;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r155 + 0 ], [ %rd18 + 0 ], 0x10, %r154;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r157 + 0 ], [ %rd18 + 0 ], 0x10, %r154;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p6, %r14, %r197;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r159, %r141, 26624;
	selp.b32 	%r199, 16, 0, %p6;
	selp.b32 	%r160, %r199, 0, %p4;
	// begin inline asm
	cp.async.cg.shared.global [ %r159 + 0 ], [ %rd22 + 0 ], 0x10, %r160;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p7, %r186, 95;
	.loc	1 128 18                        // gated_mlp.py:128:18
	add.s64 	%rd23, %rd13, 128;
	.loc	1 129 18                        // gated_mlp.py:129:18
	add.s64 	%rd27, %rd22, %rd30;
	.loc	1 123 55                        // gated_mlp.py:123:55
	add.s32 	%r200, %r139, -64;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p8, %r7, %r200;
	.loc	1 123 20                        // gated_mlp.py:123:20
	bar.sync 	0;
	add.s32 	%r161, %r141, 16384;
	add.s32 	%r163, %r141, 18432;
	add.s32 	%r165, %r141, 20480;
	add.s32 	%r167, %r141, 22528;
	selp.b32 	%r201, 16, 0, %p8;
	selp.b32 	%r164, %r201, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r161 + 0 ], [ %rd23 + 0 ], 0x10, %r164;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r163 + 0 ], [ %rd23 + 0 ], 0x10, %r164;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r165 + 0 ], [ %rd23 + 0 ], 0x10, %r164;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r167 + 0 ], [ %rd23 + 0 ], 0x10, %r164;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p9, %r14, %r200;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r169, %r141, 28672;
	selp.b32 	%r202, 16, 0, %p9;
	selp.b32 	%r170, %r202, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r169 + 0 ], [ %rd27 + 0 ], 0x10, %r170;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %.lr.ph
	.loc	1 0 0                           // gated_mlp.py:0
	cvt.s64.s32 	%rd1, %r185;
	shr.s32 	%r187, %r186, 31;
	shr.u32 	%r188, %r187, 27;
	add.s32 	%r189, %r186, %r188;
	shr.s32 	%r15, %r189, 5;
	cvt.s64.s32 	%rd2, %r190;
	.loc	1 112 29                        // gated_mlp.py:112:29
	setp.eq.s32 	%p10, %r9, 0;
	.loc	1 109 51                        // gated_mlp.py:109:51
	bfe.s32 	%r223, %r5, 1, 1;
	add.s32 	%r20, %r15, -3;
	shl.b32 	%r224, %r5, 5;
	and.b32 	%r225, %r224, 32;
	and.b32 	%r226, %r223, 72;
	or.b32 	%r227, %r226, %r225;
	selp.b32 	%r228, 0, 144, %p10;
	or.b32 	%r229, %r227, %r228;
	shl.b32 	%r230, %r10, 5;
	or.b32 	%r231, %r229, %r230;
	shr.u32 	%r232, %r11, 1;
	xor.b32 	%r233, %r231, %r232;
	shl.b32 	%r658, %r12, 4;
	or.b32 	%r234, %r233, %r658;
	shl.b32 	%r657, %r13, 4;
	xor.b32 	%r23, %r234, %r657;
	xor.b32 	%r24, %r23, 16;
	xor.b32 	%r25, %r23, 2048;
	xor.b32 	%r26, %r23, 2064;
	and.b32 	%r235, %r224, 768;
	or.b32 	%r27, %r229, %r235;
	xor.b32 	%r28, %r27, 8;
	xor.b32 	%r29, %r27, 16;
	xor.b32 	%r30, %r27, 24;
	add.s32 	%r621, %r139, -96;
	.loc	1 120 22                        // gated_mlp.py:120:22
	shl.b64 	%rd31, %rd1, 1;
	mad.lo.s64 	%rd32, %rd2, 6, %rd31;
	add.s64 	%rd54, %rd11, %rd32;
	shl.b64 	%rd4, %rd2, 1;
	and.b32 	%r236, %r5, 3;
	mul.wide.u32 	%rd33, %r236, 16;
	add.s64 	%rd34, %rd33, %rd10;
	add.s64 	%rd53, %rd34, 192;
	mov.b32 	%r656, 0;
	mov.b32 	%r624, 0f00000000;
	mov.b32 	%r623, 2;
	mov.b32 	%r622, -1;
	shl.b32 	%r516, %r24, 1;
	shl.b32 	%r517, %r25, 1;
	shl.b32 	%r518, %r26, 1;
	shl.b32 	%r523, %r28, 1;
	shl.b32 	%r524, %r29, 1;
	shl.b32 	%r525, %r30, 1;
	mov.b32 	%r625, %r624;
	mov.b32 	%r626, %r624;
	mov.b32 	%r627, %r624;
	mov.b32 	%r628, %r624;
	mov.b32 	%r629, %r624;
	mov.b32 	%r630, %r624;
	mov.b32 	%r631, %r624;
	mov.b32 	%r632, %r624;
	mov.b32 	%r633, %r624;
	mov.b32 	%r634, %r624;
	mov.b32 	%r635, %r624;
	mov.b32 	%r636, %r624;
	mov.b32 	%r637, %r624;
	mov.b32 	%r638, %r624;
	mov.b32 	%r639, %r624;
	mov.b32 	%r640, %r624;
	mov.b32 	%r641, %r624;
	mov.b32 	%r642, %r624;
	mov.b32 	%r643, %r624;
	mov.b32 	%r644, %r624;
	mov.b32 	%r645, %r624;
	mov.b32 	%r646, %r624;
	mov.b32 	%r647, %r624;
	mov.b32 	%r648, %r624;
	mov.b32 	%r649, %r624;
	mov.b32 	%r650, %r624;
	mov.b32 	%r651, %r624;
	mov.b32 	%r652, %r624;
	mov.b32 	%r653, %r624;
	mov.b32 	%r654, %r624;
	mov.b32 	%r655, %r624;
$L__BB0_3:                              // =>This Inner Loop Header: Depth=1
	setp.lt.s32 	%p11, %r656, %r20;
	add.s32 	%r511, %r622, 1;
	setp.gt.s32 	%p12, %r511, 2;
	selp.b32 	%r622, 0, %r511, %p12;
	.loc	1 123 20                        // gated_mlp.py:123:20
	cp.async.wait_group 	4;
	bar.sync 	0;
	shl.b32 	%r512, %r622, 13;
	add.s32 	%r514, %r195, %r512;
	shl.b32 	%r515, %r23, 1;
	add.s32 	%r241, %r514, %r515;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r285, %r286, %r287, %r288}, [%r241];
	// end inline asm
	add.s32 	%r246, %r514, %r516;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r397, %r398, %r399, %r400}, [%r246];
	// end inline asm
	add.s32 	%r251, %r514, %r517;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r341, %r342, %r343, %r344}, [%r251];
	// end inline asm
	add.s32 	%r256, %r514, %r518;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r453, %r454, %r455, %r456}, [%r256];
	// end inline asm
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r519, %r622, 11;
	add.s32 	%r520, %r195, %r519;
	add.s32 	%r521, %r520, 24576;
	shl.b32 	%r522, %r27, 1;
	add.s32 	%r261, %r521, %r522;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r289, %r290, %r401, %r402}, [%r261];
	// end inline asm
	add.s32 	%r266, %r521, %r523;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r303, %r304, %r415, %r416}, [%r266];
	// end inline asm
	add.s32 	%r271, %r521, %r524;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r317, %r318, %r429, %r430}, [%r271];
	// end inline asm
	add.s32 	%r276, %r521, %r525;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {%r331, %r332, %r443, %r444}, [%r276];
	// end inline asm
	.loc	1 126 35                        // gated_mlp.py:126:35
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r624, %r625, %r626, %r627 }, { %r285, %r286, %r287, %r288 }, { %r289, %r290 }, { %r624, %r625, %r626, %r627 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r628, %r629, %r630, %r631 }, { %r285, %r286, %r287, %r288 }, { %r303, %r304 }, { %r628, %r629, %r630, %r631 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r632, %r633, %r634, %r635 }, { %r285, %r286, %r287, %r288 }, { %r317, %r318 }, { %r632, %r633, %r634, %r635 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r636, %r637, %r638, %r639 }, { %r285, %r286, %r287, %r288 }, { %r331, %r332 }, { %r636, %r637, %r638, %r639 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r640, %r641, %r642, %r643 }, { %r341, %r342, %r343, %r344 }, { %r289, %r290 }, { %r640, %r641, %r642, %r643 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r644, %r645, %r646, %r647 }, { %r341, %r342, %r343, %r344 }, { %r303, %r304 }, { %r644, %r645, %r646, %r647 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r648, %r649, %r650, %r651 }, { %r341, %r342, %r343, %r344 }, { %r317, %r318 }, { %r648, %r649, %r650, %r651 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r652, %r653, %r654, %r655 }, { %r341, %r342, %r343, %r344 }, { %r331, %r332 }, { %r652, %r653, %r654, %r655 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r624, %r625, %r626, %r627 }, { %r397, %r398, %r399, %r400 }, { %r401, %r402 }, { %r624, %r625, %r626, %r627 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r628, %r629, %r630, %r631 }, { %r397, %r398, %r399, %r400 }, { %r415, %r416 }, { %r628, %r629, %r630, %r631 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r632, %r633, %r634, %r635 }, { %r397, %r398, %r399, %r400 }, { %r429, %r430 }, { %r632, %r633, %r634, %r635 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r636, %r637, %r638, %r639 }, { %r397, %r398, %r399, %r400 }, { %r443, %r444 }, { %r636, %r637, %r638, %r639 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r640, %r641, %r642, %r643 }, { %r453, %r454, %r455, %r456 }, { %r401, %r402 }, { %r640, %r641, %r642, %r643 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r644, %r645, %r646, %r647 }, { %r453, %r454, %r455, %r456 }, { %r415, %r416 }, { %r644, %r645, %r646, %r647 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r648, %r649, %r650, %r651 }, { %r453, %r454, %r455, %r456 }, { %r429, %r430 }, { %r648, %r649, %r650, %r651 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { %r652, %r653, %r654, %r655 }, { %r453, %r454, %r455, %r456 }, { %r443, %r444 }, { %r652, %r653, %r654, %r655 };
	// end inline asm
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s32 	%r526, %r623, 1;
	setp.gt.s32 	%p13, %r526, 2;
	selp.b32 	%r623, 0, %r526, %p13;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p14, %r7, %r621;
	.loc	1 123 20                        // gated_mlp.py:123:20
	shl.b32 	%r527, %r623, 13;
	add.s32 	%r528, %r195, %r527;
	bar.sync 	0;
	add.s32 	%r501, %r528, %r194;
	add.s32 	%r503, %r501, 2048;
	add.s32 	%r505, %r501, 4096;
	add.s32 	%r507, %r501, 6144;
	selp.b32 	%r530, 16, 0, %p14;
	selp.b32 	%r504, %r530, 0, %p11;
	// begin inline asm
	cp.async.cg.shared.global [ %r501 + 0 ], [ %rd53 + 0 ], 0x10, %r504;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r503 + 0 ], [ %rd53 + 0 ], 0x10, %r504;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r505 + 0 ], [ %rd53 + 0 ], 0x10, %r504;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r507 + 0 ], [ %rd53 + 0 ], 0x10, %r504;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p15, %r14, %r621;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r531, %r623, 11;
	add.s32 	%r509, %r17, %r531;
	selp.b32 	%r532, 16, 0, %p15;
	selp.b32 	%r510, %r532, 0, %p11;
	// begin inline asm
	cp.async.cg.shared.global [ %r509 + 0 ], [ %rd54 + 0 ], 0x10, %r510;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s32 	%r656, %r656, 1;
	add.s64 	%rd54, %rd54, %rd4;
	add.s64 	%rd53, %rd53, 64;
	add.s32 	%r621, %r621, -32;
	setp.ne.s32 	%p16, %r15, %r656;
	@%p16 bra 	$L__BB0_3;
// %bb.4:                               // %._crit_edge.loopexit
	.loc	1 134 23                        // gated_mlp.py:134:23
	cvt.rn.f16x2.f32 	%r674, %r655, %r654;
	cvt.rn.f16x2.f32 	%r673, %r653, %r652;
	cvt.rn.f16x2.f32 	%r672, %r651, %r650;
	cvt.rn.f16x2.f32 	%r671, %r649, %r648;
	cvt.rn.f16x2.f32 	%r670, %r647, %r646;
	cvt.rn.f16x2.f32 	%r669, %r645, %r644;
	cvt.rn.f16x2.f32 	%r668, %r643, %r642;
	cvt.rn.f16x2.f32 	%r667, %r641, %r640;
	cvt.rn.f16x2.f32 	%r666, %r639, %r638;
	cvt.rn.f16x2.f32 	%r665, %r637, %r636;
	cvt.rn.f16x2.f32 	%r664, %r635, %r634;
	cvt.rn.f16x2.f32 	%r663, %r633, %r632;
	cvt.rn.f16x2.f32 	%r662, %r631, %r630;
	cvt.rn.f16x2.f32 	%r661, %r629, %r628;
	cvt.rn.f16x2.f32 	%r660, %r627, %r626;
	cvt.rn.f16x2.f32 	%r659, %r625, %r624;
	bra.uni 	$L__BB0_5;
$L__BB0_1:                              // %.._crit_edge_crit_edge
	.loc	1 142 21                        // gated_mlp.py:142:21
	shl.b32 	%r658, %r12, 4;
	shl.b32 	%r657, %r13, 4;
	mov.b32 	%r659, 0;
	mov.b32 	%r660, %r659;
	mov.b32 	%r661, %r659;
	mov.b32 	%r662, %r659;
	mov.b32 	%r663, %r659;
	mov.b32 	%r664, %r659;
	mov.b32 	%r665, %r659;
	mov.b32 	%r666, %r659;
	mov.b32 	%r667, %r659;
	mov.b32 	%r668, %r659;
	mov.b32 	%r669, %r659;
	mov.b32 	%r670, %r659;
	mov.b32 	%r671, %r659;
	mov.b32 	%r672, %r659;
	mov.b32 	%r673, %r659;
	mov.b32 	%r674, %r659;
$L__BB0_5:                              // %._crit_edge
	.loc	1 98 54                         // gated_mlp.py:98:54
	mul.lo.s32 	%r549, %r4, %r2;
	sub.s32 	%r550, %r3, %r549;
	.loc	1 98 27                         // gated_mlp.py:98:27
	add.s32 	%r551, %r550, %r1;
	.loc	1 120 22                        // gated_mlp.py:120:22
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 138 22                        // gated_mlp.py:138:22
	shl.b32 	%r552, %r551, 7;
	.loc	1 138 37                        // gated_mlp.py:138:37
	or.b32 	%r553, %r552, %r14;
	.loc	1 140 33                        // gated_mlp.py:140:33
	mul.lo.s32 	%r554, %r553, %r140;
	shl.b32 	%r555, %r140, 5;
	add.s32 	%r556, %r554, %r555;
	add.s32 	%r557, %r556, %r555;
	add.s32 	%r558, %r557, %r555;
	.loc	1 140 21                        // gated_mlp.py:140:21
	mul.wide.s32 	%rd44, %r554, 2;
	add.s64 	%rd45, %rd12, %rd44;
	mul.wide.s32 	%rd46, %r556, 2;
	add.s64 	%rd47, %rd12, %rd46;
	mul.wide.s32 	%rd48, %r557, 2;
	add.s64 	%rd49, %rd12, %rd48;
	mul.wide.s32 	%rd50, %r558, 2;
	add.s64 	%rd51, %rd12, %rd50;
	.loc	1 140 52                        // gated_mlp.py:140:52
	mul.wide.s32 	%rd52, %r8, 2;
	add.s64 	%rd40, %rd45, %rd52;
	add.s64 	%rd41, %rd47, %rd52;
	add.s64 	%rd42, %rd49, %rd52;
	add.s64 	%rd43, %rd51, %rd52;
	.loc	1 141 33                        // gated_mlp.py:141:33
	setp.lt.s32 	%p21, %r553, 1;
	setp.lt.s32 	%p22, %r552, 0;
	.loc	1 141 58                        // gated_mlp.py:141:58
	setp.lt.s32 	%p23, %r8, %r138;
	.loc	1 141 39                        // gated_mlp.py:141:39
	and.pred 	%p17, %p23, %p21;
	and.pred 	%p18, %p23, %p22;
	.loc	1 142 21                        // gated_mlp.py:142:21
	shl.b32 	%r559, %r5, 1;
	and.b32 	%r560, %r559, 6;
	shl.b32 	%r561, %r9, 3;
	shl.b32 	%r562, %r10, 3;
	shl.b32 	%r563, %r11, 3;
	or.b32 	%r564, %r560, %r658;
	or.b32 	%r565, %r564, %r561;
	or.b32 	%r566, %r565, %r562;
	or.b32 	%r567, %r566, %r563;
	xor.b32 	%r568, %r567, %r657;
	and.b32 	%r569, %r6, 824;
	or.b32 	%r570, %r562, %r569;
	or.b32 	%r571, %r570, %r563;
	shr.u32 	%r572, %r568, 1;
	and.b32 	%r573, %r572, 2147483632;
	add.s32 	%r575, %r195, %r573;
	shl.b32 	%r576, %r568, 1;
	add.s32 	%r577, %r575, %r576;
	st.shared.b32 	[%r577], %r659;
	xor.b32 	%r578, %r568, 256;
	shr.u32 	%r579, %r578, 1;
	and.b32 	%r580, %r579, 2147483632;
	add.s32 	%r581, %r195, %r580;
	shl.b32 	%r582, %r578, 1;
	add.s32 	%r583, %r581, %r582;
	st.shared.b32 	[%r583], %r660;
	xor.b32 	%r584, %r568, 8;
	shl.b32 	%r585, %r584, 1;
	add.s32 	%r586, %r575, %r585;
	st.shared.b32 	[%r586], %r661;
	xor.b32 	%r587, %r568, 264;
	shr.u32 	%r588, %r587, 1;
	and.b32 	%r589, %r588, 2147483632;
	add.s32 	%r590, %r195, %r589;
	shl.b32 	%r591, %r587, 1;
	add.s32 	%r592, %r590, %r591;
	st.shared.b32 	[%r592], %r662;
	xor.b32 	%r593, %r568, 16;
	shl.b32 	%r594, %r593, 1;
	add.s32 	%r595, %r575, %r594;
	st.shared.b32 	[%r595], %r663;
	xor.b32 	%r596, %r568, 272;
	shr.u32 	%r597, %r596, 1;
	and.b32 	%r598, %r597, 2147483632;
	add.s32 	%r599, %r195, %r598;
	shl.b32 	%r600, %r596, 1;
	add.s32 	%r601, %r599, %r600;
	st.shared.b32 	[%r601], %r664;
	xor.b32 	%r602, %r568, 24;
	shl.b32 	%r603, %r602, 1;
	add.s32 	%r604, %r575, %r603;
	st.shared.b32 	[%r604], %r665;
	xor.b32 	%r605, %r568, 280;
	shr.u32 	%r606, %r605, 1;
	and.b32 	%r607, %r606, 2147483632;
	add.s32 	%r608, %r195, %r607;
	shl.b32 	%r609, %r605, 1;
	add.s32 	%r610, %r608, %r609;
	st.shared.b32 	[%r610], %r666;
	bar.sync 	0;
	shr.u32 	%r611, %r571, 1;
	and.b32 	%r612, %r611, 496;
	add.s32 	%r613, %r195, %r612;
	shl.b32 	%r614, %r571, 1;
	add.s32 	%r615, %r613, %r614;
	ld.shared.v4.b32 	{%r533, %r534, %r535, %r536}, [%r615];
	or.b32 	%r616, %r571, 1024;
	shr.u32 	%r617, %r616, 1;
	and.b32 	%r618, %r617, 1008;
	add.s32 	%r619, %r195, %r618;
	add.s32 	%r620, %r619, %r614;
	ld.shared.v4.b32 	{%r537, %r538, %r539, %r540}, [%r620+2048];
	bar.sync 	0;
	st.shared.b32 	[%r577], %r667;
	st.shared.b32 	[%r583], %r668;
	st.shared.b32 	[%r586], %r669;
	st.shared.b32 	[%r592], %r670;
	st.shared.b32 	[%r595], %r671;
	st.shared.b32 	[%r601], %r672;
	st.shared.b32 	[%r604], %r673;
	st.shared.b32 	[%r610], %r674;
	bar.sync 	0;
	ld.shared.v4.b32 	{%r541, %r542, %r543, %r544}, [%r615];
	ld.shared.v4.b32 	{%r545, %r546, %r547, %r548}, [%r620+2048];
	// begin inline asm
	@%p17 st.global.v4.b32 [ %rd40 + 0 ], { %r533, %r534, %r535, %r536 };
	// end inline asm
	// begin inline asm
	@%p18 st.global.v4.b32 [ %rd41 + 0 ], { %r537, %r538, %r539, %r540 };
	// end inline asm
	// begin inline asm
	@%p18 st.global.v4.b32 [ %rd42 + 0 ], { %r541, %r542, %r543, %r544 };
	// end inline asm
	// begin inline asm
	@%p18 st.global.v4.b32 [ %rd43 + 0 ], { %r545, %r546, %r547, %r548 };
	// end inline asm
	.loc	1 142 4                         // gated_mlp.py:142:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/ubuntu/anjiang/PTX_dataset/triton_ptx/gated_mlp.py"
	.file	2 "/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 165                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x9e DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 103                                 // DW_AT_name
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 109
.b8 108
.b8 112
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 117
.b8 98
.b8 117
.b8 110
.b8 116
.b8 117
.b8 47
.b8 97
.b8 110
.b8 106
.b8 105
.b8 97
.b8 110
.b8 103
.b8 47
.b8 80
.b8 84
.b8 88
.b8 95
.b8 100
.b8 97
.b8 116
.b8 97
.b8 115
.b8 101
.b8 116
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 116
.b8 120
.b8 0
.b8 2                                   // Abbrev [2] 0x52:0x10 DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x62:0x46 DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 82                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x77:0x18 DW_TAG_inlined_subroutine
.b32 82                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 93                                  // DW_AT_call_line
.b8 27                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x8f:0x18 DW_TAG_inlined_subroutine
.b32 82                                 // DW_AT_abstract_origin
.b64 $L__tmp3                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 120                                 // DW_AT_call_line
.b8 33                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
