; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @matmul_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = add i32 %3, 31, !dbg !9
  %12 = sdiv i32 %11, 32, !dbg !13
  %13 = shl nsw i32 %12, 3, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %14 = sdiv i32 %10, %.frozen, !dbg !15
  %15 = shl i32 %14, 3, !dbg !16
  %16 = sub i32 1, %15, !dbg !17
  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 8), !dbg !18
  %18 = mul i32 %14, %.frozen, !dbg !19
  %.decomposed = sub i32 %10, %18, !dbg !19
  %19 = sdiv i32 %.decomposed, %17, !dbg !20
  %20 = shl i32 %19, 5, !dbg !21
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !22
  %22 = shl nuw nsw i32 %21, 3, !dbg !22
  %23 = and i32 %22, 24, !dbg !22
  %24 = or disjoint i32 %20, %23, !dbg !23
  %25 = srem i32 %24, %3, !dbg !24
  %26 = zext nneg i32 %23 to i64, !dbg !25
  %27 = getelementptr half, ptr addrspace(1) %0, i64 %26, !dbg !25
  %28 = and i32 %21, 4, !dbg !26
  %29 = and i32 %21, 8, !dbg !26
  %30 = and i32 %21, 16, !dbg !26
  %31 = and i32 %21, 32, !dbg !26
  %32 = lshr i32 %21, 2, !dbg !26
  %33 = and i32 %32, 15, !dbg !26
  %34 = or disjoint i32 %33, 16, !dbg !26
  %35 = mul i32 %6, %33, !dbg !27
  %36 = mul i32 %6, %34, !dbg !27
  %37 = add i32 %25, %35, !dbg !28
  %38 = add i32 %25, %36, !dbg !28
  %39 = sext i32 %37 to i64, !dbg !29
  %40 = getelementptr half, ptr addrspace(1) %1, i64 %39, !dbg !29
  %41 = sext i32 %38 to i64, !dbg !29
  %42 = getelementptr half, ptr addrspace(1) %1, i64 %41, !dbg !29
  %43 = add i32 %4, 31, !dbg !30
  %44 = sdiv i32 %43, 32, !dbg !32
  %45 = shl i32 %6, 5, !dbg !33
  %46 = icmp sgt i32 %43, 31, !dbg !34
  %47 = icmp slt i32 %23, %4, !dbg !35
  %48 = and i1 %47, %46, !dbg !34
  %49 = xor i32 %22, %21, !dbg !36
  %50 = and i32 %49, 24, !dbg !36
  %51 = shl nuw nsw i32 %33, 5, !dbg !36
  %52 = or disjoint i32 %50, %51, !dbg !36
  %53 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %52, !dbg !36
  %54 = or disjoint i32 %52, 512, !dbg !36
  %55 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %54, !dbg !36
  %56 = or disjoint i32 %52, 1024, !dbg !36
  %57 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %56, !dbg !36
  %58 = or disjoint i32 %52, 1536, !dbg !36
  %59 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %58, !dbg !36
  %60 = select i1 %48, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %53, ptr addrspace(1) %27, i32 %60) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %55, ptr addrspace(1) %27, i32 %60) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %57, ptr addrspace(1) %27, i32 %60) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %59, ptr addrspace(1) %27, i32 %60) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %61 = icmp slt i32 %33, %4, !dbg !37
  %62 = icmp slt i32 %34, %4, !dbg !37
  %63 = and i1 %61, %46, !dbg !34
  %64 = and i1 %62, %46, !dbg !34
  %65 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %52, !dbg !38
  %66 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %54, !dbg !38
  %67 = select i1 %63, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %65, ptr addrspace(1) %40, i32 %67) #2, !dbg !38
  %68 = select i1 %64, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %66, ptr addrspace(1) %42, i32 %68) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %69 = icmp sgt i32 %43, 63, !dbg !34
  %70 = getelementptr i8, ptr addrspace(1) %27, i64 64, !dbg !39
  %71 = sext i32 %45 to i64, !dbg !40
  %72 = getelementptr half, ptr addrspace(1) %40, i64 %71, !dbg !40
  %73 = getelementptr half, ptr addrspace(1) %42, i64 %71, !dbg !40
  %74 = add i32 %4, -32, !dbg !41
  %75 = icmp slt i32 %23, %74, !dbg !35
  %76 = and i1 %69, %75, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %77 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %52, !dbg !36
  %78 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %54, !dbg !36
  %79 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %56, !dbg !36
  %80 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %58, !dbg !36
  %81 = select i1 %76, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %77, ptr addrspace(1) %70, i32 %81) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %78, ptr addrspace(1) %70, i32 %81) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %79, ptr addrspace(1) %70, i32 %81) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %80, ptr addrspace(1) %70, i32 %81) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %82 = icmp slt i32 %33, %74, !dbg !37
  %83 = icmp slt i32 %34, %74, !dbg !37
  %84 = and i1 %69, %82, !dbg !34
  %85 = and i1 %69, %83, !dbg !34
  %86 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18432), i32 %52, !dbg !38
  %87 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18432), i32 %54, !dbg !38
  %88 = select i1 %84, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %86, ptr addrspace(1) %72, i32 %88) #2, !dbg !38
  %89 = select i1 %85, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %87, ptr addrspace(1) %73, i32 %89) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %90 = icmp sgt i32 %43, 95, !dbg !34
  %91 = getelementptr i8, ptr addrspace(1) %27, i64 128, !dbg !39
  %92 = getelementptr half, ptr addrspace(1) %72, i64 %71, !dbg !40
  %93 = getelementptr half, ptr addrspace(1) %73, i64 %71, !dbg !40
  %94 = add i32 %4, -64, !dbg !41
  %95 = icmp slt i32 %23, %94, !dbg !35
  %96 = and i1 %90, %95, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %97 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %52, !dbg !36
  %98 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %54, !dbg !36
  %99 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %56, !dbg !36
  %100 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %58, !dbg !36
  %101 = select i1 %96, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %97, ptr addrspace(1) %91, i32 %101) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %98, ptr addrspace(1) %91, i32 %101) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %99, ptr addrspace(1) %91, i32 %101) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %100, ptr addrspace(1) %91, i32 %101) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %102 = icmp slt i32 %33, %94, !dbg !37
  %103 = icmp slt i32 %34, %94, !dbg !37
  %104 = and i1 %90, %102, !dbg !34
  %105 = and i1 %90, %103, !dbg !34
  %106 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 20480), i32 %52, !dbg !38
  %107 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 20480), i32 %54, !dbg !38
  %108 = select i1 %104, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %106, ptr addrspace(1) %92, i32 %108) #2, !dbg !38
  %109 = select i1 %105, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %107, ptr addrspace(1) %93, i32 %109) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %110 = icmp sgt i32 %43, 127, !dbg !34
  %111 = getelementptr i8, ptr addrspace(1) %27, i64 192, !dbg !39
  %112 = getelementptr half, ptr addrspace(1) %92, i64 %71, !dbg !40
  %113 = getelementptr half, ptr addrspace(1) %93, i64 %71, !dbg !40
  %114 = add i32 %4, -96, !dbg !41
  %115 = icmp slt i32 %23, %114, !dbg !35
  %116 = and i1 %110, %115, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %117 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 12288), i32 %52, !dbg !36
  %118 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 12288), i32 %54, !dbg !36
  %119 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 12288), i32 %56, !dbg !36
  %120 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 12288), i32 %58, !dbg !36
  %121 = select i1 %116, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %117, ptr addrspace(1) %111, i32 %121) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %118, ptr addrspace(1) %111, i32 %121) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %119, ptr addrspace(1) %111, i32 %121) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %120, ptr addrspace(1) %111, i32 %121) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %122 = icmp slt i32 %33, %114, !dbg !37
  %123 = icmp slt i32 %34, %114, !dbg !37
  %124 = and i1 %110, %122, !dbg !34
  %125 = and i1 %110, %123, !dbg !34
  %126 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 22528), i32 %52, !dbg !38
  %127 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 22528), i32 %54, !dbg !38
  %128 = select i1 %124, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %126, ptr addrspace(1) %112, i32 %128) #2, !dbg !38
  %129 = select i1 %125, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %127, ptr addrspace(1) %113, i32 %129) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  br i1 %46, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !34

.._crit_edge_crit_edge:                           ; preds = %9
  %.pre = shl nuw nsw i32 %31, 4, !dbg !42
  br label %._crit_edge, !dbg !34

.lr.ph:                                           ; preds = %9
  %.not = icmp eq i32 %28, 0, !dbg !26
  %130 = and i32 %21, 2, !dbg !22
  %131 = icmp eq i32 %130, 0, !dbg !22
  %132 = add nsw i32 %44, -4
  %133 = shl nuw nsw i32 %21, 5
  %134 = and i32 %133, 32
  %135 = select i1 %131, i32 0, i32 72
  %136 = or disjoint i32 %135, %134
  %137 = select i1 %.not, i32 0, i32 144
  %138 = or disjoint i32 %136, %137
  %139 = shl nuw nsw i32 %29, 5
  %140 = or disjoint i32 %138, %139
  %141 = lshr exact i32 %30, 1
  %142 = xor i32 %140, %141
  %143 = shl nuw nsw i32 %31, 4
  %144 = or disjoint i32 %142, %143
  %145 = xor i32 %144, 16
  %146 = xor i32 %144, 1024
  %147 = xor i32 %144, 1040
  %148 = and i32 %133, 768
  %149 = or disjoint i32 %138, %148
  %150 = xor i32 %149, 8
  %151 = xor i32 %149, 16
  %152 = xor i32 %149, 24
  %.neg177 = add nsw i32 %4, -128
  br label %153, !dbg !34

153:                                              ; preds = %.lr.ph, %153
  %154 = phi i32 [ -1, %.lr.ph ], [ %192, %153 ]
  %155 = phi i32 [ 3, %.lr.ph ], [ %336, %153 ]
  %.pn80183 = phi ptr addrspace(1) [ %113, %.lr.ph ], [ %333, %153 ]
  %.pn96182 = phi ptr addrspace(1) [ %112, %.lr.ph ], [ %332, %153 ]
  %.pn16181 = phi ptr addrspace(1) [ %111, %.lr.ph ], [ %331, %153 ]
  %156 = phi float [ 0.000000e+00, %.lr.ph ], [ %292, %153 ]
  %157 = phi float [ 0.000000e+00, %.lr.ph ], [ %293, %153 ]
  %158 = phi float [ 0.000000e+00, %.lr.ph ], [ %294, %153 ]
  %159 = phi float [ 0.000000e+00, %.lr.ph ], [ %295, %153 ]
  %160 = phi float [ 0.000000e+00, %.lr.ph ], [ %297, %153 ]
  %161 = phi float [ 0.000000e+00, %.lr.ph ], [ %298, %153 ]
  %162 = phi float [ 0.000000e+00, %.lr.ph ], [ %299, %153 ]
  %163 = phi float [ 0.000000e+00, %.lr.ph ], [ %300, %153 ]
  %164 = phi float [ 0.000000e+00, %.lr.ph ], [ %302, %153 ]
  %165 = phi float [ 0.000000e+00, %.lr.ph ], [ %303, %153 ]
  %166 = phi float [ 0.000000e+00, %.lr.ph ], [ %304, %153 ]
  %167 = phi float [ 0.000000e+00, %.lr.ph ], [ %305, %153 ]
  %168 = phi float [ 0.000000e+00, %.lr.ph ], [ %307, %153 ]
  %169 = phi float [ 0.000000e+00, %.lr.ph ], [ %308, %153 ]
  %170 = phi float [ 0.000000e+00, %.lr.ph ], [ %309, %153 ]
  %171 = phi float [ 0.000000e+00, %.lr.ph ], [ %310, %153 ]
  %172 = phi float [ 0.000000e+00, %.lr.ph ], [ %312, %153 ]
  %173 = phi float [ 0.000000e+00, %.lr.ph ], [ %313, %153 ]
  %174 = phi float [ 0.000000e+00, %.lr.ph ], [ %314, %153 ]
  %175 = phi float [ 0.000000e+00, %.lr.ph ], [ %315, %153 ]
  %176 = phi float [ 0.000000e+00, %.lr.ph ], [ %317, %153 ]
  %177 = phi float [ 0.000000e+00, %.lr.ph ], [ %318, %153 ]
  %178 = phi float [ 0.000000e+00, %.lr.ph ], [ %319, %153 ]
  %179 = phi float [ 0.000000e+00, %.lr.ph ], [ %320, %153 ]
  %180 = phi float [ 0.000000e+00, %.lr.ph ], [ %322, %153 ]
  %181 = phi float [ 0.000000e+00, %.lr.ph ], [ %323, %153 ]
  %182 = phi float [ 0.000000e+00, %.lr.ph ], [ %324, %153 ]
  %183 = phi float [ 0.000000e+00, %.lr.ph ], [ %325, %153 ]
  %184 = phi float [ 0.000000e+00, %.lr.ph ], [ %327, %153 ]
  %185 = phi float [ 0.000000e+00, %.lr.ph ], [ %328, %153 ]
  %186 = phi float [ 0.000000e+00, %.lr.ph ], [ %329, %153 ]
  %187 = phi float [ 0.000000e+00, %.lr.ph ], [ %330, %153 ]
  %188 = phi i32 [ 0, %.lr.ph ], [ %356, %153 ]
  %189 = icmp slt i32 %188, %132, !dbg !34
  %190 = add i32 %154, 1, !dbg !34
  %191 = icmp sgt i32 %190, 3, !dbg !34
  %192 = select i1 %191, i32 0, i32 %190, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !36
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %.idx = shl i32 %192, 12, !dbg !36
  %193 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !36
  %194 = getelementptr inbounds nuw half, ptr addrspace(3) %193, i32 %144, !dbg !36
  %195 = ptrtoint ptr addrspace(3) %194 to i32, !dbg !36
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %195) #2, !dbg !36
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !36
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !36
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !36
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !36
  %201 = getelementptr inbounds nuw half, ptr addrspace(3) %193, i32 %145, !dbg !36
  %202 = ptrtoint ptr addrspace(3) %201 to i32, !dbg !36
  %203 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %202) #2, !dbg !36
  %204 = extractvalue { i32, i32, i32, i32 } %203, 0, !dbg !36
  %205 = extractvalue { i32, i32, i32, i32 } %203, 1, !dbg !36
  %206 = extractvalue { i32, i32, i32, i32 } %203, 2, !dbg !36
  %207 = extractvalue { i32, i32, i32, i32 } %203, 3, !dbg !36
  %208 = getelementptr inbounds nuw half, ptr addrspace(3) %193, i32 %146, !dbg !36
  %209 = ptrtoint ptr addrspace(3) %208 to i32, !dbg !36
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %209) #2, !dbg !36
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !36
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !36
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !36
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !36
  %215 = getelementptr inbounds nuw half, ptr addrspace(3) %193, i32 %147, !dbg !36
  %216 = ptrtoint ptr addrspace(3) %215 to i32, !dbg !36
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %216) #2, !dbg !36
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !36
  %219 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !36
  %220 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !36
  %221 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !36
  %.idx143 = shl i32 %192, 11, !dbg !38
  %222 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %.idx143, !dbg !38
  %223 = getelementptr inbounds nuw half, ptr addrspace(3) %222, i32 %149, !dbg !38
  %224 = ptrtoint ptr addrspace(3) %223 to i32, !dbg !38
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %224) #2, !dbg !38
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !38
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !38
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !38
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !38
  %230 = getelementptr inbounds nuw half, ptr addrspace(3) %222, i32 %150, !dbg !38
  %231 = ptrtoint ptr addrspace(3) %230 to i32, !dbg !38
  %232 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %231) #2, !dbg !38
  %233 = extractvalue { i32, i32, i32, i32 } %232, 0, !dbg !38
  %234 = extractvalue { i32, i32, i32, i32 } %232, 1, !dbg !38
  %235 = extractvalue { i32, i32, i32, i32 } %232, 2, !dbg !38
  %236 = extractvalue { i32, i32, i32, i32 } %232, 3, !dbg !38
  %237 = getelementptr inbounds nuw half, ptr addrspace(3) %222, i32 %151, !dbg !38
  %238 = ptrtoint ptr addrspace(3) %237 to i32, !dbg !38
  %239 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %238) #2, !dbg !38
  %240 = extractvalue { i32, i32, i32, i32 } %239, 0, !dbg !38
  %241 = extractvalue { i32, i32, i32, i32 } %239, 1, !dbg !38
  %242 = extractvalue { i32, i32, i32, i32 } %239, 2, !dbg !38
  %243 = extractvalue { i32, i32, i32, i32 } %239, 3, !dbg !38
  %244 = getelementptr inbounds nuw half, ptr addrspace(3) %222, i32 %152, !dbg !38
  %245 = ptrtoint ptr addrspace(3) %244 to i32, !dbg !38
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %245) #2, !dbg !38
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !38
  %248 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !38
  %249 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !38
  %250 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !38
  %251 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %156, float %157, float %158, float %159, i32 %197, i32 %198, i32 %199, i32 %200, i32 %226, i32 %227) #2, !dbg !43
  %252 = extractvalue { float, float, float, float } %251, 0, !dbg !43
  %253 = extractvalue { float, float, float, float } %251, 1, !dbg !43
  %254 = extractvalue { float, float, float, float } %251, 2, !dbg !43
  %255 = extractvalue { float, float, float, float } %251, 3, !dbg !43
  %256 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %160, float %161, float %162, float %163, i32 %197, i32 %198, i32 %199, i32 %200, i32 %233, i32 %234) #2, !dbg !43
  %257 = extractvalue { float, float, float, float } %256, 0, !dbg !43
  %258 = extractvalue { float, float, float, float } %256, 1, !dbg !43
  %259 = extractvalue { float, float, float, float } %256, 2, !dbg !43
  %260 = extractvalue { float, float, float, float } %256, 3, !dbg !43
  %261 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %164, float %165, float %166, float %167, i32 %197, i32 %198, i32 %199, i32 %200, i32 %240, i32 %241) #2, !dbg !43
  %262 = extractvalue { float, float, float, float } %261, 0, !dbg !43
  %263 = extractvalue { float, float, float, float } %261, 1, !dbg !43
  %264 = extractvalue { float, float, float, float } %261, 2, !dbg !43
  %265 = extractvalue { float, float, float, float } %261, 3, !dbg !43
  %266 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %168, float %169, float %170, float %171, i32 %197, i32 %198, i32 %199, i32 %200, i32 %247, i32 %248) #2, !dbg !43
  %267 = extractvalue { float, float, float, float } %266, 0, !dbg !43
  %268 = extractvalue { float, float, float, float } %266, 1, !dbg !43
  %269 = extractvalue { float, float, float, float } %266, 2, !dbg !43
  %270 = extractvalue { float, float, float, float } %266, 3, !dbg !43
  %271 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %172, float %173, float %174, float %175, i32 %211, i32 %212, i32 %213, i32 %214, i32 %226, i32 %227) #2, !dbg !43
  %272 = extractvalue { float, float, float, float } %271, 0, !dbg !43
  %273 = extractvalue { float, float, float, float } %271, 1, !dbg !43
  %274 = extractvalue { float, float, float, float } %271, 2, !dbg !43
  %275 = extractvalue { float, float, float, float } %271, 3, !dbg !43
  %276 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %176, float %177, float %178, float %179, i32 %211, i32 %212, i32 %213, i32 %214, i32 %233, i32 %234) #2, !dbg !43
  %277 = extractvalue { float, float, float, float } %276, 0, !dbg !43
  %278 = extractvalue { float, float, float, float } %276, 1, !dbg !43
  %279 = extractvalue { float, float, float, float } %276, 2, !dbg !43
  %280 = extractvalue { float, float, float, float } %276, 3, !dbg !43
  %281 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %180, float %181, float %182, float %183, i32 %211, i32 %212, i32 %213, i32 %214, i32 %240, i32 %241) #2, !dbg !43
  %282 = extractvalue { float, float, float, float } %281, 0, !dbg !43
  %283 = extractvalue { float, float, float, float } %281, 1, !dbg !43
  %284 = extractvalue { float, float, float, float } %281, 2, !dbg !43
  %285 = extractvalue { float, float, float, float } %281, 3, !dbg !43
  %286 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %184, float %185, float %186, float %187, i32 %211, i32 %212, i32 %213, i32 %214, i32 %247, i32 %248) #2, !dbg !43
  %287 = extractvalue { float, float, float, float } %286, 0, !dbg !43
  %288 = extractvalue { float, float, float, float } %286, 1, !dbg !43
  %289 = extractvalue { float, float, float, float } %286, 2, !dbg !43
  %290 = extractvalue { float, float, float, float } %286, 3, !dbg !43
  %291 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %252, float %253, float %254, float %255, i32 %204, i32 %205, i32 %206, i32 %207, i32 %228, i32 %229) #2, !dbg !43
  %292 = extractvalue { float, float, float, float } %291, 0, !dbg !43
  %293 = extractvalue { float, float, float, float } %291, 1, !dbg !43
  %294 = extractvalue { float, float, float, float } %291, 2, !dbg !43
  %295 = extractvalue { float, float, float, float } %291, 3, !dbg !43
  %296 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %257, float %258, float %259, float %260, i32 %204, i32 %205, i32 %206, i32 %207, i32 %235, i32 %236) #2, !dbg !43
  %297 = extractvalue { float, float, float, float } %296, 0, !dbg !43
  %298 = extractvalue { float, float, float, float } %296, 1, !dbg !43
  %299 = extractvalue { float, float, float, float } %296, 2, !dbg !43
  %300 = extractvalue { float, float, float, float } %296, 3, !dbg !43
  %301 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %262, float %263, float %264, float %265, i32 %204, i32 %205, i32 %206, i32 %207, i32 %242, i32 %243) #2, !dbg !43
  %302 = extractvalue { float, float, float, float } %301, 0, !dbg !43
  %303 = extractvalue { float, float, float, float } %301, 1, !dbg !43
  %304 = extractvalue { float, float, float, float } %301, 2, !dbg !43
  %305 = extractvalue { float, float, float, float } %301, 3, !dbg !43
  %306 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %267, float %268, float %269, float %270, i32 %204, i32 %205, i32 %206, i32 %207, i32 %249, i32 %250) #2, !dbg !43
  %307 = extractvalue { float, float, float, float } %306, 0, !dbg !43
  %308 = extractvalue { float, float, float, float } %306, 1, !dbg !43
  %309 = extractvalue { float, float, float, float } %306, 2, !dbg !43
  %310 = extractvalue { float, float, float, float } %306, 3, !dbg !43
  %311 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %272, float %273, float %274, float %275, i32 %218, i32 %219, i32 %220, i32 %221, i32 %228, i32 %229) #2, !dbg !43
  %312 = extractvalue { float, float, float, float } %311, 0, !dbg !43
  %313 = extractvalue { float, float, float, float } %311, 1, !dbg !43
  %314 = extractvalue { float, float, float, float } %311, 2, !dbg !43
  %315 = extractvalue { float, float, float, float } %311, 3, !dbg !43
  %316 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %277, float %278, float %279, float %280, i32 %218, i32 %219, i32 %220, i32 %221, i32 %235, i32 %236) #2, !dbg !43
  %317 = extractvalue { float, float, float, float } %316, 0, !dbg !43
  %318 = extractvalue { float, float, float, float } %316, 1, !dbg !43
  %319 = extractvalue { float, float, float, float } %316, 2, !dbg !43
  %320 = extractvalue { float, float, float, float } %316, 3, !dbg !43
  %321 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %282, float %283, float %284, float %285, i32 %218, i32 %219, i32 %220, i32 %221, i32 %242, i32 %243) #2, !dbg !43
  %322 = extractvalue { float, float, float, float } %321, 0, !dbg !43
  %323 = extractvalue { float, float, float, float } %321, 1, !dbg !43
  %324 = extractvalue { float, float, float, float } %321, 2, !dbg !43
  %325 = extractvalue { float, float, float, float } %321, 3, !dbg !43
  %326 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %287, float %288, float %289, float %290, i32 %218, i32 %219, i32 %220, i32 %221, i32 %249, i32 %250) #2, !dbg !43
  %327 = extractvalue { float, float, float, float } %326, 0, !dbg !43
  %328 = extractvalue { float, float, float, float } %326, 1, !dbg !43
  %329 = extractvalue { float, float, float, float } %326, 2, !dbg !43
  %330 = extractvalue { float, float, float, float } %326, 3, !dbg !43
  %331 = getelementptr i8, ptr addrspace(1) %.pn16181, i64 64, !dbg !39
  %332 = getelementptr half, ptr addrspace(1) %.pn96182, i64 %71, !dbg !40
  %333 = getelementptr half, ptr addrspace(1) %.pn80183, i64 %71, !dbg !40
  %334 = add i32 %155, 1, !dbg !34
  %335 = icmp sgt i32 %334, 3, !dbg !34
  %336 = select i1 %335, i32 0, i32 %334, !dbg !34
  %337 = shl i32 %188, 5, !dbg !41
  %338 = sub i32 %.neg177, %337, !dbg !41
  %339 = icmp slt i32 %23, %338, !dbg !35
  %.idx144 = shl i32 %336, 12, !dbg !36
  %340 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx144, !dbg !36
  %341 = and i1 %189, %339, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %342 = getelementptr inbounds nuw half, ptr addrspace(3) %340, i32 %52, !dbg !36
  %343 = getelementptr inbounds nuw half, ptr addrspace(3) %340, i32 %54, !dbg !36
  %344 = getelementptr inbounds nuw half, ptr addrspace(3) %340, i32 %56, !dbg !36
  %345 = getelementptr inbounds nuw half, ptr addrspace(3) %340, i32 %58, !dbg !36
  %346 = select i1 %341, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %342, ptr addrspace(1) %331, i32 %346) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %343, ptr addrspace(1) %331, i32 %346) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %344, ptr addrspace(1) %331, i32 %346) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %345, ptr addrspace(1) %331, i32 %346) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %347 = icmp slt i32 %33, %338, !dbg !37
  %348 = icmp slt i32 %34, %338, !dbg !37
  %.idx145 = shl i32 %336, 11, !dbg !38
  %349 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %.idx145, !dbg !38
  %350 = and i1 %189, %347, !dbg !34
  %351 = and i1 %189, %348, !dbg !34
  %352 = getelementptr inbounds nuw half, ptr addrspace(3) %349, i32 %52, !dbg !38
  %353 = getelementptr inbounds nuw half, ptr addrspace(3) %349, i32 %54, !dbg !38
  %354 = select i1 %350, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %352, ptr addrspace(1) %332, i32 %354) #2, !dbg !38
  %355 = select i1 %351, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %353, ptr addrspace(1) %333, i32 %355) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %356 = add nuw nsw i32 %188, 1, !dbg !34
  %exitcond.not = icmp eq i32 %356, %44, !dbg !34
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %153, !dbg !34

._crit_edge.loopexit:                             ; preds = %153
  %357 = insertelement <32 x float> poison, float %292, i64 0, !dbg !44
  %358 = insertelement <32 x float> %357, float %293, i64 1, !dbg !44
  %359 = insertelement <32 x float> %358, float %294, i64 2, !dbg !44
  %360 = insertelement <32 x float> %359, float %295, i64 3, !dbg !44
  %361 = insertelement <32 x float> %360, float %297, i64 4, !dbg !44
  %362 = insertelement <32 x float> %361, float %298, i64 5, !dbg !44
  %363 = insertelement <32 x float> %362, float %299, i64 6, !dbg !44
  %364 = insertelement <32 x float> %363, float %300, i64 7, !dbg !44
  %365 = insertelement <32 x float> %364, float %302, i64 8, !dbg !44
  %366 = insertelement <32 x float> %365, float %303, i64 9, !dbg !44
  %367 = insertelement <32 x float> %366, float %304, i64 10, !dbg !44
  %368 = insertelement <32 x float> %367, float %305, i64 11, !dbg !44
  %369 = insertelement <32 x float> %368, float %307, i64 12, !dbg !44
  %370 = insertelement <32 x float> %369, float %308, i64 13, !dbg !44
  %371 = insertelement <32 x float> %370, float %309, i64 14, !dbg !44
  %372 = insertelement <32 x float> %371, float %310, i64 15, !dbg !44
  %373 = insertelement <32 x float> %372, float %312, i64 16, !dbg !44
  %374 = insertelement <32 x float> %373, float %313, i64 17, !dbg !44
  %375 = insertelement <32 x float> %374, float %314, i64 18, !dbg !44
  %376 = insertelement <32 x float> %375, float %315, i64 19, !dbg !44
  %377 = insertelement <32 x float> %376, float %317, i64 20, !dbg !44
  %378 = insertelement <32 x float> %377, float %318, i64 21, !dbg !44
  %379 = insertelement <32 x float> %378, float %319, i64 22, !dbg !44
  %380 = insertelement <32 x float> %379, float %320, i64 23, !dbg !44
  %381 = insertelement <32 x float> %380, float %322, i64 24, !dbg !44
  %382 = insertelement <32 x float> %381, float %323, i64 25, !dbg !44
  %383 = insertelement <32 x float> %382, float %324, i64 26, !dbg !44
  %384 = insertelement <32 x float> %383, float %325, i64 27, !dbg !44
  %385 = insertelement <32 x float> %384, float %327, i64 28, !dbg !44
  %386 = insertelement <32 x float> %385, float %328, i64 29, !dbg !44
  %387 = insertelement <32 x float> %386, float %329, i64 30, !dbg !44
  %388 = insertelement <32 x float> %387, float %330, i64 31, !dbg !44
  %389 = fptrunc <32 x float> %388 to <32 x half>, !dbg !44
  br label %._crit_edge, !dbg !45

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.._crit_edge_crit_edge
  %.pre-phi = phi i32 [ %.pre, %.._crit_edge_crit_edge ], [ %143, %._crit_edge.loopexit ], !dbg !42
  %390 = phi <32 x half> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %389, %._crit_edge.loopexit ]
  %391 = mul i32 %19, %17, !dbg !45
  %.decomposed279 = sub i32 %.decomposed, %391, !dbg !45
  %392 = add i32 %.decomposed279, %15, !dbg !46
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %393 = shl i32 %392, 6, !dbg !47
  %394 = or disjoint i32 %393, %33, !dbg !48
  %395 = or disjoint i32 %393, %34, !dbg !48
  %396 = or disjoint i32 %394, 32, !dbg !48
  %397 = or disjoint i32 %394, 48, !dbg !48
  %398 = mul i32 %394, %7, !dbg !49
  %399 = mul i32 %395, %7, !dbg !49
  %400 = mul i32 %396, %7, !dbg !49
  %401 = mul i32 %397, %7, !dbg !49
  %402 = sext i32 %398 to i64, !dbg !50
  %403 = getelementptr half, ptr addrspace(1) %2, i64 %402, !dbg !50
  %404 = sext i32 %399 to i64, !dbg !50
  %405 = getelementptr half, ptr addrspace(1) %2, i64 %404, !dbg !50
  %406 = sext i32 %400 to i64, !dbg !50
  %407 = getelementptr half, ptr addrspace(1) %2, i64 %406, !dbg !50
  %408 = sext i32 %401 to i64, !dbg !50
  %409 = getelementptr half, ptr addrspace(1) %2, i64 %408, !dbg !50
  %410 = sext i32 %24 to i64, !dbg !51
  %411 = getelementptr half, ptr addrspace(1) %403, i64 %410, !dbg !51
  %412 = getelementptr half, ptr addrspace(1) %405, i64 %410, !dbg !51
  %413 = getelementptr half, ptr addrspace(1) %407, i64 %410, !dbg !51
  %414 = getelementptr half, ptr addrspace(1) %409, i64 %410, !dbg !51
  %415 = icmp slt i32 %394, 1, !dbg !52
  %416 = icmp slt i32 %395, 1, !dbg !52
  %417 = icmp slt i32 %393, 0, !dbg !52
  %418 = icmp slt i32 %24, %3, !dbg !53
  %419 = and i1 %418, %415, !dbg !54
  %420 = and i1 %418, %416, !dbg !54
  %421 = and i1 %418, %417, !dbg !54
  %422 = shl nuw nsw i32 %21, 1, !dbg !42
  %423 = and i32 %422, 6, !dbg !42
  %424 = shl nuw nsw i32 %28, 3, !dbg !42
  %425 = shl nuw nsw i32 %29, 3, !dbg !42
  %426 = shl nuw nsw i32 %30, 3, !dbg !42
  %427 = or disjoint i32 %423, %.pre-phi, !dbg !42
  %428 = or disjoint i32 %427, %424, !dbg !42
  %429 = or disjoint i32 %428, %425, !dbg !42
  %430 = or disjoint i32 %429, %426, !dbg !42
  %431 = and i32 %22, 312, !dbg !42
  %432 = or disjoint i32 %425, %431, !dbg !42
  %433 = or disjoint i32 %432, %426, !dbg !42
  %434 = lshr i32 %430, 2, !dbg !42
  %435 = and i32 %434, 1073741816, !dbg !42
  %436 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %435, !dbg !42
  %437 = getelementptr inbounds nuw half, ptr addrspace(3) %436, i32 %430, !dbg !42
  %438 = shufflevector <32 x half> %390, <32 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !42
  store <2 x half> %438, ptr addrspace(3) %437, align 4, !dbg !42
  %439 = xor i32 %430, 256, !dbg !42
  %440 = lshr i32 %439, 2, !dbg !42
  %441 = and i32 %440, 1073741816, !dbg !42
  %442 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %441, !dbg !42
  %443 = getelementptr inbounds nuw half, ptr addrspace(3) %442, i32 %439, !dbg !42
  %444 = shufflevector <32 x half> %390, <32 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !42
  store <2 x half> %444, ptr addrspace(3) %443, align 4, !dbg !42
  %445 = getelementptr inbounds nuw i8, ptr addrspace(3) %437, i32 16, !dbg !42
  %446 = shufflevector <32 x half> %390, <32 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !42
  store <2 x half> %446, ptr addrspace(3) %445, align 4, !dbg !42
  %447 = xor i32 %430, 264, !dbg !42
  %448 = lshr i32 %447, 2, !dbg !42
  %449 = and i32 %448, 1073741816, !dbg !42
  %450 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %449, !dbg !42
  %451 = getelementptr inbounds nuw half, ptr addrspace(3) %450, i32 %447, !dbg !42
  %452 = shufflevector <32 x half> %390, <32 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !42
  store <2 x half> %452, ptr addrspace(3) %451, align 4, !dbg !42
  %453 = xor i32 %430, 16, !dbg !42
  %454 = getelementptr inbounds nuw half, ptr addrspace(3) %436, i32 %453, !dbg !42
  %455 = shufflevector <32 x half> %390, <32 x half> poison, <2 x i32> <i32 8, i32 9>, !dbg !42
  store <2 x half> %455, ptr addrspace(3) %454, align 4, !dbg !42
  %456 = xor i32 %430, 272, !dbg !42
  %457 = lshr i32 %456, 2, !dbg !42
  %458 = and i32 %457, 1073741816, !dbg !42
  %459 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %458, !dbg !42
  %460 = getelementptr inbounds nuw half, ptr addrspace(3) %459, i32 %456, !dbg !42
  %461 = shufflevector <32 x half> %390, <32 x half> poison, <2 x i32> <i32 10, i32 11>, !dbg !42
  store <2 x half> %461, ptr addrspace(3) %460, align 4, !dbg !42
  %462 = xor i32 %430, 24, !dbg !42
  %463 = getelementptr inbounds nuw half, ptr addrspace(3) %436, i32 %462, !dbg !42
  %464 = shufflevector <32 x half> %390, <32 x half> poison, <2 x i32> <i32 12, i32 13>, !dbg !42
  store <2 x half> %464, ptr addrspace(3) %463, align 4, !dbg !42
  %465 = xor i32 %430, 280, !dbg !42
  %466 = lshr i32 %465, 2, !dbg !42
  %467 = and i32 %466, 1073741816, !dbg !42
  %468 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %467, !dbg !42
  %469 = getelementptr inbounds nuw half, ptr addrspace(3) %468, i32 %465, !dbg !42
  %470 = shufflevector <32 x half> %390, <32 x half> poison, <2 x i32> <i32 14, i32 15>, !dbg !42
  store <2 x half> %470, ptr addrspace(3) %469, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %471 = lshr exact i32 %433, 2, !dbg !42
  %472 = and i32 %471, 120, !dbg !42
  %473 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %472, !dbg !42
  %474 = getelementptr inbounds nuw half, ptr addrspace(3) %473, i32 %433, !dbg !42
  %475 = load <4 x i32>, ptr addrspace(3) %474, align 16, !dbg !42
  %476 = or disjoint i32 %433, 512, !dbg !42
  %477 = lshr exact i32 %476, 2, !dbg !42
  %478 = and i32 %477, 536870904, !dbg !42
  %479 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %478, !dbg !42
  %480 = getelementptr inbounds nuw half, ptr addrspace(3) %479, i32 %476, !dbg !42
  %481 = load <4 x i32>, ptr addrspace(3) %480, align 16, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %482 = shufflevector <32 x half> %390, <32 x half> poison, <2 x i32> <i32 16, i32 17>, !dbg !42
  store <2 x half> %482, ptr addrspace(3) %437, align 4, !dbg !42
  %483 = shufflevector <32 x half> %390, <32 x half> poison, <2 x i32> <i32 18, i32 19>, !dbg !42
  store <2 x half> %483, ptr addrspace(3) %443, align 4, !dbg !42
  %484 = shufflevector <32 x half> %390, <32 x half> poison, <2 x i32> <i32 20, i32 21>, !dbg !42
  store <2 x half> %484, ptr addrspace(3) %445, align 4, !dbg !42
  %485 = shufflevector <32 x half> %390, <32 x half> poison, <2 x i32> <i32 22, i32 23>, !dbg !42
  store <2 x half> %485, ptr addrspace(3) %451, align 4, !dbg !42
  %486 = shufflevector <32 x half> %390, <32 x half> poison, <2 x i32> <i32 24, i32 25>, !dbg !42
  store <2 x half> %486, ptr addrspace(3) %454, align 4, !dbg !42
  %487 = shufflevector <32 x half> %390, <32 x half> poison, <2 x i32> <i32 26, i32 27>, !dbg !42
  store <2 x half> %487, ptr addrspace(3) %460, align 4, !dbg !42
  %488 = shufflevector <32 x half> %390, <32 x half> poison, <2 x i32> <i32 28, i32 29>, !dbg !42
  store <2 x half> %488, ptr addrspace(3) %463, align 4, !dbg !42
  %489 = shufflevector <32 x half> %390, <32 x half> poison, <2 x i32> <i32 30, i32 31>, !dbg !42
  store <2 x half> %489, ptr addrspace(3) %469, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %490 = load <4 x i32>, ptr addrspace(3) %474, align 16, !dbg !42
  %491 = load <4 x i32>, ptr addrspace(3) %480, align 16, !dbg !42
  %.extract = extractelement <4 x i32> %475, i64 0, !dbg !42
  %.extract148 = extractelement <4 x i32> %475, i64 1, !dbg !42
  %.extract150 = extractelement <4 x i32> %475, i64 2, !dbg !42
  %.extract152 = extractelement <4 x i32> %475, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract148, i32 %.extract150, i32 %.extract152, ptr addrspace(1) %411, i1 %419) #2, !dbg !42
  %.extract154 = extractelement <4 x i32> %481, i64 0, !dbg !42
  %.extract156 = extractelement <4 x i32> %481, i64 1, !dbg !42
  %.extract158 = extractelement <4 x i32> %481, i64 2, !dbg !42
  %.extract160 = extractelement <4 x i32> %481, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract154, i32 %.extract156, i32 %.extract158, i32 %.extract160, ptr addrspace(1) %412, i1 %420) #2, !dbg !42
  %.extract162 = extractelement <4 x i32> %490, i64 0, !dbg !42
  %.extract164 = extractelement <4 x i32> %490, i64 1, !dbg !42
  %.extract166 = extractelement <4 x i32> %490, i64 2, !dbg !42
  %.extract168 = extractelement <4 x i32> %490, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract162, i32 %.extract164, i32 %.extract166, i32 %.extract168, ptr addrspace(1) %413, i1 %421) #2, !dbg !42
  %.extract170 = extractelement <4 x i32> %491, i64 0, !dbg !42
  %.extract172 = extractelement <4 x i32> %491, i64 1, !dbg !42
  %.extract174 = extractelement <4 x i32> %491, i64 2, !dbg !42
  %.extract176 = extractelement <4 x i32> %491, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract170, i32 %.extract172, i32 %.extract174, i32 %.extract176, ptr addrspace(1) %414, i1 %421) #2, !dbg !42
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

attributes #0 = { "nvvm.reqntid"="64" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "gated_mlp.py", directory: "/home/ubuntu/anjiang/PTX_dataset/triton_ptx")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !1, file: !1, line: 68, type: !6, scopeLine: 68, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 91, column: 24, scope: !5)
!9 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !12)
!10 = distinct !DILexicalBlockFile(scope: !5, file: !11, discriminator: 0)
!11 = !DIFile(filename: "standard.py", directory: "/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language")
!12 = !DILocation(line: 93, column: 27, scope: !5)
!13 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !12)
!14 = !DILocation(line: 94, column: 38, scope: !5)
!15 = !DILocation(line: 95, column: 22, scope: !5)
!16 = !DILocation(line: 96, column: 29, scope: !5)
!17 = !DILocation(line: 97, column: 35, scope: !5)
!18 = !DILocation(line: 97, column: 48, scope: !5)
!19 = !DILocation(line: 98, column: 34, scope: !5)
!20 = !DILocation(line: 99, column: 40, scope: !5)
!21 = !DILocation(line: 109, column: 23, scope: !5)
!22 = !DILocation(line: 109, column: 51, scope: !5)
!23 = !DILocation(line: 109, column: 38, scope: !5)
!24 = !DILocation(line: 109, column: 68, scope: !5)
!25 = !DILocation(line: 111, column: 22, scope: !5)
!26 = !DILocation(line: 112, column: 29, scope: !5)
!27 = !DILocation(line: 112, column: 40, scope: !5)
!28 = !DILocation(line: 112, column: 52, scope: !5)
!29 = !DILocation(line: 112, column: 22, scope: !5)
!30 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !31)
!31 = !DILocation(line: 120, column: 33, scope: !5)
!32 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !31)
!33 = !DILocation(line: 129, column: 33, scope: !5)
!34 = !DILocation(line: 120, column: 22, scope: !5)
!35 = !DILocation(line: 123, column: 51, scope: !5)
!36 = !DILocation(line: 123, column: 20, scope: !5)
!37 = !DILocation(line: 124, column: 51, scope: !5)
!38 = !DILocation(line: 124, column: 20, scope: !5)
!39 = !DILocation(line: 128, column: 18, scope: !5)
!40 = !DILocation(line: 129, column: 18, scope: !5)
!41 = !DILocation(line: 123, column: 55, scope: !5)
!42 = !DILocation(line: 142, column: 21, scope: !5)
!43 = !DILocation(line: 126, column: 35, scope: !5)
!44 = !DILocation(line: 134, column: 23, scope: !5)
!45 = !DILocation(line: 98, column: 54, scope: !5)
!46 = !DILocation(line: 98, column: 27, scope: !5)
!47 = !DILocation(line: 138, column: 22, scope: !5)
!48 = !DILocation(line: 138, column: 37, scope: !5)
!49 = !DILocation(line: 140, column: 33, scope: !5)
!50 = !DILocation(line: 140, column: 21, scope: !5)
!51 = !DILocation(line: 140, column: 52, scope: !5)
!52 = !DILocation(line: 141, column: 33, scope: !5)
!53 = !DILocation(line: 141, column: 58, scope: !5)
!54 = !DILocation(line: 141, column: 39, scope: !5)
!55 = !DILocation(line: 142, column: 4, scope: !5)
