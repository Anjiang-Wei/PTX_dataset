; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @matmul_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = add i32 %3, 63, !dbg !9
  %12 = sdiv i32 %11, 64, !dbg !13
  %13 = shl nsw i32 %12, 3, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %14 = sdiv i32 %10, %.frozen, !dbg !15
  %15 = shl i32 %14, 3, !dbg !16
  %16 = sub i32 1, %15, !dbg !17
  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 8), !dbg !18
  %18 = mul i32 %14, %.frozen, !dbg !19
  %.decomposed = sub i32 %10, %18, !dbg !19
  %19 = sdiv i32 %.decomposed, %17, !dbg !20
  %20 = shl i32 %19, 6, !dbg !21
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !22
  %22 = shl nuw nsw i32 %21, 3, !dbg !22
  %23 = and i32 %22, 24, !dbg !22
  %24 = and i32 %22, 56, !dbg !22
  %25 = or disjoint i32 %20, %24, !dbg !23
  %26 = srem i32 %25, %3, !dbg !24
  %27 = zext nneg i32 %23 to i64, !dbg !25
  %28 = getelementptr half, ptr addrspace(1) %0, i64 %27, !dbg !25
  %29 = and i32 %21, 64, !dbg !26
  %30 = lshr i32 %21, 3, !dbg !26
  %31 = and i32 %30, 15, !dbg !26
  %32 = or disjoint i32 %31, 16, !dbg !26
  %33 = mul i32 %6, %31, !dbg !27
  %34 = mul i32 %6, %32, !dbg !27
  %35 = add i32 %26, %33, !dbg !28
  %36 = add i32 %26, %34, !dbg !28
  %37 = sext i32 %35 to i64, !dbg !29
  %38 = getelementptr half, ptr addrspace(1) %1, i64 %37, !dbg !29
  %39 = sext i32 %36 to i64, !dbg !29
  %40 = getelementptr half, ptr addrspace(1) %1, i64 %39, !dbg !29
  %41 = add i32 %4, 31, !dbg !30
  %42 = sdiv i32 %41, 32, !dbg !32
  %43 = shl i32 %6, 5, !dbg !33
  %44 = icmp sgt i32 %41, 31, !dbg !34
  %45 = icmp slt i32 %23, %4, !dbg !35
  %46 = and i1 %45, %44, !dbg !34
  %47 = xor i32 %22, %21, !dbg !36
  %48 = and i32 %47, 24, !dbg !36
  %49 = lshr i32 %21, 2, !dbg !36
  %50 = and i32 %49, 8, !dbg !36
  %51 = and i32 %49, 15, !dbg !36
  %52 = lshr exact i32 %29, 2, !dbg !36
  %53 = or disjoint i32 %51, %52, !dbg !36
  %54 = shl nuw nsw i32 %53, 5, !dbg !36
  %55 = or disjoint i32 %54, %48, !dbg !36
  %56 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %55, !dbg !36
  %57 = or disjoint i32 %55, 1024, !dbg !36
  %58 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %57, !dbg !36
  %59 = or disjoint i32 %55, 2048, !dbg !36
  %60 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %59, !dbg !36
  %61 = or disjoint i32 %55, 3072, !dbg !36
  %62 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %61, !dbg !36
  %63 = select i1 %46, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %56, ptr addrspace(1) %28, i32 %63) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %58, ptr addrspace(1) %28, i32 %63) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %60, ptr addrspace(1) %28, i32 %63) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %62, ptr addrspace(1) %28, i32 %63) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %64 = icmp slt i32 %31, %4, !dbg !37
  %65 = icmp slt i32 %32, %4, !dbg !37
  %66 = and i1 %64, %44, !dbg !34
  %67 = and i1 %65, %44, !dbg !34
  %68 = and i32 %47, 56, !dbg !38
  %69 = shl nuw nsw i32 %31, 6, !dbg !38
  %70 = or disjoint i32 %68, %69, !dbg !38
  %71 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %70, !dbg !38
  %72 = or disjoint i32 %70, 1024, !dbg !38
  %73 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %72, !dbg !38
  %74 = select i1 %66, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %71, ptr addrspace(1) %38, i32 %74) #2, !dbg !38
  %75 = select i1 %67, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %73, ptr addrspace(1) %40, i32 %75) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %76 = icmp sgt i32 %41, 63, !dbg !34
  %77 = getelementptr i8, ptr addrspace(1) %28, i64 64, !dbg !39
  %78 = sext i32 %43 to i64, !dbg !40
  %79 = getelementptr half, ptr addrspace(1) %38, i64 %78, !dbg !40
  %80 = getelementptr half, ptr addrspace(1) %40, i64 %78, !dbg !40
  %81 = add i32 %4, -32, !dbg !41
  %82 = icmp slt i32 %23, %81, !dbg !35
  %83 = and i1 %76, %82, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %84 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %55, !dbg !36
  %85 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %57, !dbg !36
  %86 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %59, !dbg !36
  %87 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %61, !dbg !36
  %88 = select i1 %83, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %84, ptr addrspace(1) %77, i32 %88) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %85, ptr addrspace(1) %77, i32 %88) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %86, ptr addrspace(1) %77, i32 %88) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %87, ptr addrspace(1) %77, i32 %88) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %89 = icmp slt i32 %31, %81, !dbg !37
  %90 = icmp slt i32 %32, %81, !dbg !37
  %91 = and i1 %76, %89, !dbg !34
  %92 = and i1 %76, %90, !dbg !34
  %93 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 28672), i32 %70, !dbg !38
  %94 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 28672), i32 %72, !dbg !38
  %95 = select i1 %91, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %93, ptr addrspace(1) %79, i32 %95) #2, !dbg !38
  %96 = select i1 %92, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %94, ptr addrspace(1) %80, i32 %96) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %97 = icmp sgt i32 %41, 95, !dbg !34
  %98 = getelementptr i8, ptr addrspace(1) %28, i64 128, !dbg !39
  %99 = getelementptr half, ptr addrspace(1) %79, i64 %78, !dbg !40
  %100 = getelementptr half, ptr addrspace(1) %80, i64 %78, !dbg !40
  %101 = add i32 %4, -64, !dbg !41
  %102 = icmp slt i32 %23, %101, !dbg !35
  %103 = and i1 %97, %102, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %104 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %55, !dbg !36
  %105 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %57, !dbg !36
  %106 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %59, !dbg !36
  %107 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %61, !dbg !36
  %108 = select i1 %103, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %104, ptr addrspace(1) %98, i32 %108) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %105, ptr addrspace(1) %98, i32 %108) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %106, ptr addrspace(1) %98, i32 %108) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %107, ptr addrspace(1) %98, i32 %108) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %109 = icmp slt i32 %31, %101, !dbg !37
  %110 = icmp slt i32 %32, %101, !dbg !37
  %111 = and i1 %97, %109, !dbg !34
  %112 = and i1 %97, %110, !dbg !34
  %113 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %70, !dbg !38
  %114 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %72, !dbg !38
  %115 = select i1 %111, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %113, ptr addrspace(1) %99, i32 %115) #2, !dbg !38
  %116 = select i1 %112, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %114, ptr addrspace(1) %100, i32 %116) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  br i1 %44, label %.lr.ph, label %._crit_edge, !dbg !34

.lr.ph:                                           ; preds = %9
  %117 = and i32 %21, 4, !dbg !22
  %.not3 = icmp eq i32 %117, 0, !dbg !22
  %118 = and i32 %21, 2, !dbg !22
  %119 = icmp eq i32 %118, 0, !dbg !22
  %120 = add nsw i32 %42, -3
  %121 = shl nuw nsw i32 %21, 5
  %122 = select i1 %119, i32 0, i32 72
  %123 = select i1 %.not3, i32 0, i32 144
  %124 = and i32 %121, 288
  %125 = or disjoint i32 %124, %122
  %126 = or disjoint i32 %125, %123
  %127 = lshr i32 %21, 1
  %128 = and i32 %127, 8
  %129 = xor i32 %126, %128
  %130 = shl nuw nsw i32 %29, 3
  %131 = or disjoint i32 %129, %130
  %132 = xor i32 %131, 16
  %133 = xor i32 %131, 1040
  %134 = xor i32 %131, 2064
  %135 = xor i32 %131, 3088
  %136 = and i32 %21, 3
  %137 = mul nuw nsw i32 %136, 72
  %138 = select i1 %.not3, i32 0, i32 288
  %139 = xor i32 %138, %137
  %140 = shl nuw nsw i32 %21, 6
  %141 = and i32 %140, 1536
  %142 = or disjoint i32 %139, %141
  %143 = xor i32 %142, %50
  %144 = xor i32 %143, 16
  %145 = xor i32 %143, 32
  %146 = xor i32 %143, 48
  %.neg262 = add nsw i32 %4, -96
  br label %147, !dbg !34

147:                                              ; preds = %.lr.ph, %147
  %148 = phi i32 [ -1, %.lr.ph ], [ %218, %147 ]
  %149 = phi i32 [ 2, %.lr.ph ], [ %473, %147 ]
  %.pn82268 = phi ptr addrspace(1) [ %100, %.lr.ph ], [ %470, %147 ]
  %.pn98267 = phi ptr addrspace(1) [ %99, %.lr.ph ], [ %469, %147 ]
  %.pn18266 = phi ptr addrspace(1) [ %98, %.lr.ph ], [ %468, %147 ]
  %150 = phi float [ 0.000000e+00, %.lr.ph ], [ %389, %147 ]
  %151 = phi float [ 0.000000e+00, %.lr.ph ], [ %390, %147 ]
  %152 = phi float [ 0.000000e+00, %.lr.ph ], [ %391, %147 ]
  %153 = phi float [ 0.000000e+00, %.lr.ph ], [ %392, %147 ]
  %154 = phi float [ 0.000000e+00, %.lr.ph ], [ %394, %147 ]
  %155 = phi float [ 0.000000e+00, %.lr.ph ], [ %395, %147 ]
  %156 = phi float [ 0.000000e+00, %.lr.ph ], [ %396, %147 ]
  %157 = phi float [ 0.000000e+00, %.lr.ph ], [ %397, %147 ]
  %158 = phi float [ 0.000000e+00, %.lr.ph ], [ %399, %147 ]
  %159 = phi float [ 0.000000e+00, %.lr.ph ], [ %400, %147 ]
  %160 = phi float [ 0.000000e+00, %.lr.ph ], [ %401, %147 ]
  %161 = phi float [ 0.000000e+00, %.lr.ph ], [ %402, %147 ]
  %162 = phi float [ 0.000000e+00, %.lr.ph ], [ %404, %147 ]
  %163 = phi float [ 0.000000e+00, %.lr.ph ], [ %405, %147 ]
  %164 = phi float [ 0.000000e+00, %.lr.ph ], [ %406, %147 ]
  %165 = phi float [ 0.000000e+00, %.lr.ph ], [ %407, %147 ]
  %166 = phi float [ 0.000000e+00, %.lr.ph ], [ %409, %147 ]
  %167 = phi float [ 0.000000e+00, %.lr.ph ], [ %410, %147 ]
  %168 = phi float [ 0.000000e+00, %.lr.ph ], [ %411, %147 ]
  %169 = phi float [ 0.000000e+00, %.lr.ph ], [ %412, %147 ]
  %170 = phi float [ 0.000000e+00, %.lr.ph ], [ %414, %147 ]
  %171 = phi float [ 0.000000e+00, %.lr.ph ], [ %415, %147 ]
  %172 = phi float [ 0.000000e+00, %.lr.ph ], [ %416, %147 ]
  %173 = phi float [ 0.000000e+00, %.lr.ph ], [ %417, %147 ]
  %174 = phi float [ 0.000000e+00, %.lr.ph ], [ %419, %147 ]
  %175 = phi float [ 0.000000e+00, %.lr.ph ], [ %420, %147 ]
  %176 = phi float [ 0.000000e+00, %.lr.ph ], [ %421, %147 ]
  %177 = phi float [ 0.000000e+00, %.lr.ph ], [ %422, %147 ]
  %178 = phi float [ 0.000000e+00, %.lr.ph ], [ %424, %147 ]
  %179 = phi float [ 0.000000e+00, %.lr.ph ], [ %425, %147 ]
  %180 = phi float [ 0.000000e+00, %.lr.ph ], [ %426, %147 ]
  %181 = phi float [ 0.000000e+00, %.lr.ph ], [ %427, %147 ]
  %182 = phi float [ 0.000000e+00, %.lr.ph ], [ %429, %147 ]
  %183 = phi float [ 0.000000e+00, %.lr.ph ], [ %430, %147 ]
  %184 = phi float [ 0.000000e+00, %.lr.ph ], [ %431, %147 ]
  %185 = phi float [ 0.000000e+00, %.lr.ph ], [ %432, %147 ]
  %186 = phi float [ 0.000000e+00, %.lr.ph ], [ %434, %147 ]
  %187 = phi float [ 0.000000e+00, %.lr.ph ], [ %435, %147 ]
  %188 = phi float [ 0.000000e+00, %.lr.ph ], [ %436, %147 ]
  %189 = phi float [ 0.000000e+00, %.lr.ph ], [ %437, %147 ]
  %190 = phi float [ 0.000000e+00, %.lr.ph ], [ %439, %147 ]
  %191 = phi float [ 0.000000e+00, %.lr.ph ], [ %440, %147 ]
  %192 = phi float [ 0.000000e+00, %.lr.ph ], [ %441, %147 ]
  %193 = phi float [ 0.000000e+00, %.lr.ph ], [ %442, %147 ]
  %194 = phi float [ 0.000000e+00, %.lr.ph ], [ %444, %147 ]
  %195 = phi float [ 0.000000e+00, %.lr.ph ], [ %445, %147 ]
  %196 = phi float [ 0.000000e+00, %.lr.ph ], [ %446, %147 ]
  %197 = phi float [ 0.000000e+00, %.lr.ph ], [ %447, %147 ]
  %198 = phi float [ 0.000000e+00, %.lr.ph ], [ %449, %147 ]
  %199 = phi float [ 0.000000e+00, %.lr.ph ], [ %450, %147 ]
  %200 = phi float [ 0.000000e+00, %.lr.ph ], [ %451, %147 ]
  %201 = phi float [ 0.000000e+00, %.lr.ph ], [ %452, %147 ]
  %202 = phi float [ 0.000000e+00, %.lr.ph ], [ %454, %147 ]
  %203 = phi float [ 0.000000e+00, %.lr.ph ], [ %455, %147 ]
  %204 = phi float [ 0.000000e+00, %.lr.ph ], [ %456, %147 ]
  %205 = phi float [ 0.000000e+00, %.lr.ph ], [ %457, %147 ]
  %206 = phi float [ 0.000000e+00, %.lr.ph ], [ %459, %147 ]
  %207 = phi float [ 0.000000e+00, %.lr.ph ], [ %460, %147 ]
  %208 = phi float [ 0.000000e+00, %.lr.ph ], [ %461, %147 ]
  %209 = phi float [ 0.000000e+00, %.lr.ph ], [ %462, %147 ]
  %210 = phi float [ 0.000000e+00, %.lr.ph ], [ %464, %147 ]
  %211 = phi float [ 0.000000e+00, %.lr.ph ], [ %465, %147 ]
  %212 = phi float [ 0.000000e+00, %.lr.ph ], [ %466, %147 ]
  %213 = phi float [ 0.000000e+00, %.lr.ph ], [ %467, %147 ]
  %214 = phi i32 [ 0, %.lr.ph ], [ %493, %147 ]
  %215 = icmp slt i32 %214, %120, !dbg !34
  %216 = add i32 %148, 1, !dbg !34
  %217 = icmp sgt i32 %216, 2, !dbg !34
  %218 = select i1 %217, i32 0, i32 %216, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 4), !dbg !36
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %.idx = shl i32 %218, 13, !dbg !36
  %219 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !36
  %220 = getelementptr inbounds nuw half, ptr addrspace(3) %219, i32 %131, !dbg !36
  %221 = ptrtoint ptr addrspace(3) %220 to i32, !dbg !36
  %222 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %221) #2, !dbg !36
  %223 = extractvalue { i32, i32, i32, i32 } %222, 0, !dbg !36
  %224 = extractvalue { i32, i32, i32, i32 } %222, 1, !dbg !36
  %225 = extractvalue { i32, i32, i32, i32 } %222, 2, !dbg !36
  %226 = extractvalue { i32, i32, i32, i32 } %222, 3, !dbg !36
  %227 = getelementptr inbounds nuw half, ptr addrspace(3) %219, i32 %132, !dbg !36
  %228 = ptrtoint ptr addrspace(3) %227 to i32, !dbg !36
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %228) #2, !dbg !36
  %230 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !36
  %231 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !36
  %232 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !36
  %233 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !36
  %234 = getelementptr inbounds nuw half, ptr addrspace(3) %219, i32 %131, !dbg !36
  %235 = getelementptr inbounds nuw i8, ptr addrspace(3) %234, i32 2048, !dbg !36
  %236 = ptrtoint ptr addrspace(3) %235 to i32, !dbg !36
  %237 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %236) #2, !dbg !36
  %238 = extractvalue { i32, i32, i32, i32 } %237, 0, !dbg !36
  %239 = extractvalue { i32, i32, i32, i32 } %237, 1, !dbg !36
  %240 = extractvalue { i32, i32, i32, i32 } %237, 2, !dbg !36
  %241 = extractvalue { i32, i32, i32, i32 } %237, 3, !dbg !36
  %242 = getelementptr inbounds nuw half, ptr addrspace(3) %219, i32 %133, !dbg !36
  %243 = ptrtoint ptr addrspace(3) %242 to i32, !dbg !36
  %244 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %243) #2, !dbg !36
  %245 = extractvalue { i32, i32, i32, i32 } %244, 0, !dbg !36
  %246 = extractvalue { i32, i32, i32, i32 } %244, 1, !dbg !36
  %247 = extractvalue { i32, i32, i32, i32 } %244, 2, !dbg !36
  %248 = extractvalue { i32, i32, i32, i32 } %244, 3, !dbg !36
  %249 = getelementptr inbounds nuw half, ptr addrspace(3) %219, i32 %131, !dbg !36
  %250 = getelementptr inbounds nuw i8, ptr addrspace(3) %249, i32 4096, !dbg !36
  %251 = ptrtoint ptr addrspace(3) %250 to i32, !dbg !36
  %252 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %251) #2, !dbg !36
  %253 = extractvalue { i32, i32, i32, i32 } %252, 0, !dbg !36
  %254 = extractvalue { i32, i32, i32, i32 } %252, 1, !dbg !36
  %255 = extractvalue { i32, i32, i32, i32 } %252, 2, !dbg !36
  %256 = extractvalue { i32, i32, i32, i32 } %252, 3, !dbg !36
  %257 = getelementptr inbounds nuw half, ptr addrspace(3) %219, i32 %134, !dbg !36
  %258 = ptrtoint ptr addrspace(3) %257 to i32, !dbg !36
  %259 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %258) #2, !dbg !36
  %260 = extractvalue { i32, i32, i32, i32 } %259, 0, !dbg !36
  %261 = extractvalue { i32, i32, i32, i32 } %259, 1, !dbg !36
  %262 = extractvalue { i32, i32, i32, i32 } %259, 2, !dbg !36
  %263 = extractvalue { i32, i32, i32, i32 } %259, 3, !dbg !36
  %264 = getelementptr inbounds nuw half, ptr addrspace(3) %219, i32 %131, !dbg !36
  %265 = getelementptr inbounds nuw i8, ptr addrspace(3) %264, i32 6144, !dbg !36
  %266 = ptrtoint ptr addrspace(3) %265 to i32, !dbg !36
  %267 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %266) #2, !dbg !36
  %268 = extractvalue { i32, i32, i32, i32 } %267, 0, !dbg !36
  %269 = extractvalue { i32, i32, i32, i32 } %267, 1, !dbg !36
  %270 = extractvalue { i32, i32, i32, i32 } %267, 2, !dbg !36
  %271 = extractvalue { i32, i32, i32, i32 } %267, 3, !dbg !36
  %272 = getelementptr inbounds nuw half, ptr addrspace(3) %219, i32 %135, !dbg !36
  %273 = ptrtoint ptr addrspace(3) %272 to i32, !dbg !36
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %273) #2, !dbg !36
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !36
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !36
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !36
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !36
  %.idx193 = shl i32 %218, 12, !dbg !38
  %279 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %.idx193, !dbg !38
  %280 = getelementptr inbounds nuw half, ptr addrspace(3) %279, i32 %143, !dbg !38
  %281 = ptrtoint ptr addrspace(3) %280 to i32, !dbg !38
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %281) #2, !dbg !38
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !38
  %284 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !38
  %285 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !38
  %286 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !38
  %287 = getelementptr inbounds nuw half, ptr addrspace(3) %279, i32 %144, !dbg !38
  %288 = ptrtoint ptr addrspace(3) %287 to i32, !dbg !38
  %289 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %288) #2, !dbg !38
  %290 = extractvalue { i32, i32, i32, i32 } %289, 0, !dbg !38
  %291 = extractvalue { i32, i32, i32, i32 } %289, 1, !dbg !38
  %292 = extractvalue { i32, i32, i32, i32 } %289, 2, !dbg !38
  %293 = extractvalue { i32, i32, i32, i32 } %289, 3, !dbg !38
  %294 = getelementptr inbounds nuw half, ptr addrspace(3) %279, i32 %145, !dbg !38
  %295 = ptrtoint ptr addrspace(3) %294 to i32, !dbg !38
  %296 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %295) #2, !dbg !38
  %297 = extractvalue { i32, i32, i32, i32 } %296, 0, !dbg !38
  %298 = extractvalue { i32, i32, i32, i32 } %296, 1, !dbg !38
  %299 = extractvalue { i32, i32, i32, i32 } %296, 2, !dbg !38
  %300 = extractvalue { i32, i32, i32, i32 } %296, 3, !dbg !38
  %301 = getelementptr inbounds nuw half, ptr addrspace(3) %279, i32 %146, !dbg !38
  %302 = ptrtoint ptr addrspace(3) %301 to i32, !dbg !38
  %303 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %302) #2, !dbg !38
  %304 = extractvalue { i32, i32, i32, i32 } %303, 0, !dbg !38
  %305 = extractvalue { i32, i32, i32, i32 } %303, 1, !dbg !38
  %306 = extractvalue { i32, i32, i32, i32 } %303, 2, !dbg !38
  %307 = extractvalue { i32, i32, i32, i32 } %303, 3, !dbg !38
  %308 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %150, float %151, float %152, float %153, i32 %223, i32 %224, i32 %225, i32 %226, i32 %283, i32 %284) #2, !dbg !42
  %309 = extractvalue { float, float, float, float } %308, 0, !dbg !42
  %310 = extractvalue { float, float, float, float } %308, 1, !dbg !42
  %311 = extractvalue { float, float, float, float } %308, 2, !dbg !42
  %312 = extractvalue { float, float, float, float } %308, 3, !dbg !42
  %313 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %154, float %155, float %156, float %157, i32 %223, i32 %224, i32 %225, i32 %226, i32 %290, i32 %291) #2, !dbg !42
  %314 = extractvalue { float, float, float, float } %313, 0, !dbg !42
  %315 = extractvalue { float, float, float, float } %313, 1, !dbg !42
  %316 = extractvalue { float, float, float, float } %313, 2, !dbg !42
  %317 = extractvalue { float, float, float, float } %313, 3, !dbg !42
  %318 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %158, float %159, float %160, float %161, i32 %223, i32 %224, i32 %225, i32 %226, i32 %297, i32 %298) #2, !dbg !42
  %319 = extractvalue { float, float, float, float } %318, 0, !dbg !42
  %320 = extractvalue { float, float, float, float } %318, 1, !dbg !42
  %321 = extractvalue { float, float, float, float } %318, 2, !dbg !42
  %322 = extractvalue { float, float, float, float } %318, 3, !dbg !42
  %323 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %162, float %163, float %164, float %165, i32 %223, i32 %224, i32 %225, i32 %226, i32 %304, i32 %305) #2, !dbg !42
  %324 = extractvalue { float, float, float, float } %323, 0, !dbg !42
  %325 = extractvalue { float, float, float, float } %323, 1, !dbg !42
  %326 = extractvalue { float, float, float, float } %323, 2, !dbg !42
  %327 = extractvalue { float, float, float, float } %323, 3, !dbg !42
  %328 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %166, float %167, float %168, float %169, i32 %238, i32 %239, i32 %240, i32 %241, i32 %283, i32 %284) #2, !dbg !42
  %329 = extractvalue { float, float, float, float } %328, 0, !dbg !42
  %330 = extractvalue { float, float, float, float } %328, 1, !dbg !42
  %331 = extractvalue { float, float, float, float } %328, 2, !dbg !42
  %332 = extractvalue { float, float, float, float } %328, 3, !dbg !42
  %333 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %170, float %171, float %172, float %173, i32 %238, i32 %239, i32 %240, i32 %241, i32 %290, i32 %291) #2, !dbg !42
  %334 = extractvalue { float, float, float, float } %333, 0, !dbg !42
  %335 = extractvalue { float, float, float, float } %333, 1, !dbg !42
  %336 = extractvalue { float, float, float, float } %333, 2, !dbg !42
  %337 = extractvalue { float, float, float, float } %333, 3, !dbg !42
  %338 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %174, float %175, float %176, float %177, i32 %238, i32 %239, i32 %240, i32 %241, i32 %297, i32 %298) #2, !dbg !42
  %339 = extractvalue { float, float, float, float } %338, 0, !dbg !42
  %340 = extractvalue { float, float, float, float } %338, 1, !dbg !42
  %341 = extractvalue { float, float, float, float } %338, 2, !dbg !42
  %342 = extractvalue { float, float, float, float } %338, 3, !dbg !42
  %343 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %178, float %179, float %180, float %181, i32 %238, i32 %239, i32 %240, i32 %241, i32 %304, i32 %305) #2, !dbg !42
  %344 = extractvalue { float, float, float, float } %343, 0, !dbg !42
  %345 = extractvalue { float, float, float, float } %343, 1, !dbg !42
  %346 = extractvalue { float, float, float, float } %343, 2, !dbg !42
  %347 = extractvalue { float, float, float, float } %343, 3, !dbg !42
  %348 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %182, float %183, float %184, float %185, i32 %253, i32 %254, i32 %255, i32 %256, i32 %283, i32 %284) #2, !dbg !42
  %349 = extractvalue { float, float, float, float } %348, 0, !dbg !42
  %350 = extractvalue { float, float, float, float } %348, 1, !dbg !42
  %351 = extractvalue { float, float, float, float } %348, 2, !dbg !42
  %352 = extractvalue { float, float, float, float } %348, 3, !dbg !42
  %353 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %186, float %187, float %188, float %189, i32 %253, i32 %254, i32 %255, i32 %256, i32 %290, i32 %291) #2, !dbg !42
  %354 = extractvalue { float, float, float, float } %353, 0, !dbg !42
  %355 = extractvalue { float, float, float, float } %353, 1, !dbg !42
  %356 = extractvalue { float, float, float, float } %353, 2, !dbg !42
  %357 = extractvalue { float, float, float, float } %353, 3, !dbg !42
  %358 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %190, float %191, float %192, float %193, i32 %253, i32 %254, i32 %255, i32 %256, i32 %297, i32 %298) #2, !dbg !42
  %359 = extractvalue { float, float, float, float } %358, 0, !dbg !42
  %360 = extractvalue { float, float, float, float } %358, 1, !dbg !42
  %361 = extractvalue { float, float, float, float } %358, 2, !dbg !42
  %362 = extractvalue { float, float, float, float } %358, 3, !dbg !42
  %363 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %194, float %195, float %196, float %197, i32 %253, i32 %254, i32 %255, i32 %256, i32 %304, i32 %305) #2, !dbg !42
  %364 = extractvalue { float, float, float, float } %363, 0, !dbg !42
  %365 = extractvalue { float, float, float, float } %363, 1, !dbg !42
  %366 = extractvalue { float, float, float, float } %363, 2, !dbg !42
  %367 = extractvalue { float, float, float, float } %363, 3, !dbg !42
  %368 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %198, float %199, float %200, float %201, i32 %268, i32 %269, i32 %270, i32 %271, i32 %283, i32 %284) #2, !dbg !42
  %369 = extractvalue { float, float, float, float } %368, 0, !dbg !42
  %370 = extractvalue { float, float, float, float } %368, 1, !dbg !42
  %371 = extractvalue { float, float, float, float } %368, 2, !dbg !42
  %372 = extractvalue { float, float, float, float } %368, 3, !dbg !42
  %373 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %202, float %203, float %204, float %205, i32 %268, i32 %269, i32 %270, i32 %271, i32 %290, i32 %291) #2, !dbg !42
  %374 = extractvalue { float, float, float, float } %373, 0, !dbg !42
  %375 = extractvalue { float, float, float, float } %373, 1, !dbg !42
  %376 = extractvalue { float, float, float, float } %373, 2, !dbg !42
  %377 = extractvalue { float, float, float, float } %373, 3, !dbg !42
  %378 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %206, float %207, float %208, float %209, i32 %268, i32 %269, i32 %270, i32 %271, i32 %297, i32 %298) #2, !dbg !42
  %379 = extractvalue { float, float, float, float } %378, 0, !dbg !42
  %380 = extractvalue { float, float, float, float } %378, 1, !dbg !42
  %381 = extractvalue { float, float, float, float } %378, 2, !dbg !42
  %382 = extractvalue { float, float, float, float } %378, 3, !dbg !42
  %383 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %210, float %211, float %212, float %213, i32 %268, i32 %269, i32 %270, i32 %271, i32 %304, i32 %305) #2, !dbg !42
  %384 = extractvalue { float, float, float, float } %383, 0, !dbg !42
  %385 = extractvalue { float, float, float, float } %383, 1, !dbg !42
  %386 = extractvalue { float, float, float, float } %383, 2, !dbg !42
  %387 = extractvalue { float, float, float, float } %383, 3, !dbg !42
  %388 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %309, float %310, float %311, float %312, i32 %230, i32 %231, i32 %232, i32 %233, i32 %285, i32 %286) #2, !dbg !42
  %389 = extractvalue { float, float, float, float } %388, 0, !dbg !42
  %390 = extractvalue { float, float, float, float } %388, 1, !dbg !42
  %391 = extractvalue { float, float, float, float } %388, 2, !dbg !42
  %392 = extractvalue { float, float, float, float } %388, 3, !dbg !42
  %393 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %314, float %315, float %316, float %317, i32 %230, i32 %231, i32 %232, i32 %233, i32 %292, i32 %293) #2, !dbg !42
  %394 = extractvalue { float, float, float, float } %393, 0, !dbg !42
  %395 = extractvalue { float, float, float, float } %393, 1, !dbg !42
  %396 = extractvalue { float, float, float, float } %393, 2, !dbg !42
  %397 = extractvalue { float, float, float, float } %393, 3, !dbg !42
  %398 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %319, float %320, float %321, float %322, i32 %230, i32 %231, i32 %232, i32 %233, i32 %299, i32 %300) #2, !dbg !42
  %399 = extractvalue { float, float, float, float } %398, 0, !dbg !42
  %400 = extractvalue { float, float, float, float } %398, 1, !dbg !42
  %401 = extractvalue { float, float, float, float } %398, 2, !dbg !42
  %402 = extractvalue { float, float, float, float } %398, 3, !dbg !42
  %403 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %324, float %325, float %326, float %327, i32 %230, i32 %231, i32 %232, i32 %233, i32 %306, i32 %307) #2, !dbg !42
  %404 = extractvalue { float, float, float, float } %403, 0, !dbg !42
  %405 = extractvalue { float, float, float, float } %403, 1, !dbg !42
  %406 = extractvalue { float, float, float, float } %403, 2, !dbg !42
  %407 = extractvalue { float, float, float, float } %403, 3, !dbg !42
  %408 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %329, float %330, float %331, float %332, i32 %245, i32 %246, i32 %247, i32 %248, i32 %285, i32 %286) #2, !dbg !42
  %409 = extractvalue { float, float, float, float } %408, 0, !dbg !42
  %410 = extractvalue { float, float, float, float } %408, 1, !dbg !42
  %411 = extractvalue { float, float, float, float } %408, 2, !dbg !42
  %412 = extractvalue { float, float, float, float } %408, 3, !dbg !42
  %413 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %334, float %335, float %336, float %337, i32 %245, i32 %246, i32 %247, i32 %248, i32 %292, i32 %293) #2, !dbg !42
  %414 = extractvalue { float, float, float, float } %413, 0, !dbg !42
  %415 = extractvalue { float, float, float, float } %413, 1, !dbg !42
  %416 = extractvalue { float, float, float, float } %413, 2, !dbg !42
  %417 = extractvalue { float, float, float, float } %413, 3, !dbg !42
  %418 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %339, float %340, float %341, float %342, i32 %245, i32 %246, i32 %247, i32 %248, i32 %299, i32 %300) #2, !dbg !42
  %419 = extractvalue { float, float, float, float } %418, 0, !dbg !42
  %420 = extractvalue { float, float, float, float } %418, 1, !dbg !42
  %421 = extractvalue { float, float, float, float } %418, 2, !dbg !42
  %422 = extractvalue { float, float, float, float } %418, 3, !dbg !42
  %423 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %344, float %345, float %346, float %347, i32 %245, i32 %246, i32 %247, i32 %248, i32 %306, i32 %307) #2, !dbg !42
  %424 = extractvalue { float, float, float, float } %423, 0, !dbg !42
  %425 = extractvalue { float, float, float, float } %423, 1, !dbg !42
  %426 = extractvalue { float, float, float, float } %423, 2, !dbg !42
  %427 = extractvalue { float, float, float, float } %423, 3, !dbg !42
  %428 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %349, float %350, float %351, float %352, i32 %260, i32 %261, i32 %262, i32 %263, i32 %285, i32 %286) #2, !dbg !42
  %429 = extractvalue { float, float, float, float } %428, 0, !dbg !42
  %430 = extractvalue { float, float, float, float } %428, 1, !dbg !42
  %431 = extractvalue { float, float, float, float } %428, 2, !dbg !42
  %432 = extractvalue { float, float, float, float } %428, 3, !dbg !42
  %433 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %354, float %355, float %356, float %357, i32 %260, i32 %261, i32 %262, i32 %263, i32 %292, i32 %293) #2, !dbg !42
  %434 = extractvalue { float, float, float, float } %433, 0, !dbg !42
  %435 = extractvalue { float, float, float, float } %433, 1, !dbg !42
  %436 = extractvalue { float, float, float, float } %433, 2, !dbg !42
  %437 = extractvalue { float, float, float, float } %433, 3, !dbg !42
  %438 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %359, float %360, float %361, float %362, i32 %260, i32 %261, i32 %262, i32 %263, i32 %299, i32 %300) #2, !dbg !42
  %439 = extractvalue { float, float, float, float } %438, 0, !dbg !42
  %440 = extractvalue { float, float, float, float } %438, 1, !dbg !42
  %441 = extractvalue { float, float, float, float } %438, 2, !dbg !42
  %442 = extractvalue { float, float, float, float } %438, 3, !dbg !42
  %443 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %364, float %365, float %366, float %367, i32 %260, i32 %261, i32 %262, i32 %263, i32 %306, i32 %307) #2, !dbg !42
  %444 = extractvalue { float, float, float, float } %443, 0, !dbg !42
  %445 = extractvalue { float, float, float, float } %443, 1, !dbg !42
  %446 = extractvalue { float, float, float, float } %443, 2, !dbg !42
  %447 = extractvalue { float, float, float, float } %443, 3, !dbg !42
  %448 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %369, float %370, float %371, float %372, i32 %275, i32 %276, i32 %277, i32 %278, i32 %285, i32 %286) #2, !dbg !42
  %449 = extractvalue { float, float, float, float } %448, 0, !dbg !42
  %450 = extractvalue { float, float, float, float } %448, 1, !dbg !42
  %451 = extractvalue { float, float, float, float } %448, 2, !dbg !42
  %452 = extractvalue { float, float, float, float } %448, 3, !dbg !42
  %453 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %374, float %375, float %376, float %377, i32 %275, i32 %276, i32 %277, i32 %278, i32 %292, i32 %293) #2, !dbg !42
  %454 = extractvalue { float, float, float, float } %453, 0, !dbg !42
  %455 = extractvalue { float, float, float, float } %453, 1, !dbg !42
  %456 = extractvalue { float, float, float, float } %453, 2, !dbg !42
  %457 = extractvalue { float, float, float, float } %453, 3, !dbg !42
  %458 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %379, float %380, float %381, float %382, i32 %275, i32 %276, i32 %277, i32 %278, i32 %299, i32 %300) #2, !dbg !42
  %459 = extractvalue { float, float, float, float } %458, 0, !dbg !42
  %460 = extractvalue { float, float, float, float } %458, 1, !dbg !42
  %461 = extractvalue { float, float, float, float } %458, 2, !dbg !42
  %462 = extractvalue { float, float, float, float } %458, 3, !dbg !42
  %463 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %384, float %385, float %386, float %387, i32 %275, i32 %276, i32 %277, i32 %278, i32 %306, i32 %307) #2, !dbg !42
  %464 = extractvalue { float, float, float, float } %463, 0, !dbg !42
  %465 = extractvalue { float, float, float, float } %463, 1, !dbg !42
  %466 = extractvalue { float, float, float, float } %463, 2, !dbg !42
  %467 = extractvalue { float, float, float, float } %463, 3, !dbg !42
  %468 = getelementptr i8, ptr addrspace(1) %.pn18266, i64 64, !dbg !39
  %469 = getelementptr half, ptr addrspace(1) %.pn98267, i64 %78, !dbg !40
  %470 = getelementptr half, ptr addrspace(1) %.pn82268, i64 %78, !dbg !40
  %471 = add i32 %149, 1, !dbg !34
  %472 = icmp sgt i32 %471, 2, !dbg !34
  %473 = select i1 %472, i32 0, i32 %471, !dbg !34
  %474 = shl i32 %214, 5, !dbg !41
  %475 = sub i32 %.neg262, %474, !dbg !41
  %476 = icmp slt i32 %23, %475, !dbg !35
  %.idx194 = shl i32 %473, 13, !dbg !36
  %477 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx194, !dbg !36
  %478 = and i1 %215, %476, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %479 = getelementptr inbounds nuw half, ptr addrspace(3) %477, i32 %55, !dbg !36
  %480 = getelementptr inbounds nuw half, ptr addrspace(3) %477, i32 %57, !dbg !36
  %481 = getelementptr inbounds nuw half, ptr addrspace(3) %477, i32 %59, !dbg !36
  %482 = getelementptr inbounds nuw half, ptr addrspace(3) %477, i32 %61, !dbg !36
  %483 = select i1 %478, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %479, ptr addrspace(1) %468, i32 %483) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %480, ptr addrspace(1) %468, i32 %483) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %481, ptr addrspace(1) %468, i32 %483) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %482, ptr addrspace(1) %468, i32 %483) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %484 = icmp slt i32 %31, %475, !dbg !37
  %485 = icmp slt i32 %32, %475, !dbg !37
  %.idx195 = shl i32 %473, 12, !dbg !38
  %486 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %.idx195, !dbg !38
  %487 = and i1 %215, %484, !dbg !34
  %488 = and i1 %215, %485, !dbg !34
  %489 = getelementptr inbounds nuw half, ptr addrspace(3) %486, i32 %70, !dbg !38
  %490 = getelementptr inbounds nuw half, ptr addrspace(3) %486, i32 %72, !dbg !38
  %491 = select i1 %487, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %489, ptr addrspace(1) %469, i32 %491) #2, !dbg !38
  %492 = select i1 %488, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %490, ptr addrspace(1) %470, i32 %492) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %493 = add nuw nsw i32 %214, 1, !dbg !34
  %exitcond.not = icmp eq i32 %493, %42, !dbg !34
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %147, !dbg !34

._crit_edge.loopexit:                             ; preds = %147
  %494 = insertelement <64 x float> poison, float %389, i64 0, !dbg !43
  %495 = insertelement <64 x float> %494, float %390, i64 1, !dbg !43
  %496 = insertelement <64 x float> %495, float %391, i64 2, !dbg !43
  %497 = insertelement <64 x float> %496, float %392, i64 3, !dbg !43
  %498 = insertelement <64 x float> %497, float %394, i64 4, !dbg !43
  %499 = insertelement <64 x float> %498, float %395, i64 5, !dbg !43
  %500 = insertelement <64 x float> %499, float %396, i64 6, !dbg !43
  %501 = insertelement <64 x float> %500, float %397, i64 7, !dbg !43
  %502 = insertelement <64 x float> %501, float %399, i64 8, !dbg !43
  %503 = insertelement <64 x float> %502, float %400, i64 9, !dbg !43
  %504 = insertelement <64 x float> %503, float %401, i64 10, !dbg !43
  %505 = insertelement <64 x float> %504, float %402, i64 11, !dbg !43
  %506 = insertelement <64 x float> %505, float %404, i64 12, !dbg !43
  %507 = insertelement <64 x float> %506, float %405, i64 13, !dbg !43
  %508 = insertelement <64 x float> %507, float %406, i64 14, !dbg !43
  %509 = insertelement <64 x float> %508, float %407, i64 15, !dbg !43
  %510 = insertelement <64 x float> %509, float %409, i64 16, !dbg !43
  %511 = insertelement <64 x float> %510, float %410, i64 17, !dbg !43
  %512 = insertelement <64 x float> %511, float %411, i64 18, !dbg !43
  %513 = insertelement <64 x float> %512, float %412, i64 19, !dbg !43
  %514 = insertelement <64 x float> %513, float %414, i64 20, !dbg !43
  %515 = insertelement <64 x float> %514, float %415, i64 21, !dbg !43
  %516 = insertelement <64 x float> %515, float %416, i64 22, !dbg !43
  %517 = insertelement <64 x float> %516, float %417, i64 23, !dbg !43
  %518 = insertelement <64 x float> %517, float %419, i64 24, !dbg !43
  %519 = insertelement <64 x float> %518, float %420, i64 25, !dbg !43
  %520 = insertelement <64 x float> %519, float %421, i64 26, !dbg !43
  %521 = insertelement <64 x float> %520, float %422, i64 27, !dbg !43
  %522 = insertelement <64 x float> %521, float %424, i64 28, !dbg !43
  %523 = insertelement <64 x float> %522, float %425, i64 29, !dbg !43
  %524 = insertelement <64 x float> %523, float %426, i64 30, !dbg !43
  %525 = insertelement <64 x float> %524, float %427, i64 31, !dbg !43
  %526 = insertelement <64 x float> %525, float %429, i64 32, !dbg !43
  %527 = insertelement <64 x float> %526, float %430, i64 33, !dbg !43
  %528 = insertelement <64 x float> %527, float %431, i64 34, !dbg !43
  %529 = insertelement <64 x float> %528, float %432, i64 35, !dbg !43
  %530 = insertelement <64 x float> %529, float %434, i64 36, !dbg !43
  %531 = insertelement <64 x float> %530, float %435, i64 37, !dbg !43
  %532 = insertelement <64 x float> %531, float %436, i64 38, !dbg !43
  %533 = insertelement <64 x float> %532, float %437, i64 39, !dbg !43
  %534 = insertelement <64 x float> %533, float %439, i64 40, !dbg !43
  %535 = insertelement <64 x float> %534, float %440, i64 41, !dbg !43
  %536 = insertelement <64 x float> %535, float %441, i64 42, !dbg !43
  %537 = insertelement <64 x float> %536, float %442, i64 43, !dbg !43
  %538 = insertelement <64 x float> %537, float %444, i64 44, !dbg !43
  %539 = insertelement <64 x float> %538, float %445, i64 45, !dbg !43
  %540 = insertelement <64 x float> %539, float %446, i64 46, !dbg !43
  %541 = insertelement <64 x float> %540, float %447, i64 47, !dbg !43
  %542 = insertelement <64 x float> %541, float %449, i64 48, !dbg !43
  %543 = insertelement <64 x float> %542, float %450, i64 49, !dbg !43
  %544 = insertelement <64 x float> %543, float %451, i64 50, !dbg !43
  %545 = insertelement <64 x float> %544, float %452, i64 51, !dbg !43
  %546 = insertelement <64 x float> %545, float %454, i64 52, !dbg !43
  %547 = insertelement <64 x float> %546, float %455, i64 53, !dbg !43
  %548 = insertelement <64 x float> %547, float %456, i64 54, !dbg !43
  %549 = insertelement <64 x float> %548, float %457, i64 55, !dbg !43
  %550 = insertelement <64 x float> %549, float %459, i64 56, !dbg !43
  %551 = insertelement <64 x float> %550, float %460, i64 57, !dbg !43
  %552 = insertelement <64 x float> %551, float %461, i64 58, !dbg !43
  %553 = insertelement <64 x float> %552, float %462, i64 59, !dbg !43
  %554 = insertelement <64 x float> %553, float %464, i64 60, !dbg !43
  %555 = insertelement <64 x float> %554, float %465, i64 61, !dbg !43
  %556 = insertelement <64 x float> %555, float %466, i64 62, !dbg !43
  %557 = insertelement <64 x float> %556, float %467, i64 63, !dbg !43
  %558 = fptrunc <64 x float> %557 to <64 x half>, !dbg !43
  br label %._crit_edge, !dbg !44

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %9
  %559 = phi <64 x half> [ zeroinitializer, %9 ], [ %558, %._crit_edge.loopexit ]
  %560 = mul i32 %19, %17, !dbg !44
  %.decomposed460 = sub i32 %.decomposed, %560, !dbg !44
  %561 = add i32 %.decomposed460, %15, !dbg !45
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %562 = shl i32 %561, 7, !dbg !46
  %563 = or disjoint i32 %562, %31, !dbg !47
  %564 = or disjoint i32 %562, %32, !dbg !47
  %565 = or disjoint i32 %563, 32, !dbg !47
  %566 = or disjoint i32 %563, 48, !dbg !47
  %567 = or disjoint i32 %563, 64, !dbg !47
  %568 = or disjoint i32 %563, 80, !dbg !47
  %569 = or disjoint i32 %563, 96, !dbg !47
  %570 = or disjoint i32 %30, %562, !dbg !47
  %571 = or i32 %570, 112, !dbg !47
  %572 = mul i32 %563, %7, !dbg !48
  %573 = mul i32 %564, %7, !dbg !48
  %574 = mul i32 %565, %7, !dbg !48
  %575 = mul i32 %566, %7, !dbg !48
  %576 = mul i32 %567, %7, !dbg !48
  %577 = mul i32 %568, %7, !dbg !48
  %578 = mul i32 %569, %7, !dbg !48
  %579 = mul i32 %571, %7, !dbg !48
  %580 = sext i32 %572 to i64, !dbg !49
  %581 = getelementptr half, ptr addrspace(1) %2, i64 %580, !dbg !49
  %582 = sext i32 %573 to i64, !dbg !49
  %583 = getelementptr half, ptr addrspace(1) %2, i64 %582, !dbg !49
  %584 = sext i32 %574 to i64, !dbg !49
  %585 = getelementptr half, ptr addrspace(1) %2, i64 %584, !dbg !49
  %586 = sext i32 %575 to i64, !dbg !49
  %587 = getelementptr half, ptr addrspace(1) %2, i64 %586, !dbg !49
  %588 = sext i32 %576 to i64, !dbg !49
  %589 = getelementptr half, ptr addrspace(1) %2, i64 %588, !dbg !49
  %590 = sext i32 %577 to i64, !dbg !49
  %591 = getelementptr half, ptr addrspace(1) %2, i64 %590, !dbg !49
  %592 = sext i32 %578 to i64, !dbg !49
  %593 = getelementptr half, ptr addrspace(1) %2, i64 %592, !dbg !49
  %594 = sext i32 %579 to i64, !dbg !49
  %595 = getelementptr half, ptr addrspace(1) %2, i64 %594, !dbg !49
  %596 = sext i32 %25 to i64, !dbg !50
  %597 = getelementptr half, ptr addrspace(1) %581, i64 %596, !dbg !50
  %598 = getelementptr half, ptr addrspace(1) %583, i64 %596, !dbg !50
  %599 = getelementptr half, ptr addrspace(1) %585, i64 %596, !dbg !50
  %600 = getelementptr half, ptr addrspace(1) %587, i64 %596, !dbg !50
  %601 = getelementptr half, ptr addrspace(1) %589, i64 %596, !dbg !50
  %602 = getelementptr half, ptr addrspace(1) %591, i64 %596, !dbg !50
  %603 = getelementptr half, ptr addrspace(1) %593, i64 %596, !dbg !50
  %604 = getelementptr half, ptr addrspace(1) %595, i64 %596, !dbg !50
  %605 = icmp slt i32 %563, 1, !dbg !51
  %606 = icmp slt i32 %564, 1, !dbg !51
  %607 = icmp slt i32 %562, 0, !dbg !51
  %608 = icmp slt i32 %25, %3, !dbg !52
  %609 = and i1 %608, %605, !dbg !53
  %610 = and i1 %608, %606, !dbg !53
  %611 = and i1 %608, %607, !dbg !53
  %612 = shl nuw nsw i32 %21, 1, !dbg !54
  %613 = and i32 %612, 6, !dbg !54
  %614 = shl nuw nsw i32 %21, 4, !dbg !54
  %615 = and i32 %614, 1472, !dbg !54
  %616 = or disjoint i32 %615, %613, !dbg !54
  %617 = or disjoint i32 %616, %50, !dbg !54
  %618 = and i32 %22, 1016, !dbg !54
  %619 = lshr exact i32 %615, 2, !dbg !54
  %620 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %619, !dbg !54
  %621 = getelementptr inbounds nuw half, ptr addrspace(3) %620, i32 %617, !dbg !54
  %622 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !54
  store <2 x half> %622, ptr addrspace(3) %621, align 4, !dbg !54
  %623 = or disjoint i32 %617, 512, !dbg !54
  %624 = lshr i32 %623, 3, !dbg !54
  %625 = and i32 %624, 248, !dbg !54
  %626 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %625, !dbg !54
  %627 = getelementptr inbounds nuw half, ptr addrspace(3) %626, i32 %623, !dbg !54
  %628 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !54
  store <2 x half> %628, ptr addrspace(3) %627, align 4, !dbg !54
  %629 = getelementptr inbounds nuw i8, ptr addrspace(3) %621, i32 32, !dbg !54
  %630 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !54
  store <2 x half> %630, ptr addrspace(3) %629, align 4, !dbg !54
  %631 = or disjoint i32 %617, 528, !dbg !54
  %632 = lshr i32 %631, 3, !dbg !54
  %633 = and i32 %632, 248, !dbg !54
  %634 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %633, !dbg !54
  %635 = getelementptr inbounds nuw half, ptr addrspace(3) %634, i32 %631, !dbg !54
  %636 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !54
  store <2 x half> %636, ptr addrspace(3) %635, align 4, !dbg !54
  %637 = getelementptr inbounds nuw i8, ptr addrspace(3) %621, i32 64, !dbg !54
  %638 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 8, i32 9>, !dbg !54
  store <2 x half> %638, ptr addrspace(3) %637, align 4, !dbg !54
  %639 = or disjoint i32 %617, 544, !dbg !54
  %640 = lshr i32 %639, 3, !dbg !54
  %641 = and i32 %640, 248, !dbg !54
  %642 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %641, !dbg !54
  %643 = getelementptr inbounds nuw half, ptr addrspace(3) %642, i32 %639, !dbg !54
  %644 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 10, i32 11>, !dbg !54
  store <2 x half> %644, ptr addrspace(3) %643, align 4, !dbg !54
  %645 = getelementptr inbounds nuw i8, ptr addrspace(3) %621, i32 96, !dbg !54
  %646 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 12, i32 13>, !dbg !54
  store <2 x half> %646, ptr addrspace(3) %645, align 4, !dbg !54
  %647 = or disjoint i32 %617, 560, !dbg !54
  %648 = lshr i32 %647, 3, !dbg !54
  %649 = and i32 %648, 248, !dbg !54
  %650 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %649, !dbg !54
  %651 = getelementptr inbounds nuw half, ptr addrspace(3) %650, i32 %647, !dbg !54
  %652 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 14, i32 15>, !dbg !54
  store <2 x half> %652, ptr addrspace(3) %651, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  %653 = and i32 %21, 120, !dbg !54
  %654 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %653, !dbg !54
  %655 = getelementptr inbounds nuw half, ptr addrspace(3) %654, i32 %618, !dbg !54
  %656 = load <4 x i32>, ptr addrspace(3) %655, align 16, !dbg !54
  %657 = or disjoint i32 %618, 1024, !dbg !54
  %658 = lshr exact i32 %657, 3, !dbg !54
  %659 = and i32 %658, 248, !dbg !54
  %660 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %659, !dbg !54
  %661 = getelementptr inbounds nuw half, ptr addrspace(3) %660, i32 %657, !dbg !54
  %662 = load <4 x i32>, ptr addrspace(3) %661, align 16, !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  %663 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 16, i32 17>, !dbg !54
  store <2 x half> %663, ptr addrspace(3) %621, align 4, !dbg !54
  %664 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 18, i32 19>, !dbg !54
  store <2 x half> %664, ptr addrspace(3) %627, align 4, !dbg !54
  %665 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 20, i32 21>, !dbg !54
  store <2 x half> %665, ptr addrspace(3) %629, align 4, !dbg !54
  %666 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 22, i32 23>, !dbg !54
  store <2 x half> %666, ptr addrspace(3) %635, align 4, !dbg !54
  %667 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 24, i32 25>, !dbg !54
  store <2 x half> %667, ptr addrspace(3) %637, align 4, !dbg !54
  %668 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 26, i32 27>, !dbg !54
  store <2 x half> %668, ptr addrspace(3) %643, align 4, !dbg !54
  %669 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 28, i32 29>, !dbg !54
  store <2 x half> %669, ptr addrspace(3) %645, align 4, !dbg !54
  %670 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 30, i32 31>, !dbg !54
  store <2 x half> %670, ptr addrspace(3) %651, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  %671 = load <4 x i32>, ptr addrspace(3) %655, align 16, !dbg !54
  %672 = load <4 x i32>, ptr addrspace(3) %661, align 16, !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  %673 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 32, i32 33>, !dbg !54
  store <2 x half> %673, ptr addrspace(3) %621, align 4, !dbg !54
  %674 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 34, i32 35>, !dbg !54
  store <2 x half> %674, ptr addrspace(3) %627, align 4, !dbg !54
  %675 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 36, i32 37>, !dbg !54
  store <2 x half> %675, ptr addrspace(3) %629, align 4, !dbg !54
  %676 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 38, i32 39>, !dbg !54
  store <2 x half> %676, ptr addrspace(3) %635, align 4, !dbg !54
  %677 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 40, i32 41>, !dbg !54
  store <2 x half> %677, ptr addrspace(3) %637, align 4, !dbg !54
  %678 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 42, i32 43>, !dbg !54
  store <2 x half> %678, ptr addrspace(3) %643, align 4, !dbg !54
  %679 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 44, i32 45>, !dbg !54
  store <2 x half> %679, ptr addrspace(3) %645, align 4, !dbg !54
  %680 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 46, i32 47>, !dbg !54
  store <2 x half> %680, ptr addrspace(3) %651, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  %681 = load <4 x i32>, ptr addrspace(3) %655, align 16, !dbg !54
  %682 = load <4 x i32>, ptr addrspace(3) %661, align 16, !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  %683 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 48, i32 49>, !dbg !54
  store <2 x half> %683, ptr addrspace(3) %621, align 4, !dbg !54
  %684 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 50, i32 51>, !dbg !54
  store <2 x half> %684, ptr addrspace(3) %627, align 4, !dbg !54
  %685 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 52, i32 53>, !dbg !54
  store <2 x half> %685, ptr addrspace(3) %629, align 4, !dbg !54
  %686 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 54, i32 55>, !dbg !54
  store <2 x half> %686, ptr addrspace(3) %635, align 4, !dbg !54
  %687 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 56, i32 57>, !dbg !54
  store <2 x half> %687, ptr addrspace(3) %637, align 4, !dbg !54
  %688 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 58, i32 59>, !dbg !54
  store <2 x half> %688, ptr addrspace(3) %643, align 4, !dbg !54
  %689 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 60, i32 61>, !dbg !54
  store <2 x half> %689, ptr addrspace(3) %645, align 4, !dbg !54
  %690 = shufflevector <64 x half> %559, <64 x half> poison, <2 x i32> <i32 62, i32 63>, !dbg !54
  store <2 x half> %690, ptr addrspace(3) %651, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  %691 = load <4 x i32>, ptr addrspace(3) %655, align 16, !dbg !54
  %692 = load <4 x i32>, ptr addrspace(3) %661, align 16, !dbg !54
  %.extract = extractelement <4 x i32> %656, i64 0, !dbg !54
  %.extract199 = extractelement <4 x i32> %656, i64 1, !dbg !54
  %.extract201 = extractelement <4 x i32> %656, i64 2, !dbg !54
  %.extract203 = extractelement <4 x i32> %656, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract199, i32 %.extract201, i32 %.extract203, ptr addrspace(1) %597, i1 %609) #2, !dbg !54
  %.extract205 = extractelement <4 x i32> %662, i64 0, !dbg !54
  %.extract207 = extractelement <4 x i32> %662, i64 1, !dbg !54
  %.extract209 = extractelement <4 x i32> %662, i64 2, !dbg !54
  %.extract211 = extractelement <4 x i32> %662, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract205, i32 %.extract207, i32 %.extract209, i32 %.extract211, ptr addrspace(1) %598, i1 %610) #2, !dbg !54
  %.extract213 = extractelement <4 x i32> %671, i64 0, !dbg !54
  %.extract215 = extractelement <4 x i32> %671, i64 1, !dbg !54
  %.extract217 = extractelement <4 x i32> %671, i64 2, !dbg !54
  %.extract219 = extractelement <4 x i32> %671, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract213, i32 %.extract215, i32 %.extract217, i32 %.extract219, ptr addrspace(1) %599, i1 %611) #2, !dbg !54
  %.extract221 = extractelement <4 x i32> %672, i64 0, !dbg !54
  %.extract223 = extractelement <4 x i32> %672, i64 1, !dbg !54
  %.extract225 = extractelement <4 x i32> %672, i64 2, !dbg !54
  %.extract227 = extractelement <4 x i32> %672, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract221, i32 %.extract223, i32 %.extract225, i32 %.extract227, ptr addrspace(1) %600, i1 %611) #2, !dbg !54
  %.extract229 = extractelement <4 x i32> %681, i64 0, !dbg !54
  %.extract231 = extractelement <4 x i32> %681, i64 1, !dbg !54
  %.extract233 = extractelement <4 x i32> %681, i64 2, !dbg !54
  %.extract235 = extractelement <4 x i32> %681, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract229, i32 %.extract231, i32 %.extract233, i32 %.extract235, ptr addrspace(1) %601, i1 %611) #2, !dbg !54
  %.extract237 = extractelement <4 x i32> %682, i64 0, !dbg !54
  %.extract239 = extractelement <4 x i32> %682, i64 1, !dbg !54
  %.extract241 = extractelement <4 x i32> %682, i64 2, !dbg !54
  %.extract243 = extractelement <4 x i32> %682, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract237, i32 %.extract239, i32 %.extract241, i32 %.extract243, ptr addrspace(1) %602, i1 %611) #2, !dbg !54
  %.extract245 = extractelement <4 x i32> %691, i64 0, !dbg !54
  %.extract247 = extractelement <4 x i32> %691, i64 1, !dbg !54
  %.extract249 = extractelement <4 x i32> %691, i64 2, !dbg !54
  %.extract251 = extractelement <4 x i32> %691, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract245, i32 %.extract247, i32 %.extract249, i32 %.extract251, ptr addrspace(1) %603, i1 %611) #2, !dbg !54
  %.extract253 = extractelement <4 x i32> %692, i64 0, !dbg !54
  %.extract255 = extractelement <4 x i32> %692, i64 1, !dbg !54
  %.extract257 = extractelement <4 x i32> %692, i64 2, !dbg !54
  %.extract259 = extractelement <4 x i32> %692, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract253, i32 %.extract255, i32 %.extract257, i32 %.extract259, ptr addrspace(1) %604, i1 %611) #2, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "gated_mlp.py", directory: "/home/ubuntu/anjiang/PTX_dataset/triton_ptx")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !1, file: !1, line: 68, type: !6, scopeLine: 68, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 91, column: 24, scope: !5)
!9 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !12)
!10 = distinct !DILexicalBlockFile(scope: !5, file: !11, discriminator: 0)
!11 = !DIFile(filename: "standard.py", directory: "/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language")
!12 = !DILocation(line: 93, column: 27, scope: !5)
!13 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !12)
!14 = !DILocation(line: 94, column: 38, scope: !5)
!15 = !DILocation(line: 95, column: 22, scope: !5)
!16 = !DILocation(line: 96, column: 29, scope: !5)
!17 = !DILocation(line: 97, column: 35, scope: !5)
!18 = !DILocation(line: 97, column: 48, scope: !5)
!19 = !DILocation(line: 98, column: 34, scope: !5)
!20 = !DILocation(line: 99, column: 40, scope: !5)
!21 = !DILocation(line: 109, column: 23, scope: !5)
!22 = !DILocation(line: 109, column: 51, scope: !5)
!23 = !DILocation(line: 109, column: 38, scope: !5)
!24 = !DILocation(line: 109, column: 68, scope: !5)
!25 = !DILocation(line: 111, column: 22, scope: !5)
!26 = !DILocation(line: 112, column: 29, scope: !5)
!27 = !DILocation(line: 112, column: 40, scope: !5)
!28 = !DILocation(line: 112, column: 52, scope: !5)
!29 = !DILocation(line: 112, column: 22, scope: !5)
!30 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !31)
!31 = !DILocation(line: 120, column: 33, scope: !5)
!32 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !31)
!33 = !DILocation(line: 129, column: 33, scope: !5)
!34 = !DILocation(line: 120, column: 22, scope: !5)
!35 = !DILocation(line: 123, column: 51, scope: !5)
!36 = !DILocation(line: 123, column: 20, scope: !5)
!37 = !DILocation(line: 124, column: 51, scope: !5)
!38 = !DILocation(line: 124, column: 20, scope: !5)
!39 = !DILocation(line: 128, column: 18, scope: !5)
!40 = !DILocation(line: 129, column: 18, scope: !5)
!41 = !DILocation(line: 123, column: 55, scope: !5)
!42 = !DILocation(line: 126, column: 35, scope: !5)
!43 = !DILocation(line: 134, column: 23, scope: !5)
!44 = !DILocation(line: 98, column: 54, scope: !5)
!45 = !DILocation(line: 98, column: 27, scope: !5)
!46 = !DILocation(line: 138, column: 22, scope: !5)
!47 = !DILocation(line: 138, column: 37, scope: !5)
!48 = !DILocation(line: 140, column: 33, scope: !5)
!49 = !DILocation(line: 140, column: 21, scope: !5)
!50 = !DILocation(line: 140, column: 52, scope: !5)
!51 = !DILocation(line: 141, column: 33, scope: !5)
!52 = !DILocation(line: 141, column: 58, scope: !5)
!53 = !DILocation(line: 141, column: 39, scope: !5)
!54 = !DILocation(line: 142, column: 21, scope: !5)
!55 = !DILocation(line: 142, column: 4, scope: !5)
