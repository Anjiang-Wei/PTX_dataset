; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define ptx_kernel void @_rms_norm_fwd_fused(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #0 !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %10 = mul i32 %5, %9, !dbg !9
  %11 = sext i32 %10 to i64, !dbg !10
  %12 = getelementptr half, ptr addrspace(1) %1, i64 %11, !dbg !10
  %13 = getelementptr half, ptr addrspace(1) %0, i64 %11, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = and i32 %14, 31, !dbg !12
  %16 = lshr i32 %14, 5, !dbg !12
  %17 = shl nuw nsw i32 %14, 3, !dbg !12
  %18 = and i32 %17, 2040, !dbg !12
  %19 = or disjoint i32 %18, 2048, !dbg !12
  %20 = icmp sgt i32 %6, 0, !dbg !13
  br i1 %20, label %.lr.ph, label %._crit_edge, !dbg !13

.lr.ph:                                           ; preds = %8, %.lr.ph
  %21 = phi i32 [ %76, %.lr.ph ], [ 0, %8 ]
  %22 = phi <16 x float> [ %75, %.lr.ph ], [ zeroinitializer, %8 ]
  %23 = or disjoint i32 %21, %18, !dbg !14
  %24 = or disjoint i32 %21, %19, !dbg !14
  %25 = icmp slt i32 %23, %6, !dbg !15
  %26 = icmp slt i32 %24, %6, !dbg !15
  %27 = sext i32 %23 to i64, !dbg !16
  %28 = getelementptr half, ptr addrspace(1) %13, i64 %27, !dbg !16
  %29 = sext i32 %24 to i64, !dbg !16
  %30 = getelementptr half, ptr addrspace(1) %13, i64 %29, !dbg !16
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %28, i1 %25) #6, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !17
  %33 = bitcast i32 %32 to <2 x half>, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !17
  %35 = bitcast i32 %34 to <2 x half>, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !17
  %37 = bitcast i32 %36 to <2 x half>, !dbg !17
  %38 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !17
  %39 = bitcast i32 %38 to <2 x half>, !dbg !17
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %30, i1 %26) #6, !dbg !17
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !17
  %42 = bitcast i32 %41 to <2 x half>, !dbg !17
  %43 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !17
  %44 = bitcast i32 %43 to <2 x half>, !dbg !17
  %45 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !17
  %46 = bitcast i32 %45 to <2 x half>, !dbg !17
  %47 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !17
  %48 = bitcast i32 %47 to <2 x half>, !dbg !17
  %49 = shufflevector <2 x half> %33, <2 x half> %35, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %50 = shufflevector <2 x half> %37, <2 x half> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %51 = shufflevector <16 x half> %49, <16 x half> %50, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %52 = shufflevector <2 x half> %37, <2 x half> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %53 = shufflevector <16 x half> %51, <16 x half> %52, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %54 = shufflevector <2 x half> %39, <2 x half> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %55 = shufflevector <16 x half> %53, <16 x half> %54, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %56 = shufflevector <2 x half> %39, <2 x half> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %57 = shufflevector <16 x half> %55, <16 x half> %56, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %58 = shufflevector <2 x half> %42, <2 x half> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %59 = shufflevector <16 x half> %57, <16 x half> %58, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %60 = shufflevector <2 x half> %42, <2 x half> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %61 = shufflevector <16 x half> %59, <16 x half> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %62 = shufflevector <2 x half> %44, <2 x half> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %63 = shufflevector <16 x half> %61, <16 x half> %62, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %64 = shufflevector <2 x half> %44, <2 x half> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %65 = shufflevector <16 x half> %63, <16 x half> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %66 = shufflevector <2 x half> %46, <2 x half> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %67 = shufflevector <16 x half> %65, <16 x half> %66, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !18
  %68 = shufflevector <2 x half> %46, <2 x half> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %69 = shufflevector <16 x half> %67, <16 x half> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !18
  %70 = shufflevector <2 x half> %48, <2 x half> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %71 = shufflevector <16 x half> %69, <16 x half> %70, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !18
  %72 = shufflevector <2 x half> %48, <2 x half> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %73 = shufflevector <16 x half> %71, <16 x half> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !18
  %74 = fpext <16 x half> %73 to <16 x float>, !dbg !18
  %75 = fadd <16 x float> %22, %74, !dbg !19
  %76 = add i32 %21, 4096, !dbg !13
  %77 = icmp slt i32 %76, %6, !dbg !13
  br i1 %77, label %.lr.ph, label %._crit_edge.loopexit, !dbg !13

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %shift = shufflevector <16 x float> %75, <16 x float> poison, <16 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %78 = fadd <16 x float> %75, %shift, !dbg !20
  %shift46 = shufflevector <16 x float> %75, <16 x float> poison, <16 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %79 = fadd <16 x float> %shift46, %78, !dbg !20
  %shift47 = shufflevector <16 x float> %75, <16 x float> poison, <16 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %80 = fadd <16 x float> %shift47, %79, !dbg !20
  %shift48 = shufflevector <16 x float> %75, <16 x float> poison, <16 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %81 = fadd <16 x float> %shift48, %80, !dbg !20
  %shift49 = shufflevector <16 x float> %75, <16 x float> poison, <16 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %82 = fadd <16 x float> %shift49, %81, !dbg !20
  %shift50 = shufflevector <16 x float> %75, <16 x float> poison, <16 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %83 = fadd <16 x float> %shift50, %82, !dbg !20
  %shift51 = shufflevector <16 x float> %75, <16 x float> poison, <16 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %84 = fadd <16 x float> %shift51, %83, !dbg !20
  %shift52 = shufflevector <16 x float> %75, <16 x float> poison, <16 x i32> <i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %85 = fadd <16 x float> %shift52, %84, !dbg !20
  %shift53 = shufflevector <16 x float> %75, <16 x float> poison, <16 x i32> <i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %86 = fadd <16 x float> %shift53, %85, !dbg !20
  %shift54 = shufflevector <16 x float> %75, <16 x float> poison, <16 x i32> <i32 10, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %87 = fadd <16 x float> %shift54, %86, !dbg !20
  %shift55 = shufflevector <16 x float> %75, <16 x float> poison, <16 x i32> <i32 11, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %88 = fadd <16 x float> %shift55, %87, !dbg !20
  %shift56 = shufflevector <16 x float> %75, <16 x float> poison, <16 x i32> <i32 12, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %89 = fadd <16 x float> %shift56, %88, !dbg !20
  %shift57 = shufflevector <16 x float> %75, <16 x float> poison, <16 x i32> <i32 13, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %90 = fadd <16 x float> %shift57, %89, !dbg !20
  %shift58 = shufflevector <16 x float> %75, <16 x float> poison, <16 x i32> <i32 14, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %91 = fadd <16 x float> %shift58, %90, !dbg !20
  %shift59 = shufflevector <16 x float> %75, <16 x float> poison, <16 x i32> <i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %92 = fadd <16 x float> %shift59, %91, !dbg !20
  %93 = extractelement <16 x float> %92, i64 0, !dbg !20
  br label %._crit_edge, !dbg !20

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %8
  %94 = phi float [ 0.000000e+00, %8 ], [ %93, %._crit_edge.loopexit ], !dbg !20
  %95 = bitcast float %94 to i32, !dbg !24
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 16, i32 31), !dbg !24
  %97 = bitcast i32 %96 to float, !dbg !24
  %98 = fadd float %94, %97, !dbg !20
  %99 = bitcast float %98 to i32, !dbg !24
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 8, i32 31), !dbg !24
  %101 = bitcast i32 %100 to float, !dbg !24
  %102 = fadd float %98, %101, !dbg !20
  %103 = bitcast float %102 to i32, !dbg !24
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 4, i32 31), !dbg !24
  %105 = bitcast i32 %104 to float, !dbg !24
  %106 = fadd float %102, %105, !dbg !20
  %107 = bitcast float %106 to i32, !dbg !24
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 2, i32 31), !dbg !24
  %109 = bitcast i32 %108 to float, !dbg !24
  %110 = fadd float %106, %109, !dbg !20
  %111 = bitcast float %110 to i32, !dbg !24
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 1, i32 31), !dbg !24
  %113 = bitcast i32 %112 to float, !dbg !24
  %114 = fadd float %110, %113, !dbg !20
  %115 = and i32 %16, 7, !dbg !24
  %116 = icmp eq i32 %15, 0, !dbg !24
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %115, !dbg !24
  %118 = bitcast float %114 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 %116) #6, !dbg !24
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !24
  %119 = icmp samesign ult i32 %14, 8, !dbg !24
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %14, !dbg !24
  %121 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %120, i1 %119) #6, !dbg !24
  %122 = bitcast i32 %121 to float, !dbg !24
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 4, i32 31), !dbg !24
  %124 = bitcast i32 %123 to float, !dbg !24
  %125 = fadd float %122, %124, !dbg !20
  %126 = bitcast float %125 to i32, !dbg !24
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 2, i32 31), !dbg !24
  %128 = bitcast i32 %127 to float, !dbg !24
  %129 = fadd float %125, %128, !dbg !20
  %130 = bitcast float %129 to i32, !dbg !24
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 1, i32 31), !dbg !24
  %132 = bitcast i32 %131 to float, !dbg !24
  %133 = fadd float %129, %132, !dbg !20
  %134 = icmp eq i32 %14, 0, !dbg !24
  %135 = bitcast float %133 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %135, i1 %134) #6, !dbg !24
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !24
  %136 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %137 = sitofp i32 %6 to float, !dbg !25
  %138 = tail call float @llvm.nvvm.div.full(float %136, float %137), !dbg !25
  br i1 %20, label %.lr.ph6.preheader, label %._crit_edge7, !dbg !26

.lr.ph6.preheader:                                ; preds = %._crit_edge
  %139 = insertelement <2 x i32> poison, i32 %18, i64 0
  %140 = insertelement <2 x i32> %139, i32 %19, i64 1
  %141 = insertelement <2 x i32> poison, i32 %6, i64 0
  %142 = shufflevector <2 x i32> %141, <2 x i32> poison, <2 x i32> zeroinitializer
  %143 = insertelement <16 x float> poison, float %138, i64 0
  %144 = shufflevector <16 x float> %143, <16 x float> poison, <16 x i32> zeroinitializer
  br label %.lr.ph6, !dbg !26

.lr.ph6:                                          ; preds = %.lr.ph6.preheader, %.lr.ph6
  %145 = phi i32 [ %208, %.lr.ph6 ], [ 0, %.lr.ph6.preheader ]
  %146 = phi <16 x float> [ %207, %.lr.ph6 ], [ zeroinitializer, %.lr.ph6.preheader ]
  %147 = insertelement <2 x i32> poison, i32 %145, i64 0, !dbg !27
  %148 = shufflevector <2 x i32> %147, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !27
  %149 = or disjoint <2 x i32> %148, %140, !dbg !27
  %150 = extractelement <2 x i32> %149, i64 0, !dbg !28
  %151 = sext i32 %150 to i64, !dbg !28
  %152 = getelementptr half, ptr addrspace(1) %13, i64 %151, !dbg !28
  %153 = extractelement <2 x i32> %149, i64 1, !dbg !28
  %154 = sext i32 %153 to i64, !dbg !28
  %155 = getelementptr half, ptr addrspace(1) %13, i64 %154, !dbg !28
  %156 = icmp slt <2 x i32> %149, %142, !dbg !29
  %157 = shufflevector <2 x i1> %156, <2 x i1> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !29
  %158 = extractelement <2 x i1> %156, i64 0, !dbg !30
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %152, i1 %158) #6, !dbg !30
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !30
  %161 = bitcast i32 %160 to <2 x half>, !dbg !30
  %162 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !30
  %163 = bitcast i32 %162 to <2 x half>, !dbg !30
  %164 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !30
  %165 = bitcast i32 %164 to <2 x half>, !dbg !30
  %166 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !30
  %167 = bitcast i32 %166 to <2 x half>, !dbg !30
  %168 = extractelement <2 x i1> %156, i64 1, !dbg !30
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %155, i1 %168) #6, !dbg !30
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !30
  %171 = bitcast i32 %170 to <2 x half>, !dbg !30
  %172 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !30
  %173 = bitcast i32 %172 to <2 x half>, !dbg !30
  %174 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !30
  %175 = bitcast i32 %174 to <2 x half>, !dbg !30
  %176 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !30
  %177 = bitcast i32 %176 to <2 x half>, !dbg !30
  %178 = shufflevector <2 x half> %161, <2 x half> %163, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %179 = shufflevector <2 x half> %165, <2 x half> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %180 = shufflevector <16 x half> %178, <16 x half> %179, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %181 = shufflevector <2 x half> %165, <2 x half> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %182 = shufflevector <16 x half> %180, <16 x half> %181, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %183 = shufflevector <2 x half> %167, <2 x half> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %184 = shufflevector <16 x half> %182, <16 x half> %183, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %185 = shufflevector <2 x half> %167, <2 x half> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %186 = shufflevector <16 x half> %184, <16 x half> %185, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %187 = shufflevector <2 x half> %171, <2 x half> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %188 = shufflevector <16 x half> %186, <16 x half> %187, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %189 = shufflevector <2 x half> %171, <2 x half> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %190 = shufflevector <16 x half> %188, <16 x half> %189, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %191 = shufflevector <2 x half> %173, <2 x half> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %192 = shufflevector <16 x half> %190, <16 x half> %191, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %193 = shufflevector <2 x half> %173, <2 x half> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %194 = shufflevector <16 x half> %192, <16 x half> %193, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %195 = shufflevector <2 x half> %175, <2 x half> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %196 = shufflevector <16 x half> %194, <16 x half> %195, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !31
  %197 = shufflevector <2 x half> %175, <2 x half> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %198 = shufflevector <16 x half> %196, <16 x half> %197, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !31
  %199 = shufflevector <2 x half> %177, <2 x half> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %200 = shufflevector <16 x half> %198, <16 x half> %199, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !31
  %201 = shufflevector <2 x half> %177, <2 x half> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %202 = shufflevector <16 x half> %200, <16 x half> %201, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !31
  %203 = fpext <16 x half> %202 to <16 x float>, !dbg !31
  %204 = fsub <16 x float> %203, %144, !dbg !32
  %205 = select <16 x i1> %157, <16 x float> %204, <16 x float> zeroinitializer, !dbg !33
  %206 = fmul <16 x float> %205, %205, !dbg !34
  %207 = fadd <16 x float> %146, %206, !dbg !35
  %208 = add i32 %145, 4096, !dbg !26
  %209 = icmp slt i32 %208, %6, !dbg !26
  br i1 %209, label %.lr.ph6, label %._crit_edge7, !dbg !26

._crit_edge7:                                     ; preds = %.lr.ph6, %._crit_edge
  %210 = phi <16 x float> [ zeroinitializer, %._crit_edge ], [ %207, %.lr.ph6 ]
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %shift60 = shufflevector <16 x float> %210, <16 x float> poison, <16 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %211 = fadd <16 x float> %210, %shift60, !dbg !38
  %shift61 = shufflevector <16 x float> %210, <16 x float> poison, <16 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %212 = fadd <16 x float> %shift61, %211, !dbg !38
  %shift62 = shufflevector <16 x float> %210, <16 x float> poison, <16 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %213 = fadd <16 x float> %shift62, %212, !dbg !38
  %shift63 = shufflevector <16 x float> %210, <16 x float> poison, <16 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %214 = fadd <16 x float> %shift63, %213, !dbg !38
  %shift64 = shufflevector <16 x float> %210, <16 x float> poison, <16 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %215 = fadd <16 x float> %shift64, %214, !dbg !38
  %shift65 = shufflevector <16 x float> %210, <16 x float> poison, <16 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %216 = fadd <16 x float> %shift65, %215, !dbg !38
  %shift66 = shufflevector <16 x float> %210, <16 x float> poison, <16 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %217 = fadd <16 x float> %shift66, %216, !dbg !38
  %shift67 = shufflevector <16 x float> %210, <16 x float> poison, <16 x i32> <i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %218 = fadd <16 x float> %shift67, %217, !dbg !38
  %shift68 = shufflevector <16 x float> %210, <16 x float> poison, <16 x i32> <i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %219 = fadd <16 x float> %shift68, %218, !dbg !38
  %shift69 = shufflevector <16 x float> %210, <16 x float> poison, <16 x i32> <i32 10, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %220 = fadd <16 x float> %shift69, %219, !dbg !38
  %shift70 = shufflevector <16 x float> %210, <16 x float> poison, <16 x i32> <i32 11, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %221 = fadd <16 x float> %shift70, %220, !dbg !38
  %shift71 = shufflevector <16 x float> %210, <16 x float> poison, <16 x i32> <i32 12, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %222 = fadd <16 x float> %shift71, %221, !dbg !38
  %shift72 = shufflevector <16 x float> %210, <16 x float> poison, <16 x i32> <i32 13, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %223 = fadd <16 x float> %shift72, %222, !dbg !38
  %shift73 = shufflevector <16 x float> %210, <16 x float> poison, <16 x i32> <i32 14, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %224 = fadd <16 x float> %shift73, %223, !dbg !38
  %shift74 = shufflevector <16 x float> %210, <16 x float> poison, <16 x i32> <i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %225 = fadd <16 x float> %shift74, %224, !dbg !38
  %226 = extractelement <16 x float> %225, i64 0, !dbg !38
  %227 = bitcast float %226 to i32, !dbg !36
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 16, i32 31), !dbg !36
  %229 = bitcast i32 %228 to float, !dbg !36
  %230 = fadd float %226, %229, !dbg !38
  %231 = bitcast float %230 to i32, !dbg !36
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 8, i32 31), !dbg !36
  %233 = bitcast i32 %232 to float, !dbg !36
  %234 = fadd float %230, %233, !dbg !38
  %235 = bitcast float %234 to i32, !dbg !36
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 4, i32 31), !dbg !36
  %237 = bitcast i32 %236 to float, !dbg !36
  %238 = fadd float %234, %237, !dbg !38
  %239 = bitcast float %238 to i32, !dbg !36
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 2, i32 31), !dbg !36
  %241 = bitcast i32 %240 to float, !dbg !36
  %242 = fadd float %238, %241, !dbg !38
  %243 = bitcast float %242 to i32, !dbg !36
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 1, i32 31), !dbg !36
  %245 = bitcast i32 %244 to float, !dbg !36
  %246 = fadd float %242, %245, !dbg !38
  %247 = bitcast float %246 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %247, i1 %116) #6, !dbg !36
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %248 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %120, i1 %119) #6, !dbg !36
  %249 = bitcast i32 %248 to float, !dbg !36
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 4, i32 31), !dbg !36
  %251 = bitcast i32 %250 to float, !dbg !36
  %252 = fadd float %249, %251, !dbg !38
  %253 = bitcast float %252 to i32, !dbg !36
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 2, i32 31), !dbg !36
  %255 = bitcast i32 %254 to float, !dbg !36
  %256 = fadd float %252, %255, !dbg !38
  %257 = bitcast float %256 to i32, !dbg !36
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 1, i32 31), !dbg !36
  %259 = bitcast i32 %258 to float, !dbg !36
  %260 = fadd float %256, %259, !dbg !38
  %261 = bitcast float %260 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %261, i1 %134) #6, !dbg !36
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %262 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %263 = tail call float @llvm.nvvm.div.full(float %262, float %137), !dbg !39
  %264 = fadd float %263, 0x3E112E0BE0000000, !dbg !40
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %.not.i = icmp eq i32 %265, 0, !dbg !41
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !41
  %.not1.i = icmp eq i32 %266, 0, !dbg !41
  br i1 %.not.i, label %272, label %267, !dbg !41

267:                                              ; preds = %._crit_edge7
  br i1 %.not1.i, label %270, label %268, !dbg !41

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %264) #6, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %264) #6, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

272:                                              ; preds = %._crit_edge7
  br i1 %.not1.i, label %275, label %273, !dbg !41

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.f(float %264) #6, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.f(float %264) #6, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %268, %270, %273, %275
  %.0.i = phi float [ %269, %268 ], [ %271, %270 ], [ %274, %273 ], [ %276, %275 ], !dbg !41
  %277 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i), !dbg !42
  %278 = zext nneg i32 %9 to i64, !dbg !43
  %279 = getelementptr half, ptr addrspace(1) %3, i64 %278, !dbg !43
  %280 = fptrunc float %138 to half, !dbg !44
  %281 = bitcast half %280 to i16, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %281, ptr addrspace(1) %279, i1 %134) #6, !dbg !44
  %282 = getelementptr half, ptr addrspace(1) %4, i64 %278, !dbg !45
  %283 = fptrunc float %277 to half, !dbg !46
  %284 = bitcast half %283 to i16, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %284, ptr addrspace(1) %282, i1 %134) #6, !dbg !46
  br i1 %20, label %.lr.ph9.preheader, label %._crit_edge10, !dbg !47

.lr.ph9.preheader:                                ; preds = %__nv_sqrtf.exit
  %285 = insertelement <2 x float> poison, float %138, i64 0
  %286 = shufflevector <2 x float> %285, <2 x float> poison, <2 x i32> zeroinitializer
  %287 = insertelement <2 x float> poison, float %277, i64 0
  %288 = shufflevector <2 x float> %287, <2 x float> poison, <2 x i32> zeroinitializer
  br label %.lr.ph9, !dbg !47

.lr.ph9:                                          ; preds = %.lr.ph9.preheader, %.lr.ph9
  %289 = phi i32 [ %394, %.lr.ph9 ], [ 0, %.lr.ph9.preheader ]
  %290 = or disjoint i32 %289, %18, !dbg !48
  %291 = or disjoint i32 %289, %19, !dbg !48
  %292 = icmp slt i32 %290, %6, !dbg !49
  %293 = icmp slt i32 %291, %6, !dbg !49
  %294 = sext i32 %290 to i64, !dbg !50
  %295 = getelementptr half, ptr addrspace(1) %2, i64 %294, !dbg !50
  %296 = sext i32 %291 to i64, !dbg !50
  %297 = getelementptr half, ptr addrspace(1) %2, i64 %296, !dbg !50
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %295, i1 %292) #6, !dbg !51
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !51
  %300 = bitcast i32 %299 to <2 x half>, !dbg !51
  %301 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !51
  %302 = bitcast i32 %301 to <2 x half>, !dbg !51
  %303 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !51
  %304 = bitcast i32 %303 to <2 x half>, !dbg !51
  %305 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !51
  %306 = bitcast i32 %305 to <2 x half>, !dbg !51
  %307 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %297, i1 %293) #6, !dbg !51
  %308 = extractvalue { i32, i32, i32, i32 } %307, 0, !dbg !51
  %309 = bitcast i32 %308 to <2 x half>, !dbg !51
  %310 = extractvalue { i32, i32, i32, i32 } %307, 1, !dbg !51
  %311 = bitcast i32 %310 to <2 x half>, !dbg !51
  %312 = extractvalue { i32, i32, i32, i32 } %307, 2, !dbg !51
  %313 = bitcast i32 %312 to <2 x half>, !dbg !51
  %314 = extractvalue { i32, i32, i32, i32 } %307, 3, !dbg !51
  %315 = bitcast i32 %314 to <2 x half>, !dbg !51
  %316 = getelementptr half, ptr addrspace(1) %13, i64 %294, !dbg !52
  %317 = getelementptr half, ptr addrspace(1) %13, i64 %296, !dbg !52
  %318 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %316, i1 %292) #6, !dbg !53
  %319 = extractvalue { i32, i32, i32, i32 } %318, 0, !dbg !53
  %320 = bitcast i32 %319 to <2 x half>, !dbg !53
  %321 = extractvalue { i32, i32, i32, i32 } %318, 1, !dbg !53
  %322 = bitcast i32 %321 to <2 x half>, !dbg !53
  %323 = extractvalue { i32, i32, i32, i32 } %318, 2, !dbg !53
  %324 = bitcast i32 %323 to <2 x half>, !dbg !53
  %325 = extractvalue { i32, i32, i32, i32 } %318, 3, !dbg !53
  %326 = bitcast i32 %325 to <2 x half>, !dbg !53
  %327 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %317, i1 %293) #6, !dbg !53
  %328 = extractvalue { i32, i32, i32, i32 } %327, 0, !dbg !53
  %329 = bitcast i32 %328 to <2 x half>, !dbg !53
  %330 = extractvalue { i32, i32, i32, i32 } %327, 1, !dbg !53
  %331 = bitcast i32 %330 to <2 x half>, !dbg !53
  %332 = extractvalue { i32, i32, i32, i32 } %327, 2, !dbg !53
  %333 = bitcast i32 %332 to <2 x half>, !dbg !53
  %334 = extractvalue { i32, i32, i32, i32 } %327, 3, !dbg !53
  %335 = bitcast i32 %334 to <2 x half>, !dbg !53
  %336 = getelementptr half, ptr addrspace(1) %12, i64 %294, !dbg !54
  %337 = getelementptr half, ptr addrspace(1) %12, i64 %296, !dbg !54
  %338 = fpext <2 x half> %320 to <2 x float>, !dbg !55
  %339 = fsub <2 x float> %338, %286, !dbg !56
  %340 = fmul <2 x float> %288, %339, !dbg !57
  %341 = fpext <2 x half> %300 to <2 x float>, !dbg !58
  %342 = fmul <2 x float> %340, %341, !dbg !58
  %343 = fptrunc <2 x float> %342 to <2 x half>, !dbg !59
  %344 = fpext <2 x half> %322 to <2 x float>, !dbg !55
  %345 = fsub <2 x float> %344, %286, !dbg !56
  %346 = fmul <2 x float> %288, %345, !dbg !57
  %347 = fpext <2 x half> %302 to <2 x float>, !dbg !58
  %348 = fmul <2 x float> %346, %347, !dbg !58
  %349 = fptrunc <2 x float> %348 to <2 x half>, !dbg !59
  %350 = fpext <2 x half> %324 to <2 x float>, !dbg !55
  %351 = fsub <2 x float> %350, %286, !dbg !56
  %352 = fmul <2 x float> %288, %351, !dbg !57
  %353 = fpext <2 x half> %304 to <2 x float>, !dbg !58
  %354 = fmul <2 x float> %352, %353, !dbg !58
  %355 = fptrunc <2 x float> %354 to <2 x half>, !dbg !59
  %356 = fpext <2 x half> %326 to <2 x float>, !dbg !55
  %357 = fsub <2 x float> %356, %286, !dbg !56
  %358 = fmul <2 x float> %288, %357, !dbg !57
  %359 = fpext <2 x half> %306 to <2 x float>, !dbg !58
  %360 = fmul <2 x float> %358, %359, !dbg !58
  %361 = fptrunc <2 x float> %360 to <2 x half>, !dbg !59
  %362 = fpext <2 x half> %329 to <2 x float>, !dbg !55
  %363 = fsub <2 x float> %362, %286, !dbg !56
  %364 = fmul <2 x float> %288, %363, !dbg !57
  %365 = fpext <2 x half> %309 to <2 x float>, !dbg !58
  %366 = fmul <2 x float> %364, %365, !dbg !58
  %367 = fptrunc <2 x float> %366 to <2 x half>, !dbg !59
  %368 = fpext <2 x half> %331 to <2 x float>, !dbg !55
  %369 = fsub <2 x float> %368, %286, !dbg !56
  %370 = fmul <2 x float> %288, %369, !dbg !57
  %371 = fpext <2 x half> %311 to <2 x float>, !dbg !58
  %372 = fmul <2 x float> %370, %371, !dbg !58
  %373 = fptrunc <2 x float> %372 to <2 x half>, !dbg !59
  %374 = fpext <2 x half> %333 to <2 x float>, !dbg !55
  %375 = fsub <2 x float> %374, %286, !dbg !56
  %376 = fmul <2 x float> %288, %375, !dbg !57
  %377 = fpext <2 x half> %313 to <2 x float>, !dbg !58
  %378 = fmul <2 x float> %376, %377, !dbg !58
  %379 = fptrunc <2 x float> %378 to <2 x half>, !dbg !59
  %380 = fpext <2 x half> %335 to <2 x float>, !dbg !55
  %381 = fsub <2 x float> %380, %286, !dbg !56
  %382 = fmul <2 x float> %288, %381, !dbg !57
  %383 = fpext <2 x half> %315 to <2 x float>, !dbg !58
  %384 = fmul <2 x float> %382, %383, !dbg !58
  %385 = fptrunc <2 x float> %384 to <2 x half>, !dbg !59
  %386 = bitcast <2 x half> %343 to i32, !dbg !59
  %387 = bitcast <2 x half> %349 to i32, !dbg !59
  %388 = bitcast <2 x half> %355 to i32, !dbg !59
  %389 = bitcast <2 x half> %361 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %386, i32 %387, i32 %388, i32 %389, ptr addrspace(1) %336, i1 %292) #6, !dbg !59
  %390 = bitcast <2 x half> %367 to i32, !dbg !59
  %391 = bitcast <2 x half> %373 to i32, !dbg !59
  %392 = bitcast <2 x half> %379 to i32, !dbg !59
  %393 = bitcast <2 x half> %385 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %390, i32 %391, i32 %392, i32 %393, ptr addrspace(1) %337, i1 %293) #6, !dbg !59
  %394 = add i32 %289, 4096, !dbg !47
  %395 = icmp slt i32 %394, %6, !dbg !47
  br i1 %395, label %.lr.ph9, label %._crit_edge10, !dbg !47

._crit_edge10:                                    ; preds = %.lr.ph9, %__nv_sqrtf.exit
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "rmsnorm.py", directory: "/home/ubuntu/anjiang/PTX_dataset/triton_ptx")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "_rms_norm_fwd_fused", linkageName: "_rms_norm_fwd_fused", scope: !1, file: !1, line: 39, type: !6, scopeLine: 39, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 50, column: 24, scope: !5)
!9 = !DILocation(line: 51, column: 15, scope: !5)
!10 = !DILocation(line: 51, column: 9, scope: !5)
!11 = !DILocation(line: 52, column: 9, scope: !5)
!12 = !DILocation(line: 57, column: 34, scope: !5)
!13 = !DILocation(line: 56, column: 27, scope: !5)
!14 = !DILocation(line: 57, column: 21, scope: !5)
!15 = !DILocation(line: 58, column: 42, scope: !5)
!16 = !DILocation(line: 58, column: 24, scope: !5)
!17 = !DILocation(line: 58, column: 20, scope: !5)
!18 = !DILocation(line: 58, column: 58, scope: !5)
!19 = !DILocation(line: 59, column: 17, scope: !5)
!20 = !DILocation(line: 260, column: 15, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !5, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language")
!23 = !DILocation(line: 60, column: 18, scope: !5)
!24 = !DILocation(line: 290, column: 36, scope: !21, inlinedAt: !23)
!25 = !DILocation(line: 60, column: 35, scope: !5)
!26 = !DILocation(line: 63, column: 27, scope: !5)
!27 = !DILocation(line: 64, column: 21, scope: !5)
!28 = !DILocation(line: 65, column: 24, scope: !5)
!29 = !DILocation(line: 65, column: 42, scope: !5)
!30 = !DILocation(line: 65, column: 20, scope: !5)
!31 = !DILocation(line: 65, column: 58, scope: !5)
!32 = !DILocation(line: 66, column: 35, scope: !5)
!33 = !DILocation(line: 66, column: 41, scope: !5)
!34 = !DILocation(line: 67, column: 20, scope: !5)
!35 = !DILocation(line: 67, column: 16, scope: !5)
!36 = !DILocation(line: 290, column: 36, scope: !21, inlinedAt: !37)
!37 = !DILocation(line: 68, column: 17, scope: !5)
!38 = !DILocation(line: 260, column: 15, scope: !21, inlinedAt: !37)
!39 = !DILocation(line: 68, column: 33, scope: !5)
!40 = !DILocation(line: 69, column: 29, scope: !5)
!41 = !DILocation(line: 69, column: 23, scope: !5)
!42 = !DILocation(line: 69, column: 15, scope: !5)
!43 = !DILocation(line: 71, column: 20, scope: !5)
!44 = !DILocation(line: 71, column: 25, scope: !5)
!45 = !DILocation(line: 72, column: 20, scope: !5)
!46 = !DILocation(line: 72, column: 25, scope: !5)
!47 = !DILocation(line: 74, column: 27, scope: !5)
!48 = !DILocation(line: 75, column: 21, scope: !5)
!49 = !DILocation(line: 76, column: 22, scope: !5)
!50 = !DILocation(line: 77, column: 24, scope: !5)
!51 = !DILocation(line: 77, column: 20, scope: !5)
!52 = !DILocation(line: 78, column: 24, scope: !5)
!53 = !DILocation(line: 78, column: 20, scope: !5)
!54 = !DILocation(line: 82, column: 21, scope: !5)
!55 = !DILocation(line: 78, column: 54, scope: !5)
!56 = !DILocation(line: 79, column: 21, scope: !5)
!57 = !DILocation(line: 79, column: 29, scope: !5)
!58 = !DILocation(line: 80, column: 20, scope: !5)
!59 = !DILocation(line: 82, column: 27, scope: !5)
!60 = !DILocation(line: 74, column: 4, scope: !5)
