#loc = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":39:0)
#loc61 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":284:0)
#loc63 = loc(unknown)
#loc66 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":259:0)
module {
  tt.func public @_rms_norm_fwd_fused(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":39:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":39:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":39:0), %arg3: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":39:0), %arg4: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":39:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":39:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":39:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc2)
    %2 = arith.extsi %arg5 : i32 to i64 loc(#loc2)
    %3 = arith.muli %1, %2 : i64 loc(#loc2)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc2)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc2)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc2)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc2)
    %6 = arith.andi %4, %5 : i1 loc(#loc2)
    %7 = arith.muli %0, %arg5 : i32 loc(#loc2)
    %8 = tt.addptr %arg1, %7 : !tt.ptr<f16>, i32 loc(#loc3)
    %9 = arith.extsi %0 : i32 to i64 loc(#loc4)
    %10 = arith.extsi %arg5 : i32 to i64 loc(#loc4)
    %11 = arith.muli %9, %10 : i64 loc(#loc4)
    %c2147483647_i64_0 = arith.constant 2147483647 : i64 loc(#loc4)
    %c-2147483648_i64_1 = arith.constant -2147483648 : i64 loc(#loc4)
    %12 = arith.cmpi sle, %11, %c2147483647_i64_0 : i64 loc(#loc4)
    %13 = arith.cmpi sge, %11, %c-2147483648_i64_1 : i64 loc(#loc4)
    %14 = arith.andi %12, %13 : i1 loc(#loc4)
    %15 = arith.muli %0, %arg5 : i32 loc(#loc4)
    %16 = tt.addptr %arg0, %15 : !tt.ptr<f16>, i32 loc(#loc5)
    %c0_i32 = arith.constant 0 : i32 loc(#loc6)
    %17 = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_4096__(1,)cconstexpr_fp32_"() : () -> tensor<4096xf32> loc(#loc7)
    %c0_i32_2 = arith.constant 0 : i32 loc(#loc8)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc8)
    %18 = arith.bitcast %c0_i32_2 : i32 to i32 loc(#loc8)
    %19 = arith.bitcast %arg6 : i32 to i32 loc(#loc8)
    %20 = arith.bitcast %c4096_i32 : i32 to i32 loc(#loc8)
    %21 = ub.poison : i32 loc(#loc8)
    %22 = scf.for %arg7 = %18 to %19 step %20 iter_args(%arg8 = %17) -> (tensor<4096xf32>)  : i32 {
      %46 = tt.make_range {end = 4096 : i32, start = 0 : i32} : tensor<4096xi32> loc(#loc9)
      %47 = tt.splat %arg7 : i32 -> tensor<4096xi32> loc(#loc10)
      %48 = arith.extsi %47 : tensor<4096xi32> to tensor<4096xi64> loc(#loc10)
      %49 = arith.extsi %46 : tensor<4096xi32> to tensor<4096xi64> loc(#loc10)
      %50 = arith.addi %48, %49 : tensor<4096xi64> loc(#loc10)
      %c2147483647_i64_9 = arith.constant 2147483647 : i64 loc(#loc10)
      %c-2147483648_i64_10 = arith.constant -2147483648 : i64 loc(#loc10)
      %cst_11 = arith.constant dense<2147483647> : tensor<4096xi64> loc(#loc10)
      %51 = arith.cmpi sle, %50, %cst_11 : tensor<4096xi64> loc(#loc10)
      %cst_12 = arith.constant dense<-2147483648> : tensor<4096xi64> loc(#loc10)
      %52 = arith.cmpi sge, %50, %cst_12 : tensor<4096xi64> loc(#loc10)
      %53 = arith.andi %51, %52 : tensor<4096xi1> loc(#loc10)
      %54 = arith.addi %47, %46 : tensor<4096xi32> loc(#loc10)
      %55 = tt.splat %arg6 : i32 -> tensor<4096xi32> loc(#loc11)
      %56 = arith.cmpi slt, %54, %55 : tensor<4096xi32> loc(#loc11)
      %57 = tt.splat %16 : !tt.ptr<f16> -> tensor<4096x!tt.ptr<f16>> loc(#loc12)
      %58 = tt.addptr %57, %54 : tensor<4096x!tt.ptr<f16>>, tensor<4096xi32> loc(#loc12)
      %cst_13 = arith.constant 0.000000e+00 : f32 loc(#loc13)
      %cst_14 = arith.constant dense<0.000000e+00> : tensor<4096xf32> loc(#loc13)
      %59 = arith.truncf %cst_14 : tensor<4096xf32> to tensor<4096xf16> loc(#loc13)
      %60 = tt.load %58, %56, %59 : tensor<4096x!tt.ptr<f16>> loc(#loc13)
      %61 = arith.extf %60 : tensor<4096xf16> to tensor<4096xf32> loc(#loc14)
      %62 = arith.addf %arg8, %61 : tensor<4096xf32> loc(#loc15)
      scf.yield %62 : tensor<4096xf32> loc(#loc16)
    } loc(#loc8)
    %23 = tt.call @"triton.language.standard.sum__fp32S4096S__(1,)cconstexpr_0__(2,)cconstexpr_False__(3,)cNone"(%22) : (tensor<4096xf32>) -> f32 loc(#loc17)
    %24 = arith.sitofp %arg6 : i32 to f32 loc(#loc18)
    %25 = arith.divf %23, %24 : f32 loc(#loc18)
    %26 = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_4096__(1,)cconstexpr_fp32_"() : () -> tensor<4096xf32> loc(#loc19)
    %c0_i32_3 = arith.constant 0 : i32 loc(#loc20)
    %c4096_i32_4 = arith.constant 4096 : i32 loc(#loc20)
    %27 = arith.bitcast %c0_i32_3 : i32 to i32 loc(#loc20)
    %28 = arith.bitcast %arg6 : i32 to i32 loc(#loc20)
    %29 = arith.bitcast %c4096_i32_4 : i32 to i32 loc(#loc20)
    %30 = ub.poison : i32 loc(#loc20)
    %31 = scf.for %arg7 = %27 to %28 step %29 iter_args(%arg8 = %26) -> (tensor<4096xf32>)  : i32 {
      %46 = tt.make_range {end = 4096 : i32, start = 0 : i32} : tensor<4096xi32> loc(#loc21)
      %47 = tt.splat %arg7 : i32 -> tensor<4096xi32> loc(#loc22)
      %48 = arith.extsi %47 : tensor<4096xi32> to tensor<4096xi64> loc(#loc22)
      %49 = arith.extsi %46 : tensor<4096xi32> to tensor<4096xi64> loc(#loc22)
      %50 = arith.addi %48, %49 : tensor<4096xi64> loc(#loc22)
      %c2147483647_i64_9 = arith.constant 2147483647 : i64 loc(#loc22)
      %c-2147483648_i64_10 = arith.constant -2147483648 : i64 loc(#loc22)
      %cst_11 = arith.constant dense<2147483647> : tensor<4096xi64> loc(#loc22)
      %51 = arith.cmpi sle, %50, %cst_11 : tensor<4096xi64> loc(#loc22)
      %cst_12 = arith.constant dense<-2147483648> : tensor<4096xi64> loc(#loc22)
      %52 = arith.cmpi sge, %50, %cst_12 : tensor<4096xi64> loc(#loc22)
      %53 = arith.andi %51, %52 : tensor<4096xi1> loc(#loc22)
      %54 = arith.addi %47, %46 : tensor<4096xi32> loc(#loc22)
      %55 = tt.splat %arg6 : i32 -> tensor<4096xi32> loc(#loc23)
      %56 = arith.cmpi slt, %54, %55 : tensor<4096xi32> loc(#loc23)
      %57 = tt.splat %16 : !tt.ptr<f16> -> tensor<4096x!tt.ptr<f16>> loc(#loc24)
      %58 = tt.addptr %57, %54 : tensor<4096x!tt.ptr<f16>>, tensor<4096xi32> loc(#loc24)
      %cst_13 = arith.constant 0.000000e+00 : f32 loc(#loc25)
      %cst_14 = arith.constant dense<0.000000e+00> : tensor<4096xf32> loc(#loc25)
      %59 = arith.truncf %cst_14 : tensor<4096xf32> to tensor<4096xf16> loc(#loc25)
      %60 = tt.load %58, %56, %59 : tensor<4096x!tt.ptr<f16>> loc(#loc25)
      %61 = arith.extf %60 : tensor<4096xf16> to tensor<4096xf32> loc(#loc26)
      %62 = tt.splat %arg6 : i32 -> tensor<4096xi32> loc(#loc27)
      %63 = arith.cmpi slt, %54, %62 : tensor<4096xi32> loc(#loc27)
      %64 = tt.splat %25 : f32 -> tensor<4096xf32> loc(#loc28)
      %65 = arith.subf %61, %64 : tensor<4096xf32> loc(#loc28)
      %cst_15 = arith.constant 0.000000e+00 : f32 loc(#loc29)
      %cst_16 = arith.constant 0.000000e+00 : f32 loc(#loc29)
      %cst_17 = arith.constant dense<0.000000e+00> : tensor<4096xf32> loc(#loc29)
      %66 = arith.select %63, %65, %cst_17 : tensor<4096xi1>, tensor<4096xf32> loc(#loc29)
      %67 = arith.mulf %66, %66 : tensor<4096xf32> loc(#loc30)
      %68 = arith.addf %arg8, %67 : tensor<4096xf32> loc(#loc31)
      scf.yield %68 : tensor<4096xf32> loc(#loc32)
    } loc(#loc20)
    %32 = tt.call @"triton.language.standard.sum__fp32S4096S__(1,)cconstexpr_0__(2,)cconstexpr_False__(3,)cNone"(%31) : (tensor<4096xf32>) -> f32 loc(#loc33)
    %33 = arith.sitofp %arg6 : i32 to f32 loc(#loc34)
    %34 = arith.divf %32, %33 : f32 loc(#loc34)
    %cst = arith.constant 9.99999971E-10 : f32 loc(#loc35)
    %cst_5 = arith.constant 9.99999971E-10 : f32 loc(#loc35)
    %35 = arith.addf %34, %cst_5 : f32 loc(#loc35)
    %36 = math.sqrt %35 : f32 loc(#loc36)
    %c1_i32 = arith.constant 1 : i32 loc(#loc37)
    %cst_6 = arith.constant 1.000000e+00 : f32 loc(#loc37)
    %37 = arith.divf %cst_6, %36 : f32 loc(#loc37)
    %38 = tt.addptr %arg3, %0 : !tt.ptr<f16>, i32 loc(#loc38)
    %39 = arith.truncf %25 : f32 to f16 loc(#loc39)
    tt.store %38, %39 : !tt.ptr<f16> loc(#loc39)
    %40 = tt.addptr %arg4, %0 : !tt.ptr<f16>, i32 loc(#loc40)
    %41 = arith.truncf %37 : f32 to f16 loc(#loc41)
    tt.store %40, %41 : !tt.ptr<f16> loc(#loc41)
    %c0_i32_7 = arith.constant 0 : i32 loc(#loc42)
    %c4096_i32_8 = arith.constant 4096 : i32 loc(#loc42)
    %42 = arith.bitcast %c0_i32_7 : i32 to i32 loc(#loc42)
    %43 = arith.bitcast %arg6 : i32 to i32 loc(#loc42)
    %44 = arith.bitcast %c4096_i32_8 : i32 to i32 loc(#loc42)
    %45 = ub.poison : i32 loc(#loc42)
    scf.for %arg7 = %42 to %43 step %44  : i32 {
      %46 = tt.make_range {end = 4096 : i32, start = 0 : i32} : tensor<4096xi32> loc(#loc43)
      %47 = tt.splat %arg7 : i32 -> tensor<4096xi32> loc(#loc44)
      %48 = arith.extsi %47 : tensor<4096xi32> to tensor<4096xi64> loc(#loc44)
      %49 = arith.extsi %46 : tensor<4096xi32> to tensor<4096xi64> loc(#loc44)
      %50 = arith.addi %48, %49 : tensor<4096xi64> loc(#loc44)
      %c2147483647_i64_9 = arith.constant 2147483647 : i64 loc(#loc44)
      %c-2147483648_i64_10 = arith.constant -2147483648 : i64 loc(#loc44)
      %cst_11 = arith.constant dense<2147483647> : tensor<4096xi64> loc(#loc44)
      %51 = arith.cmpi sle, %50, %cst_11 : tensor<4096xi64> loc(#loc44)
      %cst_12 = arith.constant dense<-2147483648> : tensor<4096xi64> loc(#loc44)
      %52 = arith.cmpi sge, %50, %cst_12 : tensor<4096xi64> loc(#loc44)
      %53 = arith.andi %51, %52 : tensor<4096xi1> loc(#loc44)
      %54 = arith.addi %47, %46 : tensor<4096xi32> loc(#loc44)
      %55 = tt.splat %arg6 : i32 -> tensor<4096xi32> loc(#loc45)
      %56 = arith.cmpi slt, %54, %55 : tensor<4096xi32> loc(#loc45)
      %57 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<4096x!tt.ptr<f16>> loc(#loc46)
      %58 = tt.addptr %57, %54 : tensor<4096x!tt.ptr<f16>>, tensor<4096xi32> loc(#loc46)
      %59 = tt.load %58, %56 : tensor<4096x!tt.ptr<f16>> loc(#loc47)
      %60 = tt.splat %16 : !tt.ptr<f16> -> tensor<4096x!tt.ptr<f16>> loc(#loc48)
      %61 = tt.addptr %60, %54 : tensor<4096x!tt.ptr<f16>>, tensor<4096xi32> loc(#loc48)
      %cst_13 = arith.constant 0.000000e+00 : f32 loc(#loc49)
      %cst_14 = arith.constant dense<0.000000e+00> : tensor<4096xf32> loc(#loc49)
      %62 = arith.truncf %cst_14 : tensor<4096xf32> to tensor<4096xf16> loc(#loc49)
      %63 = tt.load %61, %56, %62 : tensor<4096x!tt.ptr<f16>> loc(#loc49)
      %64 = arith.extf %63 : tensor<4096xf16> to tensor<4096xf32> loc(#loc50)
      %65 = tt.splat %25 : f32 -> tensor<4096xf32> loc(#loc51)
      %66 = arith.subf %64, %65 : tensor<4096xf32> loc(#loc51)
      %67 = tt.splat %37 : f32 -> tensor<4096xf32> loc(#loc52)
      %68 = arith.mulf %66, %67 : tensor<4096xf32> loc(#loc52)
      %69 = arith.extf %59 : tensor<4096xf16> to tensor<4096xf32> loc(#loc53)
      %70 = arith.mulf %68, %69 : tensor<4096xf32> loc(#loc53)
      %71 = tt.splat %8 : !tt.ptr<f16> -> tensor<4096x!tt.ptr<f16>> loc(#loc54)
      %72 = tt.addptr %71, %54 : tensor<4096x!tt.ptr<f16>>, tensor<4096xi32> loc(#loc54)
      %73 = arith.truncf %70 : tensor<4096xf32> to tensor<4096xf16> loc(#loc55)
      tt.store %72, %73, %56 : tensor<4096x!tt.ptr<f16>> loc(#loc55)
    } loc(#loc42)
    tt.return loc(#loc56)
  } loc(#loc)
  tt.func private @"triton.language.standard.zeros____(0, 0)cconstexpr_4096__(1,)cconstexpr_fp32_"() -> tensor<4096xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc58)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<4096xf32> loc(#loc58)
    tt.return %cst_0 : tensor<4096xf32> loc(#loc59)
  ^bb1:  // no predecessors
    %0 = ub.poison : tensor<4096xf32> loc(#loc60)
    tt.return %0 : tensor<4096xf32> loc(#loc60)
  } loc(#loc57)
  tt.func private @"triton.language.standard.sum__fp32S4096S__(1,)cconstexpr_0__(2,)cconstexpr_False__(3,)cNone"(%arg0: tensor<4096xf32> loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":284:0)) -> f32 attributes {noinline = false} {
    %0 = "tt.reduce"(%arg0) <{axis = 0 : i32}> ({
    ^bb0(%arg1: f32 loc(unknown), %arg2: f32 loc(unknown)):
      %2 = tt.call @triton.language.standard._sum_combine__fp32_fp32__(%arg1, %arg2) : (f32, f32) -> f32 loc(#loc62)
      tt.reduce.return %2 : f32 loc(#loc62)
    }) : (tensor<4096xf32>) -> f32 loc(#loc62)
    tt.return %0 : f32 loc(#loc64)
  ^bb1:  // no predecessors
    %1 = ub.poison : f32 loc(#loc65)
    tt.return %1 : f32 loc(#loc65)
  } loc(#loc61)
  tt.func private @triton.language.standard._sum_combine__fp32_fp32__(%arg0: f32 loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":259:0), %arg1: f32 loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":259:0)) -> f32 attributes {noinline = false} {
    %0 = arith.addf %arg0, %arg1 : f32 loc(#loc67)
    tt.return %0 : f32 loc(#loc68)
  ^bb1:  // no predecessors
    %1 = ub.poison : f32 loc(#loc69)
    tt.return %1 : f32 loc(#loc69)
  } loc(#loc66)
} loc(#loc)
#loc1 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":50:24)
#loc2 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":51:15)
#loc3 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":51:9)
#loc4 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":52:15)
#loc5 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":52:9)
#loc6 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":54:11)
#loc7 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":55:21)
#loc8 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":56:27)
#loc9 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":57:34)
#loc10 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":57:21)
#loc11 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":58:42)
#loc12 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":58:24)
#loc13 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":58:20)
#loc14 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":58:58)
#loc15 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":59:17)
#loc16 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":59:8)
#loc17 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":60:18)
#loc18 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":60:35)
#loc19 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":62:20)
#loc20 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":63:27)
#loc21 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":64:34)
#loc22 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":64:21)
#loc23 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":65:42)
#loc24 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":65:24)
#loc25 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":65:20)
#loc26 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":65:58)
#loc27 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":66:28)
#loc28 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":66:35)
#loc29 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":66:41)
#loc30 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":67:20)
#loc31 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":67:16)
#loc32 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":67:8)
#loc33 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":68:17)
#loc34 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":68:33)
#loc35 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":69:29)
#loc36 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":69:23)
#loc37 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":69:15)
#loc38 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":71:20)
#loc39 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":71:25)
#loc40 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":72:20)
#loc41 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":72:25)
#loc42 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":74:27)
#loc43 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":75:34)
#loc44 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":75:21)
#loc45 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":76:22)
#loc46 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":77:24)
#loc47 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":77:20)
#loc48 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":78:24)
#loc49 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":78:20)
#loc50 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":78:54)
#loc51 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":79:21)
#loc52 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":79:29)
#loc53 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":80:20)
#loc54 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":82:21)
#loc55 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":82:27)
#loc56 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":74:4)
#loc57 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":117:0)
#loc58 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":126:31)
#loc59 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":126:11)
#loc60 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":126:4)
#loc62 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":290:36)
#loc64 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":290:11)
#loc65 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":290:4)
#loc67 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":260:15)
#loc68 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":260:11)
#loc69 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":260:4)
