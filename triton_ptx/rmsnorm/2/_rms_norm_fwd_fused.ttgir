#blocked = #ttg.blocked<{sizePerThread = [8], threadsPerWarp = [32], warpsPerCTA = [8], order = [0]}>
#loc = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":39:0)
#loc1 = loc(unknown)
#loc16 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":60:18)
#loc30 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":68:17)
#loc54 = loc(callsite(#loc1 at #loc16))
#loc56 = loc(callsite(#loc1 at #loc30))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "cuda:80", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @_rms_norm_fwd_fused(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":39:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":39:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":39:0), %arg3: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":39:0), %arg4: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":39:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":39:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":39:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<4096xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant 9.99999971E-10 : f32 loc(#loc1)
    %cst_1 = arith.constant 1.000000e+00 : f32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<4096xf16, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %arg5 : i32 loc(#loc3)
    %2 = tt.addptr %arg1, %1 : !tt.ptr<f16>, i32 loc(#loc4)
    %3 = tt.addptr %arg0, %1 : !tt.ptr<f16>, i32 loc(#loc5)
    %4 = tt.make_range {end = 4096 : i32, start = 0 : i32} : tensor<4096xi32, #blocked> loc(#loc6)
    %5 = tt.splat %arg6 : i32 -> tensor<4096xi32, #blocked> loc(#loc7)
    %6 = tt.splat %3 : !tt.ptr<f16> -> tensor<4096x!tt.ptr<f16>, #blocked> loc(#loc8)
    %7 = scf.for %arg7 = %c0_i32 to %arg6 step %c4096_i32 iter_args(%arg8 = %cst) -> (tensor<4096xf32, #blocked>)  : i32 {
      %25 = tt.splat %arg7 : i32 -> tensor<4096xi32, #blocked> loc(#loc10)
      %26 = arith.addi %25, %4 : tensor<4096xi32, #blocked> loc(#loc10)
      %27 = arith.cmpi slt, %26, %5 : tensor<4096xi32, #blocked> loc(#loc7)
      %28 = tt.addptr %6, %26 : tensor<4096x!tt.ptr<f16>, #blocked>, tensor<4096xi32, #blocked> loc(#loc8)
      %29 = tt.load %28, %27, %cst_2 : tensor<4096x!tt.ptr<f16>, #blocked> loc(#loc11)
      %30 = arith.extf %29 : tensor<4096xf16, #blocked> to tensor<4096xf32, #blocked> loc(#loc12)
      %31 = arith.addf %arg8, %30 : tensor<4096xf32, #blocked> loc(#loc13)
      scf.yield %31 : tensor<4096xf32, #blocked> loc(#loc14)
    } loc(#loc9)
    %8 = "tt.reduce"(%7) <{axis = 0 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc16)), %arg8: f32 loc(callsite(#loc1 at #loc16))):
      %25 = arith.addf %arg7, %arg8 : f32 loc(#loc57)
      tt.reduce.return %25 : f32 loc(#loc53)
    }) : (tensor<4096xf32, #blocked>) -> f32 loc(#loc53)
    %9 = arith.sitofp %arg6 : i32 to f32 loc(#loc18)
    %10 = arith.divf %8, %9 : f32 loc(#loc18)
    %11 = tt.splat %10 : f32 -> tensor<4096xf32, #blocked> loc(#loc19)
    %12 = scf.for %arg7 = %c0_i32 to %arg6 step %c4096_i32 iter_args(%arg8 = %cst) -> (tensor<4096xf32, #blocked>)  : i32 {
      %25 = tt.splat %arg7 : i32 -> tensor<4096xi32, #blocked> loc(#loc21)
      %26 = arith.addi %25, %4 : tensor<4096xi32, #blocked> loc(#loc21)
      %27 = arith.cmpi slt, %26, %5 : tensor<4096xi32, #blocked> loc(#loc22)
      %28 = tt.addptr %6, %26 : tensor<4096x!tt.ptr<f16>, #blocked>, tensor<4096xi32, #blocked> loc(#loc23)
      %29 = tt.load %28, %27, %cst_2 : tensor<4096x!tt.ptr<f16>, #blocked> loc(#loc24)
      %30 = arith.extf %29 : tensor<4096xf16, #blocked> to tensor<4096xf32, #blocked> loc(#loc25)
      %31 = arith.subf %30, %11 : tensor<4096xf32, #blocked> loc(#loc19)
      %32 = arith.select %27, %31, %cst : tensor<4096xi1, #blocked>, tensor<4096xf32, #blocked> loc(#loc26)
      %33 = arith.mulf %32, %32 : tensor<4096xf32, #blocked> loc(#loc27)
      %34 = arith.addf %arg8, %33 : tensor<4096xf32, #blocked> loc(#loc28)
      scf.yield %34 : tensor<4096xf32, #blocked> loc(#loc29)
    } loc(#loc20)
    %13 = "tt.reduce"(%12) <{axis = 0 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc30)), %arg8: f32 loc(callsite(#loc1 at #loc30))):
      %25 = arith.addf %arg7, %arg8 : f32 loc(#loc58)
      tt.reduce.return %25 : f32 loc(#loc55)
    }) : (tensor<4096xf32, #blocked>) -> f32 loc(#loc55)
    %14 = arith.divf %13, %9 : f32 loc(#loc31)
    %15 = arith.addf %14, %cst_0 : f32 loc(#loc32)
    %16 = math.sqrt %15 : f32 loc(#loc33)
    %17 = arith.divf %cst_1, %16 : f32 loc(#loc34)
    %18 = tt.addptr %arg3, %0 : !tt.ptr<f16>, i32 loc(#loc35)
    %19 = arith.truncf %10 : f32 to f16 loc(#loc36)
    tt.store %18, %19 : !tt.ptr<f16> loc(#loc36)
    %20 = tt.addptr %arg4, %0 : !tt.ptr<f16>, i32 loc(#loc37)
    %21 = arith.truncf %17 : f32 to f16 loc(#loc38)
    tt.store %20, %21 : !tt.ptr<f16> loc(#loc38)
    %22 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<4096x!tt.ptr<f16>, #blocked> loc(#loc39)
    %23 = tt.splat %17 : f32 -> tensor<4096xf32, #blocked> loc(#loc40)
    %24 = tt.splat %2 : !tt.ptr<f16> -> tensor<4096x!tt.ptr<f16>, #blocked> loc(#loc41)
    scf.for %arg7 = %c0_i32 to %arg6 step %c4096_i32  : i32 {
      %25 = tt.splat %arg7 : i32 -> tensor<4096xi32, #blocked> loc(#loc43)
      %26 = arith.addi %25, %4 : tensor<4096xi32, #blocked> loc(#loc43)
      %27 = arith.cmpi slt, %26, %5 : tensor<4096xi32, #blocked> loc(#loc44)
      %28 = tt.addptr %22, %26 : tensor<4096x!tt.ptr<f16>, #blocked>, tensor<4096xi32, #blocked> loc(#loc39)
      %29 = tt.load %28, %27 : tensor<4096x!tt.ptr<f16>, #blocked> loc(#loc45)
      %30 = tt.addptr %6, %26 : tensor<4096x!tt.ptr<f16>, #blocked>, tensor<4096xi32, #blocked> loc(#loc46)
      %31 = tt.load %30, %27, %cst_2 : tensor<4096x!tt.ptr<f16>, #blocked> loc(#loc47)
      %32 = arith.extf %31 : tensor<4096xf16, #blocked> to tensor<4096xf32, #blocked> loc(#loc48)
      %33 = arith.subf %32, %11 : tensor<4096xf32, #blocked> loc(#loc49)
      %34 = arith.mulf %33, %23 : tensor<4096xf32, #blocked> loc(#loc40)
      %35 = arith.extf %29 : tensor<4096xf16, #blocked> to tensor<4096xf32, #blocked> loc(#loc50)
      %36 = arith.mulf %34, %35 : tensor<4096xf32, #blocked> loc(#loc50)
      %37 = tt.addptr %24, %26 : tensor<4096x!tt.ptr<f16>, #blocked>, tensor<4096xi32, #blocked> loc(#loc41)
      %38 = arith.truncf %36 : tensor<4096xf32, #blocked> to tensor<4096xf16, #blocked> loc(#loc51)
      tt.store %37, %38, %27 : tensor<4096x!tt.ptr<f16>, #blocked> loc(#loc51)
    } loc(#loc42)
    tt.return loc(#loc52)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":50:24)
#loc3 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":51:15)
#loc4 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":51:9)
#loc5 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":52:9)
#loc6 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":57:34)
#loc7 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":58:42)
#loc8 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":58:24)
#loc9 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":56:27)
#loc10 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":57:21)
#loc11 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":58:20)
#loc12 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":58:58)
#loc13 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":59:17)
#loc14 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":59:8)
#loc15 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":290:36)
#loc17 = loc("/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":260:15)
#loc18 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":60:35)
#loc19 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":66:35)
#loc20 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":63:27)
#loc21 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":64:21)
#loc22 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":65:42)
#loc23 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":65:24)
#loc24 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":65:20)
#loc25 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":65:58)
#loc26 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":66:41)
#loc27 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":67:20)
#loc28 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":67:16)
#loc29 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":67:8)
#loc31 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":68:33)
#loc32 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":69:29)
#loc33 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":69:23)
#loc34 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":69:15)
#loc35 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":71:20)
#loc36 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":71:25)
#loc37 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":72:20)
#loc38 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":72:25)
#loc39 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":77:24)
#loc40 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":79:29)
#loc41 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":82:21)
#loc42 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":74:27)
#loc43 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":75:21)
#loc44 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":76:22)
#loc45 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":77:20)
#loc46 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":78:24)
#loc47 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":78:20)
#loc48 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":78:54)
#loc49 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":79:21)
#loc50 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":80:20)
#loc51 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":82:27)
#loc52 = loc("/home/ubuntu/anjiang/PTX_dataset/triton_ptx/rmsnorm.py":74:4)
#loc53 = loc(callsite(#loc15 at #loc16))
#loc55 = loc(callsite(#loc15 at #loc30))
#loc57 = loc(callsite(#loc17 at #loc53))
#loc58 = loc(callsite(#loc17 at #loc55))
