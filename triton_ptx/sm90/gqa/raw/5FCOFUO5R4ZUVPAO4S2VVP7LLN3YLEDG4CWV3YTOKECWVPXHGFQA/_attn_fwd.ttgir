#blocked = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 8], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [8], order = [0]}>
#loc = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0)
#loc1 = loc(unknown)
#loc25 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":185:82)
#loc32 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":55:46)
#loc39 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":58:25)
#mma = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [8, 1], instrShape = [16, 64, 16]}>
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 16}>
#shared1 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = true, elementBitWidth = 16}>
#smem = #ttg.shared_memory
#loc67 = loc(callsite(#loc32 at #loc25))
#loc72 = loc(callsite(#loc39 at #loc25))
#loc83 = loc(callsite(#loc1 at #loc67))
#loc85 = loc(callsite(#loc1 at #loc72))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @_attn_fwd(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0), %arg3: f32 loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0), %arg5: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0), %arg14: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0), %arg15: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0), %arg16: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0), %arg17: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0), %arg18: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":114:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #mma> loc(#loc1)
    %cst_0 = arith.constant dense<0xFF800000> : tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %c64_i64 = arith.constant 64 : i64 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_2 = arith.constant 1.44269502 : f32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c3904_i32 = arith.constant 3904 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<true> : tensor<64x64xi1, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<true> : tensor<64x64xi1, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_6 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc1)
    %c128_i64 = arith.constant 128 : i64 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst_7 = arith.constant dense<128> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_8 = arith.constant dense<128> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.divsi %1, %arg18 : i32 loc(#loc4)
    %3 = arith.remsi %1, %arg18 : i32 loc(#loc5)
    %4 = arith.extsi %2 : i32 to i64 loc(#loc6)
    %5 = arith.extsi %arg6 : i32 to i64 loc(#loc7)
    %6 = arith.muli %4, %5 : i64 loc(#loc7)
    %7 = arith.extsi %3 : i32 to i64 loc(#loc8)
    %8 = arith.extsi %arg7 : i32 to i64 loc(#loc9)
    %9 = arith.muli %7, %8 : i64 loc(#loc9)
    %10 = arith.addi %6, %9 : i64 loc(#loc10)
    %11 = tt.addptr %arg0, %10 : !tt.ptr<f16>, i64 loc(#loc11)
    %12 = arith.muli %0, %c128_i32 : i32 loc(#loc12)
    %13 = arith.extsi %arg8 : i32 to i64 loc(#loc13)
    %14 = arith.extsi %12 : i32 to i64 loc(#loc13)
    %15 = tt.addptr %arg2, %10 : !tt.ptr<f16>, i64 loc(#loc14)
    %16 = arith.extsi %arg14 : i32 to i64 loc(#loc15)
    %17 = tt.addptr %arg1, %10 : !tt.ptr<f16>, i64 loc(#loc16)
    %18 = arith.extsi %arg11 : i32 to i64 loc(#loc17)
    %19 = tt.addptr %arg5, %10 : !tt.ptr<f16>, i64 loc(#loc18)
    %20 = arith.extsi %arg17 : i32 to i64 loc(#loc19)
    %21 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc20)
    %22 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked2> loc(#loc20)
    %23 = tt.splat %12 : i32 -> tensor<128xi32, #blocked2> loc(#loc21)
    %24 = arith.addi %23, %22 : tensor<128xi32, #blocked2> loc(#loc21)
    %25 = arith.mulf %arg3, %cst_2 : f32 loc(#loc22)
    %26 = tt.splat %11 : !tt.ptr<f16> -> tensor<128x64x!tt.ptr<f16>, #blocked1> loc(#loc23)
    %27 = tt.splat %14 : i64 -> tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc23)
    %28 = arith.extsi %21 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc23)
    %29 = arith.addi %27, %28 : tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc23)
    %30 = tt.expand_dims %29 {axis = 1 : i32} : tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi64, #blocked1> loc(#loc23)
    %31 = tt.splat %13 : i64 -> tensor<128x1xi64, #blocked1> loc(#loc23)
    %32 = arith.muli %30, %31 : tensor<128x1xi64, #blocked1> loc(#loc23)
    %33 = tt.broadcast %32 : tensor<128x1xi64, #blocked1> -> tensor<128x64xi64, #blocked1> loc(#loc23)
    %34 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc23)
    %35 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc23)
    %36 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc23)
    %37 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc23)
    %38 = arith.extsi %34 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc23)
    %39 = arith.extsi %35 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc23)
    %40 = arith.extsi %36 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc23)
    %41 = arith.extsi %37 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc23)
    %42 = tt.expand_dims %38 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc23)
    %43 = tt.broadcast %42 : tensor<1x64xi64, #blocked1> -> tensor<128x64xi64, #blocked1> loc(#loc23)
    %44 = arith.addi %33, %43 : tensor<128x64xi64, #blocked1> loc(#loc23)
    %45 = tt.addptr %26, %44 : tensor<128x64x!tt.ptr<f16>, #blocked1>, tensor<128x64xi64, #blocked1> loc(#loc23)
    %46 = tt.load %45 : tensor<128x64x!tt.ptr<f16>, #blocked1> loc(#loc23)
    %47 = ttg.local_alloc %46 : (tensor<128x64xf16, #blocked1>) -> !ttg.memdesc<128x64xf16, #shared, #smem> loc(#loc23)
    %48 = tt.splat %17 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc61)
    %49 = tt.expand_dims %40 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi64, #blocked> loc(#loc61)
    %50 = tt.broadcast %49 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc61)
    %51 = tt.splat %18 : i64 -> tensor<1x64xi64, #blocked> loc(#loc61)
    %52 = tt.splat %25 : f32 -> tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc62)
    %53 = tt.splat %25 : f32 -> tensor<128x64xf32, #mma> loc(#loc63)
    %54 = tt.splat %15 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>, #blocked1> loc(#loc64)
    %55 = tt.splat %16 : i64 -> tensor<64x1xi64, #blocked1> loc(#loc64)
    %56 = tt.broadcast %42 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc64)
    %57 = ttg.local_alloc : () -> !ttg.memdesc<4x64x64xf16, #shared1, #smem, mutable> loc(#loc61)
    %58 = ttg.local_alloc : () -> !ttg.memdesc<4x64x64xf16, #shared, #smem, mutable> loc(#loc64)
    %59 = tt.expand_dims %39 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc61)
    %60 = arith.muli %59, %51 : tensor<1x64xi64, #blocked> loc(#loc61)
    %61 = tt.broadcast %60 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc61)
    %62 = arith.addi %50, %61 : tensor<64x64xi64, #blocked> loc(#loc61)
    %63 = tt.addptr %48, %62 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc61)
    %64 = ttg.memdesc_subview %57[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared1, #smem, mutable, 4x64x64> loc(#loc61)
    %65 = ttg.async_copy_global_to_local %63, %64 mask %cst_3 : tensor<64x64x!tt.ptr<f16>, #blocked> -> <64x64xf16, #shared1, #smem, mutable, 4x64x64> loc(#loc61)
    %66 = ttg.async_commit_group %65 loc(#loc61)
    %67 = tt.expand_dims %41 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc64)
    %68 = arith.muli %67, %55 : tensor<64x1xi64, #blocked1> loc(#loc64)
    %69 = tt.broadcast %68 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc64)
    %70 = arith.addi %69, %56 : tensor<64x64xi64, #blocked1> loc(#loc64)
    %71 = tt.addptr %54, %70 : tensor<64x64x!tt.ptr<f16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc64)
    %72 = ttg.memdesc_subview %58[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 4x64x64> loc(#loc64)
    %73 = ttg.async_copy_global_to_local %71, %72 mask %cst_4 : tensor<64x64x!tt.ptr<f16>, #blocked1> -> <64x64xf16, #shared, #smem, mutable, 4x64x64> loc(#loc64)
    %74 = ttg.async_commit_group %73 loc(#loc64)
    %75 = arith.addi %39, %cst_5 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc61)
    %76 = tt.expand_dims %75 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc61)
    %77 = arith.muli %76, %51 : tensor<1x64xi64, #blocked> loc(#loc61)
    %78 = tt.broadcast %77 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc61)
    %79 = arith.addi %50, %78 : tensor<64x64xi64, #blocked> loc(#loc61)
    %80 = tt.addptr %48, %79 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc61)
    %81 = ttg.memdesc_subview %57[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared1, #smem, mutable, 4x64x64> loc(#loc61)
    %82 = ttg.async_copy_global_to_local %80, %81 mask %cst_3 : tensor<64x64x!tt.ptr<f16>, #blocked> -> <64x64xf16, #shared1, #smem, mutable, 4x64x64> loc(#loc61)
    %83 = ttg.async_commit_group %82 loc(#loc61)
    %84 = arith.addi %41, %cst_6 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc64)
    %85 = tt.expand_dims %84 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc64)
    %86 = arith.muli %85, %55 : tensor<64x1xi64, #blocked1> loc(#loc64)
    %87 = tt.broadcast %86 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc64)
    %88 = arith.addi %87, %56 : tensor<64x64xi64, #blocked1> loc(#loc64)
    %89 = tt.addptr %54, %88 : tensor<64x64x!tt.ptr<f16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc64)
    %90 = ttg.memdesc_subview %58[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 4x64x64> loc(#loc64)
    %91 = ttg.async_copy_global_to_local %89, %90 mask %cst_4 : tensor<64x64x!tt.ptr<f16>, #blocked1> -> <64x64xf16, #shared, #smem, mutable, 4x64x64> loc(#loc64)
    %92 = ttg.async_commit_group %91 loc(#loc64)
    %93 = arith.addi %39, %cst_7 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc61)
    %94 = tt.expand_dims %93 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc61)
    %95 = arith.muli %94, %51 : tensor<1x64xi64, #blocked> loc(#loc61)
    %96 = tt.broadcast %95 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc61)
    %97 = arith.addi %50, %96 : tensor<64x64xi64, #blocked> loc(#loc61)
    %98 = tt.addptr %48, %97 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc61)
    %99 = ttg.memdesc_subview %57[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared1, #smem, mutable, 4x64x64> loc(#loc61)
    %100 = ttg.async_copy_global_to_local %98, %99 mask %cst_3 : tensor<64x64x!tt.ptr<f16>, #blocked> -> <64x64xf16, #shared1, #smem, mutable, 4x64x64> loc(#loc61)
    %101 = ttg.async_commit_group %100 loc(#loc61)
    %102 = arith.addi %41, %cst_8 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc64)
    %103 = tt.expand_dims %102 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc64)
    %104 = arith.muli %103, %55 : tensor<64x1xi64, #blocked1> loc(#loc64)
    %105 = tt.broadcast %104 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc64)
    %106 = arith.addi %105, %56 : tensor<64x64xi64, #blocked1> loc(#loc64)
    %107 = tt.addptr %54, %106 : tensor<64x64x!tt.ptr<f16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc64)
    %108 = ttg.memdesc_subview %58[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 4x64x64> loc(#loc64)
    %109 = ttg.async_copy_global_to_local %107, %108 mask %cst_4 : tensor<64x64x!tt.ptr<f16>, #blocked1> -> <64x64xf16, #shared, #smem, mutable, 4x64x64> loc(#loc64)
    %110 = ttg.async_commit_group %109 loc(#loc64)
    ttng.fence_async_shared {bCluster = false} loc(#loc65)
    %111:12 = scf.for %arg19 = %c0_i32 to %c4096_i32 step %c64_i32 iter_args(%arg20 = %cst_1, %arg21 = %cst, %arg22 = %cst_0, %arg23 = %c128_i64, %arg24 = %c2_i32, %arg25 = %c-1_i32, %arg26 = %66, %arg27 = %83, %arg28 = %101, %arg29 = %74, %arg30 = %92, %arg31 = %110) -> (tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<128x64xf32, #mma>, tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>>, i64, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token)  : i32 {
      %132 = arith.cmpi slt, %arg19, %c3904_i32 : i32 loc(#loc66)
      %133 = arith.addi %arg25, %c1_i32 : i32 loc(#loc66)
      %134 = arith.cmpi sge, %133, %c4_i32 : i32 loc(#loc66)
      %135 = arith.select %134, %c0_i32, %133 : i32 loc(#loc66)
      %136 = ttg.async_wait %arg26, %arg29 {num = 4 : i32} loc(#loc61)
      %137 = ttg.memdesc_subview %57[%135, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared1, #smem, mutable, 4x64x64> loc(#loc61)
      %138 = ttng.warp_group_dot %47, %137, %cst {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<128x64xf16, #shared, #smem> * !ttg.memdesc<64x64xf16, #shared1, #smem, mutable, 4x64x64> -> tensor<128x64xf32, #mma> loc(#loc65)
      %139:4 = ttng.warp_group_dot_wait %138, %47, %137, %arg21 {pendings = 0 : i32} : tensor<128x64xf32, #mma>, !ttg.memdesc<128x64xf16, #shared, #smem>, !ttg.memdesc<64x64xf16, #shared1, #smem, mutable, 4x64x64>, tensor<128x64xf32, #mma> loc(#loc65)
      %140 = "tt.reduce"(%139#0) <{axis = 1 : i32}> ({
      ^bb0(%arg32: f32 loc(callsite(#loc1 at #loc67)), %arg33: f32 loc(callsite(#loc1 at #loc67))):
        %186 = arith.maxnumf %arg32, %arg33 : f32 loc(#loc86)
        tt.reduce.return %186 : f32 loc(#loc82)
      }) : (tensor<128x64xf32, #mma>) -> tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc82)
      %141 = arith.mulf %140, %52 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc62)
      %142 = arith.maxnumf %arg22, %141 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc68)
      %143 = arith.mulf %139#0, %53 : tensor<128x64xf32, #mma> loc(#loc63)
      %144 = tt.expand_dims %142 {axis = 1 : i32} : tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<128x1xf32, #mma> loc(#loc69)
      %145 = tt.broadcast %144 : tensor<128x1xf32, #mma> -> tensor<128x64xf32, #mma> loc(#loc70)
      %146 = arith.subf %143, %145 : tensor<128x64xf32, #mma> loc(#loc70)
      %147 = math.exp2 %146 : tensor<128x64xf32, #mma> loc(#loc71)
      %148 = "tt.reduce"(%147) <{axis = 1 : i32}> ({
      ^bb0(%arg32: f32 loc(callsite(#loc1 at #loc72)), %arg33: f32 loc(callsite(#loc1 at #loc72))):
        %186 = arith.addf %arg32, %arg33 : f32 loc(#loc87)
        tt.reduce.return %186 : f32 loc(#loc84)
      }) : (tensor<128x64xf32, #mma>) -> tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc84)
      %149 = arith.subf %arg22, %142 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc73)
      %150 = math.exp2 %149 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc74)
      %151 = arith.mulf %arg20, %150 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc75)
      %152 = arith.addf %151, %148 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc76)
      %153 = tt.expand_dims %150 {axis = 1 : i32} : tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<128x1xf32, #mma> loc(#loc77)
      %154 = tt.broadcast %153 : tensor<128x1xf32, #mma> -> tensor<128x64xf32, #mma> loc(#loc78)
      %155 = arith.mulf %139#3, %154 : tensor<128x64xf32, #mma> loc(#loc78)
      %156 = ttg.memdesc_subview %58[%135, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 4x64x64> loc(#loc64)
      %157 = arith.truncf %147 : tensor<128x64xf32, #mma> to tensor<128x64xf16, #mma> loc(#loc79)
      %158 = ttg.convert_layout %157 : tensor<128x64xf16, #mma> -> tensor<128x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc79)
      %159 = ttng.warp_group_dot %158, %156, %155 {inputPrecision = 0 : i32, isAsync = true} : tensor<128x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 4x64x64> -> tensor<128x64xf32, #mma> loc(#loc80)
      %160 = arith.addi %arg23, %c64_i64 : i64 loc(#loc81)
      %161 = arith.addi %arg24, %c1_i32 : i32 loc(#loc66)
      %162 = arith.cmpi sge, %161, %c4_i32 : i32 loc(#loc66)
      %163 = arith.select %162, %c0_i32, %161 : i32 loc(#loc66)
      %164 = tt.splat %160 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc61)
      %165 = arith.addi %164, %39 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc61)
      %166 = tt.expand_dims %165 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc61)
      %167 = arith.muli %166, %51 : tensor<1x64xi64, #blocked> loc(#loc61)
      %168 = tt.broadcast %167 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc61)
      %169 = arith.addi %50, %168 : tensor<64x64xi64, #blocked> loc(#loc61)
      %170 = tt.addptr %48, %169 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc61)
      %171 = ttg.memdesc_subview %57[%163, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared1, #smem, mutable, 4x64x64> loc(#loc61)
      %172 = tt.splat %132 : i1 -> tensor<64x64xi1, #blocked> loc(#loc66)
      %173 = ttg.async_copy_global_to_local %170, %171 mask %172 : tensor<64x64x!tt.ptr<f16>, #blocked> -> <64x64xf16, #shared1, #smem, mutable, 4x64x64> loc(#loc61)
      %174 = ttg.async_commit_group %173 loc(#loc61)
      %175 = tt.splat %160 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc64)
      %176 = arith.addi %175, %41 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc64)
      %177 = tt.expand_dims %176 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc64)
      %178 = arith.muli %177, %55 : tensor<64x1xi64, #blocked1> loc(#loc64)
      %179 = tt.broadcast %178 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc64)
      %180 = arith.addi %179, %56 : tensor<64x64xi64, #blocked1> loc(#loc64)
      %181 = tt.addptr %54, %180 : tensor<64x64x!tt.ptr<f16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc64)
      %182 = ttg.memdesc_subview %58[%163, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 4x64x64> loc(#loc64)
      %183 = tt.splat %132 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc66)
      %184 = ttg.async_copy_global_to_local %181, %182 mask %183 : tensor<64x64x!tt.ptr<f16>, #blocked1> -> <64x64xf16, #shared, #smem, mutable, 4x64x64> loc(#loc64)
      %185 = ttg.async_commit_group %184 loc(#loc64)
      scf.yield %152, %159, %142, %160, %163, %135, %arg27, %arg28, %174, %arg30, %arg31, %185 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<128x64xf32, #mma>, tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>>, i64, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token loc(#loc66)
    } {tt.divisibility_arg1 = dense<64> : tensor<1xi32>} loc(#loc66)
    %112 = ttng.warp_group_dot_wait %111#1 {pendings = 0 : i32} : tensor<128x64xf32, #mma> loc(#loc66)
    %113 = ttg.async_wait  {num = 0 : i32} loc(#loc66)
    ttg.local_dealloc %58 : !ttg.memdesc<4x64x64xf16, #shared, #smem, mutable> loc(#loc66)
    ttg.local_dealloc %57 : !ttg.memdesc<4x64x64xf16, #shared1, #smem, mutable> loc(#loc66)
    %114 = math.log2 %111#0 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc50)
    %115 = arith.addf %111#2, %114 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc51)
    %116 = tt.expand_dims %111#0 {axis = 1 : i32} : tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<128x1xf32, #mma> loc(#loc52)
    %117 = tt.broadcast %116 : tensor<128x1xf32, #mma> -> tensor<128x64xf32, #mma> loc(#loc53)
    %118 = arith.divf %112, %117 : tensor<128x64xf32, #mma> loc(#loc53)
    %119 = arith.muli %1, %c32_i32 : i32 loc(#loc54)
    %120 = tt.addptr %arg4, %119 : !tt.ptr<f32>, i32 loc(#loc55)
    %121 = tt.splat %120 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked2> loc(#loc56)
    %122 = tt.addptr %121, %24 : tensor<128x!tt.ptr<f32>, #blocked2>, tensor<128xi32, #blocked2> loc(#loc56)
    %123 = ttg.convert_layout %115 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<128xf32, #blocked2> loc(#loc57)
    tt.store %122, %123 : tensor<128x!tt.ptr<f32>, #blocked2> loc(#loc57)
    %124 = arith.truncf %118 : tensor<128x64xf32, #mma> to tensor<128x64xf16, #mma> loc(#loc58)
    %125 = tt.splat %19 : !tt.ptr<f16> -> tensor<128x64x!tt.ptr<f16>, #blocked1> loc(#loc59)
    %126 = tt.splat %20 : i64 -> tensor<128x1xi64, #blocked1> loc(#loc59)
    %127 = arith.muli %30, %126 : tensor<128x1xi64, #blocked1> loc(#loc59)
    %128 = tt.broadcast %127 : tensor<128x1xi64, #blocked1> -> tensor<128x64xi64, #blocked1> loc(#loc59)
    %129 = arith.addi %128, %43 : tensor<128x64xi64, #blocked1> loc(#loc59)
    %130 = tt.addptr %125, %129 : tensor<128x64x!tt.ptr<f16>, #blocked1>, tensor<128x64xi64, #blocked1> loc(#loc59)
    %131 = ttg.convert_layout %124 : tensor<128x64xf16, #mma> -> tensor<128x64xf16, #blocked1> loc(#loc59)
    tt.store %130, %131 : tensor<128x64x!tt.ptr<f16>, #blocked1> loc(#loc59)
    tt.return loc(#loc60)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":127:28)
#loc3 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":128:27)
#loc4 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":129:22)
#loc5 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":130:21)
#loc6 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":131:26)
#loc7 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":131:38)
#loc8 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":131:59)
#loc9 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":131:71)
#loc10 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":131:50)
#loc11 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":135:17)
#loc12 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":138:27)
#loc13 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":140:8)
#loc14 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":143:17)
#loc15 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":148:8)
#loc16 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":151:17)
#loc17 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":156:8)
#loc18 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":159:19)
#loc19 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":164:8)
#loc20 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":167:46)
#loc21 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":167:33)
#loc22 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":175:16)
#loc23 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":177:16)
#loc24 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":47:20)
#loc26 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":55:51)
#loc27 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":56:22)
#loc28 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":65:20)
#loc29 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":48:23)
#loc30 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":44:33)
#loc31 = loc("/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":188:40)
#loc33 = loc("/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":167:27)
#loc34 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":55:35)
#loc35 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":56:38)
#loc36 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":56:33)
#loc37 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":57:25)
#loc38 = loc("/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":290:36)
#loc40 = loc("/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":260:15)
#loc41 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":60:35)
#loc42 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":60:29)
#loc43 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":61:20)
#loc44 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":61:28)
#loc45 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":63:26)
#loc46 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":63:20)
#loc47 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":69:21)
#loc48 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":70:27)
#loc49 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":73:46)
#loc50 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":198:24)
#loc51 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":198:11)
#loc52 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":199:20)
#loc53 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":199:16)
#loc54 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":200:26)
#loc55 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":200:17)
#loc56 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":200:34)
#loc57 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":201:21)
#loc58 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":202:33)
#loc59 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":202:26)
#loc60 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gqa.py":202:4)
#loc61 = loc(callsite(#loc24 at #loc25))
#loc62 = loc(callsite(#loc26 at #loc25))
#loc63 = loc(callsite(#loc27 at #loc25))
#loc64 = loc(callsite(#loc28 at #loc25))
#loc65 = loc(callsite(#loc29 at #loc25))
#loc66 = loc(callsite(#loc30 at #loc25))
#loc68 = loc(callsite(#loc34 at #loc25))
#loc69 = loc(callsite(#loc35 at #loc25))
#loc70 = loc(callsite(#loc36 at #loc25))
#loc71 = loc(callsite(#loc37 at #loc25))
#loc73 = loc(callsite(#loc41 at #loc25))
#loc74 = loc(callsite(#loc42 at #loc25))
#loc75 = loc(callsite(#loc43 at #loc25))
#loc76 = loc(callsite(#loc44 at #loc25))
#loc77 = loc(callsite(#loc45 at #loc25))
#loc78 = loc(callsite(#loc46 at #loc25))
#loc79 = loc(callsite(#loc47 at #loc25))
#loc80 = loc(callsite(#loc48 at #loc25))
#loc81 = loc(callsite(#loc49 at #loc25))
#loc82 = loc(callsite(#loc31 at #loc67))
#loc84 = loc(callsite(#loc38 at #loc72))
#loc86 = loc(callsite(#loc33 at #loc82))
#loc87 = loc(callsite(#loc40 at #loc84))
