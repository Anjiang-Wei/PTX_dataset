#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [2, 1], order = [1, 0]}>
#loc = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0)
#mma = #ttg.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 1], instrShape = [16, 8]}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 2, maxPhase = 4, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 2 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":68:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mma> loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32x32xf16, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x32xf16, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<32> : tensor<64x32xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<1> : tensor<64x1xi32, #blocked> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c96_i32 = arith.constant 96 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg3, %c31_i32 : i32 loc(#loc52)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc53)
    %3 = arith.muli %2, %c8_i32 : i32 loc(#loc6)
    %4 = arith.divsi %0, %3 : i32 loc(#loc7)
    %5 = arith.muli %4, %c8_i32 : i32 loc(#loc8)
    %6 = arith.subi %c1_i32, %5 : i32 loc(#loc9)
    %7 = arith.minsi %6, %c8_i32 : i32 loc(#loc10)
    %8 = arith.remsi %0, %3 : i32 loc(#loc11)
    %9 = arith.remsi %8, %7 : i32 loc(#loc12)
    %10 = arith.addi %5, %9 : i32 loc(#loc13)
    %11 = arith.divsi %8, %7 : i32 loc(#loc14)
    %12 = arith.muli %11, %c32_i32 : i32 loc(#loc15)
    %13 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc16)
    %14 = tt.splat %12 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc17)
    %15 = arith.addi %14, %13 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc17)
    %16 = tt.splat %arg3 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc18)
    %17 = arith.remsi %15, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc18)
    %18 = tt.expand_dims %13 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc19)
    %19 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<1x32x!tt.ptr<f16>, #blocked> loc(#loc20)
    %20 = tt.addptr %19, %18 : tensor<1x32x!tt.ptr<f16>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc20)
    %21 = tt.broadcast %20 : tensor<1x32x!tt.ptr<f16>, #blocked> -> tensor<64x32x!tt.ptr<f16>, #blocked> loc(#loc20)
    %22 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc21)
    %23 = tt.expand_dims %22 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc21)
    %24 = tt.splat %arg6 : i32 -> tensor<32x1xi32, #blocked> loc(#loc22)
    %25 = arith.muli %23, %24 : tensor<32x1xi32, #blocked> loc(#loc22)
    %26 = tt.expand_dims %17 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc23)
    %27 = tt.broadcast %25 : tensor<32x1xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc24)
    %28 = tt.broadcast %26 : tensor<1x32xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc24)
    %29 = arith.addi %27, %28 : tensor<32x32xi32, #blocked> loc(#loc24)
    %30 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<32x32x!tt.ptr<f16>, #blocked> loc(#loc25)
    %31 = tt.addptr %30, %29 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc25)
    %32 = arith.addi %arg4, %c31_i32 : i32 loc(#loc54)
    %33 = arith.divsi %32, %c32_i32 : i32 loc(#loc55)
    %34 = arith.muli %arg6, %c32_i32 : i32 loc(#loc27)
    %35 = tt.splat %34 : i32 -> tensor<32x32xi32, #blocked> loc(#loc28)
    %36 = ttg.local_alloc : () -> !ttg.memdesc<4x64x32xf16, #shared, #smem, mutable> loc(#loc29)
    %37 = ttg.local_alloc : () -> !ttg.memdesc<4x32x32xf16, #shared, #smem, mutable> loc(#loc30)
    %38 = arith.cmpi sgt, %33, %c0_i32 : i32 loc(#loc31)
    %39 = tt.splat %arg4 : i32 -> tensor<1x32xi32, #blocked> loc(#loc32)
    %40 = arith.cmpi slt, %18, %39 : tensor<1x32xi32, #blocked> loc(#loc32)
    %41 = tt.broadcast %40 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc29)
    %42 = ttg.memdesc_subview %36[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x32xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x32xf16, #shared, #smem, mutable, 4x64x32> loc(#loc29)
    %43 = tt.splat %38 : i1 -> tensor<64x32xi1, #blocked> loc(#loc31)
    %44 = arith.andi %43, %41 : tensor<64x32xi1, #blocked> loc(#loc31)
    %45 = ttg.async_copy_global_to_local %21, %42 mask %44 other %cst_1 : tensor<64x32x!tt.ptr<f16>, #blocked> -> <64x32xf16, #shared, #smem, mutable, 4x64x32> loc(#loc29)
    %46 = ttg.async_commit_group %45 loc(#loc29)
    %47 = tt.splat %arg4 : i32 -> tensor<32x1xi32, #blocked> loc(#loc33)
    %48 = arith.cmpi slt, %23, %47 : tensor<32x1xi32, #blocked> loc(#loc33)
    %49 = tt.broadcast %48 : tensor<32x1xi1, #blocked> -> tensor<32x32xi1, #blocked> loc(#loc30)
    %50 = ttg.memdesc_subview %37[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x32x32xf16, #shared, #smem, mutable> -> !ttg.memdesc<32x32xf16, #shared, #smem, mutable, 4x32x32> loc(#loc30)
    %51 = tt.splat %38 : i1 -> tensor<32x32xi1, #blocked> loc(#loc31)
    %52 = arith.andi %51, %49 : tensor<32x32xi1, #blocked> loc(#loc31)
    %53 = ttg.async_copy_global_to_local %31, %50 mask %52 other %cst_0 : tensor<32x32x!tt.ptr<f16>, #blocked> -> <32x32xf16, #shared, #smem, mutable, 4x32x32> loc(#loc30)
    %54 = ttg.async_commit_group %53 loc(#loc30)
    %55 = arith.cmpi sgt, %33, %c1_i32 : i32 loc(#loc31)
    %56 = tt.addptr %21, %cst_2 : tensor<64x32x!tt.ptr<f16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc34)
    %57 = tt.addptr %31, %35 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc28)
    %58 = arith.subi %arg4, %c32_i32 : i32 loc(#loc35)
    %59 = tt.splat %58 : i32 -> tensor<1x32xi32, #blocked> loc(#loc32)
    %60 = arith.cmpi slt, %18, %59 : tensor<1x32xi32, #blocked> loc(#loc32)
    %61 = tt.broadcast %60 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc29)
    %62 = ttg.memdesc_subview %36[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x32xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x32xf16, #shared, #smem, mutable, 4x64x32> loc(#loc29)
    %63 = tt.splat %55 : i1 -> tensor<64x32xi1, #blocked> loc(#loc31)
    %64 = arith.andi %63, %61 : tensor<64x32xi1, #blocked> loc(#loc31)
    %65 = ttg.async_copy_global_to_local %56, %62 mask %64 other %cst_1 : tensor<64x32x!tt.ptr<f16>, #blocked> -> <64x32xf16, #shared, #smem, mutable, 4x64x32> loc(#loc29)
    %66 = ttg.async_commit_group %65 loc(#loc29)
    %67 = tt.splat %58 : i32 -> tensor<32x1xi32, #blocked> loc(#loc33)
    %68 = arith.cmpi slt, %23, %67 : tensor<32x1xi32, #blocked> loc(#loc33)
    %69 = tt.broadcast %68 : tensor<32x1xi1, #blocked> -> tensor<32x32xi1, #blocked> loc(#loc30)
    %70 = ttg.memdesc_subview %37[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x32x32xf16, #shared, #smem, mutable> -> !ttg.memdesc<32x32xf16, #shared, #smem, mutable, 4x32x32> loc(#loc30)
    %71 = tt.splat %55 : i1 -> tensor<32x32xi1, #blocked> loc(#loc31)
    %72 = arith.andi %71, %69 : tensor<32x32xi1, #blocked> loc(#loc31)
    %73 = ttg.async_copy_global_to_local %57, %70 mask %72 other %cst_0 : tensor<32x32x!tt.ptr<f16>, #blocked> -> <32x32xf16, #shared, #smem, mutable, 4x32x32> loc(#loc30)
    %74 = ttg.async_commit_group %73 loc(#loc30)
    %75 = arith.cmpi sgt, %33, %c2_i32 : i32 loc(#loc31)
    %76 = tt.addptr %56, %cst_2 : tensor<64x32x!tt.ptr<f16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc34)
    %77 = tt.addptr %57, %35 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc28)
    %78 = arith.subi %arg4, %c64_i32 : i32 loc(#loc35)
    %79 = tt.splat %78 : i32 -> tensor<1x32xi32, #blocked> loc(#loc32)
    %80 = arith.cmpi slt, %18, %79 : tensor<1x32xi32, #blocked> loc(#loc32)
    %81 = tt.broadcast %80 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc29)
    %82 = ttg.memdesc_subview %36[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x32xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x32xf16, #shared, #smem, mutable, 4x64x32> loc(#loc29)
    %83 = tt.splat %75 : i1 -> tensor<64x32xi1, #blocked> loc(#loc31)
    %84 = arith.andi %83, %81 : tensor<64x32xi1, #blocked> loc(#loc31)
    %85 = ttg.async_copy_global_to_local %76, %82 mask %84 other %cst_1 : tensor<64x32x!tt.ptr<f16>, #blocked> -> <64x32xf16, #shared, #smem, mutable, 4x64x32> loc(#loc29)
    %86 = ttg.async_commit_group %85 loc(#loc29)
    %87 = tt.splat %78 : i32 -> tensor<32x1xi32, #blocked> loc(#loc33)
    %88 = arith.cmpi slt, %23, %87 : tensor<32x1xi32, #blocked> loc(#loc33)
    %89 = tt.broadcast %88 : tensor<32x1xi1, #blocked> -> tensor<32x32xi1, #blocked> loc(#loc30)
    %90 = ttg.memdesc_subview %37[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x32x32xf16, #shared, #smem, mutable> -> !ttg.memdesc<32x32xf16, #shared, #smem, mutable, 4x32x32> loc(#loc30)
    %91 = tt.splat %75 : i1 -> tensor<32x32xi1, #blocked> loc(#loc31)
    %92 = arith.andi %91, %89 : tensor<32x32xi1, #blocked> loc(#loc31)
    %93 = ttg.async_copy_global_to_local %77, %90 mask %92 other %cst_0 : tensor<32x32x!tt.ptr<f16>, #blocked> -> <32x32xf16, #shared, #smem, mutable, 4x32x32> loc(#loc30)
    %94 = ttg.async_commit_group %93 loc(#loc30)
    %95 = arith.cmpi sgt, %33, %c3_i32 : i32 loc(#loc31)
    %96 = tt.addptr %76, %cst_2 : tensor<64x32x!tt.ptr<f16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc34)
    %97 = tt.addptr %77, %35 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc28)
    %98 = arith.subi %arg4, %c96_i32 : i32 loc(#loc35)
    %99 = tt.splat %98 : i32 -> tensor<1x32xi32, #blocked> loc(#loc32)
    %100 = arith.cmpi slt, %18, %99 : tensor<1x32xi32, #blocked> loc(#loc32)
    %101 = tt.broadcast %100 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc29)
    %102 = ttg.memdesc_subview %36[%c3_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x32xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x32xf16, #shared, #smem, mutable, 4x64x32> loc(#loc29)
    %103 = tt.splat %95 : i1 -> tensor<64x32xi1, #blocked> loc(#loc31)
    %104 = arith.andi %103, %101 : tensor<64x32xi1, #blocked> loc(#loc31)
    %105 = ttg.async_copy_global_to_local %96, %102 mask %104 other %cst_1 : tensor<64x32x!tt.ptr<f16>, #blocked> -> <64x32xf16, #shared, #smem, mutable, 4x64x32> loc(#loc29)
    %106 = ttg.async_commit_group %105 loc(#loc29)
    %107 = tt.splat %98 : i32 -> tensor<32x1xi32, #blocked> loc(#loc33)
    %108 = arith.cmpi slt, %23, %107 : tensor<32x1xi32, #blocked> loc(#loc33)
    %109 = tt.broadcast %108 : tensor<32x1xi1, #blocked> -> tensor<32x32xi1, #blocked> loc(#loc30)
    %110 = ttg.memdesc_subview %37[%c3_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x32x32xf16, #shared, #smem, mutable> -> !ttg.memdesc<32x32xf16, #shared, #smem, mutable, 4x32x32> loc(#loc30)
    %111 = tt.splat %95 : i1 -> tensor<32x32xi1, #blocked> loc(#loc31)
    %112 = arith.andi %111, %109 : tensor<32x32xi1, #blocked> loc(#loc31)
    %113 = ttg.async_copy_global_to_local %97, %110 mask %112 other %cst_0 : tensor<32x32x!tt.ptr<f16>, #blocked> -> <32x32xf16, #shared, #smem, mutable, 4x32x32> loc(#loc30)
    %114 = ttg.async_commit_group %113 loc(#loc30)
    %115:13 = scf.for %arg8 = %c0_i32 to %33 step %c1_i32 iter_args(%arg9 = %cst, %arg10 = %96, %arg11 = %97, %arg12 = %c3_i32, %arg13 = %c-1_i32, %arg14 = %46, %arg15 = %66, %arg16 = %86, %arg17 = %106, %arg18 = %54, %arg19 = %74, %arg20 = %94, %arg21 = %114) -> (tensor<64x32xf32, #mma>, tensor<64x32x!tt.ptr<f16>, #blocked>, tensor<32x32x!tt.ptr<f16>, #blocked>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token)  : i32 {
      %138 = arith.subi %33, %c4_i32 : i32 loc(#loc31)
      %139 = arith.cmpi slt, %arg8, %138 : i32 loc(#loc31)
      %140 = arith.addi %arg13, %c1_i32 : i32 loc(#loc31)
      %141 = arith.cmpi sge, %140, %c4_i32 : i32 loc(#loc31)
      %142 = arith.select %141, %c0_i32, %140 : i32 loc(#loc31)
      %143 = ttg.async_wait %arg14, %arg18 {num = 6 : i32} loc(#loc29)
      %144 = ttg.memdesc_subview %36[%142, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x32xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x32xf16, #shared, #smem, mutable, 4x64x32> loc(#loc29)
      %145 = ttg.local_load %144 token %143 : !ttg.memdesc<64x32xf16, #shared, #smem, mutable, 4x64x32> -> tensor<64x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc29)
      %146 = ttg.memdesc_subview %37[%142, %c0_i32, %c0_i32] : !ttg.memdesc<4x32x32xf16, #shared, #smem, mutable> -> !ttg.memdesc<32x32xf16, #shared, #smem, mutable, 4x32x32> loc(#loc30)
      %147 = ttg.local_load %146 token %143 : !ttg.memdesc<32x32xf16, #shared, #smem, mutable, 4x32x32> -> tensor<32x32xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc30)
      %148 = tt.dot %145, %147, %arg9, inputPrecision = tf32 : tensor<64x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<32x32xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x32xf32, #mma> loc(#loc36)
      %149 = tt.addptr %arg10, %cst_2 : tensor<64x32x!tt.ptr<f16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc34)
      %150 = tt.addptr %arg11, %35 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc28)
      %151 = arith.addi %arg12, %c1_i32 : i32 loc(#loc31)
      %152 = arith.cmpi sge, %151, %c4_i32 : i32 loc(#loc31)
      %153 = arith.select %152, %c0_i32, %151 : i32 loc(#loc31)
      %154 = arith.addi %arg8, %c4_i32 : i32 loc(#loc31)
      %155 = arith.muli %154, %c32_i32 : i32 loc(#loc37)
      %156 = arith.subi %arg4, %155 : i32 loc(#loc35)
      %157 = tt.splat %156 : i32 -> tensor<1x32xi32, #blocked> loc(#loc32)
      %158 = arith.cmpi slt, %18, %157 : tensor<1x32xi32, #blocked> loc(#loc32)
      %159 = tt.broadcast %158 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc29)
      %160 = ttg.memdesc_subview %36[%153, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x32xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x32xf16, #shared, #smem, mutable, 4x64x32> loc(#loc29)
      %161 = tt.splat %139 : i1 -> tensor<64x32xi1, #blocked> loc(#loc31)
      %162 = arith.andi %161, %159 : tensor<64x32xi1, #blocked> loc(#loc31)
      %163 = ttg.async_copy_global_to_local %149, %160 mask %162 other %cst_1 : tensor<64x32x!tt.ptr<f16>, #blocked> -> <64x32xf16, #shared, #smem, mutable, 4x64x32> loc(#loc29)
      %164 = ttg.async_commit_group %163 loc(#loc29)
      %165 = tt.splat %156 : i32 -> tensor<32x1xi32, #blocked> loc(#loc33)
      %166 = arith.cmpi slt, %23, %165 : tensor<32x1xi32, #blocked> loc(#loc33)
      %167 = tt.broadcast %166 : tensor<32x1xi1, #blocked> -> tensor<32x32xi1, #blocked> loc(#loc30)
      %168 = ttg.memdesc_subview %37[%153, %c0_i32, %c0_i32] : !ttg.memdesc<4x32x32xf16, #shared, #smem, mutable> -> !ttg.memdesc<32x32xf16, #shared, #smem, mutable, 4x32x32> loc(#loc30)
      %169 = tt.splat %139 : i1 -> tensor<32x32xi1, #blocked> loc(#loc31)
      %170 = arith.andi %169, %167 : tensor<32x32xi1, #blocked> loc(#loc31)
      %171 = ttg.async_copy_global_to_local %150, %168 mask %170 other %cst_0 : tensor<32x32x!tt.ptr<f16>, #blocked> -> <32x32xf16, #shared, #smem, mutable, 4x32x32> loc(#loc30)
      %172 = ttg.async_commit_group %171 loc(#loc30)
      scf.yield %148, %149, %150, %153, %142, %arg15, %arg16, %arg17, %164, %arg19, %arg20, %arg21, %172 : tensor<64x32xf32, #mma>, tensor<64x32x!tt.ptr<f16>, #blocked>, tensor<32x32x!tt.ptr<f16>, #blocked>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token loc(#loc31)
    } loc(#loc31)
    %116 = ttg.async_wait  {num = 0 : i32} loc(#loc31)
    ttg.local_dealloc %37 : !ttg.memdesc<4x32x32xf16, #shared, #smem, mutable> loc(#loc31)
    ttg.local_dealloc %36 : !ttg.memdesc<4x64x32xf16, #shared, #smem, mutable> loc(#loc31)
    %117 = arith.truncf %115#0 : tensor<64x32xf32, #mma> to tensor<64x32xf16, #mma> loc(#loc38)
    %118 = arith.muli %10, %c64_i32 : i32 loc(#loc39)
    %119 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc40)
    %120 = tt.splat %118 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc41)
    %121 = arith.addi %120, %119 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc41)
    %122 = tt.expand_dims %121 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc42)
    %123 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc43)
    %124 = arith.muli %123, %122 : tensor<64x1xi32, #blocked> loc(#loc43)
    %125 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<64x1x!tt.ptr<f16>, #blocked> loc(#loc44)
    %126 = tt.addptr %125, %124 : tensor<64x1x!tt.ptr<f16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc44)
    %127 = tt.expand_dims %15 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc45)
    %128 = tt.broadcast %126 : tensor<64x1x!tt.ptr<f16>, #blocked> -> tensor<64x32x!tt.ptr<f16>, #blocked> loc(#loc46)
    %129 = tt.broadcast %127 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc46)
    %130 = tt.addptr %128, %129 : tensor<64x32x!tt.ptr<f16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc46)
    %131 = arith.cmpi slt, %122, %cst_3 : tensor<64x1xi32, #blocked> loc(#loc47)
    %132 = tt.splat %arg3 : i32 -> tensor<1x32xi32, #blocked> loc(#loc48)
    %133 = arith.cmpi slt, %127, %132 : tensor<1x32xi32, #blocked> loc(#loc48)
    %134 = tt.broadcast %131 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc49)
    %135 = tt.broadcast %133 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc49)
    %136 = arith.andi %134, %135 : tensor<64x32xi1, #blocked> loc(#loc49)
    %137 = ttg.convert_layout %117 : tensor<64x32xf16, #mma> -> tensor<64x32xf16, #blocked> loc(#loc50)
    tt.store %130, %137, %136 : tensor<64x32x!tt.ptr<f16>, #blocked> loc(#loc50)
    tt.return loc(#loc51)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":91:24)
#loc3 = loc("/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":40:22)
#loc4 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":93:27)
#loc5 = loc("/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py":40:28)
#loc6 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":94:38)
#loc7 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":95:22)
#loc8 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":96:29)
#loc9 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":97:35)
#loc10 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":97:48)
#loc11 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":98:34)
#loc12 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":98:54)
#loc13 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":98:27)
#loc14 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":99:40)
#loc15 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":109:23)
#loc16 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":109:51)
#loc17 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":109:38)
#loc18 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":109:68)
#loc19 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":111:60)
#loc20 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":111:22)
#loc21 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":112:29)
#loc22 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":112:40)
#loc23 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":112:60)
#loc24 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":112:52)
#loc25 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":112:22)
#loc26 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":120:33)
#loc27 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":129:33)
#loc28 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":129:18)
#loc29 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":123:20)
#loc30 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":124:20)
#loc31 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":120:22)
#loc32 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":123:51)
#loc33 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":124:51)
#loc34 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":128:18)
#loc35 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":123:55)
#loc36 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":126:35)
#loc37 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":123:59)
#loc38 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":134:23)
#loc39 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":138:22)
#loc40 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":138:50)
#loc41 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":138:37)
#loc42 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":140:41)
#loc43 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":140:33)
#loc44 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":140:21)
#loc45 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":140:72)
#loc46 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":140:52)
#loc47 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":141:33)
#loc48 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":141:58)
#loc49 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":141:39)
#loc50 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":142:21)
#loc51 = loc("/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py":142:4)
#loc52 = loc(callsite(#loc3 at #loc4))
#loc53 = loc(callsite(#loc5 at #loc4))
#loc54 = loc(callsite(#loc3 at #loc26))
#loc55 = loc(callsite(#loc5 at #loc26))
