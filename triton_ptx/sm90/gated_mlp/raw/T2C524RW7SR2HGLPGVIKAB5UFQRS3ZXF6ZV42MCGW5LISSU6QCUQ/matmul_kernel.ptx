//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	matmul_kernel           // -- Begin function matmul_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @matmul_kernel
.visible .entry matmul_kernel(
	.param .u64 .ptr .global .align 1 matmul_kernel_param_0,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_1,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_2,
	.param .u32 matmul_kernel_param_3,
	.param .u32 matmul_kernel_param_4,
	.param .u32 matmul_kernel_param_5,
	.param .u32 matmul_kernel_param_6,
	.param .u32 matmul_kernel_param_7,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_8
)
.reqntid 128
{
	.reg .pred 	%p<182>;
	.reg .b32 	%r<4377>;
	.reg .b64 	%rd<337>;
	.loc	1 68 0                          // gated_mlp.py:68:0
$L__func_begin0:
	.loc	1 68 0                          // gated_mlp.py:68:0

// %bb.0:
	ld.param.b32 	%r484, [matmul_kernel_param_7];
	ld.param.b32 	%r483, [matmul_kernel_param_6];
	ld.param.b32 	%r482, [matmul_kernel_param_4];
	ld.param.b32 	%r481, [matmul_kernel_param_3];
	ld.param.b64 	%rd57, [matmul_kernel_param_2];
	ld.param.b64 	%rd56, [matmul_kernel_param_1];
	ld.param.b64 	%rd55, [matmul_kernel_param_0];
$L__tmp0:
	.loc	1 91 24                         // gated_mlp.py:91:24
	mov.u32 	%r726, %ctaid.x;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:93:27 ]
	add.s32 	%r727, %r481, 255;
	.loc	2 40 28                         // standard.py:40:28 @[ gated_mlp.py:93:27 ]
	shr.s32 	%r728, %r727, 31;
	shr.u32 	%r729, %r728, 24;
	add.s32 	%r730, %r727, %r729;
	shr.s32 	%r731, %r730, 8;
$L__tmp2:
	.loc	1 94 38                         // gated_mlp.py:94:38
	shl.b32 	%r733, %r731, 3;
	.loc	1 95 22                         // gated_mlp.py:95:22
	div.s32 	%r734, %r726, %r733;
	.loc	1 96 29                         // gated_mlp.py:96:29
	shl.b32 	%r1, %r734, 3;
	.loc	1 97 35                         // gated_mlp.py:97:35
	sub.s32 	%r735, 1, %r1;
	.loc	1 97 48                         // gated_mlp.py:97:48
	min.s32 	%r2, %r735, 8;
	.loc	1 98 34                         // gated_mlp.py:98:34
	mul.lo.s32 	%r736, %r734, %r733;
	sub.s32 	%r3, %r726, %r736;
	.loc	1 99 40                         // gated_mlp.py:99:40
	div.s32 	%r4, %r3, %r2;
	.loc	1 109 23                        // gated_mlp.py:109:23
	shl.b32 	%r737, %r4, 8;
	.loc	1 109 51                        // gated_mlp.py:109:51
	mov.u32 	%r5, %tid.x;
	shl.b32 	%r6, %r5, 3;
	and.b32 	%r738, %r6, 24;
	and.b32 	%r739, %r6, 32;
	and.b32 	%r7, %r6, 56;
	and.b32 	%r740, %r5, 8;
	shl.b32 	%r8, %r740, 3;
	or.b32 	%r9, %r7, %r8;
	and.b32 	%r10, %r5, 16;
	bfe.s32 	%r741, %r5, 4, 1;
	and.b32 	%r742, %r6, 248;
	.loc	1 109 38                        // gated_mlp.py:109:38
	or.b32 	%r11, %r737, %r742;
	.loc	1 109 68                        // gated_mlp.py:109:68
	rem.s32 	%r12, %r11, %r481;
	.loc	1 111 22                        // gated_mlp.py:111:22
	mul.wide.u32 	%rd178, %r9, 2;
	add.s64 	%rd58, %rd55, %rd178;
	.loc	1 112 29                        // gated_mlp.py:112:29
	shr.u32 	%r13, %r5, 5;
	bfe.s32 	%r743, %r5, 5, 1;
	bfe.s32 	%r744, %r5, 6, 1;
	bfe.u32 	%r14, %r5, 5, 2;
	or.b32 	%r15, %r14, 4;
	or.b32 	%r16, %r14, 8;
	or.b32 	%r17, %r14, 12;
	or.b32 	%r18, %r14, 16;
	or.b32 	%r19, %r14, 20;
	or.b32 	%r20, %r14, 24;
	or.b32 	%r21, %r13, 28;
	or.b32 	%r22, %r14, 32;
	or.b32 	%r23, %r14, 36;
	or.b32 	%r24, %r14, 40;
	or.b32 	%r25, %r14, 44;
	or.b32 	%r26, %r14, 48;
	or.b32 	%r27, %r14, 52;
	or.b32 	%r28, %r14, 56;
	or.b32 	%r29, %r13, 60;
	or.b32 	%r30, %r14, 64;
	or.b32 	%r31, %r14, 68;
	or.b32 	%r32, %r14, 72;
	or.b32 	%r33, %r14, 76;
	or.b32 	%r34, %r14, 80;
	or.b32 	%r35, %r14, 84;
	or.b32 	%r36, %r14, 88;
	or.b32 	%r37, %r13, 92;
	or.b32 	%r38, %r14, 96;
	or.b32 	%r39, %r14, 100;
	or.b32 	%r40, %r14, 104;
	or.b32 	%r41, %r14, 108;
	or.b32 	%r42, %r14, 112;
	or.b32 	%r43, %r14, 116;
	or.b32 	%r44, %r14, 120;
	or.b32 	%r45, %r13, 124;
	.loc	1 112 40                        // gated_mlp.py:112:40
	mul.lo.s32 	%r745, %r483, %r14;
	shl.b32 	%r746, %r483, 2;
	add.s32 	%r747, %r745, %r746;
	add.s32 	%r748, %r747, %r746;
	add.s32 	%r749, %r748, %r746;
	add.s32 	%r750, %r749, %r746;
	add.s32 	%r751, %r750, %r746;
	add.s32 	%r752, %r751, %r746;
	shl.b32 	%r753, %r483, 3;
	add.s32 	%r754, %r752, %r753;
	add.s32 	%r755, %r754, %r746;
	add.s32 	%r756, %r755, %r746;
	add.s32 	%r757, %r756, %r746;
	add.s32 	%r758, %r757, %r746;
	add.s32 	%r759, %r758, %r746;
	add.s32 	%r760, %r759, %r746;
	add.s32 	%r761, %r760, %r753;
	add.s32 	%r762, %r761, %r746;
	add.s32 	%r763, %r762, %r746;
	add.s32 	%r764, %r763, %r746;
	add.s32 	%r765, %r764, %r746;
	add.s32 	%r766, %r765, %r746;
	add.s32 	%r767, %r766, %r746;
	add.s32 	%r768, %r767, %r753;
	add.s32 	%r769, %r768, %r746;
	add.s32 	%r770, %r769, %r746;
	add.s32 	%r771, %r770, %r746;
	add.s32 	%r772, %r771, %r746;
	add.s32 	%r773, %r772, %r746;
	add.s32 	%r774, %r773, %r746;
	.loc	1 112 52                        // gated_mlp.py:112:52
	add.s32 	%r775, %r12, %r745;
	add.s32 	%r776, %r12, %r747;
	add.s32 	%r777, %r12, %r748;
	add.s32 	%r778, %r12, %r749;
	add.s32 	%r779, %r12, %r750;
	add.s32 	%r780, %r12, %r751;
	add.s32 	%r781, %r12, %r752;
	mad.lo.s32 	%r782, %r483, %r21, %r12;
	add.s32 	%r783, %r12, %r754;
	add.s32 	%r784, %r12, %r755;
	add.s32 	%r785, %r12, %r756;
	add.s32 	%r786, %r12, %r757;
	add.s32 	%r787, %r12, %r758;
	add.s32 	%r788, %r12, %r759;
	add.s32 	%r789, %r12, %r760;
	mad.lo.s32 	%r790, %r483, %r29, %r12;
	add.s32 	%r791, %r12, %r761;
	add.s32 	%r792, %r12, %r762;
	add.s32 	%r793, %r12, %r763;
	add.s32 	%r794, %r12, %r764;
	add.s32 	%r795, %r12, %r765;
	add.s32 	%r796, %r12, %r766;
	add.s32 	%r797, %r12, %r767;
	mad.lo.s32 	%r798, %r483, %r37, %r12;
	add.s32 	%r799, %r12, %r768;
	add.s32 	%r800, %r12, %r769;
	add.s32 	%r801, %r12, %r770;
	add.s32 	%r802, %r12, %r771;
	add.s32 	%r803, %r12, %r772;
	add.s32 	%r804, %r12, %r773;
	add.s32 	%r805, %r12, %r774;
	mad.lo.s32 	%r806, %r483, %r45, %r12;
	.loc	1 112 22                        // gated_mlp.py:112:22
	mul.wide.s32 	%rd179, %r775, 2;
	add.s64 	%rd66, %rd56, %rd179;
	mul.wide.s32 	%rd180, %r776, 2;
	add.s64 	%rd67, %rd56, %rd180;
	mul.wide.s32 	%rd181, %r777, 2;
	add.s64 	%rd68, %rd56, %rd181;
	mul.wide.s32 	%rd182, %r778, 2;
	add.s64 	%rd69, %rd56, %rd182;
	mul.wide.s32 	%rd183, %r779, 2;
	add.s64 	%rd70, %rd56, %rd183;
	mul.wide.s32 	%rd184, %r780, 2;
	add.s64 	%rd71, %rd56, %rd184;
	mul.wide.s32 	%rd185, %r781, 2;
	add.s64 	%rd72, %rd56, %rd185;
	mul.wide.s32 	%rd186, %r782, 2;
	add.s64 	%rd73, %rd56, %rd186;
	mul.wide.s32 	%rd187, %r783, 2;
	add.s64 	%rd74, %rd56, %rd187;
	mul.wide.s32 	%rd188, %r784, 2;
	add.s64 	%rd75, %rd56, %rd188;
	mul.wide.s32 	%rd189, %r785, 2;
	add.s64 	%rd76, %rd56, %rd189;
	mul.wide.s32 	%rd190, %r786, 2;
	add.s64 	%rd77, %rd56, %rd190;
	mul.wide.s32 	%rd191, %r787, 2;
	add.s64 	%rd78, %rd56, %rd191;
	mul.wide.s32 	%rd192, %r788, 2;
	add.s64 	%rd79, %rd56, %rd192;
	mul.wide.s32 	%rd193, %r789, 2;
	add.s64 	%rd80, %rd56, %rd193;
	mul.wide.s32 	%rd194, %r790, 2;
	add.s64 	%rd81, %rd56, %rd194;
	mul.wide.s32 	%rd195, %r791, 2;
	add.s64 	%rd82, %rd56, %rd195;
	mul.wide.s32 	%rd196, %r792, 2;
	add.s64 	%rd83, %rd56, %rd196;
	mul.wide.s32 	%rd197, %r793, 2;
	add.s64 	%rd84, %rd56, %rd197;
	mul.wide.s32 	%rd198, %r794, 2;
	add.s64 	%rd85, %rd56, %rd198;
	mul.wide.s32 	%rd199, %r795, 2;
	add.s64 	%rd86, %rd56, %rd199;
	mul.wide.s32 	%rd200, %r796, 2;
	add.s64 	%rd87, %rd56, %rd200;
	mul.wide.s32 	%rd201, %r797, 2;
	add.s64 	%rd88, %rd56, %rd201;
	mul.wide.s32 	%rd202, %r798, 2;
	add.s64 	%rd89, %rd56, %rd202;
	mul.wide.s32 	%rd203, %r799, 2;
	add.s64 	%rd90, %rd56, %rd203;
	mul.wide.s32 	%rd204, %r800, 2;
	add.s64 	%rd91, %rd56, %rd204;
	mul.wide.s32 	%rd205, %r801, 2;
	add.s64 	%rd92, %rd56, %rd205;
	mul.wide.s32 	%rd206, %r802, 2;
	add.s64 	%rd93, %rd56, %rd206;
	mul.wide.s32 	%rd207, %r803, 2;
	add.s64 	%rd94, %rd56, %rd207;
	mul.wide.s32 	%rd208, %r804, 2;
	add.s64 	%rd95, %rd56, %rd208;
	mul.wide.s32 	%rd209, %r805, 2;
	add.s64 	%rd96, %rd56, %rd209;
	mul.wide.s32 	%rd210, %r806, 2;
	add.s64 	%rd97, %rd56, %rd210;
$L__tmp3:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:120:33 ]
	add.s32 	%r807, %r482, 127;
$L__tmp4:
	.loc	1 129 33                        // gated_mlp.py:129:33
	shl.b32 	%r811, %r483, 7;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.lt.s32 	%p1, %r807, 128;
	setp.gt.s32 	%p2, %r807, 127;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p3, %r9, %r482;
	.loc	1 123 20                        // gated_mlp.py:123:20
	shl.b32 	%r812, %r740, 9;
	or.b32 	%r813, %r7, %r812;
	and.b32 	%r814, %r741, 72;
	and.b32 	%r815, %r743, 144;
	and.b32 	%r816, %r744, 288;
	or.b32 	%r817, %r815, %r814;
	xor.b32 	%r818, %r817, %r813;
	xor.b32 	%r47, %r818, %r816;
	shl.b32 	%r819, %r47, 1;
	mov.b32 	%r820, global_smem;
	add.s32 	%r821, %r820, 262144;
	add.s32 	%r485, %r821, %r819;
	or.b32 	%r822, %r7, 512;
	or.b32 	%r823, %r822, %r812;
	or.b32 	%r824, %r817, %r816;
	xor.b32 	%r48, %r824, %r823;
	shl.b32 	%r825, %r48, 1;
	add.s32 	%r487, %r821, %r825;
	or.b32 	%r826, %r7, 1024;
	or.b32 	%r827, %r826, %r812;
	xor.b32 	%r49, %r824, %r827;
	shl.b32 	%r828, %r49, 1;
	add.s32 	%r489, %r821, %r828;
	or.b32 	%r829, %r7, 1536;
	or.b32 	%r830, %r829, %r812;
	xor.b32 	%r50, %r824, %r830;
	shl.b32 	%r831, %r50, 1;
	add.s32 	%r491, %r821, %r831;
	or.b32 	%r832, %r7, 2048;
	or.b32 	%r833, %r832, %r812;
	xor.b32 	%r51, %r824, %r833;
	shl.b32 	%r834, %r51, 1;
	add.s32 	%r493, %r821, %r834;
	or.b32 	%r835, %r7, 2560;
	or.b32 	%r836, %r835, %r812;
	xor.b32 	%r52, %r824, %r836;
	shl.b32 	%r837, %r52, 1;
	add.s32 	%r495, %r821, %r837;
	or.b32 	%r838, %r7, 3072;
	or.b32 	%r839, %r838, %r812;
	xor.b32 	%r53, %r824, %r839;
	shl.b32 	%r840, %r53, 1;
	add.s32 	%r497, %r821, %r840;
	or.b32 	%r841, %r7, 3584;
	or.b32 	%r842, %r841, %r812;
	xor.b32 	%r54, %r824, %r842;
	shl.b32 	%r843, %r54, 1;
	add.s32 	%r499, %r821, %r843;
	selp.b32 	%r844, 16, 0, %p2;
	selp.b32 	%r488, %r844, 0, %p3;
	// begin inline asm
	cp.async.cg.shared.global [ %r485 + 0 ], [ %rd58 + 0 ], 0x10, %r488;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r487 + 0 ], [ %rd58 + 0 ], 0x10, %r488;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r489 + 0 ], [ %rd58 + 0 ], 0x10, %r488;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r491 + 0 ], [ %rd58 + 0 ], 0x10, %r488;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r493 + 0 ], [ %rd58 + 0 ], 0x10, %r488;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r495 + 0 ], [ %rd58 + 0 ], 0x10, %r488;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r497 + 0 ], [ %rd58 + 0 ], 0x10, %r488;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r499 + 0 ], [ %rd58 + 0 ], 0x10, %r488;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p4, %r14, %r482;
	setp.lt.s32 	%p5, %r15, %r482;
	setp.lt.s32 	%p6, %r16, %r482;
	setp.lt.s32 	%p7, %r17, %r482;
	setp.lt.s32 	%p8, %r18, %r482;
	setp.lt.s32 	%p9, %r19, %r482;
	setp.lt.s32 	%p10, %r20, %r482;
	setp.lt.s32 	%p11, %r21, %r482;
	setp.lt.s32 	%p12, %r22, %r482;
	setp.lt.s32 	%p13, %r23, %r482;
	setp.lt.s32 	%p14, %r24, %r482;
	setp.lt.s32 	%p15, %r25, %r482;
	setp.lt.s32 	%p16, %r26, %r482;
	setp.lt.s32 	%p17, %r27, %r482;
	setp.lt.s32 	%p18, %r28, %r482;
	setp.lt.s32 	%p19, %r29, %r482;
	setp.lt.s32 	%p20, %r30, %r482;
	setp.lt.s32 	%p21, %r31, %r482;
	setp.lt.s32 	%p22, %r32, %r482;
	setp.lt.s32 	%p23, %r33, %r482;
	setp.lt.s32 	%p24, %r34, %r482;
	setp.lt.s32 	%p25, %r35, %r482;
	setp.lt.s32 	%p26, %r36, %r482;
	setp.lt.s32 	%p27, %r37, %r482;
	setp.lt.s32 	%p28, %r38, %r482;
	setp.lt.s32 	%p29, %r39, %r482;
	setp.lt.s32 	%p30, %r40, %r482;
	setp.lt.s32 	%p31, %r41, %r482;
	setp.lt.s32 	%p32, %r42, %r482;
	setp.lt.s32 	%p33, %r43, %r482;
	setp.lt.s32 	%p34, %r44, %r482;
	setp.lt.s32 	%p35, %r45, %r482;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r845, %r740, 10;
	or.b32 	%r846, %r7, %r845;
	shl.b32 	%r847, %r10, 10;
	or.b32 	%r848, %r846, %r847;
	and.b32 	%r849, %r743, 72;
	and.b32 	%r850, %r744, 144;
	or.b32 	%r851, %r850, %r849;
	xor.b32 	%r55, %r851, %r848;
	shl.b32 	%r852, %r55, 1;
	add.s32 	%r501, %r820, %r852;
	or.b32 	%r853, %r738, 288;
	xor.b32 	%r854, %r853, %r739;
	or.b32 	%r855, %r845, %r854;
	or.b32 	%r856, %r855, %r847;
	xor.b32 	%r56, %r851, %r856;
	shl.b32 	%r857, %r56, 1;
	add.s32 	%r503, %r820, %r857;
	or.b32 	%r858, %r847, %r845;
	or.b32 	%r859, %r858, %r822;
	xor.b32 	%r57, %r851, %r859;
	shl.b32 	%r860, %r57, 1;
	add.s32 	%r505, %r820, %r860;
	or.b32 	%r861, %r738, 800;
	xor.b32 	%r862, %r861, %r739;
	or.b32 	%r863, %r845, %r862;
	or.b32 	%r864, %r863, %r847;
	xor.b32 	%r58, %r851, %r864;
	shl.b32 	%r865, %r58, 1;
	add.s32 	%r507, %r820, %r865;
	or.b32 	%r866, %r858, %r826;
	xor.b32 	%r59, %r851, %r866;
	shl.b32 	%r867, %r59, 1;
	add.s32 	%r509, %r820, %r867;
	or.b32 	%r868, %r738, 1312;
	xor.b32 	%r869, %r868, %r739;
	or.b32 	%r870, %r845, %r869;
	or.b32 	%r871, %r870, %r847;
	xor.b32 	%r60, %r851, %r871;
	shl.b32 	%r872, %r60, 1;
	add.s32 	%r511, %r820, %r872;
	or.b32 	%r873, %r858, %r829;
	xor.b32 	%r61, %r851, %r873;
	shl.b32 	%r874, %r61, 1;
	add.s32 	%r513, %r820, %r874;
	or.b32 	%r875, %r738, 1824;
	xor.b32 	%r876, %r875, %r739;
	or.b32 	%r877, %r845, %r876;
	or.b32 	%r878, %r877, %r847;
	xor.b32 	%r62, %r851, %r878;
	shl.b32 	%r879, %r62, 1;
	add.s32 	%r515, %r820, %r879;
	or.b32 	%r880, %r858, %r832;
	xor.b32 	%r63, %r851, %r880;
	shl.b32 	%r881, %r63, 1;
	add.s32 	%r517, %r820, %r881;
	or.b32 	%r882, %r738, 2336;
	xor.b32 	%r883, %r882, %r739;
	or.b32 	%r884, %r845, %r883;
	or.b32 	%r885, %r884, %r847;
	xor.b32 	%r64, %r851, %r885;
	shl.b32 	%r886, %r64, 1;
	add.s32 	%r519, %r820, %r886;
	or.b32 	%r887, %r858, %r835;
	xor.b32 	%r65, %r851, %r887;
	shl.b32 	%r888, %r65, 1;
	add.s32 	%r521, %r820, %r888;
	or.b32 	%r889, %r738, 2848;
	xor.b32 	%r890, %r889, %r739;
	or.b32 	%r891, %r845, %r890;
	or.b32 	%r892, %r891, %r847;
	xor.b32 	%r66, %r851, %r892;
	shl.b32 	%r893, %r66, 1;
	add.s32 	%r523, %r820, %r893;
	or.b32 	%r894, %r858, %r838;
	xor.b32 	%r67, %r851, %r894;
	shl.b32 	%r895, %r67, 1;
	add.s32 	%r525, %r820, %r895;
	or.b32 	%r896, %r738, 3360;
	xor.b32 	%r897, %r896, %r739;
	or.b32 	%r898, %r845, %r897;
	or.b32 	%r899, %r898, %r847;
	xor.b32 	%r68, %r851, %r899;
	shl.b32 	%r900, %r68, 1;
	add.s32 	%r527, %r820, %r900;
	or.b32 	%r901, %r858, %r841;
	xor.b32 	%r69, %r851, %r901;
	shl.b32 	%r902, %r69, 1;
	add.s32 	%r529, %r820, %r902;
	or.b32 	%r903, %r738, 3872;
	xor.b32 	%r904, %r903, %r739;
	or.b32 	%r905, %r845, %r904;
	or.b32 	%r906, %r905, %r847;
	xor.b32 	%r70, %r851, %r906;
	shl.b32 	%r907, %r70, 1;
	add.s32 	%r531, %r820, %r907;
	or.b32 	%r908, %r848, 4096;
	xor.b32 	%r71, %r851, %r908;
	shl.b32 	%r909, %r71, 1;
	add.s32 	%r533, %r820, %r909;
	or.b32 	%r910, %r738, 4384;
	xor.b32 	%r911, %r910, %r739;
	or.b32 	%r912, %r845, %r911;
	or.b32 	%r913, %r912, %r847;
	xor.b32 	%r72, %r851, %r913;
	shl.b32 	%r914, %r72, 1;
	add.s32 	%r535, %r820, %r914;
	or.b32 	%r915, %r848, 4608;
	xor.b32 	%r73, %r851, %r915;
	shl.b32 	%r916, %r73, 1;
	add.s32 	%r537, %r820, %r916;
	or.b32 	%r917, %r738, 4896;
	xor.b32 	%r918, %r917, %r739;
	or.b32 	%r919, %r845, %r918;
	or.b32 	%r920, %r919, %r847;
	xor.b32 	%r74, %r851, %r920;
	shl.b32 	%r921, %r74, 1;
	add.s32 	%r539, %r820, %r921;
	or.b32 	%r922, %r848, 5120;
	xor.b32 	%r75, %r851, %r922;
	shl.b32 	%r923, %r75, 1;
	add.s32 	%r541, %r820, %r923;
	or.b32 	%r924, %r738, 5408;
	xor.b32 	%r925, %r924, %r739;
	or.b32 	%r926, %r845, %r925;
	or.b32 	%r927, %r926, %r847;
	xor.b32 	%r76, %r851, %r927;
	shl.b32 	%r928, %r76, 1;
	add.s32 	%r543, %r820, %r928;
	or.b32 	%r929, %r848, 5632;
	xor.b32 	%r77, %r851, %r929;
	shl.b32 	%r930, %r77, 1;
	add.s32 	%r545, %r820, %r930;
	or.b32 	%r931, %r738, 5920;
	xor.b32 	%r932, %r931, %r739;
	or.b32 	%r933, %r845, %r932;
	or.b32 	%r934, %r933, %r847;
	xor.b32 	%r78, %r851, %r934;
	shl.b32 	%r935, %r78, 1;
	add.s32 	%r547, %r820, %r935;
	or.b32 	%r936, %r848, 6144;
	xor.b32 	%r79, %r851, %r936;
	shl.b32 	%r937, %r79, 1;
	add.s32 	%r549, %r820, %r937;
	or.b32 	%r938, %r738, 6432;
	xor.b32 	%r939, %r938, %r739;
	or.b32 	%r940, %r845, %r939;
	or.b32 	%r941, %r940, %r847;
	xor.b32 	%r80, %r851, %r941;
	shl.b32 	%r942, %r80, 1;
	add.s32 	%r551, %r820, %r942;
	or.b32 	%r943, %r848, 6656;
	xor.b32 	%r81, %r851, %r943;
	shl.b32 	%r944, %r81, 1;
	add.s32 	%r553, %r820, %r944;
	or.b32 	%r945, %r738, 6944;
	xor.b32 	%r946, %r945, %r739;
	or.b32 	%r947, %r845, %r946;
	or.b32 	%r948, %r947, %r847;
	xor.b32 	%r82, %r851, %r948;
	shl.b32 	%r949, %r82, 1;
	add.s32 	%r555, %r820, %r949;
	or.b32 	%r950, %r848, 7168;
	xor.b32 	%r83, %r851, %r950;
	shl.b32 	%r951, %r83, 1;
	add.s32 	%r557, %r820, %r951;
	or.b32 	%r952, %r738, 7456;
	xor.b32 	%r953, %r952, %r739;
	or.b32 	%r954, %r845, %r953;
	or.b32 	%r955, %r954, %r847;
	xor.b32 	%r84, %r851, %r955;
	shl.b32 	%r956, %r84, 1;
	add.s32 	%r559, %r820, %r956;
	or.b32 	%r957, %r848, 7680;
	xor.b32 	%r85, %r851, %r957;
	shl.b32 	%r958, %r85, 1;
	add.s32 	%r561, %r820, %r958;
	or.b32 	%r959, %r738, 7968;
	xor.b32 	%r960, %r959, %r739;
	or.b32 	%r961, %r845, %r960;
	or.b32 	%r962, %r961, %r847;
	xor.b32 	%r86, %r851, %r962;
	shl.b32 	%r963, %r86, 1;
	add.s32 	%r563, %r820, %r963;
	selp.b32 	%r502, %r844, 0, %p4;
	// begin inline asm
	cp.async.cg.shared.global [ %r501 + 0 ], [ %rd66 + 0 ], 0x10, %r502;
	// end inline asm
	selp.b32 	%r504, %r844, 0, %p5;
	// begin inline asm
	cp.async.cg.shared.global [ %r503 + 0 ], [ %rd67 + 0 ], 0x10, %r504;
	// end inline asm
	selp.b32 	%r506, %r844, 0, %p6;
	// begin inline asm
	cp.async.cg.shared.global [ %r505 + 0 ], [ %rd68 + 0 ], 0x10, %r506;
	// end inline asm
	selp.b32 	%r508, %r844, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r507 + 0 ], [ %rd69 + 0 ], 0x10, %r508;
	// end inline asm
	selp.b32 	%r510, %r844, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r509 + 0 ], [ %rd70 + 0 ], 0x10, %r510;
	// end inline asm
	selp.b32 	%r512, %r844, 0, %p9;
	// begin inline asm
	cp.async.cg.shared.global [ %r511 + 0 ], [ %rd71 + 0 ], 0x10, %r512;
	// end inline asm
	selp.b32 	%r514, %r844, 0, %p10;
	// begin inline asm
	cp.async.cg.shared.global [ %r513 + 0 ], [ %rd72 + 0 ], 0x10, %r514;
	// end inline asm
	selp.b32 	%r516, %r844, 0, %p11;
	// begin inline asm
	cp.async.cg.shared.global [ %r515 + 0 ], [ %rd73 + 0 ], 0x10, %r516;
	// end inline asm
	selp.b32 	%r518, %r844, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r517 + 0 ], [ %rd74 + 0 ], 0x10, %r518;
	// end inline asm
	selp.b32 	%r520, %r844, 0, %p13;
	// begin inline asm
	cp.async.cg.shared.global [ %r519 + 0 ], [ %rd75 + 0 ], 0x10, %r520;
	// end inline asm
	selp.b32 	%r522, %r844, 0, %p14;
	// begin inline asm
	cp.async.cg.shared.global [ %r521 + 0 ], [ %rd76 + 0 ], 0x10, %r522;
	// end inline asm
	selp.b32 	%r524, %r844, 0, %p15;
	// begin inline asm
	cp.async.cg.shared.global [ %r523 + 0 ], [ %rd77 + 0 ], 0x10, %r524;
	// end inline asm
	selp.b32 	%r526, %r844, 0, %p16;
	// begin inline asm
	cp.async.cg.shared.global [ %r525 + 0 ], [ %rd78 + 0 ], 0x10, %r526;
	// end inline asm
	selp.b32 	%r528, %r844, 0, %p17;
	// begin inline asm
	cp.async.cg.shared.global [ %r527 + 0 ], [ %rd79 + 0 ], 0x10, %r528;
	// end inline asm
	selp.b32 	%r530, %r844, 0, %p18;
	// begin inline asm
	cp.async.cg.shared.global [ %r529 + 0 ], [ %rd80 + 0 ], 0x10, %r530;
	// end inline asm
	selp.b32 	%r532, %r844, 0, %p19;
	// begin inline asm
	cp.async.cg.shared.global [ %r531 + 0 ], [ %rd81 + 0 ], 0x10, %r532;
	// end inline asm
	selp.b32 	%r534, %r844, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r533 + 0 ], [ %rd82 + 0 ], 0x10, %r534;
	// end inline asm
	selp.b32 	%r536, %r844, 0, %p21;
	// begin inline asm
	cp.async.cg.shared.global [ %r535 + 0 ], [ %rd83 + 0 ], 0x10, %r536;
	// end inline asm
	selp.b32 	%r538, %r844, 0, %p22;
	// begin inline asm
	cp.async.cg.shared.global [ %r537 + 0 ], [ %rd84 + 0 ], 0x10, %r538;
	// end inline asm
	selp.b32 	%r540, %r844, 0, %p23;
	// begin inline asm
	cp.async.cg.shared.global [ %r539 + 0 ], [ %rd85 + 0 ], 0x10, %r540;
	// end inline asm
	selp.b32 	%r542, %r844, 0, %p24;
	// begin inline asm
	cp.async.cg.shared.global [ %r541 + 0 ], [ %rd86 + 0 ], 0x10, %r542;
	// end inline asm
	selp.b32 	%r544, %r844, 0, %p25;
	// begin inline asm
	cp.async.cg.shared.global [ %r543 + 0 ], [ %rd87 + 0 ], 0x10, %r544;
	// end inline asm
	selp.b32 	%r546, %r844, 0, %p26;
	// begin inline asm
	cp.async.cg.shared.global [ %r545 + 0 ], [ %rd88 + 0 ], 0x10, %r546;
	// end inline asm
	selp.b32 	%r548, %r844, 0, %p27;
	// begin inline asm
	cp.async.cg.shared.global [ %r547 + 0 ], [ %rd89 + 0 ], 0x10, %r548;
	// end inline asm
	selp.b32 	%r550, %r844, 0, %p28;
	// begin inline asm
	cp.async.cg.shared.global [ %r549 + 0 ], [ %rd90 + 0 ], 0x10, %r550;
	// end inline asm
	selp.b32 	%r552, %r844, 0, %p29;
	// begin inline asm
	cp.async.cg.shared.global [ %r551 + 0 ], [ %rd91 + 0 ], 0x10, %r552;
	// end inline asm
	selp.b32 	%r554, %r844, 0, %p30;
	// begin inline asm
	cp.async.cg.shared.global [ %r553 + 0 ], [ %rd92 + 0 ], 0x10, %r554;
	// end inline asm
	selp.b32 	%r556, %r844, 0, %p31;
	// begin inline asm
	cp.async.cg.shared.global [ %r555 + 0 ], [ %rd93 + 0 ], 0x10, %r556;
	// end inline asm
	selp.b32 	%r558, %r844, 0, %p32;
	// begin inline asm
	cp.async.cg.shared.global [ %r557 + 0 ], [ %rd94 + 0 ], 0x10, %r558;
	// end inline asm
	selp.b32 	%r560, %r844, 0, %p33;
	// begin inline asm
	cp.async.cg.shared.global [ %r559 + 0 ], [ %rd95 + 0 ], 0x10, %r560;
	// end inline asm
	selp.b32 	%r562, %r844, 0, %p34;
	// begin inline asm
	cp.async.cg.shared.global [ %r561 + 0 ], [ %rd96 + 0 ], 0x10, %r562;
	// end inline asm
	selp.b32 	%r564, %r844, 0, %p35;
	// begin inline asm
	cp.async.cg.shared.global [ %r563 + 0 ], [ %rd97 + 0 ], 0x10, %r564;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p36, %r807, 255;
	.loc	1 128 18                        // gated_mlp.py:128:18
	add.s64 	%rd98, %rd58, 256;
	.loc	1 129 18                        // gated_mlp.py:129:18
	mul.wide.s32 	%rd211, %r811, 2;
	add.s64 	%rd106, %rd66, %rd211;
	add.s64 	%rd107, %rd67, %rd211;
	add.s64 	%rd108, %rd68, %rd211;
	add.s64 	%rd109, %rd69, %rd211;
	add.s64 	%rd110, %rd70, %rd211;
	add.s64 	%rd111, %rd71, %rd211;
	add.s64 	%rd112, %rd72, %rd211;
	add.s64 	%rd113, %rd73, %rd211;
	add.s64 	%rd114, %rd74, %rd211;
	add.s64 	%rd115, %rd75, %rd211;
	add.s64 	%rd116, %rd76, %rd211;
	add.s64 	%rd117, %rd77, %rd211;
	add.s64 	%rd118, %rd78, %rd211;
	add.s64 	%rd119, %rd79, %rd211;
	add.s64 	%rd120, %rd80, %rd211;
	add.s64 	%rd121, %rd81, %rd211;
	add.s64 	%rd122, %rd82, %rd211;
	add.s64 	%rd123, %rd83, %rd211;
	add.s64 	%rd124, %rd84, %rd211;
	add.s64 	%rd125, %rd85, %rd211;
	add.s64 	%rd126, %rd86, %rd211;
	add.s64 	%rd127, %rd87, %rd211;
	add.s64 	%rd128, %rd88, %rd211;
	add.s64 	%rd129, %rd89, %rd211;
	add.s64 	%rd130, %rd90, %rd211;
	add.s64 	%rd131, %rd91, %rd211;
	add.s64 	%rd132, %rd92, %rd211;
	add.s64 	%rd133, %rd93, %rd211;
	add.s64 	%rd134, %rd94, %rd211;
	add.s64 	%rd135, %rd95, %rd211;
	add.s64 	%rd136, %rd96, %rd211;
	add.s64 	%rd137, %rd97, %rd211;
	.loc	1 123 55                        // gated_mlp.py:123:55
	add.s32 	%r964, %r482, -128;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p37, %r9, %r964;
	.loc	1 123 20                        // gated_mlp.py:123:20
	bar.sync 	0;
	add.s32 	%r965, %r820, 278528;
	add.s32 	%r565, %r965, %r819;
	add.s32 	%r567, %r965, %r825;
	add.s32 	%r569, %r965, %r828;
	add.s32 	%r571, %r965, %r831;
	add.s32 	%r573, %r965, %r834;
	add.s32 	%r575, %r965, %r837;
	add.s32 	%r577, %r965, %r840;
	add.s32 	%r579, %r965, %r843;
	selp.b32 	%r966, 16, 0, %p37;
	selp.b32 	%r568, %r966, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r565 + 0 ], [ %rd98 + 0 ], 0x10, %r568;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r567 + 0 ], [ %rd98 + 0 ], 0x10, %r568;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r569 + 0 ], [ %rd98 + 0 ], 0x10, %r568;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r571 + 0 ], [ %rd98 + 0 ], 0x10, %r568;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r573 + 0 ], [ %rd98 + 0 ], 0x10, %r568;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r575 + 0 ], [ %rd98 + 0 ], 0x10, %r568;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r577 + 0 ], [ %rd98 + 0 ], 0x10, %r568;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r579 + 0 ], [ %rd98 + 0 ], 0x10, %r568;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p38, %r14, %r964;
	setp.lt.s32 	%p39, %r15, %r964;
	setp.lt.s32 	%p40, %r16, %r964;
	setp.lt.s32 	%p41, %r17, %r964;
	setp.lt.s32 	%p42, %r18, %r964;
	setp.lt.s32 	%p43, %r19, %r964;
	setp.lt.s32 	%p44, %r20, %r964;
	setp.lt.s32 	%p45, %r21, %r964;
	setp.lt.s32 	%p46, %r22, %r964;
	setp.lt.s32 	%p47, %r23, %r964;
	setp.lt.s32 	%p48, %r24, %r964;
	setp.lt.s32 	%p49, %r25, %r964;
	setp.lt.s32 	%p50, %r26, %r964;
	setp.lt.s32 	%p51, %r27, %r964;
	setp.lt.s32 	%p52, %r28, %r964;
	setp.lt.s32 	%p53, %r29, %r964;
	setp.lt.s32 	%p54, %r30, %r964;
	setp.lt.s32 	%p55, %r31, %r964;
	setp.lt.s32 	%p56, %r32, %r964;
	setp.lt.s32 	%p57, %r33, %r964;
	setp.lt.s32 	%p58, %r34, %r964;
	setp.lt.s32 	%p59, %r35, %r964;
	setp.lt.s32 	%p60, %r36, %r964;
	setp.lt.s32 	%p61, %r37, %r964;
	setp.lt.s32 	%p62, %r38, %r964;
	setp.lt.s32 	%p63, %r39, %r964;
	setp.lt.s32 	%p64, %r40, %r964;
	setp.lt.s32 	%p65, %r41, %r964;
	setp.lt.s32 	%p66, %r42, %r964;
	setp.lt.s32 	%p67, %r43, %r964;
	setp.lt.s32 	%p68, %r44, %r964;
	setp.lt.s32 	%p69, %r45, %r964;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r967, %r820, 65536;
	add.s32 	%r581, %r967, %r852;
	add.s32 	%r583, %r967, %r857;
	add.s32 	%r585, %r967, %r860;
	add.s32 	%r587, %r967, %r865;
	add.s32 	%r589, %r967, %r867;
	add.s32 	%r591, %r967, %r872;
	add.s32 	%r593, %r967, %r874;
	add.s32 	%r595, %r967, %r879;
	add.s32 	%r597, %r967, %r881;
	add.s32 	%r599, %r967, %r886;
	add.s32 	%r601, %r967, %r888;
	add.s32 	%r603, %r967, %r893;
	add.s32 	%r605, %r967, %r895;
	add.s32 	%r607, %r967, %r900;
	add.s32 	%r609, %r967, %r902;
	add.s32 	%r611, %r967, %r907;
	add.s32 	%r613, %r967, %r909;
	add.s32 	%r615, %r967, %r914;
	add.s32 	%r617, %r967, %r916;
	add.s32 	%r619, %r967, %r921;
	add.s32 	%r621, %r967, %r923;
	add.s32 	%r623, %r967, %r928;
	add.s32 	%r625, %r967, %r930;
	add.s32 	%r627, %r967, %r935;
	add.s32 	%r629, %r967, %r937;
	add.s32 	%r631, %r967, %r942;
	add.s32 	%r633, %r967, %r944;
	add.s32 	%r635, %r967, %r949;
	add.s32 	%r637, %r967, %r951;
	add.s32 	%r639, %r967, %r956;
	add.s32 	%r641, %r967, %r958;
	add.s32 	%r643, %r967, %r963;
	selp.b32 	%r968, 16, 0, %p38;
	selp.b32 	%r582, %r968, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r581 + 0 ], [ %rd106 + 0 ], 0x10, %r582;
	// end inline asm
	selp.b32 	%r969, 16, 0, %p39;
	selp.b32 	%r584, %r969, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r583 + 0 ], [ %rd107 + 0 ], 0x10, %r584;
	// end inline asm
	selp.b32 	%r970, 16, 0, %p40;
	selp.b32 	%r586, %r970, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r585 + 0 ], [ %rd108 + 0 ], 0x10, %r586;
	// end inline asm
	selp.b32 	%r971, 16, 0, %p41;
	selp.b32 	%r588, %r971, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r587 + 0 ], [ %rd109 + 0 ], 0x10, %r588;
	// end inline asm
	selp.b32 	%r972, 16, 0, %p42;
	selp.b32 	%r590, %r972, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r589 + 0 ], [ %rd110 + 0 ], 0x10, %r590;
	// end inline asm
	selp.b32 	%r973, 16, 0, %p43;
	selp.b32 	%r592, %r973, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r591 + 0 ], [ %rd111 + 0 ], 0x10, %r592;
	// end inline asm
	selp.b32 	%r974, 16, 0, %p44;
	selp.b32 	%r594, %r974, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r593 + 0 ], [ %rd112 + 0 ], 0x10, %r594;
	// end inline asm
	selp.b32 	%r975, 16, 0, %p45;
	selp.b32 	%r596, %r975, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r595 + 0 ], [ %rd113 + 0 ], 0x10, %r596;
	// end inline asm
	selp.b32 	%r976, 16, 0, %p46;
	selp.b32 	%r598, %r976, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r597 + 0 ], [ %rd114 + 0 ], 0x10, %r598;
	// end inline asm
	selp.b32 	%r977, 16, 0, %p47;
	selp.b32 	%r600, %r977, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r599 + 0 ], [ %rd115 + 0 ], 0x10, %r600;
	// end inline asm
	selp.b32 	%r978, 16, 0, %p48;
	selp.b32 	%r602, %r978, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r601 + 0 ], [ %rd116 + 0 ], 0x10, %r602;
	// end inline asm
	selp.b32 	%r979, 16, 0, %p49;
	selp.b32 	%r604, %r979, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r603 + 0 ], [ %rd117 + 0 ], 0x10, %r604;
	// end inline asm
	selp.b32 	%r980, 16, 0, %p50;
	selp.b32 	%r606, %r980, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r605 + 0 ], [ %rd118 + 0 ], 0x10, %r606;
	// end inline asm
	selp.b32 	%r981, 16, 0, %p51;
	selp.b32 	%r608, %r981, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r607 + 0 ], [ %rd119 + 0 ], 0x10, %r608;
	// end inline asm
	selp.b32 	%r982, 16, 0, %p52;
	selp.b32 	%r610, %r982, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r609 + 0 ], [ %rd120 + 0 ], 0x10, %r610;
	// end inline asm
	selp.b32 	%r983, 16, 0, %p53;
	selp.b32 	%r612, %r983, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r611 + 0 ], [ %rd121 + 0 ], 0x10, %r612;
	// end inline asm
	selp.b32 	%r984, 16, 0, %p54;
	selp.b32 	%r614, %r984, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r613 + 0 ], [ %rd122 + 0 ], 0x10, %r614;
	// end inline asm
	selp.b32 	%r985, 16, 0, %p55;
	selp.b32 	%r616, %r985, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r615 + 0 ], [ %rd123 + 0 ], 0x10, %r616;
	// end inline asm
	selp.b32 	%r986, 16, 0, %p56;
	selp.b32 	%r618, %r986, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r617 + 0 ], [ %rd124 + 0 ], 0x10, %r618;
	// end inline asm
	selp.b32 	%r987, 16, 0, %p57;
	selp.b32 	%r620, %r987, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r619 + 0 ], [ %rd125 + 0 ], 0x10, %r620;
	// end inline asm
	selp.b32 	%r988, 16, 0, %p58;
	selp.b32 	%r622, %r988, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r621 + 0 ], [ %rd126 + 0 ], 0x10, %r622;
	// end inline asm
	selp.b32 	%r989, 16, 0, %p59;
	selp.b32 	%r624, %r989, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r623 + 0 ], [ %rd127 + 0 ], 0x10, %r624;
	// end inline asm
	selp.b32 	%r990, 16, 0, %p60;
	selp.b32 	%r626, %r990, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r625 + 0 ], [ %rd128 + 0 ], 0x10, %r626;
	// end inline asm
	selp.b32 	%r991, 16, 0, %p61;
	selp.b32 	%r628, %r991, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r627 + 0 ], [ %rd129 + 0 ], 0x10, %r628;
	// end inline asm
	selp.b32 	%r992, 16, 0, %p62;
	selp.b32 	%r630, %r992, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r629 + 0 ], [ %rd130 + 0 ], 0x10, %r630;
	// end inline asm
	selp.b32 	%r993, 16, 0, %p63;
	selp.b32 	%r632, %r993, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r631 + 0 ], [ %rd131 + 0 ], 0x10, %r632;
	// end inline asm
	selp.b32 	%r994, 16, 0, %p64;
	selp.b32 	%r634, %r994, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r633 + 0 ], [ %rd132 + 0 ], 0x10, %r634;
	// end inline asm
	selp.b32 	%r995, 16, 0, %p65;
	selp.b32 	%r636, %r995, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r635 + 0 ], [ %rd133 + 0 ], 0x10, %r636;
	// end inline asm
	selp.b32 	%r996, 16, 0, %p66;
	selp.b32 	%r638, %r996, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r637 + 0 ], [ %rd134 + 0 ], 0x10, %r638;
	// end inline asm
	selp.b32 	%r997, 16, 0, %p67;
	selp.b32 	%r640, %r997, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r639 + 0 ], [ %rd135 + 0 ], 0x10, %r640;
	// end inline asm
	selp.b32 	%r998, 16, 0, %p68;
	selp.b32 	%r642, %r998, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r641 + 0 ], [ %rd136 + 0 ], 0x10, %r642;
	// end inline asm
	selp.b32 	%r999, 16, 0, %p69;
	selp.b32 	%r644, %r999, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r643 + 0 ], [ %rd137 + 0 ], 0x10, %r644;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p70, %r807, 383;
	.loc	1 128 18                        // gated_mlp.py:128:18
	add.s64 	%rd138, %rd58, 512;
	.loc	1 129 18                        // gated_mlp.py:129:18
	add.s64 	%rd146, %rd106, %rd211;
	add.s64 	%rd147, %rd107, %rd211;
	add.s64 	%rd148, %rd108, %rd211;
	add.s64 	%rd149, %rd109, %rd211;
	add.s64 	%rd150, %rd110, %rd211;
	add.s64 	%rd151, %rd111, %rd211;
	add.s64 	%rd152, %rd112, %rd211;
	add.s64 	%rd153, %rd113, %rd211;
	add.s64 	%rd154, %rd114, %rd211;
	add.s64 	%rd155, %rd115, %rd211;
	add.s64 	%rd156, %rd116, %rd211;
	add.s64 	%rd157, %rd117, %rd211;
	add.s64 	%rd158, %rd118, %rd211;
	add.s64 	%rd159, %rd119, %rd211;
	add.s64 	%rd160, %rd120, %rd211;
	add.s64 	%rd161, %rd121, %rd211;
	add.s64 	%rd162, %rd122, %rd211;
	add.s64 	%rd163, %rd123, %rd211;
	add.s64 	%rd164, %rd124, %rd211;
	add.s64 	%rd165, %rd125, %rd211;
	add.s64 	%rd166, %rd126, %rd211;
	add.s64 	%rd167, %rd127, %rd211;
	add.s64 	%rd168, %rd128, %rd211;
	add.s64 	%rd169, %rd129, %rd211;
	add.s64 	%rd170, %rd130, %rd211;
	add.s64 	%rd171, %rd131, %rd211;
	add.s64 	%rd172, %rd132, %rd211;
	add.s64 	%rd173, %rd133, %rd211;
	add.s64 	%rd174, %rd134, %rd211;
	add.s64 	%rd175, %rd135, %rd211;
	add.s64 	%rd176, %rd136, %rd211;
	add.s64 	%rd177, %rd137, %rd211;
	.loc	1 123 55                        // gated_mlp.py:123:55
	add.s32 	%r1000, %r482, -256;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p71, %r9, %r1000;
	.loc	1 123 20                        // gated_mlp.py:123:20
	bar.sync 	0;
	add.s32 	%r1001, %r820, 294912;
	add.s32 	%r645, %r1001, %r819;
	add.s32 	%r647, %r1001, %r825;
	add.s32 	%r649, %r1001, %r828;
	add.s32 	%r651, %r1001, %r831;
	add.s32 	%r653, %r1001, %r834;
	add.s32 	%r655, %r1001, %r837;
	add.s32 	%r657, %r1001, %r840;
	add.s32 	%r659, %r1001, %r843;
	selp.b32 	%r1002, 16, 0, %p71;
	selp.b32 	%r648, %r1002, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r645 + 0 ], [ %rd138 + 0 ], 0x10, %r648;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r647 + 0 ], [ %rd138 + 0 ], 0x10, %r648;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r649 + 0 ], [ %rd138 + 0 ], 0x10, %r648;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r651 + 0 ], [ %rd138 + 0 ], 0x10, %r648;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r653 + 0 ], [ %rd138 + 0 ], 0x10, %r648;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r655 + 0 ], [ %rd138 + 0 ], 0x10, %r648;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r657 + 0 ], [ %rd138 + 0 ], 0x10, %r648;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r659 + 0 ], [ %rd138 + 0 ], 0x10, %r648;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p72, %r14, %r1000;
	setp.lt.s32 	%p73, %r15, %r1000;
	setp.lt.s32 	%p74, %r16, %r1000;
	setp.lt.s32 	%p75, %r17, %r1000;
	setp.lt.s32 	%p76, %r18, %r1000;
	setp.lt.s32 	%p77, %r19, %r1000;
	setp.lt.s32 	%p78, %r20, %r1000;
	setp.lt.s32 	%p79, %r21, %r1000;
	setp.lt.s32 	%p80, %r22, %r1000;
	setp.lt.s32 	%p81, %r23, %r1000;
	setp.lt.s32 	%p82, %r24, %r1000;
	setp.lt.s32 	%p83, %r25, %r1000;
	setp.lt.s32 	%p84, %r26, %r1000;
	setp.lt.s32 	%p85, %r27, %r1000;
	setp.lt.s32 	%p86, %r28, %r1000;
	setp.lt.s32 	%p87, %r29, %r1000;
	setp.lt.s32 	%p88, %r30, %r1000;
	setp.lt.s32 	%p89, %r31, %r1000;
	setp.lt.s32 	%p90, %r32, %r1000;
	setp.lt.s32 	%p91, %r33, %r1000;
	setp.lt.s32 	%p92, %r34, %r1000;
	setp.lt.s32 	%p93, %r35, %r1000;
	setp.lt.s32 	%p94, %r36, %r1000;
	setp.lt.s32 	%p95, %r37, %r1000;
	setp.lt.s32 	%p96, %r38, %r1000;
	setp.lt.s32 	%p97, %r39, %r1000;
	setp.lt.s32 	%p98, %r40, %r1000;
	setp.lt.s32 	%p99, %r41, %r1000;
	setp.lt.s32 	%p100, %r42, %r1000;
	setp.lt.s32 	%p101, %r43, %r1000;
	setp.lt.s32 	%p102, %r44, %r1000;
	setp.lt.s32 	%p103, %r45, %r1000;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r1003, %r820, 131072;
	add.s32 	%r661, %r1003, %r852;
	add.s32 	%r663, %r1003, %r857;
	add.s32 	%r665, %r1003, %r860;
	add.s32 	%r667, %r1003, %r865;
	add.s32 	%r669, %r1003, %r867;
	add.s32 	%r671, %r1003, %r872;
	add.s32 	%r673, %r1003, %r874;
	add.s32 	%r675, %r1003, %r879;
	add.s32 	%r677, %r1003, %r881;
	add.s32 	%r679, %r1003, %r886;
	add.s32 	%r681, %r1003, %r888;
	add.s32 	%r683, %r1003, %r893;
	add.s32 	%r685, %r1003, %r895;
	add.s32 	%r687, %r1003, %r900;
	add.s32 	%r689, %r1003, %r902;
	add.s32 	%r691, %r1003, %r907;
	add.s32 	%r693, %r1003, %r909;
	add.s32 	%r695, %r1003, %r914;
	add.s32 	%r697, %r1003, %r916;
	add.s32 	%r699, %r1003, %r921;
	add.s32 	%r701, %r1003, %r923;
	add.s32 	%r703, %r1003, %r928;
	add.s32 	%r705, %r1003, %r930;
	add.s32 	%r707, %r1003, %r935;
	add.s32 	%r709, %r1003, %r937;
	add.s32 	%r711, %r1003, %r942;
	add.s32 	%r713, %r1003, %r944;
	add.s32 	%r715, %r1003, %r949;
	add.s32 	%r717, %r1003, %r951;
	add.s32 	%r719, %r1003, %r956;
	add.s32 	%r721, %r1003, %r958;
	add.s32 	%r723, %r1003, %r963;
	selp.b32 	%r1004, 16, 0, %p72;
	selp.b32 	%r662, %r1004, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r661 + 0 ], [ %rd146 + 0 ], 0x10, %r662;
	// end inline asm
	selp.b32 	%r1005, 16, 0, %p73;
	selp.b32 	%r664, %r1005, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r663 + 0 ], [ %rd147 + 0 ], 0x10, %r664;
	// end inline asm
	selp.b32 	%r1006, 16, 0, %p74;
	selp.b32 	%r666, %r1006, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r665 + 0 ], [ %rd148 + 0 ], 0x10, %r666;
	// end inline asm
	selp.b32 	%r1007, 16, 0, %p75;
	selp.b32 	%r668, %r1007, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r667 + 0 ], [ %rd149 + 0 ], 0x10, %r668;
	// end inline asm
	selp.b32 	%r1008, 16, 0, %p76;
	selp.b32 	%r670, %r1008, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r669 + 0 ], [ %rd150 + 0 ], 0x10, %r670;
	// end inline asm
	selp.b32 	%r1009, 16, 0, %p77;
	selp.b32 	%r672, %r1009, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r671 + 0 ], [ %rd151 + 0 ], 0x10, %r672;
	// end inline asm
	selp.b32 	%r1010, 16, 0, %p78;
	selp.b32 	%r674, %r1010, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r673 + 0 ], [ %rd152 + 0 ], 0x10, %r674;
	// end inline asm
	selp.b32 	%r1011, 16, 0, %p79;
	selp.b32 	%r676, %r1011, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r675 + 0 ], [ %rd153 + 0 ], 0x10, %r676;
	// end inline asm
	selp.b32 	%r1012, 16, 0, %p80;
	selp.b32 	%r678, %r1012, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r677 + 0 ], [ %rd154 + 0 ], 0x10, %r678;
	// end inline asm
	selp.b32 	%r1013, 16, 0, %p81;
	selp.b32 	%r680, %r1013, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r679 + 0 ], [ %rd155 + 0 ], 0x10, %r680;
	// end inline asm
	selp.b32 	%r1014, 16, 0, %p82;
	selp.b32 	%r682, %r1014, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r681 + 0 ], [ %rd156 + 0 ], 0x10, %r682;
	// end inline asm
	selp.b32 	%r1015, 16, 0, %p83;
	selp.b32 	%r684, %r1015, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r683 + 0 ], [ %rd157 + 0 ], 0x10, %r684;
	// end inline asm
	selp.b32 	%r1016, 16, 0, %p84;
	selp.b32 	%r686, %r1016, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r685 + 0 ], [ %rd158 + 0 ], 0x10, %r686;
	// end inline asm
	selp.b32 	%r1017, 16, 0, %p85;
	selp.b32 	%r688, %r1017, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r687 + 0 ], [ %rd159 + 0 ], 0x10, %r688;
	// end inline asm
	selp.b32 	%r1018, 16, 0, %p86;
	selp.b32 	%r690, %r1018, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r689 + 0 ], [ %rd160 + 0 ], 0x10, %r690;
	// end inline asm
	selp.b32 	%r1019, 16, 0, %p87;
	selp.b32 	%r692, %r1019, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r691 + 0 ], [ %rd161 + 0 ], 0x10, %r692;
	// end inline asm
	selp.b32 	%r1020, 16, 0, %p88;
	selp.b32 	%r694, %r1020, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r693 + 0 ], [ %rd162 + 0 ], 0x10, %r694;
	// end inline asm
	selp.b32 	%r1021, 16, 0, %p89;
	selp.b32 	%r696, %r1021, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r695 + 0 ], [ %rd163 + 0 ], 0x10, %r696;
	// end inline asm
	selp.b32 	%r1022, 16, 0, %p90;
	selp.b32 	%r698, %r1022, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r697 + 0 ], [ %rd164 + 0 ], 0x10, %r698;
	// end inline asm
	selp.b32 	%r1023, 16, 0, %p91;
	selp.b32 	%r700, %r1023, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r699 + 0 ], [ %rd165 + 0 ], 0x10, %r700;
	// end inline asm
	selp.b32 	%r1024, 16, 0, %p92;
	selp.b32 	%r702, %r1024, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r701 + 0 ], [ %rd166 + 0 ], 0x10, %r702;
	// end inline asm
	selp.b32 	%r1025, 16, 0, %p93;
	selp.b32 	%r704, %r1025, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r703 + 0 ], [ %rd167 + 0 ], 0x10, %r704;
	// end inline asm
	selp.b32 	%r1026, 16, 0, %p94;
	selp.b32 	%r706, %r1026, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r705 + 0 ], [ %rd168 + 0 ], 0x10, %r706;
	// end inline asm
	selp.b32 	%r1027, 16, 0, %p95;
	selp.b32 	%r708, %r1027, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r707 + 0 ], [ %rd169 + 0 ], 0x10, %r708;
	// end inline asm
	selp.b32 	%r1028, 16, 0, %p96;
	selp.b32 	%r710, %r1028, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r709 + 0 ], [ %rd170 + 0 ], 0x10, %r710;
	// end inline asm
	selp.b32 	%r1029, 16, 0, %p97;
	selp.b32 	%r712, %r1029, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r711 + 0 ], [ %rd171 + 0 ], 0x10, %r712;
	// end inline asm
	selp.b32 	%r1030, 16, 0, %p98;
	selp.b32 	%r714, %r1030, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r713 + 0 ], [ %rd172 + 0 ], 0x10, %r714;
	// end inline asm
	selp.b32 	%r1031, 16, 0, %p99;
	selp.b32 	%r716, %r1031, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r715 + 0 ], [ %rd173 + 0 ], 0x10, %r716;
	// end inline asm
	selp.b32 	%r1032, 16, 0, %p100;
	selp.b32 	%r718, %r1032, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r717 + 0 ], [ %rd174 + 0 ], 0x10, %r718;
	// end inline asm
	selp.b32 	%r1033, 16, 0, %p101;
	selp.b32 	%r720, %r1033, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r719 + 0 ], [ %rd175 + 0 ], 0x10, %r720;
	// end inline asm
	selp.b32 	%r1034, 16, 0, %p102;
	selp.b32 	%r722, %r1034, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r721 + 0 ], [ %rd176 + 0 ], 0x10, %r722;
	// end inline asm
	selp.b32 	%r1035, 16, 0, %p103;
	selp.b32 	%r724, %r1035, 0, %p70;
	// begin inline asm
	cp.async.cg.shared.global [ %r723 + 0 ], [ %rd177 + 0 ], 0x10, %r724;
	// end inline asm
	cp.async.commit_group;
	mov.b32 	%r4120, 0f00000000;
	mov.b32 	%r4121, %r4120;
	mov.b32 	%r4122, %r4120;
	mov.b32 	%r4123, %r4120;
	mov.b32 	%r4124, %r4120;
	mov.b32 	%r4125, %r4120;
	mov.b32 	%r4126, %r4120;
	mov.b32 	%r4127, %r4120;
	mov.b32 	%r4128, %r4120;
	mov.b32 	%r4129, %r4120;
	mov.b32 	%r4130, %r4120;
	mov.b32 	%r4131, %r4120;
	mov.b32 	%r4132, %r4120;
	mov.b32 	%r4133, %r4120;
	mov.b32 	%r4134, %r4120;
	mov.b32 	%r4135, %r4120;
	mov.b32 	%r4136, %r4120;
	mov.b32 	%r4137, %r4120;
	mov.b32 	%r4138, %r4120;
	mov.b32 	%r4139, %r4120;
	mov.b32 	%r4140, %r4120;
	mov.b32 	%r4141, %r4120;
	mov.b32 	%r4142, %r4120;
	mov.b32 	%r4143, %r4120;
	mov.b32 	%r4144, %r4120;
	mov.b32 	%r4145, %r4120;
	mov.b32 	%r4146, %r4120;
	mov.b32 	%r4147, %r4120;
	mov.b32 	%r4148, %r4120;
	mov.b32 	%r4149, %r4120;
	mov.b32 	%r4150, %r4120;
	mov.b32 	%r4151, %r4120;
	mov.b32 	%r4152, %r4120;
	mov.b32 	%r4153, %r4120;
	mov.b32 	%r4154, %r4120;
	mov.b32 	%r4155, %r4120;
	mov.b32 	%r4156, %r4120;
	mov.b32 	%r4157, %r4120;
	mov.b32 	%r4158, %r4120;
	mov.b32 	%r4159, %r4120;
	mov.b32 	%r4160, %r4120;
	mov.b32 	%r4161, %r4120;
	mov.b32 	%r4162, %r4120;
	mov.b32 	%r4163, %r4120;
	mov.b32 	%r4164, %r4120;
	mov.b32 	%r4165, %r4120;
	mov.b32 	%r4166, %r4120;
	mov.b32 	%r4167, %r4120;
	mov.b32 	%r4168, %r4120;
	mov.b32 	%r4169, %r4120;
	mov.b32 	%r4170, %r4120;
	mov.b32 	%r4171, %r4120;
	mov.b32 	%r4172, %r4120;
	mov.b32 	%r4173, %r4120;
	mov.b32 	%r4174, %r4120;
	mov.b32 	%r4175, %r4120;
	mov.b32 	%r4176, %r4120;
	mov.b32 	%r4177, %r4120;
	mov.b32 	%r4178, %r4120;
	mov.b32 	%r4179, %r4120;
	mov.b32 	%r4180, %r4120;
	mov.b32 	%r4181, %r4120;
	mov.b32 	%r4182, %r4120;
	mov.b32 	%r4183, %r4120;
	mov.b32 	%r4184, %r4120;
	mov.b32 	%r4185, %r4120;
	mov.b32 	%r4186, %r4120;
	mov.b32 	%r4187, %r4120;
	mov.b32 	%r4188, %r4120;
	mov.b32 	%r4189, %r4120;
	mov.b32 	%r4190, %r4120;
	mov.b32 	%r4191, %r4120;
	mov.b32 	%r4192, %r4120;
	mov.b32 	%r4193, %r4120;
	mov.b32 	%r4194, %r4120;
	mov.b32 	%r4195, %r4120;
	mov.b32 	%r4196, %r4120;
	mov.b32 	%r4197, %r4120;
	mov.b32 	%r4198, %r4120;
	mov.b32 	%r4199, %r4120;
	mov.b32 	%r4200, %r4120;
	mov.b32 	%r4201, %r4120;
	mov.b32 	%r4202, %r4120;
	mov.b32 	%r4203, %r4120;
	mov.b32 	%r4204, %r4120;
	mov.b32 	%r4205, %r4120;
	mov.b32 	%r4206, %r4120;
	mov.b32 	%r4207, %r4120;
	mov.b32 	%r4208, %r4120;
	mov.b32 	%r4209, %r4120;
	mov.b32 	%r4210, %r4120;
	mov.b32 	%r4211, %r4120;
	mov.b32 	%r4212, %r4120;
	mov.b32 	%r4213, %r4120;
	mov.b32 	%r4214, %r4120;
	mov.b32 	%r4215, %r4120;
	mov.b32 	%r4216, %r4120;
	mov.b32 	%r4217, %r4120;
	mov.b32 	%r4218, %r4120;
	mov.b32 	%r4219, %r4120;
	mov.b32 	%r4220, %r4120;
	mov.b32 	%r4221, %r4120;
	mov.b32 	%r4222, %r4120;
	mov.b32 	%r4223, %r4120;
	mov.b32 	%r4224, %r4120;
	mov.b32 	%r4225, %r4120;
	mov.b32 	%r4226, %r4120;
	mov.b32 	%r4227, %r4120;
	mov.b32 	%r4228, %r4120;
	mov.b32 	%r4229, %r4120;
	mov.b32 	%r4230, %r4120;
	mov.b32 	%r4231, %r4120;
	mov.b32 	%r4232, %r4120;
	mov.b32 	%r4233, %r4120;
	mov.b32 	%r4234, %r4120;
	mov.b32 	%r4235, %r4120;
	mov.b32 	%r4236, %r4120;
	mov.b32 	%r4237, %r4120;
	mov.b32 	%r4238, %r4120;
	mov.b32 	%r4239, %r4120;
	mov.b32 	%r4240, %r4120;
	mov.b32 	%r4241, %r4120;
	mov.b32 	%r4242, %r4120;
	mov.b32 	%r4243, %r4120;
	mov.b32 	%r4244, %r4120;
	mov.b32 	%r4245, %r4120;
	mov.b32 	%r4246, %r4120;
	mov.b32 	%r4247, %r4120;
	.loc	1 120 22                        // gated_mlp.py:120:22
	@%p1 bra 	$L__BB0_3;
// %bb.1:                               // %.lr.ph
	.loc	1 0 22                          // gated_mlp.py:0:22
	cvt.s64.s32 	%rd1, %r775;
	cvt.s64.s32 	%rd2, %r776;
	cvt.s64.s32 	%rd3, %r777;
	cvt.s64.s32 	%rd4, %r778;
	cvt.s64.s32 	%rd5, %r779;
	cvt.s64.s32 	%rd6, %r780;
	cvt.s64.s32 	%rd7, %r781;
	cvt.s64.s32 	%rd8, %r782;
	cvt.s64.s32 	%rd9, %r783;
	cvt.s64.s32 	%rd10, %r784;
	cvt.s64.s32 	%rd11, %r785;
	cvt.s64.s32 	%rd12, %r790;
	cvt.s64.s32 	%rd13, %r798;
	cvt.s64.s32 	%rd14, %r806;
	shr.s32 	%r808, %r807, 31;
	shr.u32 	%r809, %r808, 25;
	add.s32 	%r810, %r807, %r809;
	shr.s32 	%r46, %r810, 7;
	cvt.s64.s32 	%rd15, %r811;
	add.s32 	%r87, %r46, -3;
	add.s32 	%r4117, %r482, -384;
	.loc	1 120 22                        // gated_mlp.py:120:22
	shl.b64 	%rd16, %rd14, 1;
	mad.lo.s64 	%rd336, %rd15, 6, %rd56;
	shl.b64 	%rd18, %rd15, 1;
	mad.lo.s32 	%r1041, %r483, %r44, %r12;
	mul.wide.s32 	%rd19, %r1041, 2;
	mad.lo.s32 	%r1043, %r483, %r43, %r12;
	mul.wide.s32 	%rd20, %r1043, 2;
	mad.lo.s32 	%r1045, %r483, %r42, %r12;
	mul.wide.s32 	%rd21, %r1045, 2;
	mad.lo.s32 	%r1047, %r483, %r41, %r12;
	mul.wide.s32 	%rd22, %r1047, 2;
	mad.lo.s32 	%r1049, %r483, %r40, %r12;
	mul.wide.s32 	%rd23, %r1049, 2;
	mad.lo.s32 	%r1051, %r483, %r39, %r12;
	mul.wide.s32 	%rd24, %r1051, 2;
	mad.lo.s32 	%r1053, %r483, %r38, %r12;
	mul.wide.s32 	%rd25, %r1053, 2;
	shl.b64 	%rd26, %rd13, 1;
	mad.lo.s32 	%r1055, %r483, %r36, %r12;
	mul.wide.s32 	%rd27, %r1055, 2;
	mad.lo.s32 	%r1057, %r483, %r35, %r12;
	mul.wide.s32 	%rd28, %r1057, 2;
	mad.lo.s32 	%r1059, %r483, %r34, %r12;
	mul.wide.s32 	%rd29, %r1059, 2;
	mad.lo.s32 	%r1061, %r483, %r33, %r12;
	mul.wide.s32 	%rd30, %r1061, 2;
	mad.lo.s32 	%r1063, %r483, %r32, %r12;
	mul.wide.s32 	%rd31, %r1063, 2;
	mad.lo.s32 	%r1065, %r483, %r31, %r12;
	mul.wide.s32 	%rd32, %r1065, 2;
	mad.lo.s32 	%r1067, %r483, %r30, %r12;
	mul.wide.s32 	%rd33, %r1067, 2;
	shl.b64 	%rd34, %rd12, 1;
	mad.lo.s32 	%r1069, %r483, %r28, %r12;
	mul.wide.s32 	%rd35, %r1069, 2;
	mad.lo.s32 	%r1071, %r483, %r27, %r12;
	mul.wide.s32 	%rd36, %r1071, 2;
	mad.lo.s32 	%r1073, %r483, %r26, %r12;
	mul.wide.s32 	%rd37, %r1073, 2;
	mad.lo.s32 	%r1075, %r483, %r25, %r12;
	mul.wide.s32 	%rd38, %r1075, 2;
	shl.b64 	%rd39, %rd11, 1;
	shl.b64 	%rd40, %rd10, 1;
	shl.b64 	%rd41, %rd9, 1;
	shl.b64 	%rd42, %rd8, 1;
	shl.b64 	%rd43, %rd7, 1;
	shl.b64 	%rd44, %rd6, 1;
	shl.b64 	%rd45, %rd5, 1;
	shl.b64 	%rd46, %rd4, 1;
	shl.b64 	%rd47, %rd3, 1;
	shl.b64 	%rd48, %rd2, 1;
	shl.b64 	%rd49, %rd1, 1;
	add.s32 	%r1076, %r8, %r7;
	mul.wide.u32 	%rd212, %r1076, 2;
	add.s64 	%rd213, %rd212, %rd55;
	add.s64 	%rd335, %rd213, 768;
	mov.b32 	%r3388, 0;
	mov.b32 	%r4120, 0f00000000;
	mov.b32 	%r4119, 2;
	mov.b32 	%r4118, -1;
	mov.b32 	%r4121, %r4120;
	mov.b32 	%r4122, %r4120;
	mov.b32 	%r4123, %r4120;
	mov.b32 	%r4124, %r4120;
	mov.b32 	%r4125, %r4120;
	mov.b32 	%r4126, %r4120;
	mov.b32 	%r4127, %r4120;
	mov.b32 	%r4128, %r4120;
	mov.b32 	%r4129, %r4120;
	mov.b32 	%r4130, %r4120;
	mov.b32 	%r4131, %r4120;
	mov.b32 	%r4132, %r4120;
	mov.b32 	%r4133, %r4120;
	mov.b32 	%r4134, %r4120;
	mov.b32 	%r4135, %r4120;
	mov.b32 	%r4136, %r4120;
	mov.b32 	%r4137, %r4120;
	mov.b32 	%r4138, %r4120;
	mov.b32 	%r4139, %r4120;
	mov.b32 	%r4140, %r4120;
	mov.b32 	%r4141, %r4120;
	mov.b32 	%r4142, %r4120;
	mov.b32 	%r4143, %r4120;
	mov.b32 	%r4144, %r4120;
	mov.b32 	%r4145, %r4120;
	mov.b32 	%r4146, %r4120;
	mov.b32 	%r4147, %r4120;
	mov.b32 	%r4148, %r4120;
	mov.b32 	%r4149, %r4120;
	mov.b32 	%r4150, %r4120;
	mov.b32 	%r4151, %r4120;
	mov.b32 	%r4152, %r4120;
	mov.b32 	%r4153, %r4120;
	mov.b32 	%r4154, %r4120;
	mov.b32 	%r4155, %r4120;
	mov.b32 	%r4156, %r4120;
	mov.b32 	%r4157, %r4120;
	mov.b32 	%r4158, %r4120;
	mov.b32 	%r4159, %r4120;
	mov.b32 	%r4160, %r4120;
	mov.b32 	%r4161, %r4120;
	mov.b32 	%r4162, %r4120;
	mov.b32 	%r4163, %r4120;
	mov.b32 	%r4164, %r4120;
	mov.b32 	%r4165, %r4120;
	mov.b32 	%r4166, %r4120;
	mov.b32 	%r4167, %r4120;
	mov.b32 	%r4168, %r4120;
	mov.b32 	%r4169, %r4120;
	mov.b32 	%r4170, %r4120;
	mov.b32 	%r4171, %r4120;
	mov.b32 	%r4172, %r4120;
	mov.b32 	%r4173, %r4120;
	mov.b32 	%r4174, %r4120;
	mov.b32 	%r4175, %r4120;
	mov.b32 	%r4176, %r4120;
	mov.b32 	%r4177, %r4120;
	mov.b32 	%r4178, %r4120;
	mov.b32 	%r4179, %r4120;
	mov.b32 	%r4180, %r4120;
	mov.b32 	%r4181, %r4120;
	mov.b32 	%r4182, %r4120;
	mov.b32 	%r4183, %r4120;
	mov.b32 	%r4184, %r4120;
	mov.b32 	%r4185, %r4120;
	mov.b32 	%r4186, %r4120;
	mov.b32 	%r4187, %r4120;
	mov.b32 	%r4188, %r4120;
	mov.b32 	%r4189, %r4120;
	mov.b32 	%r4190, %r4120;
	mov.b32 	%r4191, %r4120;
	mov.b32 	%r4192, %r4120;
	mov.b32 	%r4193, %r4120;
	mov.b32 	%r4194, %r4120;
	mov.b32 	%r4195, %r4120;
	mov.b32 	%r4196, %r4120;
	mov.b32 	%r4197, %r4120;
	mov.b32 	%r4198, %r4120;
	mov.b32 	%r4199, %r4120;
	mov.b32 	%r4200, %r4120;
	mov.b32 	%r4201, %r4120;
	mov.b32 	%r4202, %r4120;
	mov.b32 	%r4203, %r4120;
	mov.b32 	%r4204, %r4120;
	mov.b32 	%r4205, %r4120;
	mov.b32 	%r4206, %r4120;
	mov.b32 	%r4207, %r4120;
	mov.b32 	%r4208, %r4120;
	mov.b32 	%r4209, %r4120;
	mov.b32 	%r4210, %r4120;
	mov.b32 	%r4211, %r4120;
	mov.b32 	%r4212, %r4120;
	mov.b32 	%r4213, %r4120;
	mov.b32 	%r4214, %r4120;
	mov.b32 	%r4215, %r4120;
	mov.b32 	%r4216, %r4120;
	mov.b32 	%r4217, %r4120;
	mov.b32 	%r4218, %r4120;
	mov.b32 	%r4219, %r4120;
	mov.b32 	%r4220, %r4120;
	mov.b32 	%r4221, %r4120;
	mov.b32 	%r4222, %r4120;
	mov.b32 	%r4223, %r4120;
	mov.b32 	%r4224, %r4120;
	mov.b32 	%r4225, %r4120;
	mov.b32 	%r4226, %r4120;
	mov.b32 	%r4227, %r4120;
	mov.b32 	%r4228, %r4120;
	mov.b32 	%r4229, %r4120;
	mov.b32 	%r4230, %r4120;
	mov.b32 	%r4231, %r4120;
	mov.b32 	%r4232, %r4120;
	mov.b32 	%r4233, %r4120;
	mov.b32 	%r4234, %r4120;
	mov.b32 	%r4235, %r4120;
	mov.b32 	%r4236, %r4120;
	mov.b32 	%r4237, %r4120;
	mov.b32 	%r4238, %r4120;
	mov.b32 	%r4239, %r4120;
	mov.b32 	%r4240, %r4120;
	mov.b32 	%r4241, %r4120;
	mov.b32 	%r4242, %r4120;
	mov.b32 	%r4243, %r4120;
	mov.b32 	%r4244, %r4120;
	mov.b32 	%r4245, %r4120;
	mov.b32 	%r4246, %r4120;
	mov.b32 	%r4247, %r4120;
	mov.b32 	%r4248, %r3388;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	setp.lt.s32 	%p112, %r4248, %r87;
	add.s32 	%r3473, %r4118, 1;
	setp.gt.s32 	%p113, %r3473, 3;
	selp.b32 	%r4118, 0, %r3473, %p113;
	.loc	1 123 20                        // gated_mlp.py:123:20
	cp.async.wait_group 	4;
	bar.sync 	0;
	shl.b32 	%r3474, %r4118, 14;
	add.s32 	%r3253, %r821, %r3474;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r3477, %r4118, 16;
	add.s32 	%r3256, %r820, %r3477;
	.loc	1 126 35                        // gated_mlp.py:126:35
	shfl.sync.idx.b32 	%r3478, %r13, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r3479, %r3253, 4, 14;
	cvt.u64.u32 	%rd270, %r3479;
	or.b64 	%rd214, %rd270, 4611686293338849280;
	bfe.u32 	%r3480, %r3256, 4, 14;
	cvt.u64.u32 	%rd271, %r3480;
	or.b64 	%rd215, %rd271, 4611686293372403712;
	mov.pred 	%p104, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n256k16.f32.f16.f16 {%r4120,%r4121,%r4122,%r4123,%r4124,%r4125,%r4126,%r4127,%r4128,%r4129,%r4130,%r4131,%r4132,%r4133,%r4134,%r4135,%r4136,%r4137,%r4138,%r4139,%r4140,%r4141,%r4142,%r4143,%r4144,%r4145,%r4146,%r4147,%r4148,%r4149,%r4150,%r4151,%r4152,%r4153,%r4154,%r4155,%r4156,%r4157,%r4158,%r4159,%r4160,%r4161,%r4162,%r4163,%r4164,%r4165,%r4166,%r4167,%r4168,%r4169,%r4170,%r4171,%r4172,%r4173,%r4174,%r4175,%r4176,%r4177,%r4178,%r4179,%r4180,%r4181,%r4182,%r4183,%r4184,%r4185,%r4186,%r4187,%r4188,%r4189,%r4190,%r4191,%r4192,%r4193,%r4194,%r4195,%r4196,%r4197,%r4198,%r4199,%r4200,%r4201,%r4202,%r4203,%r4204,%r4205,%r4206,%r4207,%r4208,%r4209,%r4210,%r4211,%r4212,%r4213,%r4214,%r4215,%r4216,%r4217,%r4218,%r4219,%r4220,%r4221,%r4222,%r4223,%r4224,%r4225,%r4226,%r4227,%r4228,%r4229,%r4230,%r4231,%r4232,%r4233,%r4234,%r4235,%r4236,%r4237,%r4238,%r4239,%r4240,%r4241,%r4242,%r4243,%r4244,%r4245,%r4246,%r4247}, %rd214, %rd215, %p104, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3481, %r3253, 32;
	bfe.u32 	%r3482, %r3481, 4, 14;
	cvt.u64.u32 	%rd272, %r3482;
	or.b64 	%rd216, %rd272, 4611686293338849280;
	add.s32 	%r3483, %r3256, 2048;
	bfe.u32 	%r3484, %r3483, 4, 14;
	cvt.u64.u32 	%rd273, %r3484;
	or.b64 	%rd217, %rd273, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n256k16.f32.f16.f16 {%r4120,%r4121,%r4122,%r4123,%r4124,%r4125,%r4126,%r4127,%r4128,%r4129,%r4130,%r4131,%r4132,%r4133,%r4134,%r4135,%r4136,%r4137,%r4138,%r4139,%r4140,%r4141,%r4142,%r4143,%r4144,%r4145,%r4146,%r4147,%r4148,%r4149,%r4150,%r4151,%r4152,%r4153,%r4154,%r4155,%r4156,%r4157,%r4158,%r4159,%r4160,%r4161,%r4162,%r4163,%r4164,%r4165,%r4166,%r4167,%r4168,%r4169,%r4170,%r4171,%r4172,%r4173,%r4174,%r4175,%r4176,%r4177,%r4178,%r4179,%r4180,%r4181,%r4182,%r4183,%r4184,%r4185,%r4186,%r4187,%r4188,%r4189,%r4190,%r4191,%r4192,%r4193,%r4194,%r4195,%r4196,%r4197,%r4198,%r4199,%r4200,%r4201,%r4202,%r4203,%r4204,%r4205,%r4206,%r4207,%r4208,%r4209,%r4210,%r4211,%r4212,%r4213,%r4214,%r4215,%r4216,%r4217,%r4218,%r4219,%r4220,%r4221,%r4222,%r4223,%r4224,%r4225,%r4226,%r4227,%r4228,%r4229,%r4230,%r4231,%r4232,%r4233,%r4234,%r4235,%r4236,%r4237,%r4238,%r4239,%r4240,%r4241,%r4242,%r4243,%r4244,%r4245,%r4246,%r4247}, %rd216, %rd217, %p104, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3485, %r3253, 64;
	bfe.u32 	%r3486, %r3485, 4, 14;
	cvt.u64.u32 	%rd274, %r3486;
	or.b64 	%rd218, %rd274, 4611686293338849280;
	add.s32 	%r3487, %r3256, 4096;
	bfe.u32 	%r3488, %r3487, 4, 14;
	cvt.u64.u32 	%rd275, %r3488;
	or.b64 	%rd219, %rd275, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n256k16.f32.f16.f16 {%r4120,%r4121,%r4122,%r4123,%r4124,%r4125,%r4126,%r4127,%r4128,%r4129,%r4130,%r4131,%r4132,%r4133,%r4134,%r4135,%r4136,%r4137,%r4138,%r4139,%r4140,%r4141,%r4142,%r4143,%r4144,%r4145,%r4146,%r4147,%r4148,%r4149,%r4150,%r4151,%r4152,%r4153,%r4154,%r4155,%r4156,%r4157,%r4158,%r4159,%r4160,%r4161,%r4162,%r4163,%r4164,%r4165,%r4166,%r4167,%r4168,%r4169,%r4170,%r4171,%r4172,%r4173,%r4174,%r4175,%r4176,%r4177,%r4178,%r4179,%r4180,%r4181,%r4182,%r4183,%r4184,%r4185,%r4186,%r4187,%r4188,%r4189,%r4190,%r4191,%r4192,%r4193,%r4194,%r4195,%r4196,%r4197,%r4198,%r4199,%r4200,%r4201,%r4202,%r4203,%r4204,%r4205,%r4206,%r4207,%r4208,%r4209,%r4210,%r4211,%r4212,%r4213,%r4214,%r4215,%r4216,%r4217,%r4218,%r4219,%r4220,%r4221,%r4222,%r4223,%r4224,%r4225,%r4226,%r4227,%r4228,%r4229,%r4230,%r4231,%r4232,%r4233,%r4234,%r4235,%r4236,%r4237,%r4238,%r4239,%r4240,%r4241,%r4242,%r4243,%r4244,%r4245,%r4246,%r4247}, %rd218, %rd219, %p104, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3489, %r3253, 96;
	bfe.u32 	%r3490, %r3489, 4, 14;
	cvt.u64.u32 	%rd276, %r3490;
	or.b64 	%rd220, %rd276, 4611686293338849280;
	add.s32 	%r3491, %r3256, 6144;
	bfe.u32 	%r3492, %r3491, 4, 14;
	cvt.u64.u32 	%rd277, %r3492;
	or.b64 	%rd221, %rd277, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n256k16.f32.f16.f16 {%r4120,%r4121,%r4122,%r4123,%r4124,%r4125,%r4126,%r4127,%r4128,%r4129,%r4130,%r4131,%r4132,%r4133,%r4134,%r4135,%r4136,%r4137,%r4138,%r4139,%r4140,%r4141,%r4142,%r4143,%r4144,%r4145,%r4146,%r4147,%r4148,%r4149,%r4150,%r4151,%r4152,%r4153,%r4154,%r4155,%r4156,%r4157,%r4158,%r4159,%r4160,%r4161,%r4162,%r4163,%r4164,%r4165,%r4166,%r4167,%r4168,%r4169,%r4170,%r4171,%r4172,%r4173,%r4174,%r4175,%r4176,%r4177,%r4178,%r4179,%r4180,%r4181,%r4182,%r4183,%r4184,%r4185,%r4186,%r4187,%r4188,%r4189,%r4190,%r4191,%r4192,%r4193,%r4194,%r4195,%r4196,%r4197,%r4198,%r4199,%r4200,%r4201,%r4202,%r4203,%r4204,%r4205,%r4206,%r4207,%r4208,%r4209,%r4210,%r4211,%r4212,%r4213,%r4214,%r4215,%r4216,%r4217,%r4218,%r4219,%r4220,%r4221,%r4222,%r4223,%r4224,%r4225,%r4226,%r4227,%r4228,%r4229,%r4230,%r4231,%r4232,%r4233,%r4234,%r4235,%r4236,%r4237,%r4238,%r4239,%r4240,%r4241,%r4242,%r4243,%r4244,%r4245,%r4246,%r4247}, %rd220, %rd221, %p104, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3493, %r3253, 8192;
	bfe.u32 	%r3494, %r3493, 4, 14;
	cvt.u64.u32 	%rd278, %r3494;
	or.b64 	%rd222, %rd278, 4611686293338849280;
	add.s32 	%r3495, %r3256, 8192;
	bfe.u32 	%r3496, %r3495, 4, 14;
	cvt.u64.u32 	%rd279, %r3496;
	or.b64 	%rd223, %rd279, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n256k16.f32.f16.f16 {%r4120,%r4121,%r4122,%r4123,%r4124,%r4125,%r4126,%r4127,%r4128,%r4129,%r4130,%r4131,%r4132,%r4133,%r4134,%r4135,%r4136,%r4137,%r4138,%r4139,%r4140,%r4141,%r4142,%r4143,%r4144,%r4145,%r4146,%r4147,%r4148,%r4149,%r4150,%r4151,%r4152,%r4153,%r4154,%r4155,%r4156,%r4157,%r4158,%r4159,%r4160,%r4161,%r4162,%r4163,%r4164,%r4165,%r4166,%r4167,%r4168,%r4169,%r4170,%r4171,%r4172,%r4173,%r4174,%r4175,%r4176,%r4177,%r4178,%r4179,%r4180,%r4181,%r4182,%r4183,%r4184,%r4185,%r4186,%r4187,%r4188,%r4189,%r4190,%r4191,%r4192,%r4193,%r4194,%r4195,%r4196,%r4197,%r4198,%r4199,%r4200,%r4201,%r4202,%r4203,%r4204,%r4205,%r4206,%r4207,%r4208,%r4209,%r4210,%r4211,%r4212,%r4213,%r4214,%r4215,%r4216,%r4217,%r4218,%r4219,%r4220,%r4221,%r4222,%r4223,%r4224,%r4225,%r4226,%r4227,%r4228,%r4229,%r4230,%r4231,%r4232,%r4233,%r4234,%r4235,%r4236,%r4237,%r4238,%r4239,%r4240,%r4241,%r4242,%r4243,%r4244,%r4245,%r4246,%r4247}, %rd222, %rd223, %p104, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3497, %r3253, 8224;
	bfe.u32 	%r3498, %r3497, 4, 14;
	cvt.u64.u32 	%rd280, %r3498;
	or.b64 	%rd224, %rd280, 4611686293338849280;
	add.s32 	%r3499, %r3256, 10240;
	bfe.u32 	%r3500, %r3499, 4, 14;
	cvt.u64.u32 	%rd281, %r3500;
	or.b64 	%rd225, %rd281, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n256k16.f32.f16.f16 {%r4120,%r4121,%r4122,%r4123,%r4124,%r4125,%r4126,%r4127,%r4128,%r4129,%r4130,%r4131,%r4132,%r4133,%r4134,%r4135,%r4136,%r4137,%r4138,%r4139,%r4140,%r4141,%r4142,%r4143,%r4144,%r4145,%r4146,%r4147,%r4148,%r4149,%r4150,%r4151,%r4152,%r4153,%r4154,%r4155,%r4156,%r4157,%r4158,%r4159,%r4160,%r4161,%r4162,%r4163,%r4164,%r4165,%r4166,%r4167,%r4168,%r4169,%r4170,%r4171,%r4172,%r4173,%r4174,%r4175,%r4176,%r4177,%r4178,%r4179,%r4180,%r4181,%r4182,%r4183,%r4184,%r4185,%r4186,%r4187,%r4188,%r4189,%r4190,%r4191,%r4192,%r4193,%r4194,%r4195,%r4196,%r4197,%r4198,%r4199,%r4200,%r4201,%r4202,%r4203,%r4204,%r4205,%r4206,%r4207,%r4208,%r4209,%r4210,%r4211,%r4212,%r4213,%r4214,%r4215,%r4216,%r4217,%r4218,%r4219,%r4220,%r4221,%r4222,%r4223,%r4224,%r4225,%r4226,%r4227,%r4228,%r4229,%r4230,%r4231,%r4232,%r4233,%r4234,%r4235,%r4236,%r4237,%r4238,%r4239,%r4240,%r4241,%r4242,%r4243,%r4244,%r4245,%r4246,%r4247}, %rd224, %rd225, %p104, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3501, %r3253, 8256;
	bfe.u32 	%r3502, %r3501, 4, 14;
	cvt.u64.u32 	%rd282, %r3502;
	or.b64 	%rd226, %rd282, 4611686293338849280;
	add.s32 	%r3503, %r3256, 12288;
	bfe.u32 	%r3504, %r3503, 4, 14;
	cvt.u64.u32 	%rd283, %r3504;
	or.b64 	%rd227, %rd283, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n256k16.f32.f16.f16 {%r4120,%r4121,%r4122,%r4123,%r4124,%r4125,%r4126,%r4127,%r4128,%r4129,%r4130,%r4131,%r4132,%r4133,%r4134,%r4135,%r4136,%r4137,%r4138,%r4139,%r4140,%r4141,%r4142,%r4143,%r4144,%r4145,%r4146,%r4147,%r4148,%r4149,%r4150,%r4151,%r4152,%r4153,%r4154,%r4155,%r4156,%r4157,%r4158,%r4159,%r4160,%r4161,%r4162,%r4163,%r4164,%r4165,%r4166,%r4167,%r4168,%r4169,%r4170,%r4171,%r4172,%r4173,%r4174,%r4175,%r4176,%r4177,%r4178,%r4179,%r4180,%r4181,%r4182,%r4183,%r4184,%r4185,%r4186,%r4187,%r4188,%r4189,%r4190,%r4191,%r4192,%r4193,%r4194,%r4195,%r4196,%r4197,%r4198,%r4199,%r4200,%r4201,%r4202,%r4203,%r4204,%r4205,%r4206,%r4207,%r4208,%r4209,%r4210,%r4211,%r4212,%r4213,%r4214,%r4215,%r4216,%r4217,%r4218,%r4219,%r4220,%r4221,%r4222,%r4223,%r4224,%r4225,%r4226,%r4227,%r4228,%r4229,%r4230,%r4231,%r4232,%r4233,%r4234,%r4235,%r4236,%r4237,%r4238,%r4239,%r4240,%r4241,%r4242,%r4243,%r4244,%r4245,%r4246,%r4247}, %rd226, %rd227, %p104, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3505, %r3253, 8288;
	bfe.u32 	%r3506, %r3505, 4, 14;
	cvt.u64.u32 	%rd284, %r3506;
	or.b64 	%rd228, %rd284, 4611686293338849280;
	add.s32 	%r3507, %r3256, 14336;
	bfe.u32 	%r3508, %r3507, 4, 14;
	cvt.u64.u32 	%rd285, %r3508;
	or.b64 	%rd229, %rd285, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n256k16.f32.f16.f16 {%r4120,%r4121,%r4122,%r4123,%r4124,%r4125,%r4126,%r4127,%r4128,%r4129,%r4130,%r4131,%r4132,%r4133,%r4134,%r4135,%r4136,%r4137,%r4138,%r4139,%r4140,%r4141,%r4142,%r4143,%r4144,%r4145,%r4146,%r4147,%r4148,%r4149,%r4150,%r4151,%r4152,%r4153,%r4154,%r4155,%r4156,%r4157,%r4158,%r4159,%r4160,%r4161,%r4162,%r4163,%r4164,%r4165,%r4166,%r4167,%r4168,%r4169,%r4170,%r4171,%r4172,%r4173,%r4174,%r4175,%r4176,%r4177,%r4178,%r4179,%r4180,%r4181,%r4182,%r4183,%r4184,%r4185,%r4186,%r4187,%r4188,%r4189,%r4190,%r4191,%r4192,%r4193,%r4194,%r4195,%r4196,%r4197,%r4198,%r4199,%r4200,%r4201,%r4202,%r4203,%r4204,%r4205,%r4206,%r4207,%r4208,%r4209,%r4210,%r4211,%r4212,%r4213,%r4214,%r4215,%r4216,%r4217,%r4218,%r4219,%r4220,%r4221,%r4222,%r4223,%r4224,%r4225,%r4226,%r4227,%r4228,%r4229,%r4230,%r4231,%r4232,%r4233,%r4234,%r4235,%r4236,%r4237,%r4238,%r4239,%r4240,%r4241,%r4242,%r4243,%r4244,%r4245,%r4246,%r4247}, %rd228, %rd229, %p104, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r3258, %r3388;
	mov.b32 	%r3254, %r3388;
	mov.b32 	%r3255, %r3388;
	mov.b32 	%r3257, %r3388;
	// begin inline asm
	// wait for regs: %r4120,%r4121,%r4122,%r4123,%r4124,%r4125,%r4126,%r4127,%r4128,%r4129,%r4130,%r4131,%r4132,%r4133,%r4134,%r4135,%r4136,%r4137,%r4138,%r4139,%r4140,%r4141,%r4142,%r4143,%r4144,%r4145,%r4146,%r4147,%r4148,%r4149,%r4150,%r4151,%r4152,%r4153,%r4154,%r4155,%r4156,%r4157,%r4158,%r4159,%r4160,%r4161,%r4162,%r4163,%r4164,%r4165,%r4166,%r4167,%r4168,%r4169,%r4170,%r4171,%r4172,%r4173,%r4174,%r4175,%r4176,%r4177,%r4178,%r4179,%r4180,%r4181,%r4182,%r4183,%r4184,%r4185,%r4186,%r4187,%r4188,%r4189,%r4190,%r4191,%r4192,%r4193,%r4194,%r4195,%r4196,%r4197,%r4198,%r4199,%r4200,%r4201,%r4202,%r4203,%r4204,%r4205,%r4206,%r4207,%r4208,%r4209,%r4210,%r4211,%r4212,%r4213,%r4214,%r4215,%r4216,%r4217,%r4218,%r4219,%r4220,%r4221,%r4222,%r4223,%r4224,%r4225,%r4226,%r4227,%r4228,%r4229,%r4230,%r4231,%r4232,%r4233,%r4234,%r4235,%r4236,%r4237,%r4238,%r4239,%r4240,%r4241,%r4242,%r4243,%r4244,%r4245,%r4246,%r4247,%r3253,%r3254,%r3255,%r3256,%r3257,%r3258
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 129 18                        // gated_mlp.py:129:18
	add.s64 	%rd238, %rd336, %rd49;
	add.s64 	%rd239, %rd336, %rd48;
	add.s64 	%rd240, %rd336, %rd47;
	add.s64 	%rd241, %rd336, %rd46;
	add.s64 	%rd242, %rd336, %rd45;
	add.s64 	%rd243, %rd336, %rd44;
	add.s64 	%rd244, %rd336, %rd43;
	add.s64 	%rd245, %rd336, %rd42;
	add.s64 	%rd246, %rd336, %rd41;
	add.s64 	%rd247, %rd336, %rd40;
	add.s64 	%rd248, %rd336, %rd39;
	add.s64 	%rd249, %rd336, %rd38;
	add.s64 	%rd250, %rd336, %rd37;
	add.s64 	%rd251, %rd336, %rd36;
	add.s64 	%rd252, %rd336, %rd35;
	add.s64 	%rd253, %rd336, %rd34;
	add.s64 	%rd254, %rd336, %rd33;
	add.s64 	%rd255, %rd336, %rd32;
	add.s64 	%rd256, %rd336, %rd31;
	add.s64 	%rd257, %rd336, %rd30;
	add.s64 	%rd258, %rd336, %rd29;
	add.s64 	%rd259, %rd336, %rd28;
	add.s64 	%rd260, %rd336, %rd27;
	add.s64 	%rd261, %rd336, %rd26;
	add.s64 	%rd262, %rd336, %rd25;
	add.s64 	%rd263, %rd336, %rd24;
	add.s64 	%rd264, %rd336, %rd23;
	add.s64 	%rd265, %rd336, %rd22;
	add.s64 	%rd266, %rd336, %rd21;
	add.s64 	%rd267, %rd336, %rd20;
	add.s64 	%rd268, %rd336, %rd19;
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s64 	%rd269, %rd336, %rd16;
	add.s32 	%r3509, %r4119, 1;
	setp.gt.s32 	%p114, %r3509, 3;
	selp.b32 	%r4119, 0, %r3509, %p114;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p115, %r9, %r4117;
	.loc	1 123 20                        // gated_mlp.py:123:20
	shl.b32 	%r3510, %r4119, 14;
	add.s32 	%r3511, %r821, %r3510;
	bar.sync 	0;
	add.s32 	%r3393, %r3511, %r819;
	add.s32 	%r3395, %r3511, %r825;
	add.s32 	%r3397, %r3511, %r828;
	add.s32 	%r3399, %r3511, %r831;
	add.s32 	%r3401, %r3511, %r834;
	add.s32 	%r3403, %r3511, %r837;
	add.s32 	%r3405, %r3511, %r840;
	add.s32 	%r3407, %r3511, %r843;
	selp.b32 	%r3520, 16, 0, %p115;
	selp.b32 	%r3396, %r3520, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3393 + 0 ], [ %rd335 + 0 ], 0x10, %r3396;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3395 + 0 ], [ %rd335 + 0 ], 0x10, %r3396;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3397 + 0 ], [ %rd335 + 0 ], 0x10, %r3396;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3399 + 0 ], [ %rd335 + 0 ], 0x10, %r3396;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3401 + 0 ], [ %rd335 + 0 ], 0x10, %r3396;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3403 + 0 ], [ %rd335 + 0 ], 0x10, %r3396;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3405 + 0 ], [ %rd335 + 0 ], 0x10, %r3396;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3407 + 0 ], [ %rd335 + 0 ], 0x10, %r3396;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p116, %r14, %r4117;
	setp.lt.s32 	%p117, %r15, %r4117;
	setp.lt.s32 	%p118, %r16, %r4117;
	setp.lt.s32 	%p119, %r17, %r4117;
	setp.lt.s32 	%p120, %r18, %r4117;
	setp.lt.s32 	%p121, %r19, %r4117;
	setp.lt.s32 	%p122, %r20, %r4117;
	setp.lt.s32 	%p123, %r21, %r4117;
	setp.lt.s32 	%p124, %r22, %r4117;
	setp.lt.s32 	%p125, %r23, %r4117;
	setp.lt.s32 	%p126, %r24, %r4117;
	setp.lt.s32 	%p127, %r25, %r4117;
	setp.lt.s32 	%p128, %r26, %r4117;
	setp.lt.s32 	%p129, %r27, %r4117;
	setp.lt.s32 	%p130, %r28, %r4117;
	setp.lt.s32 	%p131, %r29, %r4117;
	setp.lt.s32 	%p132, %r30, %r4117;
	setp.lt.s32 	%p133, %r31, %r4117;
	setp.lt.s32 	%p134, %r32, %r4117;
	setp.lt.s32 	%p135, %r33, %r4117;
	setp.lt.s32 	%p136, %r34, %r4117;
	setp.lt.s32 	%p137, %r35, %r4117;
	setp.lt.s32 	%p138, %r36, %r4117;
	setp.lt.s32 	%p139, %r37, %r4117;
	setp.lt.s32 	%p140, %r38, %r4117;
	setp.lt.s32 	%p141, %r39, %r4117;
	setp.lt.s32 	%p142, %r40, %r4117;
	setp.lt.s32 	%p143, %r41, %r4117;
	setp.lt.s32 	%p144, %r42, %r4117;
	setp.lt.s32 	%p145, %r43, %r4117;
	setp.lt.s32 	%p146, %r44, %r4117;
	setp.lt.s32 	%p147, %r45, %r4117;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r3521, %r4119, 16;
	add.s32 	%r3522, %r820, %r3521;
	add.s32 	%r3409, %r3522, %r852;
	add.s32 	%r3411, %r3522, %r857;
	add.s32 	%r3413, %r3522, %r860;
	add.s32 	%r3415, %r3522, %r865;
	add.s32 	%r3417, %r3522, %r867;
	add.s32 	%r3419, %r3522, %r872;
	add.s32 	%r3421, %r3522, %r874;
	add.s32 	%r3423, %r3522, %r879;
	add.s32 	%r3425, %r3522, %r881;
	add.s32 	%r3427, %r3522, %r886;
	add.s32 	%r3429, %r3522, %r888;
	add.s32 	%r3431, %r3522, %r893;
	add.s32 	%r3433, %r3522, %r895;
	add.s32 	%r3435, %r3522, %r900;
	add.s32 	%r3437, %r3522, %r902;
	add.s32 	%r3439, %r3522, %r907;
	add.s32 	%r3441, %r3522, %r909;
	add.s32 	%r3443, %r3522, %r914;
	add.s32 	%r3445, %r3522, %r916;
	add.s32 	%r3447, %r3522, %r921;
	add.s32 	%r3449, %r3522, %r923;
	add.s32 	%r3451, %r3522, %r928;
	add.s32 	%r3453, %r3522, %r930;
	add.s32 	%r3455, %r3522, %r935;
	add.s32 	%r3457, %r3522, %r937;
	add.s32 	%r3459, %r3522, %r942;
	add.s32 	%r3461, %r3522, %r944;
	add.s32 	%r3463, %r3522, %r949;
	add.s32 	%r3465, %r3522, %r951;
	add.s32 	%r3467, %r3522, %r956;
	add.s32 	%r3469, %r3522, %r958;
	add.s32 	%r3471, %r3522, %r963;
	selp.b32 	%r3555, 16, 0, %p116;
	selp.b32 	%r3410, %r3555, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3409 + 0 ], [ %rd238 + 0 ], 0x10, %r3410;
	// end inline asm
	selp.b32 	%r3556, 16, 0, %p117;
	selp.b32 	%r3412, %r3556, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3411 + 0 ], [ %rd239 + 0 ], 0x10, %r3412;
	// end inline asm
	selp.b32 	%r3557, 16, 0, %p118;
	selp.b32 	%r3414, %r3557, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3413 + 0 ], [ %rd240 + 0 ], 0x10, %r3414;
	// end inline asm
	selp.b32 	%r3558, 16, 0, %p119;
	selp.b32 	%r3416, %r3558, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3415 + 0 ], [ %rd241 + 0 ], 0x10, %r3416;
	// end inline asm
	selp.b32 	%r3559, 16, 0, %p120;
	selp.b32 	%r3418, %r3559, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3417 + 0 ], [ %rd242 + 0 ], 0x10, %r3418;
	// end inline asm
	selp.b32 	%r3560, 16, 0, %p121;
	selp.b32 	%r3420, %r3560, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3419 + 0 ], [ %rd243 + 0 ], 0x10, %r3420;
	// end inline asm
	selp.b32 	%r3561, 16, 0, %p122;
	selp.b32 	%r3422, %r3561, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3421 + 0 ], [ %rd244 + 0 ], 0x10, %r3422;
	// end inline asm
	selp.b32 	%r3562, 16, 0, %p123;
	selp.b32 	%r3424, %r3562, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3423 + 0 ], [ %rd245 + 0 ], 0x10, %r3424;
	// end inline asm
	selp.b32 	%r3563, 16, 0, %p124;
	selp.b32 	%r3426, %r3563, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3425 + 0 ], [ %rd246 + 0 ], 0x10, %r3426;
	// end inline asm
	selp.b32 	%r3564, 16, 0, %p125;
	selp.b32 	%r3428, %r3564, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3427 + 0 ], [ %rd247 + 0 ], 0x10, %r3428;
	// end inline asm
	selp.b32 	%r3565, 16, 0, %p126;
	selp.b32 	%r3430, %r3565, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3429 + 0 ], [ %rd248 + 0 ], 0x10, %r3430;
	// end inline asm
	selp.b32 	%r3566, 16, 0, %p127;
	selp.b32 	%r3432, %r3566, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3431 + 0 ], [ %rd249 + 0 ], 0x10, %r3432;
	// end inline asm
	selp.b32 	%r3567, 16, 0, %p128;
	selp.b32 	%r3434, %r3567, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3433 + 0 ], [ %rd250 + 0 ], 0x10, %r3434;
	// end inline asm
	selp.b32 	%r3568, 16, 0, %p129;
	selp.b32 	%r3436, %r3568, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3435 + 0 ], [ %rd251 + 0 ], 0x10, %r3436;
	// end inline asm
	selp.b32 	%r3569, 16, 0, %p130;
	selp.b32 	%r3438, %r3569, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3437 + 0 ], [ %rd252 + 0 ], 0x10, %r3438;
	// end inline asm
	selp.b32 	%r3570, 16, 0, %p131;
	selp.b32 	%r3440, %r3570, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3439 + 0 ], [ %rd253 + 0 ], 0x10, %r3440;
	// end inline asm
	selp.b32 	%r3571, 16, 0, %p132;
	selp.b32 	%r3442, %r3571, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3441 + 0 ], [ %rd254 + 0 ], 0x10, %r3442;
	// end inline asm
	selp.b32 	%r3572, 16, 0, %p133;
	selp.b32 	%r3444, %r3572, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3443 + 0 ], [ %rd255 + 0 ], 0x10, %r3444;
	// end inline asm
	selp.b32 	%r3573, 16, 0, %p134;
	selp.b32 	%r3446, %r3573, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3445 + 0 ], [ %rd256 + 0 ], 0x10, %r3446;
	// end inline asm
	selp.b32 	%r3574, 16, 0, %p135;
	selp.b32 	%r3448, %r3574, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3447 + 0 ], [ %rd257 + 0 ], 0x10, %r3448;
	// end inline asm
	selp.b32 	%r3575, 16, 0, %p136;
	selp.b32 	%r3450, %r3575, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3449 + 0 ], [ %rd258 + 0 ], 0x10, %r3450;
	// end inline asm
	selp.b32 	%r3576, 16, 0, %p137;
	selp.b32 	%r3452, %r3576, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3451 + 0 ], [ %rd259 + 0 ], 0x10, %r3452;
	// end inline asm
	selp.b32 	%r3577, 16, 0, %p138;
	selp.b32 	%r3454, %r3577, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3453 + 0 ], [ %rd260 + 0 ], 0x10, %r3454;
	// end inline asm
	selp.b32 	%r3578, 16, 0, %p139;
	selp.b32 	%r3456, %r3578, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3455 + 0 ], [ %rd261 + 0 ], 0x10, %r3456;
	// end inline asm
	selp.b32 	%r3579, 16, 0, %p140;
	selp.b32 	%r3458, %r3579, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3457 + 0 ], [ %rd262 + 0 ], 0x10, %r3458;
	// end inline asm
	selp.b32 	%r3580, 16, 0, %p141;
	selp.b32 	%r3460, %r3580, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3459 + 0 ], [ %rd263 + 0 ], 0x10, %r3460;
	// end inline asm
	selp.b32 	%r3581, 16, 0, %p142;
	selp.b32 	%r3462, %r3581, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3461 + 0 ], [ %rd264 + 0 ], 0x10, %r3462;
	// end inline asm
	selp.b32 	%r3582, 16, 0, %p143;
	selp.b32 	%r3464, %r3582, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3463 + 0 ], [ %rd265 + 0 ], 0x10, %r3464;
	// end inline asm
	selp.b32 	%r3583, 16, 0, %p144;
	selp.b32 	%r3466, %r3583, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3465 + 0 ], [ %rd266 + 0 ], 0x10, %r3466;
	// end inline asm
	selp.b32 	%r3584, 16, 0, %p145;
	selp.b32 	%r3468, %r3584, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3467 + 0 ], [ %rd267 + 0 ], 0x10, %r3468;
	// end inline asm
	selp.b32 	%r3585, 16, 0, %p146;
	selp.b32 	%r3470, %r3585, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3469 + 0 ], [ %rd268 + 0 ], 0x10, %r3470;
	// end inline asm
	selp.b32 	%r3586, 16, 0, %p147;
	selp.b32 	%r3472, %r3586, 0, %p112;
	// begin inline asm
	cp.async.cg.shared.global [ %r3471 + 0 ], [ %rd269 + 0 ], 0x10, %r3472;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s32 	%r4248, %r4248, 1;
	add.s64 	%rd336, %rd336, %rd18;
	add.s64 	%rd335, %rd335, 256;
	add.s32 	%r4117, %r4117, -128;
	setp.ne.s32 	%p148, %r46, %r4248;
	@%p148 bra 	$L__BB0_2;
$L__BB0_3:                              // %._crit_edge
	.loc	1 98 54                         // gated_mlp.py:98:54
	mul.lo.s32 	%r3987, %r4, %r2;
	sub.s32 	%r3988, %r3, %r3987;
	.loc	1 98 27                         // gated_mlp.py:98:27
	add.s32 	%r3989, %r3988, %r1;
	.loc	1 120 22                        // gated_mlp.py:120:22
	// begin inline asm
	// wait for regs: %r4120,%r4121,%r4122,%r4123,%r4124,%r4125,%r4126,%r4127,%r4128,%r4129,%r4130,%r4131,%r4132,%r4133,%r4134,%r4135,%r4136,%r4137,%r4138,%r4139,%r4140,%r4141,%r4142,%r4143,%r4144,%r4145,%r4146,%r4147,%r4148,%r4149,%r4150,%r4151,%r4152,%r4153,%r4154,%r4155,%r4156,%r4157,%r4158,%r4159,%r4160,%r4161,%r4162,%r4163,%r4164,%r4165,%r4166,%r4167,%r4168,%r4169,%r4170,%r4171,%r4172,%r4173,%r4174,%r4175,%r4176,%r4177,%r4178,%r4179,%r4180,%r4181,%r4182,%r4183,%r4184,%r4185,%r4186,%r4187,%r4188,%r4189,%r4190,%r4191,%r4192,%r4193,%r4194,%r4195,%r4196,%r4197,%r4198,%r4199,%r4200,%r4201,%r4202,%r4203,%r4204,%r4205,%r4206,%r4207,%r4208,%r4209,%r4210,%r4211,%r4212,%r4213,%r4214,%r4215,%r4216,%r4217,%r4218,%r4219,%r4220,%r4221,%r4222,%r4223,%r4224,%r4225,%r4226,%r4227,%r4228,%r4229,%r4230,%r4231,%r4232,%r4233,%r4234,%r4235,%r4236,%r4237,%r4238,%r4239,%r4240,%r4241,%r4242,%r4243,%r4244,%r4245,%r4246,%r4247
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 134 23                        // gated_mlp.py:134:23
	cvt.rn.f16x2.f32 	%r3844, %r4121, %r4120;
	cvt.rn.f16x2.f32 	%r3845, %r4123, %r4122;
	cvt.rn.f16x2.f32 	%r3846, %r4125, %r4124;
	cvt.rn.f16x2.f32 	%r3847, %r4127, %r4126;
	cvt.rn.f16x2.f32 	%r3849, %r4129, %r4128;
	cvt.rn.f16x2.f32 	%r3850, %r4131, %r4130;
	cvt.rn.f16x2.f32 	%r3851, %r4133, %r4132;
	cvt.rn.f16x2.f32 	%r3852, %r4135, %r4134;
	cvt.rn.f16x2.f32 	%r3854, %r4137, %r4136;
	cvt.rn.f16x2.f32 	%r3855, %r4139, %r4138;
	cvt.rn.f16x2.f32 	%r3856, %r4141, %r4140;
	cvt.rn.f16x2.f32 	%r3857, %r4143, %r4142;
	cvt.rn.f16x2.f32 	%r3859, %r4145, %r4144;
	cvt.rn.f16x2.f32 	%r3860, %r4147, %r4146;
	cvt.rn.f16x2.f32 	%r3861, %r4149, %r4148;
	cvt.rn.f16x2.f32 	%r3862, %r4151, %r4150;
	cvt.rn.f16x2.f32 	%r3864, %r4153, %r4152;
	cvt.rn.f16x2.f32 	%r3865, %r4155, %r4154;
	cvt.rn.f16x2.f32 	%r3866, %r4157, %r4156;
	cvt.rn.f16x2.f32 	%r3867, %r4159, %r4158;
	cvt.rn.f16x2.f32 	%r3869, %r4161, %r4160;
	cvt.rn.f16x2.f32 	%r3870, %r4163, %r4162;
	cvt.rn.f16x2.f32 	%r3871, %r4165, %r4164;
	cvt.rn.f16x2.f32 	%r3872, %r4167, %r4166;
	cvt.rn.f16x2.f32 	%r3874, %r4169, %r4168;
	cvt.rn.f16x2.f32 	%r3875, %r4171, %r4170;
	cvt.rn.f16x2.f32 	%r3876, %r4173, %r4172;
	cvt.rn.f16x2.f32 	%r3877, %r4175, %r4174;
	cvt.rn.f16x2.f32 	%r3879, %r4177, %r4176;
	cvt.rn.f16x2.f32 	%r3880, %r4179, %r4178;
	cvt.rn.f16x2.f32 	%r3881, %r4181, %r4180;
	cvt.rn.f16x2.f32 	%r3882, %r4183, %r4182;
	cvt.rn.f16x2.f32 	%r3884, %r4185, %r4184;
	cvt.rn.f16x2.f32 	%r3885, %r4187, %r4186;
	cvt.rn.f16x2.f32 	%r3886, %r4189, %r4188;
	cvt.rn.f16x2.f32 	%r3887, %r4191, %r4190;
	cvt.rn.f16x2.f32 	%r3889, %r4193, %r4192;
	cvt.rn.f16x2.f32 	%r3890, %r4195, %r4194;
	cvt.rn.f16x2.f32 	%r3891, %r4197, %r4196;
	cvt.rn.f16x2.f32 	%r3892, %r4199, %r4198;
	cvt.rn.f16x2.f32 	%r3894, %r4201, %r4200;
	cvt.rn.f16x2.f32 	%r3895, %r4203, %r4202;
	cvt.rn.f16x2.f32 	%r3896, %r4205, %r4204;
	cvt.rn.f16x2.f32 	%r3897, %r4207, %r4206;
	cvt.rn.f16x2.f32 	%r3899, %r4209, %r4208;
	cvt.rn.f16x2.f32 	%r3900, %r4211, %r4210;
	cvt.rn.f16x2.f32 	%r3901, %r4213, %r4212;
	cvt.rn.f16x2.f32 	%r3902, %r4215, %r4214;
	cvt.rn.f16x2.f32 	%r3904, %r4217, %r4216;
	cvt.rn.f16x2.f32 	%r3905, %r4219, %r4218;
	cvt.rn.f16x2.f32 	%r3906, %r4221, %r4220;
	cvt.rn.f16x2.f32 	%r3907, %r4223, %r4222;
	cvt.rn.f16x2.f32 	%r3909, %r4225, %r4224;
	cvt.rn.f16x2.f32 	%r3910, %r4227, %r4226;
	cvt.rn.f16x2.f32 	%r3911, %r4229, %r4228;
	cvt.rn.f16x2.f32 	%r3912, %r4231, %r4230;
	cvt.rn.f16x2.f32 	%r3914, %r4233, %r4232;
	cvt.rn.f16x2.f32 	%r3915, %r4235, %r4234;
	cvt.rn.f16x2.f32 	%r3916, %r4237, %r4236;
	cvt.rn.f16x2.f32 	%r3917, %r4239, %r4238;
	cvt.rn.f16x2.f32 	%r3919, %r4241, %r4240;
	cvt.rn.f16x2.f32 	%r3920, %r4243, %r4242;
	cvt.rn.f16x2.f32 	%r3921, %r4245, %r4244;
	cvt.rn.f16x2.f32 	%r3922, %r4247, %r4246;
	.loc	1 138 22                        // gated_mlp.py:138:22
	shl.b32 	%r3990, %r3989, 6;
	.loc	1 138 37                        // gated_mlp.py:138:37
	or.b32 	%r3991, %r3990, %r14;
	or.b32 	%r3992, %r3990, %r15;
	or.b32 	%r3993, %r3990, %r16;
	or.b32 	%r3994, %r3990, %r17;
	or.b32 	%r3995, %r3990, %r18;
	or.b32 	%r3996, %r3990, %r19;
	or.b32 	%r3997, %r3990, %r20;
	or.b32 	%r3998, %r3990, %r21;
	or.b32 	%r3999, %r3990, %r22;
	or.b32 	%r4000, %r3990, %r23;
	or.b32 	%r4001, %r3990, %r24;
	or.b32 	%r4002, %r3990, %r25;
	or.b32 	%r4003, %r3990, %r26;
	or.b32 	%r4004, %r3990, %r27;
	or.b32 	%r4005, %r3990, %r28;
	or.b32 	%r4006, %r3990, %r29;
	.loc	1 140 33                        // gated_mlp.py:140:33
	mul.lo.s32 	%r4007, %r3991, %r484;
	mul.lo.s32 	%r4008, %r3992, %r484;
	mul.lo.s32 	%r4009, %r3993, %r484;
	mul.lo.s32 	%r4010, %r3994, %r484;
	mul.lo.s32 	%r4011, %r3995, %r484;
	mul.lo.s32 	%r4012, %r3996, %r484;
	mul.lo.s32 	%r4013, %r3997, %r484;
	mul.lo.s32 	%r4014, %r3998, %r484;
	mul.lo.s32 	%r4015, %r3999, %r484;
	mul.lo.s32 	%r4016, %r4000, %r484;
	mul.lo.s32 	%r4017, %r4001, %r484;
	mul.lo.s32 	%r4018, %r4002, %r484;
	mul.lo.s32 	%r4019, %r4003, %r484;
	mul.lo.s32 	%r4020, %r4004, %r484;
	mul.lo.s32 	%r4021, %r4005, %r484;
	mul.lo.s32 	%r4022, %r4006, %r484;
	.loc	1 140 21                        // gated_mlp.py:140:21
	mul.wide.s32 	%rd302, %r4007, 2;
	add.s64 	%rd303, %rd57, %rd302;
	mul.wide.s32 	%rd304, %r4008, 2;
	add.s64 	%rd305, %rd57, %rd304;
	mul.wide.s32 	%rd306, %r4009, 2;
	add.s64 	%rd307, %rd57, %rd306;
	mul.wide.s32 	%rd308, %r4010, 2;
	add.s64 	%rd309, %rd57, %rd308;
	mul.wide.s32 	%rd310, %r4011, 2;
	add.s64 	%rd311, %rd57, %rd310;
	mul.wide.s32 	%rd312, %r4012, 2;
	add.s64 	%rd313, %rd57, %rd312;
	mul.wide.s32 	%rd314, %r4013, 2;
	add.s64 	%rd315, %rd57, %rd314;
	mul.wide.s32 	%rd316, %r4014, 2;
	add.s64 	%rd317, %rd57, %rd316;
	mul.wide.s32 	%rd318, %r4015, 2;
	add.s64 	%rd319, %rd57, %rd318;
	mul.wide.s32 	%rd320, %r4016, 2;
	add.s64 	%rd321, %rd57, %rd320;
	mul.wide.s32 	%rd322, %r4017, 2;
	add.s64 	%rd323, %rd57, %rd322;
	mul.wide.s32 	%rd324, %r4018, 2;
	add.s64 	%rd325, %rd57, %rd324;
	mul.wide.s32 	%rd326, %r4019, 2;
	add.s64 	%rd327, %rd57, %rd326;
	mul.wide.s32 	%rd328, %r4020, 2;
	add.s64 	%rd329, %rd57, %rd328;
	mul.wide.s32 	%rd330, %r4021, 2;
	add.s64 	%rd331, %rd57, %rd330;
	mul.wide.s32 	%rd332, %r4022, 2;
	add.s64 	%rd333, %rd57, %rd332;
	.loc	1 140 52                        // gated_mlp.py:140:52
	mul.wide.s32 	%rd334, %r11, 2;
	add.s64 	%rd286, %rd303, %rd334;
	add.s64 	%rd287, %rd305, %rd334;
	add.s64 	%rd288, %rd307, %rd334;
	add.s64 	%rd289, %rd309, %rd334;
	add.s64 	%rd290, %rd311, %rd334;
	add.s64 	%rd291, %rd313, %rd334;
	add.s64 	%rd292, %rd315, %rd334;
	add.s64 	%rd293, %rd317, %rd334;
	add.s64 	%rd294, %rd319, %rd334;
	add.s64 	%rd295, %rd321, %rd334;
	add.s64 	%rd296, %rd323, %rd334;
	add.s64 	%rd297, %rd325, %rd334;
	add.s64 	%rd298, %rd327, %rd334;
	add.s64 	%rd299, %rd329, %rd334;
	add.s64 	%rd300, %rd331, %rd334;
	add.s64 	%rd301, %rd333, %rd334;
	.loc	1 141 33                        // gated_mlp.py:141:33
	setp.lt.s32 	%p165, %r3991, 1;
	setp.lt.s32 	%p166, %r3992, 1;
	setp.lt.s32 	%p167, %r3993, 1;
	setp.lt.s32 	%p168, %r3994, 1;
	setp.lt.s32 	%p169, %r3995, 1;
	setp.lt.s32 	%p170, %r3996, 1;
	setp.lt.s32 	%p171, %r3997, 1;
	setp.lt.s32 	%p172, %r3998, 1;
	setp.lt.s32 	%p173, %r3999, 1;
	setp.lt.s32 	%p174, %r4000, 1;
	setp.lt.s32 	%p175, %r4001, 1;
	setp.lt.s32 	%p176, %r4002, 1;
	setp.lt.s32 	%p177, %r4003, 1;
	setp.lt.s32 	%p178, %r4004, 1;
	setp.lt.s32 	%p179, %r4005, 1;
	setp.lt.s32 	%p180, %r4006, 1;
	.loc	1 141 58                        // gated_mlp.py:141:58
	setp.lt.s32 	%p181, %r11, %r481;
	.loc	1 141 39                        // gated_mlp.py:141:39
	and.pred 	%p149, %p181, %p165;
	and.pred 	%p150, %p181, %p166;
	and.pred 	%p151, %p181, %p167;
	and.pred 	%p152, %p181, %p168;
	and.pred 	%p153, %p181, %p169;
	and.pred 	%p154, %p181, %p170;
	and.pred 	%p155, %p181, %p171;
	and.pred 	%p156, %p181, %p172;
	and.pred 	%p157, %p181, %p173;
	and.pred 	%p158, %p181, %p174;
	and.pred 	%p159, %p181, %p175;
	and.pred 	%p160, %p181, %p176;
	and.pred 	%p161, %p181, %p177;
	and.pred 	%p162, %p181, %p178;
	and.pred 	%p163, %p181, %p179;
	and.pred 	%p164, %p181, %p180;
	.loc	1 142 21                        // gated_mlp.py:142:21
	shl.b32 	%r4023, %r5, 8;
	and.b32 	%r4024, %r4023, 3840;
	shr.u32 	%r4025, %r10, 1;
	or.b32 	%r4026, %r4024, %r4025;
	shl.b32 	%r4027, %r5, 7;
	and.b32 	%r4028, %r4027, 12288;
	or.b32 	%r4029, %r4026, %r4028;
	and.b32 	%r4030, %r6, 1016;
	shr.u32 	%r4031, %r4029, 4;
	add.s32 	%r4033, %r820, %r4031;
	shl.b32 	%r4034, %r4029, 1;
	add.s32 	%r3843, %r4033, %r4034;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r3843], {%r3844, %r3845, %r3846, %r3847};
	// end inline asm
	add.s32 	%r3848, %r3843, 32;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r3848], {%r3849, %r3850, %r3851, %r3852};
	// end inline asm
	add.s32 	%r3853, %r3843, 64;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r3853], {%r3854, %r3855, %r3856, %r3857};
	// end inline asm
	add.s32 	%r3858, %r3843, 96;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r3858], {%r3859, %r3860, %r3861, %r3862};
	// end inline asm
	add.s32 	%r3863, %r3843, 128;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r3863], {%r3864, %r3865, %r3866, %r3867};
	// end inline asm
	add.s32 	%r3868, %r3843, 160;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r3868], {%r3869, %r3870, %r3871, %r3872};
	// end inline asm
	add.s32 	%r3873, %r3843, 192;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r3873], {%r3874, %r3875, %r3876, %r3877};
	// end inline asm
	add.s32 	%r3878, %r3843, 224;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r3878], {%r3879, %r3880, %r3881, %r3882};
	// end inline asm
	add.s32 	%r3883, %r3843, 256;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r3883], {%r3884, %r3885, %r3886, %r3887};
	// end inline asm
	add.s32 	%r3888, %r3843, 288;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r3888], {%r3889, %r3890, %r3891, %r3892};
	// end inline asm
	add.s32 	%r3893, %r3843, 320;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r3893], {%r3894, %r3895, %r3896, %r3897};
	// end inline asm
	add.s32 	%r3898, %r3843, 352;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r3898], {%r3899, %r3900, %r3901, %r3902};
	// end inline asm
	add.s32 	%r3903, %r3843, 384;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r3903], {%r3904, %r3905, %r3906, %r3907};
	// end inline asm
	add.s32 	%r3908, %r3843, 416;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r3908], {%r3909, %r3910, %r3911, %r3912};
	// end inline asm
	add.s32 	%r3913, %r3843, 448;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r3913], {%r3914, %r3915, %r3916, %r3917};
	// end inline asm
	add.s32 	%r3918, %r3843, 480;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r3918], {%r3919, %r3920, %r3921, %r3922};
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r4035, %r5, 1;
	and.b32 	%r4036, %r4035, 48;
	add.s32 	%r4037, %r820, %r4036;
	shl.b32 	%r4038, %r4030, 1;
	add.s32 	%r4039, %r4037, %r4038;
	ld.shared.v4.b32 	{%r3923, %r3924, %r3925, %r3926}, [%r4039];
	or.b32 	%r4040, %r4030, 1024;
	shr.u32 	%r4041, %r4040, 4;
	and.b32 	%r4042, %r4041, 112;
	add.s32 	%r4043, %r820, %r4042;
	add.s32 	%r4044, %r4043, %r4038;
	ld.shared.v4.b32 	{%r3927, %r3928, %r3929, %r3930}, [%r4044+2048];
	or.b32 	%r4045, %r4030, 2048;
	shr.u32 	%r4046, %r4045, 4;
	and.b32 	%r4047, %r4046, 176;
	add.s32 	%r4048, %r820, %r4047;
	add.s32 	%r4049, %r4048, %r4038;
	ld.shared.v4.b32 	{%r3931, %r3932, %r3933, %r3934}, [%r4049+4096];
	or.b32 	%r4050, %r4030, 3072;
	shr.u32 	%r4051, %r4050, 4;
	and.b32 	%r4052, %r4051, 240;
	add.s32 	%r4053, %r820, %r4052;
	add.s32 	%r4054, %r4053, %r4038;
	ld.shared.v4.b32 	{%r3935, %r3936, %r3937, %r3938}, [%r4054+6144];
	or.b32 	%r4055, %r4030, 4096;
	shr.u32 	%r4056, %r4055, 4;
	and.b32 	%r4057, %r4056, 304;
	add.s32 	%r4058, %r820, %r4057;
	add.s32 	%r4059, %r4058, %r4038;
	ld.shared.v4.b32 	{%r3939, %r3940, %r3941, %r3942}, [%r4059+8192];
	or.b32 	%r4060, %r4030, 5120;
	shr.u32 	%r4061, %r4060, 4;
	and.b32 	%r4062, %r4061, 368;
	add.s32 	%r4063, %r820, %r4062;
	add.s32 	%r4064, %r4063, %r4038;
	ld.shared.v4.b32 	{%r3943, %r3944, %r3945, %r3946}, [%r4064+10240];
	or.b32 	%r4065, %r4030, 6144;
	shr.u32 	%r4066, %r4065, 4;
	and.b32 	%r4067, %r4066, 432;
	add.s32 	%r4068, %r820, %r4067;
	add.s32 	%r4069, %r4068, %r4038;
	ld.shared.v4.b32 	{%r3947, %r3948, %r3949, %r3950}, [%r4069+12288];
	or.b32 	%r4070, %r6, 7168;
	shr.u32 	%r4071, %r4070, 4;
	and.b32 	%r4072, %r4071, 496;
	add.s32 	%r4073, %r820, %r4072;
	shl.b32 	%r4074, %r4070, 1;
	add.s32 	%r4075, %r4073, %r4074;
	ld.shared.v4.b32 	{%r3951, %r3952, %r3953, %r3954}, [%r4075];
	or.b32 	%r4076, %r6, 8192;
	shr.u32 	%r4077, %r4076, 4;
	and.b32 	%r4078, %r4077, 560;
	add.s32 	%r4079, %r820, %r4078;
	add.s32 	%r4080, %r4079, %r4038;
	ld.shared.v4.b32 	{%r3955, %r3956, %r3957, %r3958}, [%r4080+16384];
	or.b32 	%r4081, %r4030, 9216;
	shr.u32 	%r4082, %r4081, 4;
	and.b32 	%r4083, %r4082, 624;
	add.s32 	%r4084, %r820, %r4083;
	add.s32 	%r4085, %r4084, %r4038;
	ld.shared.v4.b32 	{%r3959, %r3960, %r3961, %r3962}, [%r4085+18432];
	or.b32 	%r4086, %r4030, 10240;
	shr.u32 	%r4087, %r4086, 4;
	and.b32 	%r4088, %r4087, 688;
	add.s32 	%r4089, %r820, %r4088;
	add.s32 	%r4090, %r4089, %r4038;
	ld.shared.v4.b32 	{%r3963, %r3964, %r3965, %r3966}, [%r4090+20480];
	or.b32 	%r4091, %r4030, 11264;
	shr.u32 	%r4092, %r4091, 4;
	and.b32 	%r4093, %r4092, 752;
	add.s32 	%r4094, %r820, %r4093;
	add.s32 	%r4095, %r4094, %r4038;
	ld.shared.v4.b32 	{%r3967, %r3968, %r3969, %r3970}, [%r4095+22528];
	or.b32 	%r4096, %r4030, 12288;
	shr.u32 	%r4097, %r4096, 4;
	and.b32 	%r4098, %r4097, 816;
	add.s32 	%r4099, %r820, %r4098;
	add.s32 	%r4100, %r4099, %r4038;
	ld.shared.v4.b32 	{%r3971, %r3972, %r3973, %r3974}, [%r4100+24576];
	or.b32 	%r4101, %r4030, 13312;
	shr.u32 	%r4102, %r4101, 4;
	and.b32 	%r4103, %r4102, 880;
	add.s32 	%r4104, %r820, %r4103;
	add.s32 	%r4105, %r4104, %r4038;
	ld.shared.v4.b32 	{%r3975, %r3976, %r3977, %r3978}, [%r4105+26624];
	or.b32 	%r4106, %r4030, 14336;
	shr.u32 	%r4107, %r4106, 4;
	and.b32 	%r4108, %r4107, 944;
	add.s32 	%r4109, %r820, %r4108;
	add.s32 	%r4110, %r4109, %r4038;
	ld.shared.v4.b32 	{%r3979, %r3980, %r3981, %r3982}, [%r4110+28672];
	or.b32 	%r4111, %r6, 15360;
	shr.u32 	%r4112, %r4111, 4;
	and.b32 	%r4113, %r4112, 1008;
	add.s32 	%r4114, %r820, %r4113;
	shl.b32 	%r4115, %r4111, 1;
	add.s32 	%r4116, %r4114, %r4115;
	ld.shared.v4.b32 	{%r3983, %r3984, %r3985, %r3986}, [%r4116];
	// begin inline asm
	@%p149 st.global.v4.b32 [ %rd286 + 0 ], { %r3923, %r3924, %r3925, %r3926 };
	// end inline asm
	// begin inline asm
	@%p150 st.global.v4.b32 [ %rd287 + 0 ], { %r3927, %r3928, %r3929, %r3930 };
	// end inline asm
	// begin inline asm
	@%p151 st.global.v4.b32 [ %rd288 + 0 ], { %r3931, %r3932, %r3933, %r3934 };
	// end inline asm
	// begin inline asm
	@%p152 st.global.v4.b32 [ %rd289 + 0 ], { %r3935, %r3936, %r3937, %r3938 };
	// end inline asm
	// begin inline asm
	@%p153 st.global.v4.b32 [ %rd290 + 0 ], { %r3939, %r3940, %r3941, %r3942 };
	// end inline asm
	// begin inline asm
	@%p154 st.global.v4.b32 [ %rd291 + 0 ], { %r3943, %r3944, %r3945, %r3946 };
	// end inline asm
	// begin inline asm
	@%p155 st.global.v4.b32 [ %rd292 + 0 ], { %r3947, %r3948, %r3949, %r3950 };
	// end inline asm
	// begin inline asm
	@%p156 st.global.v4.b32 [ %rd293 + 0 ], { %r3951, %r3952, %r3953, %r3954 };
	// end inline asm
	// begin inline asm
	@%p157 st.global.v4.b32 [ %rd294 + 0 ], { %r3955, %r3956, %r3957, %r3958 };
	// end inline asm
	// begin inline asm
	@%p158 st.global.v4.b32 [ %rd295 + 0 ], { %r3959, %r3960, %r3961, %r3962 };
	// end inline asm
	// begin inline asm
	@%p159 st.global.v4.b32 [ %rd296 + 0 ], { %r3963, %r3964, %r3965, %r3966 };
	// end inline asm
	// begin inline asm
	@%p160 st.global.v4.b32 [ %rd297 + 0 ], { %r3967, %r3968, %r3969, %r3970 };
	// end inline asm
	// begin inline asm
	@%p161 st.global.v4.b32 [ %rd298 + 0 ], { %r3971, %r3972, %r3973, %r3974 };
	// end inline asm
	// begin inline asm
	@%p162 st.global.v4.b32 [ %rd299 + 0 ], { %r3975, %r3976, %r3977, %r3978 };
	// end inline asm
	// begin inline asm
	@%p163 st.global.v4.b32 [ %rd300 + 0 ], { %r3979, %r3980, %r3981, %r3982 };
	// end inline asm
	// begin inline asm
	@%p164 st.global.v4.b32 [ %rd301 + 0 ], { %r3983, %r3984, %r3985, %r3986 };
	// end inline asm
	.loc	1 142 4                         // gated_mlp.py:142:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py"
	.file	2 "/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 157                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x96 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 103                                 // DW_AT_name
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 109
.b8 108
.b8 112
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 117
.b8 98
.b8 117
.b8 110
.b8 116
.b8 117
.b8 47
.b8 80
.b8 84
.b8 88
.b8 95
.b8 100
.b8 97
.b8 116
.b8 97
.b8 115
.b8 101
.b8 116
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 116
.b8 120
.b8 0
.b8 2                                   // Abbrev [2] 0x4a:0x10 DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x5a:0x46 DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 74                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x6f:0x18 DW_TAG_inlined_subroutine
.b32 74                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 93                                  // DW_AT_call_line
.b8 27                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x87:0x18 DW_TAG_inlined_subroutine
.b32 74                                 // DW_AT_abstract_origin
.b64 $L__tmp3                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 120                                 // DW_AT_call_line
.b8 33                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
