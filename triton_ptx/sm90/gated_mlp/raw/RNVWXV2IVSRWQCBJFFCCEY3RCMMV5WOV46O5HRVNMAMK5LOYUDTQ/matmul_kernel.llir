; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @matmul_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = add i32 %3, 31, !dbg !9
  %12 = sdiv i32 %11, 32, !dbg !13
  %13 = shl nsw i32 %12, 3, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %14 = sdiv i32 %10, %.frozen, !dbg !15
  %15 = shl i32 %14, 3, !dbg !16
  %16 = sub i32 1, %15, !dbg !17
  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 8), !dbg !18
  %18 = mul i32 %14, %.frozen, !dbg !19
  %.decomposed = sub i32 %10, %18, !dbg !19
  %19 = sdiv i32 %.decomposed, %17, !dbg !20
  %20 = shl i32 %19, 5, !dbg !21
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !22
  %22 = shl nuw nsw i32 %21, 3, !dbg !22
  %23 = and i32 %22, 24, !dbg !22
  %24 = or disjoint i32 %20, %23, !dbg !23
  %25 = srem i32 %24, %3, !dbg !24
  %26 = zext nneg i32 %23 to i64, !dbg !25
  %27 = getelementptr half, ptr addrspace(1) %0, i64 %26, !dbg !25
  %28 = lshr i32 %21, 5, !dbg !26
  %29 = and i32 %21, 32, !dbg !26
  %30 = and i32 %21, 64, !dbg !26
  %31 = lshr i32 %21, 2, !dbg !26
  %32 = and i32 %31, 31, !dbg !26
  %33 = mul i32 %6, %32, !dbg !27
  %34 = add i32 %25, %33, !dbg !28
  %35 = sext i32 %34 to i64, !dbg !29
  %36 = getelementptr half, ptr addrspace(1) %1, i64 %35, !dbg !29
  %37 = add i32 %4, 31, !dbg !30
  %38 = sdiv i32 %37, 32, !dbg !32
  %39 = shl i32 %6, 5, !dbg !33
  %40 = icmp sgt i32 %37, 31, !dbg !34
  %41 = icmp slt i32 %23, %4, !dbg !35
  %42 = and i1 %41, %40, !dbg !34
  %43 = and i32 %22, 56, !dbg !36
  %44 = and i32 %21, 24, !dbg !36
  %45 = mul nuw nsw i32 %44, 9, !dbg !36
  %46 = xor i32 %45, %43, !dbg !36
  %47 = shl nuw nsw i32 %29, 3, !dbg !36
  %48 = shl nuw nsw i32 %30, 3, !dbg !36
  %49 = or disjoint i32 %47, %46, !dbg !36
  %50 = or disjoint i32 %49, %48, !dbg !36
  %51 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %50, !dbg !36
  %52 = or disjoint i32 %43, 1024, !dbg !36
  %53 = xor i32 %45, %52, !dbg !36
  %54 = or disjoint i32 %47, %53, !dbg !36
  %55 = or disjoint i32 %54, %48, !dbg !36
  %56 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %55, !dbg !36
  %57 = or disjoint i32 %43, 2048, !dbg !36
  %58 = xor i32 %45, %57, !dbg !36
  %59 = or disjoint i32 %47, %58, !dbg !36
  %60 = or disjoint i32 %59, %48, !dbg !36
  %61 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %60, !dbg !36
  %62 = or disjoint i32 %43, 3072, !dbg !36
  %63 = xor i32 %45, %62, !dbg !36
  %64 = or disjoint i32 %47, %63, !dbg !36
  %65 = or disjoint i32 %64, %48, !dbg !36
  %66 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %65, !dbg !36
  %67 = select i1 %42, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %51, ptr addrspace(1) %27, i32 %67) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %56, ptr addrspace(1) %27, i32 %67) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %61, ptr addrspace(1) %27, i32 %67) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %66, ptr addrspace(1) %27, i32 %67) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %68 = icmp slt i32 %32, %4, !dbg !37
  %69 = and i1 %68, %40, !dbg !34
  %70 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %50, !dbg !38
  %71 = select i1 %69, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %70, ptr addrspace(1) %36, i32 %71) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %72 = icmp sgt i32 %37, 63, !dbg !34
  %73 = getelementptr i8, ptr addrspace(1) %27, i64 64, !dbg !39
  %74 = sext i32 %39 to i64, !dbg !40
  %75 = getelementptr half, ptr addrspace(1) %36, i64 %74, !dbg !40
  %76 = add i32 %4, -32, !dbg !41
  %77 = icmp slt i32 %23, %76, !dbg !35
  %78 = and i1 %72, %77, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %79 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %50, !dbg !36
  %80 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %55, !dbg !36
  %81 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %60, !dbg !36
  %82 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %65, !dbg !36
  %83 = select i1 %78, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %79, ptr addrspace(1) %73, i32 %83) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %80, ptr addrspace(1) %73, i32 %83) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %81, ptr addrspace(1) %73, i32 %83) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %82, ptr addrspace(1) %73, i32 %83) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %84 = icmp slt i32 %32, %76, !dbg !37
  %85 = and i1 %72, %84, !dbg !34
  %86 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 34816), i32 %50, !dbg !38
  %87 = select i1 %85, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %86, ptr addrspace(1) %75, i32 %87) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %88 = icmp sgt i32 %37, 95, !dbg !34
  %89 = getelementptr i8, ptr addrspace(1) %27, i64 128, !dbg !39
  %90 = getelementptr half, ptr addrspace(1) %75, i64 %74, !dbg !40
  %91 = add i32 %4, -64, !dbg !41
  %92 = icmp slt i32 %23, %91, !dbg !35
  %93 = and i1 %88, %92, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %94 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %50, !dbg !36
  %95 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %55, !dbg !36
  %96 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %60, !dbg !36
  %97 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %65, !dbg !36
  %98 = select i1 %93, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %94, ptr addrspace(1) %89, i32 %98) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %95, ptr addrspace(1) %89, i32 %98) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %96, ptr addrspace(1) %89, i32 %98) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %97, ptr addrspace(1) %89, i32 %98) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %99 = icmp slt i32 %32, %91, !dbg !37
  %100 = and i1 %88, %99, !dbg !34
  %101 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %50, !dbg !38
  %102 = select i1 %100, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %101, ptr addrspace(1) %90, i32 %102) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  br i1 %40, label %.lr.ph, label %._crit_edge, !dbg !34

.lr.ph:                                           ; preds = %9
  %103 = add nsw i32 %38, -3
  %.neg161 = add nsw i32 %4, -96
  br label %104, !dbg !34

104:                                              ; preds = %.lr.ph, %104
  %105 = phi i32 [ -1, %.lr.ph ], [ %143, %104 ]
  %106 = phi i32 [ 2, %.lr.ph ], [ %282, %104 ]
  %.pn81166 = phi ptr addrspace(1) [ %90, %.lr.ph ], [ %279, %104 ]
  %.pn17165 = phi ptr addrspace(1) [ %89, %.lr.ph ], [ %278, %104 ]
  %107 = phi float [ 0.000000e+00, %.lr.ph ], [ %246, %104 ]
  %108 = phi float [ 0.000000e+00, %.lr.ph ], [ %247, %104 ]
  %109 = phi float [ 0.000000e+00, %.lr.ph ], [ %248, %104 ]
  %110 = phi float [ 0.000000e+00, %.lr.ph ], [ %249, %104 ]
  %111 = phi float [ 0.000000e+00, %.lr.ph ], [ %250, %104 ]
  %112 = phi float [ 0.000000e+00, %.lr.ph ], [ %251, %104 ]
  %113 = phi float [ 0.000000e+00, %.lr.ph ], [ %252, %104 ]
  %114 = phi float [ 0.000000e+00, %.lr.ph ], [ %253, %104 ]
  %115 = phi float [ 0.000000e+00, %.lr.ph ], [ %254, %104 ]
  %116 = phi float [ 0.000000e+00, %.lr.ph ], [ %255, %104 ]
  %117 = phi float [ 0.000000e+00, %.lr.ph ], [ %256, %104 ]
  %118 = phi float [ 0.000000e+00, %.lr.ph ], [ %257, %104 ]
  %119 = phi float [ 0.000000e+00, %.lr.ph ], [ %258, %104 ]
  %120 = phi float [ 0.000000e+00, %.lr.ph ], [ %259, %104 ]
  %121 = phi float [ 0.000000e+00, %.lr.ph ], [ %260, %104 ]
  %122 = phi float [ 0.000000e+00, %.lr.ph ], [ %261, %104 ]
  %123 = phi float [ 0.000000e+00, %.lr.ph ], [ %262, %104 ]
  %124 = phi float [ 0.000000e+00, %.lr.ph ], [ %263, %104 ]
  %125 = phi float [ 0.000000e+00, %.lr.ph ], [ %264, %104 ]
  %126 = phi float [ 0.000000e+00, %.lr.ph ], [ %265, %104 ]
  %127 = phi float [ 0.000000e+00, %.lr.ph ], [ %266, %104 ]
  %128 = phi float [ 0.000000e+00, %.lr.ph ], [ %267, %104 ]
  %129 = phi float [ 0.000000e+00, %.lr.ph ], [ %268, %104 ]
  %130 = phi float [ 0.000000e+00, %.lr.ph ], [ %269, %104 ]
  %131 = phi float [ 0.000000e+00, %.lr.ph ], [ %270, %104 ]
  %132 = phi float [ 0.000000e+00, %.lr.ph ], [ %271, %104 ]
  %133 = phi float [ 0.000000e+00, %.lr.ph ], [ %272, %104 ]
  %134 = phi float [ 0.000000e+00, %.lr.ph ], [ %273, %104 ]
  %135 = phi float [ 0.000000e+00, %.lr.ph ], [ %274, %104 ]
  %136 = phi float [ 0.000000e+00, %.lr.ph ], [ %275, %104 ]
  %137 = phi float [ 0.000000e+00, %.lr.ph ], [ %276, %104 ]
  %138 = phi float [ 0.000000e+00, %.lr.ph ], [ %277, %104 ]
  %139 = phi i32 [ 0, %.lr.ph ], [ %296, %104 ]
  %140 = icmp slt i32 %139, %103, !dbg !34
  %141 = add i32 %105, 1, !dbg !34
  %142 = icmp sgt i32 %141, 3, !dbg !34
  %143 = select i1 %142, i32 0, i32 %141, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 4), !dbg !36
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %.idx = shl i32 %143, 13, !dbg !36
  %144 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !36
  %.idx128 = shl i32 %143, 11, !dbg !38
  %145 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %.idx128, !dbg !38
  %146 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %28, i32 0, i32 31), !dbg !42
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !42
  %147 = ptrtoint ptr addrspace(3) %144 to i32, !dbg !42
  %148 = lshr exact i32 %147, 4, !dbg !42
  %149 = and i32 %148, 16383, !dbg !42
  %150 = zext nneg i32 %149 to i64, !dbg !42
  %151 = or disjoint i64 %150, -9223371899382267904, !dbg !42
  %152 = ptrtoint ptr addrspace(3) %145 to i32, !dbg !42
  %153 = lshr exact i32 %152, 4, !dbg !42
  %154 = and i32 %153, 16383, !dbg !42
  %155 = zext nneg i32 %154 to i64, !dbg !42
  %156 = or disjoint i64 %155, -9223371899407433728, !dbg !42
  %157 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.f16.f16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %107, float %108, float %109, float %110, float %111, float %112, float %113, float %114, float %115, float %116, float %117, float %118, float %119, float %120, float %121, float %122, i64 %151, i64 %156, i1 true) #2, !dbg !42
  %158 = add i32 %147, 32, !dbg !42
  %159 = lshr exact i32 %158, 4, !dbg !42
  %160 = and i32 %159, 16383, !dbg !42
  %161 = zext nneg i32 %160 to i64, !dbg !42
  %162 = or disjoint i64 %161, -9223371899382267904, !dbg !42
  %163 = add i32 %152, 1024, !dbg !42
  %164 = lshr exact i32 %163, 4, !dbg !42
  %165 = and i32 %164, 16383, !dbg !42
  %166 = zext nneg i32 %165 to i64, !dbg !42
  %167 = or disjoint i64 %166, -9223371899407433728, !dbg !42
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %157, 0, !dbg !42
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %157, 1, !dbg !42
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %157, 2, !dbg !42
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %157, 3, !dbg !42
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %157, 4, !dbg !42
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %157, 5, !dbg !42
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %157, 6, !dbg !42
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %157, 7, !dbg !42
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %157, 8, !dbg !42
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %157, 9, !dbg !42
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %157, 10, !dbg !42
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %157, 11, !dbg !42
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %157, 12, !dbg !42
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %157, 13, !dbg !42
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %157, 14, !dbg !42
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %157, 15, !dbg !42
  %184 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.f16.f16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, float %176, float %177, float %178, float %179, float %180, float %181, float %182, float %183, i64 %162, i64 %167, i1 true) #2, !dbg !42
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 0, !dbg !42
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 1, !dbg !42
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 2, !dbg !42
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 3, !dbg !42
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 4, !dbg !42
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 5, !dbg !42
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 6, !dbg !42
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 7, !dbg !42
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 8, !dbg !42
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 9, !dbg !42
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 10, !dbg !42
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 11, !dbg !42
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 12, !dbg !42
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 13, !dbg !42
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 14, !dbg !42
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 15, !dbg !42
  %201 = add i32 %147, 4096, !dbg !42
  %202 = lshr exact i32 %201, 4, !dbg !42
  %203 = and i32 %202, 16383, !dbg !42
  %204 = zext nneg i32 %203 to i64, !dbg !42
  %205 = or disjoint i64 %204, -9223371899382267904, !dbg !42
  %206 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.f16.f16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %123, float %124, float %125, float %126, float %127, float %128, float %129, float %130, float %131, float %132, float %133, float %134, float %135, float %136, float %137, float %138, i64 %205, i64 %156, i1 true) #2, !dbg !42
  %207 = add i32 %147, 4128, !dbg !42
  %208 = lshr exact i32 %207, 4, !dbg !42
  %209 = and i32 %208, 16383, !dbg !42
  %210 = zext nneg i32 %209 to i64, !dbg !42
  %211 = or disjoint i64 %210, -9223371899382267904, !dbg !42
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %206, 0, !dbg !42
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %206, 1, !dbg !42
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %206, 2, !dbg !42
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %206, 3, !dbg !42
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %206, 4, !dbg !42
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %206, 5, !dbg !42
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %206, 6, !dbg !42
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %206, 7, !dbg !42
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %206, 8, !dbg !42
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %206, 9, !dbg !42
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %206, 10, !dbg !42
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %206, 11, !dbg !42
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %206, 12, !dbg !42
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %206, 13, !dbg !42
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %206, 14, !dbg !42
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %206, 15, !dbg !42
  %228 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.f16.f16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %212, float %213, float %214, float %215, float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225, float %226, float %227, i64 %211, i64 %167, i1 true) #2, !dbg !42
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 0, !dbg !42
  %230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 1, !dbg !42
  %231 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 2, !dbg !42
  %232 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 3, !dbg !42
  %233 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 4, !dbg !42
  %234 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 5, !dbg !42
  %235 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 6, !dbg !42
  %236 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 7, !dbg !42
  %237 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 8, !dbg !42
  %238 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 9, !dbg !42
  %239 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 10, !dbg !42
  %240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 11, !dbg !42
  %241 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 12, !dbg !42
  %242 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 13, !dbg !42
  %243 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 14, !dbg !42
  %244 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 15, !dbg !42
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !42
  %245 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37"(float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, float %196, float %197, float %198, float %199, float %200, float %229, float %230, float %231, float %232, float %233, float %234, float %235, float %236, float %237, float %238, float %239, float %240, float %241, float %242, float %243, float %244, ptr addrspace(3) %144, i32 0, i32 0, ptr addrspace(3) %145, i32 0, i32 0) #2, !dbg !42
  %246 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 0, !dbg !42
  %247 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 1, !dbg !42
  %248 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 2, !dbg !42
  %249 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 3, !dbg !42
  %250 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 4, !dbg !42
  %251 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 5, !dbg !42
  %252 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 6, !dbg !42
  %253 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 7, !dbg !42
  %254 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 8, !dbg !42
  %255 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 9, !dbg !42
  %256 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 10, !dbg !42
  %257 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 11, !dbg !42
  %258 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 12, !dbg !42
  %259 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 13, !dbg !42
  %260 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 14, !dbg !42
  %261 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 15, !dbg !42
  %262 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 16, !dbg !42
  %263 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 17, !dbg !42
  %264 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 18, !dbg !42
  %265 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 19, !dbg !42
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 20, !dbg !42
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 21, !dbg !42
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 22, !dbg !42
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 23, !dbg !42
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 24, !dbg !42
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 25, !dbg !42
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 26, !dbg !42
  %273 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 27, !dbg !42
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 28, !dbg !42
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 29, !dbg !42
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 30, !dbg !42
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %245, 31, !dbg !42
  %278 = getelementptr i8, ptr addrspace(1) %.pn17165, i64 64, !dbg !39
  %279 = getelementptr half, ptr addrspace(1) %.pn81166, i64 %74, !dbg !40
  %280 = add i32 %106, 1, !dbg !34
  %281 = icmp sgt i32 %280, 3, !dbg !34
  %282 = select i1 %281, i32 0, i32 %280, !dbg !34
  %283 = shl i32 %139, 5, !dbg !41
  %284 = sub i32 %.neg161, %283, !dbg !41
  %285 = icmp slt i32 %23, %284, !dbg !35
  %.idx129 = shl i32 %282, 13, !dbg !36
  %286 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx129, !dbg !36
  %287 = and i1 %140, %285, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %288 = getelementptr inbounds nuw half, ptr addrspace(3) %286, i32 %50, !dbg !36
  %289 = getelementptr inbounds nuw half, ptr addrspace(3) %286, i32 %55, !dbg !36
  %290 = getelementptr inbounds nuw half, ptr addrspace(3) %286, i32 %60, !dbg !36
  %291 = getelementptr inbounds nuw half, ptr addrspace(3) %286, i32 %65, !dbg !36
  %292 = select i1 %287, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %288, ptr addrspace(1) %278, i32 %292) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %289, ptr addrspace(1) %278, i32 %292) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %290, ptr addrspace(1) %278, i32 %292) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %291, ptr addrspace(1) %278, i32 %292) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %293 = icmp slt i32 %32, %284, !dbg !37
  %.idx130 = shl i32 %282, 11, !dbg !38
  %294 = and i1 %140, %293, !dbg !34
  %gep = getelementptr i8, ptr addrspace(3) %70, i32 %.idx130, !dbg !38
  %295 = select i1 %294, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %279, i32 %295) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %296 = add nuw nsw i32 %139, 1, !dbg !34
  %exitcond.not = icmp eq i32 %296, %38, !dbg !34
  br i1 %exitcond.not, label %._crit_edge, label %104, !dbg !34

._crit_edge:                                      ; preds = %104, %9
  %297 = phi float [ 0.000000e+00, %9 ], [ %246, %104 ]
  %298 = phi float [ 0.000000e+00, %9 ], [ %247, %104 ]
  %299 = phi float [ 0.000000e+00, %9 ], [ %248, %104 ]
  %300 = phi float [ 0.000000e+00, %9 ], [ %249, %104 ]
  %301 = phi float [ 0.000000e+00, %9 ], [ %250, %104 ]
  %302 = phi float [ 0.000000e+00, %9 ], [ %251, %104 ]
  %303 = phi float [ 0.000000e+00, %9 ], [ %252, %104 ]
  %304 = phi float [ 0.000000e+00, %9 ], [ %253, %104 ]
  %305 = phi float [ 0.000000e+00, %9 ], [ %254, %104 ]
  %306 = phi float [ 0.000000e+00, %9 ], [ %255, %104 ]
  %307 = phi float [ 0.000000e+00, %9 ], [ %256, %104 ]
  %308 = phi float [ 0.000000e+00, %9 ], [ %257, %104 ]
  %309 = phi float [ 0.000000e+00, %9 ], [ %258, %104 ]
  %310 = phi float [ 0.000000e+00, %9 ], [ %259, %104 ]
  %311 = phi float [ 0.000000e+00, %9 ], [ %260, %104 ]
  %312 = phi float [ 0.000000e+00, %9 ], [ %261, %104 ]
  %313 = phi float [ 0.000000e+00, %9 ], [ %262, %104 ]
  %314 = phi float [ 0.000000e+00, %9 ], [ %263, %104 ]
  %315 = phi float [ 0.000000e+00, %9 ], [ %264, %104 ]
  %316 = phi float [ 0.000000e+00, %9 ], [ %265, %104 ]
  %317 = phi float [ 0.000000e+00, %9 ], [ %266, %104 ]
  %318 = phi float [ 0.000000e+00, %9 ], [ %267, %104 ]
  %319 = phi float [ 0.000000e+00, %9 ], [ %268, %104 ]
  %320 = phi float [ 0.000000e+00, %9 ], [ %269, %104 ]
  %321 = phi float [ 0.000000e+00, %9 ], [ %270, %104 ]
  %322 = phi float [ 0.000000e+00, %9 ], [ %271, %104 ]
  %323 = phi float [ 0.000000e+00, %9 ], [ %272, %104 ]
  %324 = phi float [ 0.000000e+00, %9 ], [ %273, %104 ]
  %325 = phi float [ 0.000000e+00, %9 ], [ %274, %104 ]
  %326 = phi float [ 0.000000e+00, %9 ], [ %275, %104 ]
  %327 = phi float [ 0.000000e+00, %9 ], [ %276, %104 ]
  %328 = phi float [ 0.000000e+00, %9 ], [ %277, %104 ]
  %329 = mul i32 %19, %17, !dbg !43
  %.decomposed262 = sub i32 %.decomposed, %329, !dbg !43
  %330 = add i32 %.decomposed262, %15, !dbg !44
  %331 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %297, float %298, float %299, float %300, float %301, float %302, float %303, float %304, float %305, float %306, float %307, float %308, float %309, float %310, float %311, float %312, float %313, float %314, float %315, float %316, float %317, float %318, float %319, float %320, float %321, float %322, float %323, float %324, float %325, float %326, float %327, float %328) #2, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %332 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 0, !dbg !45
  %333 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 1, !dbg !45
  %334 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 2, !dbg !45
  %335 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 3, !dbg !45
  %336 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 4, !dbg !45
  %337 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 5, !dbg !45
  %338 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 6, !dbg !45
  %339 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 7, !dbg !45
  %340 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 8, !dbg !45
  %341 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 9, !dbg !45
  %342 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 10, !dbg !45
  %343 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 11, !dbg !45
  %344 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 12, !dbg !45
  %345 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 13, !dbg !45
  %346 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 14, !dbg !45
  %347 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 15, !dbg !45
  %348 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 16, !dbg !45
  %349 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 17, !dbg !45
  %350 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 18, !dbg !45
  %351 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 19, !dbg !45
  %352 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 20, !dbg !45
  %353 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 21, !dbg !45
  %354 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 22, !dbg !45
  %355 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 23, !dbg !45
  %356 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 24, !dbg !45
  %357 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 25, !dbg !45
  %358 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 26, !dbg !45
  %359 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 27, !dbg !45
  %360 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 28, !dbg !45
  %361 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 29, !dbg !45
  %362 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 30, !dbg !45
  %363 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %331, 31, !dbg !45
  %364 = insertelement <2 x float> poison, float %332, i64 0, !dbg !45
  %365 = insertelement <2 x float> %364, float %333, i64 1, !dbg !45
  %366 = fptrunc <2 x float> %365 to <2 x half>, !dbg !45
  %367 = insertelement <2 x float> poison, float %334, i64 0, !dbg !45
  %368 = insertelement <2 x float> %367, float %335, i64 1, !dbg !45
  %369 = fptrunc <2 x float> %368 to <2 x half>, !dbg !45
  %370 = insertelement <2 x float> poison, float %336, i64 0, !dbg !45
  %371 = insertelement <2 x float> %370, float %337, i64 1, !dbg !45
  %372 = fptrunc <2 x float> %371 to <2 x half>, !dbg !45
  %373 = insertelement <2 x float> poison, float %338, i64 0, !dbg !45
  %374 = insertelement <2 x float> %373, float %339, i64 1, !dbg !45
  %375 = fptrunc <2 x float> %374 to <2 x half>, !dbg !45
  %376 = insertelement <2 x float> poison, float %340, i64 0, !dbg !45
  %377 = insertelement <2 x float> %376, float %341, i64 1, !dbg !45
  %378 = fptrunc <2 x float> %377 to <2 x half>, !dbg !45
  %379 = insertelement <2 x float> poison, float %342, i64 0, !dbg !45
  %380 = insertelement <2 x float> %379, float %343, i64 1, !dbg !45
  %381 = fptrunc <2 x float> %380 to <2 x half>, !dbg !45
  %382 = insertelement <2 x float> poison, float %344, i64 0, !dbg !45
  %383 = insertelement <2 x float> %382, float %345, i64 1, !dbg !45
  %384 = fptrunc <2 x float> %383 to <2 x half>, !dbg !45
  %385 = insertelement <2 x float> poison, float %346, i64 0, !dbg !45
  %386 = insertelement <2 x float> %385, float %347, i64 1, !dbg !45
  %387 = fptrunc <2 x float> %386 to <2 x half>, !dbg !45
  %388 = insertelement <2 x float> poison, float %348, i64 0, !dbg !45
  %389 = insertelement <2 x float> %388, float %349, i64 1, !dbg !45
  %390 = fptrunc <2 x float> %389 to <2 x half>, !dbg !45
  %391 = insertelement <2 x float> poison, float %350, i64 0, !dbg !45
  %392 = insertelement <2 x float> %391, float %351, i64 1, !dbg !45
  %393 = fptrunc <2 x float> %392 to <2 x half>, !dbg !45
  %394 = insertelement <2 x float> poison, float %352, i64 0, !dbg !45
  %395 = insertelement <2 x float> %394, float %353, i64 1, !dbg !45
  %396 = fptrunc <2 x float> %395 to <2 x half>, !dbg !45
  %397 = insertelement <2 x float> poison, float %354, i64 0, !dbg !45
  %398 = insertelement <2 x float> %397, float %355, i64 1, !dbg !45
  %399 = fptrunc <2 x float> %398 to <2 x half>, !dbg !45
  %400 = insertelement <2 x float> poison, float %356, i64 0, !dbg !45
  %401 = insertelement <2 x float> %400, float %357, i64 1, !dbg !45
  %402 = fptrunc <2 x float> %401 to <2 x half>, !dbg !45
  %403 = insertelement <2 x float> poison, float %358, i64 0, !dbg !45
  %404 = insertelement <2 x float> %403, float %359, i64 1, !dbg !45
  %405 = fptrunc <2 x float> %404 to <2 x half>, !dbg !45
  %406 = insertelement <2 x float> poison, float %360, i64 0, !dbg !45
  %407 = insertelement <2 x float> %406, float %361, i64 1, !dbg !45
  %408 = fptrunc <2 x float> %407 to <2 x half>, !dbg !45
  %409 = insertelement <2 x float> poison, float %362, i64 0, !dbg !45
  %410 = insertelement <2 x float> %409, float %363, i64 1, !dbg !45
  %411 = fptrunc <2 x float> %410 to <2 x half>, !dbg !45
  %412 = shl i32 %330, 7, !dbg !46
  %413 = or disjoint i32 %412, %32, !dbg !47
  %414 = or disjoint i32 %413, 32, !dbg !47
  %415 = or disjoint i32 %413, 64, !dbg !47
  %416 = or disjoint i32 %413, 96, !dbg !47
  %417 = mul i32 %413, %7, !dbg !48
  %418 = mul i32 %414, %7, !dbg !48
  %419 = mul i32 %415, %7, !dbg !48
  %420 = mul i32 %416, %7, !dbg !48
  %421 = sext i32 %417 to i64, !dbg !49
  %422 = getelementptr half, ptr addrspace(1) %2, i64 %421, !dbg !49
  %423 = sext i32 %418 to i64, !dbg !49
  %424 = getelementptr half, ptr addrspace(1) %2, i64 %423, !dbg !49
  %425 = sext i32 %419 to i64, !dbg !49
  %426 = getelementptr half, ptr addrspace(1) %2, i64 %425, !dbg !49
  %427 = sext i32 %420 to i64, !dbg !49
  %428 = getelementptr half, ptr addrspace(1) %2, i64 %427, !dbg !49
  %429 = sext i32 %24 to i64, !dbg !50
  %430 = getelementptr half, ptr addrspace(1) %422, i64 %429, !dbg !50
  %431 = getelementptr half, ptr addrspace(1) %424, i64 %429, !dbg !50
  %432 = getelementptr half, ptr addrspace(1) %426, i64 %429, !dbg !50
  %433 = getelementptr half, ptr addrspace(1) %428, i64 %429, !dbg !50
  %434 = icmp slt i32 %413, 1, !dbg !51
  %435 = icmp slt i32 %412, 0, !dbg !51
  %436 = icmp slt i32 %24, %3, !dbg !52
  %437 = and i1 %436, %434, !dbg !53
  %438 = and i1 %436, %435, !dbg !53
  %439 = shl nuw nsw i32 %21, 1, !dbg !54
  %440 = and i32 %439, 6, !dbg !54
  %441 = shl nuw nsw i32 %29, 4, !dbg !54
  %442 = or disjoint i32 %440, %441, !dbg !54
  %443 = and i32 %22, 224, !dbg !54
  %444 = or disjoint i32 %442, %443, !dbg !54
  %445 = shl nuw nsw i32 %30, 4, !dbg !54
  %446 = or disjoint i32 %444, %445, !dbg !54
  %447 = and i32 %22, 248, !dbg !54
  %448 = or disjoint i32 %447, %47, !dbg !54
  %449 = or disjoint i32 %448, %48, !dbg !54
  %450 = lshr i32 %446, 2, !dbg !54
  %451 = and i32 %450, 536870904, !dbg !54
  %452 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %451, !dbg !54
  %453 = getelementptr inbounds nuw half, ptr addrspace(3) %452, i32 %446, !dbg !54
  store <2 x half> %366, ptr addrspace(3) %453, align 4, !dbg !54
  %454 = or disjoint i32 %446, 256, !dbg !54
  %455 = lshr i32 %454, 2, !dbg !54
  %456 = and i32 %455, 1073741816, !dbg !54
  %457 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %456, !dbg !54
  %458 = getelementptr inbounds nuw half, ptr addrspace(3) %457, i32 %454, !dbg !54
  store <2 x half> %369, ptr addrspace(3) %458, align 4, !dbg !54
  %459 = getelementptr inbounds nuw half, ptr addrspace(3) %452, i32 %446, !dbg !54
  %460 = getelementptr inbounds nuw i8, ptr addrspace(3) %459, i32 16, !dbg !54
  store <2 x half> %372, ptr addrspace(3) %460, align 4, !dbg !54
  %461 = or disjoint i32 %446, 264, !dbg !54
  %462 = lshr i32 %461, 2, !dbg !54
  %463 = and i32 %462, 1073741816, !dbg !54
  %464 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %463, !dbg !54
  %465 = getelementptr inbounds nuw half, ptr addrspace(3) %464, i32 %461, !dbg !54
  store <2 x half> %375, ptr addrspace(3) %465, align 4, !dbg !54
  %466 = getelementptr inbounds nuw half, ptr addrspace(3) %452, i32 %446, !dbg !54
  %467 = getelementptr inbounds nuw i8, ptr addrspace(3) %466, i32 32, !dbg !54
  store <2 x half> %378, ptr addrspace(3) %467, align 4, !dbg !54
  %468 = or disjoint i32 %446, 272, !dbg !54
  %469 = lshr i32 %468, 2, !dbg !54
  %470 = and i32 %469, 1073741816, !dbg !54
  %471 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %470, !dbg !54
  %472 = getelementptr inbounds nuw half, ptr addrspace(3) %471, i32 %468, !dbg !54
  store <2 x half> %381, ptr addrspace(3) %472, align 4, !dbg !54
  %473 = getelementptr inbounds nuw half, ptr addrspace(3) %452, i32 %446, !dbg !54
  %474 = getelementptr inbounds nuw i8, ptr addrspace(3) %473, i32 48, !dbg !54
  store <2 x half> %384, ptr addrspace(3) %474, align 4, !dbg !54
  %475 = or disjoint i32 %446, 280, !dbg !54
  %476 = lshr i32 %475, 2, !dbg !54
  %477 = and i32 %476, 1073741816, !dbg !54
  %478 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %477, !dbg !54
  %479 = getelementptr inbounds nuw half, ptr addrspace(3) %478, i32 %475, !dbg !54
  store <2 x half> %387, ptr addrspace(3) %479, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  %480 = lshr exact i32 %449, 2, !dbg !54
  %481 = and i32 %480, 248, !dbg !54
  %482 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %481, !dbg !54
  %483 = getelementptr inbounds nuw half, ptr addrspace(3) %482, i32 %449, !dbg !54
  %484 = load <4 x i32>, ptr addrspace(3) %483, align 16, !dbg !54
  %485 = or disjoint i32 %449, 1024, !dbg !54
  %486 = lshr exact i32 %485, 2, !dbg !54
  %487 = and i32 %486, 536870904, !dbg !54
  %488 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %487, !dbg !54
  %489 = getelementptr inbounds nuw half, ptr addrspace(3) %488, i32 %485, !dbg !54
  %490 = load <4 x i32>, ptr addrspace(3) %489, align 16, !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  store <2 x half> %390, ptr addrspace(3) %453, align 4, !dbg !54
  store <2 x half> %393, ptr addrspace(3) %458, align 4, !dbg !54
  store <2 x half> %396, ptr addrspace(3) %460, align 4, !dbg !54
  store <2 x half> %399, ptr addrspace(3) %465, align 4, !dbg !54
  store <2 x half> %402, ptr addrspace(3) %467, align 4, !dbg !54
  store <2 x half> %405, ptr addrspace(3) %472, align 4, !dbg !54
  store <2 x half> %408, ptr addrspace(3) %474, align 4, !dbg !54
  store <2 x half> %411, ptr addrspace(3) %479, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  %491 = load <4 x i32>, ptr addrspace(3) %483, align 16, !dbg !54
  %492 = load <4 x i32>, ptr addrspace(3) %489, align 16, !dbg !54
  %.extract = extractelement <4 x i32> %484, i64 0, !dbg !54
  %.extract132 = extractelement <4 x i32> %484, i64 1, !dbg !54
  %.extract134 = extractelement <4 x i32> %484, i64 2, !dbg !54
  %.extract136 = extractelement <4 x i32> %484, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract132, i32 %.extract134, i32 %.extract136, ptr addrspace(1) %430, i1 %437) #2, !dbg !54
  %.extract138 = extractelement <4 x i32> %490, i64 0, !dbg !54
  %.extract140 = extractelement <4 x i32> %490, i64 1, !dbg !54
  %.extract142 = extractelement <4 x i32> %490, i64 2, !dbg !54
  %.extract144 = extractelement <4 x i32> %490, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract138, i32 %.extract140, i32 %.extract142, i32 %.extract144, ptr addrspace(1) %431, i1 %438) #2, !dbg !54
  %.extract146 = extractelement <4 x i32> %491, i64 0, !dbg !54
  %.extract148 = extractelement <4 x i32> %491, i64 1, !dbg !54
  %.extract150 = extractelement <4 x i32> %491, i64 2, !dbg !54
  %.extract152 = extractelement <4 x i32> %491, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract146, i32 %.extract148, i32 %.extract150, i32 %.extract152, ptr addrspace(1) %432, i1 %438) #2, !dbg !54
  %.extract154 = extractelement <4 x i32> %492, i64 0, !dbg !54
  %.extract156 = extractelement <4 x i32> %492, i64 1, !dbg !54
  %.extract158 = extractelement <4 x i32> %492, i64 2, !dbg !54
  %.extract160 = extractelement <4 x i32> %492, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract154, i32 %.extract156, i32 %.extract158, i32 %.extract160, ptr addrspace(1) %433, i1 %438) #2, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #4

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "gated_mlp.py", directory: "/home/ubuntu/PTX_dataset/triton_ptx")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !1, file: !1, line: 68, type: !6, scopeLine: 68, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 91, column: 24, scope: !5)
!9 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !12)
!10 = distinct !DILexicalBlockFile(scope: !5, file: !11, discriminator: 0)
!11 = !DIFile(filename: "standard.py", directory: "/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language")
!12 = !DILocation(line: 93, column: 27, scope: !5)
!13 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !12)
!14 = !DILocation(line: 94, column: 38, scope: !5)
!15 = !DILocation(line: 95, column: 22, scope: !5)
!16 = !DILocation(line: 96, column: 29, scope: !5)
!17 = !DILocation(line: 97, column: 35, scope: !5)
!18 = !DILocation(line: 97, column: 48, scope: !5)
!19 = !DILocation(line: 98, column: 34, scope: !5)
!20 = !DILocation(line: 99, column: 40, scope: !5)
!21 = !DILocation(line: 109, column: 23, scope: !5)
!22 = !DILocation(line: 109, column: 51, scope: !5)
!23 = !DILocation(line: 109, column: 38, scope: !5)
!24 = !DILocation(line: 109, column: 68, scope: !5)
!25 = !DILocation(line: 111, column: 22, scope: !5)
!26 = !DILocation(line: 112, column: 29, scope: !5)
!27 = !DILocation(line: 112, column: 40, scope: !5)
!28 = !DILocation(line: 112, column: 52, scope: !5)
!29 = !DILocation(line: 112, column: 22, scope: !5)
!30 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !31)
!31 = !DILocation(line: 120, column: 33, scope: !5)
!32 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !31)
!33 = !DILocation(line: 129, column: 33, scope: !5)
!34 = !DILocation(line: 120, column: 22, scope: !5)
!35 = !DILocation(line: 123, column: 51, scope: !5)
!36 = !DILocation(line: 123, column: 20, scope: !5)
!37 = !DILocation(line: 124, column: 51, scope: !5)
!38 = !DILocation(line: 124, column: 20, scope: !5)
!39 = !DILocation(line: 128, column: 18, scope: !5)
!40 = !DILocation(line: 129, column: 18, scope: !5)
!41 = !DILocation(line: 123, column: 55, scope: !5)
!42 = !DILocation(line: 126, column: 35, scope: !5)
!43 = !DILocation(line: 98, column: 54, scope: !5)
!44 = !DILocation(line: 98, column: 27, scope: !5)
!45 = !DILocation(line: 134, column: 23, scope: !5)
!46 = !DILocation(line: 138, column: 22, scope: !5)
!47 = !DILocation(line: 138, column: 37, scope: !5)
!48 = !DILocation(line: 140, column: 33, scope: !5)
!49 = !DILocation(line: 140, column: 21, scope: !5)
!50 = !DILocation(line: 140, column: 52, scope: !5)
!51 = !DILocation(line: 141, column: 33, scope: !5)
!52 = !DILocation(line: 141, column: 58, scope: !5)
!53 = !DILocation(line: 141, column: 39, scope: !5)
!54 = !DILocation(line: 142, column: 21, scope: !5)
!55 = !DILocation(line: 142, column: 4, scope: !5)
