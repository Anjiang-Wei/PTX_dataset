//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	matmul_kernel           // -- Begin function matmul_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @matmul_kernel
.visible .entry matmul_kernel(
	.param .u64 .ptr .global .align 1 matmul_kernel_param_0,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_1,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_2,
	.param .u32 matmul_kernel_param_3,
	.param .u32 matmul_kernel_param_4,
	.param .u32 matmul_kernel_param_5,
	.param .u32 matmul_kernel_param_6,
	.param .u32 matmul_kernel_param_7,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_8
)
.reqntid 128
{
	.reg .pred 	%p<45>;
	.reg .b32 	%r<1191>;
	.reg .b64 	%rd<87>;
	.loc	1 68 0                          // gated_mlp.py:68:0
$L__func_begin0:
	.loc	1 68 0                          // gated_mlp.py:68:0

// %bb.0:
	ld.param.b32 	%r229, [matmul_kernel_param_7];
	ld.param.b32 	%r228, [matmul_kernel_param_4];
	ld.param.b32 	%r227, [matmul_kernel_param_3];
	ld.param.b64 	%rd19, [matmul_kernel_param_2];
	ld.param.b64 	%rd18, [matmul_kernel_param_1];
	ld.param.b64 	%rd17, [matmul_kernel_param_0];
$L__tmp0:
	.loc	1 91 24                         // gated_mlp.py:91:24
	mov.u32 	%r267, %ctaid.x;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:93:27 ]
	add.s32 	%r268, %r227, 127;
	.loc	2 40 28                         // standard.py:40:28 @[ gated_mlp.py:93:27 ]
	shr.s32 	%r269, %r268, 31;
	shr.u32 	%r270, %r269, 25;
	add.s32 	%r271, %r268, %r270;
	shr.s32 	%r272, %r271, 7;
$L__tmp2:
	.loc	1 94 38                         // gated_mlp.py:94:38
	shl.b32 	%r274, %r272, 3;
	.loc	1 95 22                         // gated_mlp.py:95:22
	div.s32 	%r275, %r267, %r274;
	ld.param.b32 	%r276, [matmul_kernel_param_6];
	.loc	1 96 29                         // gated_mlp.py:96:29
	shl.b32 	%r1, %r275, 3;
	.loc	1 97 35                         // gated_mlp.py:97:35
	sub.s32 	%r277, 1, %r1;
	.loc	1 97 48                         // gated_mlp.py:97:48
	min.s32 	%r2, %r277, 8;
	.loc	1 98 34                         // gated_mlp.py:98:34
	mul.lo.s32 	%r278, %r275, %r274;
	sub.s32 	%r3, %r267, %r278;
	.loc	1 99 40                         // gated_mlp.py:99:40
	div.s32 	%r4, %r3, %r2;
	.loc	1 109 23                        // gated_mlp.py:109:23
	shl.b32 	%r279, %r4, 7;
	.loc	1 109 51                        // gated_mlp.py:109:51
	mov.u32 	%r5, %tid.x;
	shl.b32 	%r6, %r5, 3;
	and.b32 	%r7, %r6, 24;
	and.b32 	%r280, %r6, 56;
	and.b32 	%r281, %r5, 8;
	shl.b32 	%r282, %r281, 3;
	.loc	1 109 38                        // gated_mlp.py:109:38
	or.b32 	%r283, %r279, %r282;
	or.b32 	%r8, %r283, %r280;
	.loc	1 109 68                        // gated_mlp.py:109:68
	rem.s32 	%r284, %r8, %r227;
	.loc	1 111 22                        // gated_mlp.py:111:22
	mul.wide.u32 	%rd38, %r7, 2;
	add.s64 	%rd20, %rd17, %rd38;
	.loc	1 112 29                        // gated_mlp.py:112:29
	and.b32 	%r10, %r5, 16;
	bfe.s32 	%r285, %r5, 4, 1;
	bfe.s32 	%r286, %r5, 5, 1;
	and.b32 	%r287, %r5, 32;
	bfe.s32 	%r288, %r5, 6, 1;
	and.b32 	%r289, %r5, 64;
	shr.u32 	%r11, %r5, 4;
	bfe.u32 	%r12, %r5, 4, 3;
	or.b32 	%r13, %r12, 8;
	or.b32 	%r14, %r12, 16;
	or.b32 	%r15, %r12, 24;
	.loc	1 112 40                        // gated_mlp.py:112:40
	shl.b32 	%r290, %r276, 3;
	.loc	1 112 52                        // gated_mlp.py:112:52
	mad.lo.s32 	%r291, %r276, %r12, %r284;
	add.s32 	%r292, %r291, %r290;
	add.s32 	%r293, %r292, %r290;
	add.s32 	%r294, %r293, %r290;
	.loc	1 112 22                        // gated_mlp.py:112:22
	mul.wide.s32 	%rd39, %r291, 2;
	add.s64 	%rd22, %rd18, %rd39;
	mul.wide.s32 	%rd40, %r292, 2;
	add.s64 	%rd23, %rd18, %rd40;
	mul.wide.s32 	%rd41, %r293, 2;
	add.s64 	%rd24, %rd18, %rd41;
	mul.wide.s32 	%rd42, %r294, 2;
	add.s64 	%rd25, %rd18, %rd42;
$L__tmp3:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:120:33 ]
	add.s32 	%r295, %r228, 31;
$L__tmp4:
	.loc	1 129 33                        // gated_mlp.py:129:33
	shl.b32 	%r299, %r276, 5;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.lt.s32 	%p1, %r295, 32;
	setp.gt.s32 	%p2, %r295, 31;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p3, %r7, %r228;
	.loc	1 123 20                        // gated_mlp.py:123:20
	and.b32 	%r300, %r5, 24;
	mul.lo.s32 	%r301, %r300, 9;
	xor.b32 	%r302, %r301, %r280;
	shl.b32 	%r17, %r287, 3;
	shl.b32 	%r18, %r289, 3;
	or.b32 	%r303, %r17, %r302;
	or.b32 	%r19, %r303, %r18;
	shl.b32 	%r304, %r19, 1;
	mov.b32 	%r305, global_smem;
	add.s32 	%r306, %r305, 32768;
	add.s32 	%r230, %r306, %r304;
	or.b32 	%r307, %r280, 1024;
	xor.b32 	%r308, %r301, %r307;
	or.b32 	%r309, %r17, %r308;
	or.b32 	%r20, %r309, %r18;
	shl.b32 	%r310, %r20, 1;
	add.s32 	%r232, %r306, %r310;
	selp.b32 	%r311, 16, 0, %p2;
	selp.b32 	%r233, %r311, 0, %p3;
	// begin inline asm
	cp.async.cg.shared.global [ %r230 + 0 ], [ %rd20 + 0 ], 0x10, %r233;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r232 + 0 ], [ %rd20 + 0 ], 0x10, %r233;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p4, %r12, %r228;
	setp.lt.s32 	%p5, %r13, %r228;
	setp.lt.s32 	%p6, %r14, %r228;
	setp.lt.s32 	%p7, %r15, %r228;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r312, %r281, 8;
	or.b32 	%r313, %r280, %r312;
	and.b32 	%r314, %r285, 72;
	and.b32 	%r315, %r286, 144;
	and.b32 	%r316, %r288, 288;
	or.b32 	%r317, %r315, %r314;
	xor.b32 	%r318, %r317, %r313;
	xor.b32 	%r21, %r318, %r316;
	shl.b32 	%r319, %r21, 1;
	add.s32 	%r234, %r305, %r319;
	or.b32 	%r320, %r313, 512;
	or.b32 	%r321, %r317, %r316;
	xor.b32 	%r22, %r321, %r320;
	shl.b32 	%r322, %r22, 1;
	add.s32 	%r236, %r305, %r322;
	or.b32 	%r323, %r307, %r312;
	xor.b32 	%r23, %r321, %r323;
	shl.b32 	%r324, %r23, 1;
	add.s32 	%r238, %r305, %r324;
	or.b32 	%r325, %r313, 1536;
	xor.b32 	%r24, %r321, %r325;
	shl.b32 	%r326, %r24, 1;
	add.s32 	%r240, %r305, %r326;
	selp.b32 	%r235, %r311, 0, %p4;
	// begin inline asm
	cp.async.cg.shared.global [ %r234 + 0 ], [ %rd22 + 0 ], 0x10, %r235;
	// end inline asm
	selp.b32 	%r237, %r311, 0, %p5;
	// begin inline asm
	cp.async.cg.shared.global [ %r236 + 0 ], [ %rd23 + 0 ], 0x10, %r237;
	// end inline asm
	selp.b32 	%r239, %r311, 0, %p6;
	// begin inline asm
	cp.async.cg.shared.global [ %r238 + 0 ], [ %rd24 + 0 ], 0x10, %r239;
	// end inline asm
	selp.b32 	%r241, %r311, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r240 + 0 ], [ %rd25 + 0 ], 0x10, %r241;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p8, %r295, 63;
	.loc	1 128 18                        // gated_mlp.py:128:18
	add.s64 	%rd26, %rd20, 64;
	.loc	1 129 18                        // gated_mlp.py:129:18
	mul.wide.s32 	%rd43, %r299, 2;
	add.s64 	%rd28, %rd22, %rd43;
	add.s64 	%rd29, %rd23, %rd43;
	add.s64 	%rd30, %rd24, %rd43;
	add.s64 	%rd31, %rd25, %rd43;
	.loc	1 123 55                        // gated_mlp.py:123:55
	add.s32 	%r327, %r228, -32;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p9, %r7, %r327;
	.loc	1 123 20                        // gated_mlp.py:123:20
	bar.sync 	0;
	add.s32 	%r328, %r305, 36864;
	add.s32 	%r242, %r328, %r304;
	add.s32 	%r244, %r328, %r310;
	selp.b32 	%r329, 16, 0, %p9;
	selp.b32 	%r245, %r329, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r242 + 0 ], [ %rd26 + 0 ], 0x10, %r245;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r244 + 0 ], [ %rd26 + 0 ], 0x10, %r245;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p10, %r12, %r327;
	setp.lt.s32 	%p11, %r13, %r327;
	setp.lt.s32 	%p12, %r14, %r327;
	setp.lt.s32 	%p13, %r15, %r327;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r330, %r305, 8192;
	add.s32 	%r246, %r330, %r319;
	add.s32 	%r248, %r330, %r322;
	add.s32 	%r250, %r330, %r324;
	add.s32 	%r252, %r330, %r326;
	selp.b32 	%r331, 16, 0, %p10;
	selp.b32 	%r247, %r331, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r246 + 0 ], [ %rd28 + 0 ], 0x10, %r247;
	// end inline asm
	selp.b32 	%r332, 16, 0, %p11;
	selp.b32 	%r249, %r332, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r248 + 0 ], [ %rd29 + 0 ], 0x10, %r249;
	// end inline asm
	selp.b32 	%r333, 16, 0, %p12;
	selp.b32 	%r251, %r333, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r250 + 0 ], [ %rd30 + 0 ], 0x10, %r251;
	// end inline asm
	selp.b32 	%r334, 16, 0, %p13;
	selp.b32 	%r253, %r334, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r252 + 0 ], [ %rd31 + 0 ], 0x10, %r253;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p14, %r295, 95;
	.loc	1 128 18                        // gated_mlp.py:128:18
	add.s64 	%rd32, %rd20, 128;
	.loc	1 129 18                        // gated_mlp.py:129:18
	add.s64 	%rd34, %rd28, %rd43;
	add.s64 	%rd35, %rd29, %rd43;
	add.s64 	%rd36, %rd30, %rd43;
	add.s64 	%rd37, %rd31, %rd43;
	.loc	1 123 55                        // gated_mlp.py:123:55
	add.s32 	%r335, %r228, -64;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p15, %r7, %r335;
	.loc	1 123 20                        // gated_mlp.py:123:20
	bar.sync 	0;
	add.s32 	%r336, %r305, 40960;
	add.s32 	%r254, %r336, %r304;
	add.s32 	%r256, %r336, %r310;
	selp.b32 	%r337, 16, 0, %p15;
	selp.b32 	%r257, %r337, 0, %p14;
	// begin inline asm
	cp.async.cg.shared.global [ %r254 + 0 ], [ %rd32 + 0 ], 0x10, %r257;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r256 + 0 ], [ %rd32 + 0 ], 0x10, %r257;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p16, %r12, %r335;
	setp.lt.s32 	%p17, %r13, %r335;
	setp.lt.s32 	%p18, %r14, %r335;
	setp.lt.s32 	%p19, %r15, %r335;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r338, %r305, 16384;
	add.s32 	%r258, %r338, %r319;
	add.s32 	%r260, %r338, %r322;
	add.s32 	%r262, %r338, %r324;
	add.s32 	%r264, %r338, %r326;
	selp.b32 	%r339, 16, 0, %p16;
	selp.b32 	%r259, %r339, 0, %p14;
	// begin inline asm
	cp.async.cg.shared.global [ %r258 + 0 ], [ %rd34 + 0 ], 0x10, %r259;
	// end inline asm
	selp.b32 	%r340, 16, 0, %p17;
	selp.b32 	%r261, %r340, 0, %p14;
	// begin inline asm
	cp.async.cg.shared.global [ %r260 + 0 ], [ %rd35 + 0 ], 0x10, %r261;
	// end inline asm
	selp.b32 	%r341, 16, 0, %p18;
	selp.b32 	%r263, %r341, 0, %p14;
	// begin inline asm
	cp.async.cg.shared.global [ %r262 + 0 ], [ %rd36 + 0 ], 0x10, %r263;
	// end inline asm
	selp.b32 	%r342, 16, 0, %p19;
	selp.b32 	%r265, %r342, 0, %p14;
	// begin inline asm
	cp.async.cg.shared.global [ %r264 + 0 ], [ %rd37 + 0 ], 0x10, %r265;
	// end inline asm
	cp.async.commit_group;
	mov.b32 	%r1062, 0f00000000;
	mov.b32 	%r1063, %r1062;
	mov.b32 	%r1064, %r1062;
	mov.b32 	%r1065, %r1062;
	mov.b32 	%r1066, %r1062;
	mov.b32 	%r1067, %r1062;
	mov.b32 	%r1068, %r1062;
	mov.b32 	%r1069, %r1062;
	mov.b32 	%r1070, %r1062;
	mov.b32 	%r1071, %r1062;
	mov.b32 	%r1072, %r1062;
	mov.b32 	%r1073, %r1062;
	mov.b32 	%r1074, %r1062;
	mov.b32 	%r1075, %r1062;
	mov.b32 	%r1076, %r1062;
	mov.b32 	%r1077, %r1062;
	mov.b32 	%r1078, %r1062;
	mov.b32 	%r1079, %r1062;
	mov.b32 	%r1080, %r1062;
	mov.b32 	%r1081, %r1062;
	mov.b32 	%r1082, %r1062;
	mov.b32 	%r1083, %r1062;
	mov.b32 	%r1084, %r1062;
	mov.b32 	%r1085, %r1062;
	mov.b32 	%r1086, %r1062;
	mov.b32 	%r1087, %r1062;
	mov.b32 	%r1088, %r1062;
	mov.b32 	%r1089, %r1062;
	mov.b32 	%r1090, %r1062;
	mov.b32 	%r1091, %r1062;
	mov.b32 	%r1092, %r1062;
	mov.b32 	%r1093, %r1062;
	mov.b32 	%r1094, %r1062;
	mov.b32 	%r1095, %r1062;
	mov.b32 	%r1096, %r1062;
	mov.b32 	%r1097, %r1062;
	mov.b32 	%r1098, %r1062;
	mov.b32 	%r1099, %r1062;
	mov.b32 	%r1100, %r1062;
	mov.b32 	%r1101, %r1062;
	mov.b32 	%r1102, %r1062;
	mov.b32 	%r1103, %r1062;
	mov.b32 	%r1104, %r1062;
	mov.b32 	%r1105, %r1062;
	mov.b32 	%r1106, %r1062;
	mov.b32 	%r1107, %r1062;
	mov.b32 	%r1108, %r1062;
	mov.b32 	%r1109, %r1062;
	mov.b32 	%r1110, %r1062;
	mov.b32 	%r1111, %r1062;
	mov.b32 	%r1112, %r1062;
	mov.b32 	%r1113, %r1062;
	mov.b32 	%r1114, %r1062;
	mov.b32 	%r1115, %r1062;
	mov.b32 	%r1116, %r1062;
	mov.b32 	%r1117, %r1062;
	mov.b32 	%r1118, %r1062;
	mov.b32 	%r1119, %r1062;
	mov.b32 	%r1120, %r1062;
	mov.b32 	%r1121, %r1062;
	mov.b32 	%r1122, %r1062;
	mov.b32 	%r1123, %r1062;
	mov.b32 	%r1124, %r1062;
	mov.b32 	%r1125, %r1062;
	.loc	1 120 22                        // gated_mlp.py:120:22
	@%p1 bra 	$L__BB0_3;
// %bb.1:                               // %.lr.ph
	.loc	1 0 22                          // gated_mlp.py:0:22
	shr.u32 	%r9, %r5, 5;
	cvt.s64.s32 	%rd1, %r291;
	cvt.s64.s32 	%rd2, %r292;
	cvt.s64.s32 	%rd3, %r293;
	cvt.s64.s32 	%rd4, %r294;
	shr.s32 	%r296, %r295, 31;
	shr.u32 	%r297, %r296, 27;
	add.s32 	%r298, %r295, %r297;
	shr.s32 	%r16, %r298, 5;
	cvt.s64.s32 	%rd5, %r299;
	add.s32 	%r25, %r16, -3;
	add.s32 	%r1059, %r228, -96;
	.loc	1 120 22                        // gated_mlp.py:120:22
	shl.b64 	%rd6, %rd4, 1;
	mad.lo.s64 	%rd86, %rd5, 6, %rd18;
	shl.b64 	%rd8, %rd5, 1;
	shl.b64 	%rd9, %rd3, 1;
	shl.b64 	%rd10, %rd2, 1;
	shl.b64 	%rd11, %rd1, 1;
	and.b32 	%r347, %r5, 3;
	mul.wide.u32 	%rd44, %r347, 16;
	add.s64 	%rd45, %rd44, %rd17;
	add.s64 	%rd85, %rd45, 192;
	mov.b32 	%r739, 0;
	mov.b32 	%r1062, 0f00000000;
	mov.b32 	%r1061, 2;
	mov.b32 	%r1060, -1;
	mov.b32 	%r1063, %r1062;
	mov.b32 	%r1064, %r1062;
	mov.b32 	%r1065, %r1062;
	mov.b32 	%r1066, %r1062;
	mov.b32 	%r1067, %r1062;
	mov.b32 	%r1068, %r1062;
	mov.b32 	%r1069, %r1062;
	mov.b32 	%r1070, %r1062;
	mov.b32 	%r1071, %r1062;
	mov.b32 	%r1072, %r1062;
	mov.b32 	%r1073, %r1062;
	mov.b32 	%r1074, %r1062;
	mov.b32 	%r1075, %r1062;
	mov.b32 	%r1076, %r1062;
	mov.b32 	%r1077, %r1062;
	mov.b32 	%r1078, %r1062;
	mov.b32 	%r1079, %r1062;
	mov.b32 	%r1080, %r1062;
	mov.b32 	%r1081, %r1062;
	mov.b32 	%r1082, %r1062;
	mov.b32 	%r1083, %r1062;
	mov.b32 	%r1084, %r1062;
	mov.b32 	%r1085, %r1062;
	mov.b32 	%r1086, %r1062;
	mov.b32 	%r1087, %r1062;
	mov.b32 	%r1088, %r1062;
	mov.b32 	%r1089, %r1062;
	mov.b32 	%r1090, %r1062;
	mov.b32 	%r1091, %r1062;
	mov.b32 	%r1092, %r1062;
	mov.b32 	%r1093, %r1062;
	mov.b32 	%r1094, %r1062;
	mov.b32 	%r1095, %r1062;
	mov.b32 	%r1096, %r1062;
	mov.b32 	%r1097, %r1062;
	mov.b32 	%r1098, %r1062;
	mov.b32 	%r1099, %r1062;
	mov.b32 	%r1100, %r1062;
	mov.b32 	%r1101, %r1062;
	mov.b32 	%r1102, %r1062;
	mov.b32 	%r1103, %r1062;
	mov.b32 	%r1104, %r1062;
	mov.b32 	%r1105, %r1062;
	mov.b32 	%r1106, %r1062;
	mov.b32 	%r1107, %r1062;
	mov.b32 	%r1108, %r1062;
	mov.b32 	%r1109, %r1062;
	mov.b32 	%r1110, %r1062;
	mov.b32 	%r1111, %r1062;
	mov.b32 	%r1112, %r1062;
	mov.b32 	%r1113, %r1062;
	mov.b32 	%r1114, %r1062;
	mov.b32 	%r1115, %r1062;
	mov.b32 	%r1116, %r1062;
	mov.b32 	%r1117, %r1062;
	mov.b32 	%r1118, %r1062;
	mov.b32 	%r1119, %r1062;
	mov.b32 	%r1120, %r1062;
	mov.b32 	%r1121, %r1062;
	mov.b32 	%r1122, %r1062;
	mov.b32 	%r1123, %r1062;
	mov.b32 	%r1124, %r1062;
	mov.b32 	%r1125, %r1062;
	mov.b32 	%r1126, %r739;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	setp.lt.s32 	%p22, %r1126, %r25;
	add.s32 	%r756, %r1060, 1;
	setp.gt.s32 	%p23, %r756, 3;
	selp.b32 	%r1060, 0, %r756, %p23;
	.loc	1 123 20                        // gated_mlp.py:123:20
	cp.async.wait_group 	4;
	bar.sync 	0;
	shl.b32 	%r757, %r1060, 12;
	add.s32 	%r668, %r306, %r757;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r760, %r1060, 13;
	add.s32 	%r671, %r305, %r760;
	.loc	1 126 35                        // gated_mlp.py:126:35
	shfl.sync.idx.b32 	%r761, %r9, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r762, %r668, 4, 14;
	cvt.u64.u32 	%rd56, %r762;
	or.b64 	%rd46, %rd56, -9223371899399045120;
	bfe.u32 	%r763, %r671, 4, 14;
	cvt.u64.u32 	%rd57, %r763;
	or.b64 	%rd47, %rd57, 4611686293322072064;
	mov.pred 	%p20, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r1062,%r1063,%r1064,%r1065,%r1066,%r1067,%r1068,%r1069,%r1070,%r1071,%r1072,%r1073,%r1074,%r1075,%r1076,%r1077,%r1078,%r1079,%r1080,%r1081,%r1082,%r1083,%r1084,%r1085,%r1086,%r1087,%r1088,%r1089,%r1090,%r1091,%r1092,%r1093,%r1094,%r1095,%r1096,%r1097,%r1098,%r1099,%r1100,%r1101,%r1102,%r1103,%r1104,%r1105,%r1106,%r1107,%r1108,%r1109,%r1110,%r1111,%r1112,%r1113,%r1114,%r1115,%r1116,%r1117,%r1118,%r1119,%r1120,%r1121,%r1122,%r1123,%r1124,%r1125}, %rd46, %rd47, %p20, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r764, %r668, 32;
	bfe.u32 	%r765, %r764, 4, 14;
	cvt.u64.u32 	%rd58, %r765;
	or.b64 	%rd48, %rd58, -9223371899399045120;
	add.s32 	%r766, %r671, 2048;
	bfe.u32 	%r767, %r766, 4, 14;
	cvt.u64.u32 	%rd59, %r767;
	or.b64 	%rd49, %rd59, 4611686293322072064;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r1062,%r1063,%r1064,%r1065,%r1066,%r1067,%r1068,%r1069,%r1070,%r1071,%r1072,%r1073,%r1074,%r1075,%r1076,%r1077,%r1078,%r1079,%r1080,%r1081,%r1082,%r1083,%r1084,%r1085,%r1086,%r1087,%r1088,%r1089,%r1090,%r1091,%r1092,%r1093,%r1094,%r1095,%r1096,%r1097,%r1098,%r1099,%r1100,%r1101,%r1102,%r1103,%r1104,%r1105,%r1106,%r1107,%r1108,%r1109,%r1110,%r1111,%r1112,%r1113,%r1114,%r1115,%r1116,%r1117,%r1118,%r1119,%r1120,%r1121,%r1122,%r1123,%r1124,%r1125}, %rd48, %rd49, %p20, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r669, %r739;
	mov.b32 	%r670, %r739;
	mov.b32 	%r672, %r739;
	mov.b32 	%r673, %r739;
	// begin inline asm
	// wait for regs: %r1062,%r1063,%r1064,%r1065,%r1066,%r1067,%r1068,%r1069,%r1070,%r1071,%r1072,%r1073,%r1074,%r1075,%r1076,%r1077,%r1078,%r1079,%r1080,%r1081,%r1082,%r1083,%r1084,%r1085,%r1086,%r1087,%r1088,%r1089,%r1090,%r1091,%r1092,%r1093,%r1094,%r1095,%r1096,%r1097,%r1098,%r1099,%r1100,%r1101,%r1102,%r1103,%r1104,%r1105,%r1106,%r1107,%r1108,%r1109,%r1110,%r1111,%r1112,%r1113,%r1114,%r1115,%r1116,%r1117,%r1118,%r1119,%r1120,%r1121,%r1122,%r1123,%r1124,%r1125,%r668,%r669,%r670,%r671,%r672,%r673
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 129 18                        // gated_mlp.py:129:18
	add.s64 	%rd52, %rd86, %rd11;
	add.s64 	%rd53, %rd86, %rd10;
	add.s64 	%rd54, %rd86, %rd9;
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s64 	%rd55, %rd86, %rd6;
	add.s32 	%r768, %r1061, 1;
	setp.gt.s32 	%p24, %r768, 3;
	selp.b32 	%r1061, 0, %r768, %p24;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p25, %r7, %r1059;
	.loc	1 123 20                        // gated_mlp.py:123:20
	shl.b32 	%r769, %r1061, 12;
	add.s32 	%r770, %r306, %r769;
	bar.sync 	0;
	add.s32 	%r744, %r770, %r304;
	add.s32 	%r746, %r770, %r310;
	selp.b32 	%r773, 16, 0, %p25;
	selp.b32 	%r747, %r773, 0, %p22;
	// begin inline asm
	cp.async.cg.shared.global [ %r744 + 0 ], [ %rd85 + 0 ], 0x10, %r747;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r746 + 0 ], [ %rd85 + 0 ], 0x10, %r747;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p26, %r12, %r1059;
	setp.lt.s32 	%p27, %r13, %r1059;
	setp.lt.s32 	%p28, %r14, %r1059;
	setp.lt.s32 	%p29, %r15, %r1059;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r774, %r1061, 13;
	add.s32 	%r775, %r305, %r774;
	add.s32 	%r748, %r775, %r319;
	add.s32 	%r750, %r775, %r322;
	add.s32 	%r752, %r775, %r324;
	add.s32 	%r754, %r775, %r326;
	selp.b32 	%r780, 16, 0, %p26;
	selp.b32 	%r749, %r780, 0, %p22;
	// begin inline asm
	cp.async.cg.shared.global [ %r748 + 0 ], [ %rd52 + 0 ], 0x10, %r749;
	// end inline asm
	selp.b32 	%r781, 16, 0, %p27;
	selp.b32 	%r751, %r781, 0, %p22;
	// begin inline asm
	cp.async.cg.shared.global [ %r750 + 0 ], [ %rd53 + 0 ], 0x10, %r751;
	// end inline asm
	selp.b32 	%r782, 16, 0, %p28;
	selp.b32 	%r753, %r782, 0, %p22;
	// begin inline asm
	cp.async.cg.shared.global [ %r752 + 0 ], [ %rd54 + 0 ], 0x10, %r753;
	// end inline asm
	selp.b32 	%r783, 16, 0, %p29;
	selp.b32 	%r755, %r783, 0, %p22;
	// begin inline asm
	cp.async.cg.shared.global [ %r754 + 0 ], [ %rd55 + 0 ], 0x10, %r755;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s32 	%r1126, %r1126, 1;
	add.s64 	%rd86, %rd86, %rd8;
	add.s64 	%rd85, %rd85, 64;
	add.s32 	%r1059, %r1059, -32;
	setp.ne.s32 	%p30, %r16, %r1126;
	@%p30 bra 	$L__BB0_2;
$L__BB0_3:                              // %._crit_edge
	.loc	1 98 54                         // gated_mlp.py:98:54
	mul.lo.s32 	%r984, %r4, %r2;
	sub.s32 	%r985, %r3, %r984;
	.loc	1 98 27                         // gated_mlp.py:98:27
	add.s32 	%r986, %r985, %r1;
	.loc	1 120 22                        // gated_mlp.py:120:22
	// begin inline asm
	// wait for regs: %r1062,%r1063,%r1064,%r1065,%r1066,%r1067,%r1068,%r1069,%r1070,%r1071,%r1072,%r1073,%r1074,%r1075,%r1076,%r1077,%r1078,%r1079,%r1080,%r1081,%r1082,%r1083,%r1084,%r1085,%r1086,%r1087,%r1088,%r1089,%r1090,%r1091,%r1092,%r1093,%r1094,%r1095,%r1096,%r1097,%r1098,%r1099,%r1100,%r1101,%r1102,%r1103,%r1104,%r1105,%r1106,%r1107,%r1108,%r1109,%r1110,%r1111,%r1112,%r1113,%r1114,%r1115,%r1116,%r1117,%r1118,%r1119,%r1120,%r1121,%r1122,%r1123,%r1124,%r1125
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 134 23                        // gated_mlp.py:134:23
	cvt.rn.f16x2.f32 	%r913, %r1063, %r1062;
	cvt.rn.f16x2.f32 	%r914, %r1065, %r1064;
	cvt.rn.f16x2.f32 	%r915, %r1067, %r1066;
	cvt.rn.f16x2.f32 	%r916, %r1069, %r1068;
	cvt.rn.f16x2.f32 	%r918, %r1071, %r1070;
	cvt.rn.f16x2.f32 	%r919, %r1073, %r1072;
	cvt.rn.f16x2.f32 	%r920, %r1075, %r1074;
	cvt.rn.f16x2.f32 	%r921, %r1077, %r1076;
	cvt.rn.f16x2.f32 	%r923, %r1079, %r1078;
	cvt.rn.f16x2.f32 	%r924, %r1081, %r1080;
	cvt.rn.f16x2.f32 	%r925, %r1083, %r1082;
	cvt.rn.f16x2.f32 	%r926, %r1085, %r1084;
	cvt.rn.f16x2.f32 	%r928, %r1087, %r1086;
	cvt.rn.f16x2.f32 	%r929, %r1089, %r1088;
	cvt.rn.f16x2.f32 	%r930, %r1091, %r1090;
	cvt.rn.f16x2.f32 	%r931, %r1093, %r1092;
	cvt.rn.f16x2.f32 	%r933, %r1095, %r1094;
	cvt.rn.f16x2.f32 	%r934, %r1097, %r1096;
	cvt.rn.f16x2.f32 	%r935, %r1099, %r1098;
	cvt.rn.f16x2.f32 	%r936, %r1101, %r1100;
	cvt.rn.f16x2.f32 	%r938, %r1103, %r1102;
	cvt.rn.f16x2.f32 	%r939, %r1105, %r1104;
	cvt.rn.f16x2.f32 	%r940, %r1107, %r1106;
	cvt.rn.f16x2.f32 	%r941, %r1109, %r1108;
	cvt.rn.f16x2.f32 	%r943, %r1111, %r1110;
	cvt.rn.f16x2.f32 	%r944, %r1113, %r1112;
	cvt.rn.f16x2.f32 	%r945, %r1115, %r1114;
	cvt.rn.f16x2.f32 	%r946, %r1117, %r1116;
	cvt.rn.f16x2.f32 	%r948, %r1119, %r1118;
	cvt.rn.f16x2.f32 	%r949, %r1121, %r1120;
	cvt.rn.f16x2.f32 	%r950, %r1123, %r1122;
	cvt.rn.f16x2.f32 	%r951, %r1125, %r1124;
	.loc	1 138 22                        // gated_mlp.py:138:22
	shl.b32 	%r987, %r986, 6;
	.loc	1 138 37                        // gated_mlp.py:138:37
	or.b32 	%r988, %r987, %r12;
	or.b32 	%r989, %r987, %r13;
	or.b32 	%r990, %r987, %r14;
	or.b32 	%r991, %r987, %r15;
	or.b32 	%r992, %r11, %r987;
	or.b32 	%r993, %r992, 56;
	.loc	1 140 33                        // gated_mlp.py:140:33
	mul.lo.s32 	%r994, %r988, %r229;
	mul.lo.s32 	%r995, %r989, %r229;
	mul.lo.s32 	%r996, %r990, %r229;
	mul.lo.s32 	%r997, %r991, %r229;
	shl.b32 	%r998, %r229, 5;
	add.s32 	%r999, %r994, %r998;
	shl.b32 	%r1000, %r229, 3;
	add.s32 	%r1001, %r999, %r1000;
	add.s32 	%r1002, %r1001, %r1000;
	mul.lo.s32 	%r1003, %r993, %r229;
	.loc	1 140 21                        // gated_mlp.py:140:21
	mul.wide.s32 	%rd68, %r994, 2;
	add.s64 	%rd69, %rd19, %rd68;
	mul.wide.s32 	%rd70, %r995, 2;
	add.s64 	%rd71, %rd19, %rd70;
	mul.wide.s32 	%rd72, %r996, 2;
	add.s64 	%rd73, %rd19, %rd72;
	mul.wide.s32 	%rd74, %r997, 2;
	add.s64 	%rd75, %rd19, %rd74;
	mul.wide.s32 	%rd76, %r999, 2;
	add.s64 	%rd77, %rd19, %rd76;
	mul.wide.s32 	%rd78, %r1001, 2;
	add.s64 	%rd79, %rd19, %rd78;
	mul.wide.s32 	%rd80, %r1002, 2;
	add.s64 	%rd81, %rd19, %rd80;
	mul.wide.s32 	%rd82, %r1003, 2;
	add.s64 	%rd83, %rd19, %rd82;
	.loc	1 140 52                        // gated_mlp.py:140:52
	mul.wide.s32 	%rd84, %r8, 2;
	add.s64 	%rd60, %rd69, %rd84;
	add.s64 	%rd61, %rd71, %rd84;
	add.s64 	%rd62, %rd73, %rd84;
	add.s64 	%rd63, %rd75, %rd84;
	add.s64 	%rd64, %rd77, %rd84;
	add.s64 	%rd65, %rd79, %rd84;
	add.s64 	%rd66, %rd81, %rd84;
	add.s64 	%rd67, %rd83, %rd84;
	.loc	1 141 33                        // gated_mlp.py:141:33
	setp.lt.s32 	%p39, %r988, 1;
	setp.lt.s32 	%p40, %r989, 1;
	setp.lt.s32 	%p41, %r990, 1;
	setp.lt.s32 	%p42, %r991, 1;
	setp.lt.s32 	%p43, %r987, 0;
	.loc	1 141 58                        // gated_mlp.py:141:58
	setp.lt.s32 	%p44, %r8, %r227;
	.loc	1 141 39                        // gated_mlp.py:141:39
	and.pred 	%p31, %p44, %p39;
	and.pred 	%p32, %p44, %p40;
	and.pred 	%p33, %p44, %p41;
	and.pred 	%p34, %p44, %p42;
	and.pred 	%p35, %p44, %p43;
	.loc	1 142 21                        // gated_mlp.py:142:21
	shl.b32 	%r1004, %r5, 7;
	and.b32 	%r1005, %r1004, 1920;
	shr.u32 	%r1006, %r10, 1;
	or.b32 	%r1007, %r1005, %r1006;
	shl.b32 	%r1008, %r5, 6;
	and.b32 	%r1009, %r1008, 6144;
	or.b32 	%r1010, %r1007, %r1009;
	and.b32 	%r1011, %r6, 248;
	or.b32 	%r1012, %r1011, %r17;
	or.b32 	%r1013, %r1012, %r18;
	shr.u32 	%r1014, %r1010, 3;
	and.b32 	%r1015, %r1014, 1008;
	add.s32 	%r1017, %r305, %r1015;
	shl.b32 	%r1018, %r1010, 1;
	add.s32 	%r912, %r1017, %r1018;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r912], {%r913, %r914, %r915, %r916};
	// end inline asm
	add.s32 	%r917, %r912, 32;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r917], {%r918, %r919, %r920, %r921};
	// end inline asm
	add.s32 	%r922, %r912, 64;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r922], {%r923, %r924, %r925, %r926};
	// end inline asm
	add.s32 	%r927, %r912, 96;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r927], {%r928, %r929, %r930, %r931};
	// end inline asm
	add.s32 	%r932, %r912, 128;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r932], {%r933, %r934, %r935, %r936};
	// end inline asm
	add.s32 	%r937, %r912, 160;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r937], {%r938, %r939, %r940, %r941};
	// end inline asm
	add.s32 	%r942, %r912, 192;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r942], {%r943, %r944, %r945, %r946};
	// end inline asm
	add.s32 	%r947, %r912, 224;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r947], {%r948, %r949, %r950, %r951};
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r1019, %r1013, 3;
	and.b32 	%r1020, %r1019, 112;
	add.s32 	%r1021, %r305, %r1020;
	shl.b32 	%r1022, %r1013, 1;
	add.s32 	%r1023, %r1021, %r1022;
	ld.shared.v4.b32 	{%r952, %r953, %r954, %r955}, [%r1023];
	or.b32 	%r1024, %r1013, 1024;
	shr.u32 	%r1025, %r1024, 3;
	and.b32 	%r1026, %r1025, 240;
	add.s32 	%r1027, %r305, %r1026;
	add.s32 	%r1028, %r1027, %r1022;
	ld.shared.v4.b32 	{%r956, %r957, %r958, %r959}, [%r1028+2048];
	or.b32 	%r1029, %r1013, 2048;
	shr.u32 	%r1030, %r1029, 3;
	and.b32 	%r1031, %r1030, 368;
	add.s32 	%r1032, %r305, %r1031;
	add.s32 	%r1033, %r1032, %r1022;
	ld.shared.v4.b32 	{%r960, %r961, %r962, %r963}, [%r1033+4096];
	or.b32 	%r1034, %r1013, 3072;
	shr.u32 	%r1035, %r1034, 3;
	and.b32 	%r1036, %r1035, 496;
	add.s32 	%r1037, %r305, %r1036;
	add.s32 	%r1038, %r1037, %r1022;
	ld.shared.v4.b32 	{%r964, %r965, %r966, %r967}, [%r1038+6144];
	or.b32 	%r1039, %r1013, 4096;
	shr.u32 	%r1040, %r1039, 3;
	and.b32 	%r1041, %r1040, 624;
	add.s32 	%r1042, %r305, %r1041;
	add.s32 	%r1043, %r1042, %r1022;
	ld.shared.v4.b32 	{%r968, %r969, %r970, %r971}, [%r1043+8192];
	or.b32 	%r1044, %r1013, 5120;
	shr.u32 	%r1045, %r1044, 3;
	and.b32 	%r1046, %r1045, 752;
	add.s32 	%r1047, %r305, %r1046;
	add.s32 	%r1048, %r1047, %r1022;
	ld.shared.v4.b32 	{%r972, %r973, %r974, %r975}, [%r1048+10240];
	or.b32 	%r1049, %r1013, 6144;
	shr.u32 	%r1050, %r1049, 3;
	and.b32 	%r1051, %r1050, 880;
	add.s32 	%r1052, %r305, %r1051;
	add.s32 	%r1053, %r1052, %r1022;
	ld.shared.v4.b32 	{%r976, %r977, %r978, %r979}, [%r1053+12288];
	or.b32 	%r1054, %r1013, 7168;
	shr.u32 	%r1055, %r1054, 3;
	and.b32 	%r1056, %r1055, 1008;
	add.s32 	%r1057, %r305, %r1056;
	add.s32 	%r1058, %r1057, %r1022;
	ld.shared.v4.b32 	{%r980, %r981, %r982, %r983}, [%r1058+14336];
	// begin inline asm
	@%p31 st.global.v4.b32 [ %rd60 + 0 ], { %r952, %r953, %r954, %r955 };
	// end inline asm
	// begin inline asm
	@%p32 st.global.v4.b32 [ %rd61 + 0 ], { %r956, %r957, %r958, %r959 };
	// end inline asm
	// begin inline asm
	@%p33 st.global.v4.b32 [ %rd62 + 0 ], { %r960, %r961, %r962, %r963 };
	// end inline asm
	// begin inline asm
	@%p34 st.global.v4.b32 [ %rd63 + 0 ], { %r964, %r965, %r966, %r967 };
	// end inline asm
	// begin inline asm
	@%p35 st.global.v4.b32 [ %rd64 + 0 ], { %r968, %r969, %r970, %r971 };
	// end inline asm
	// begin inline asm
	@%p35 st.global.v4.b32 [ %rd65 + 0 ], { %r972, %r973, %r974, %r975 };
	// end inline asm
	// begin inline asm
	@%p35 st.global.v4.b32 [ %rd66 + 0 ], { %r976, %r977, %r978, %r979 };
	// end inline asm
	// begin inline asm
	@%p35 st.global.v4.b32 [ %rd67 + 0 ], { %r980, %r981, %r982, %r983 };
	// end inline asm
	.loc	1 142 4                         // gated_mlp.py:142:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py"
	.file	2 "/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 157                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x96 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 103                                 // DW_AT_name
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 109
.b8 108
.b8 112
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 117
.b8 98
.b8 117
.b8 110
.b8 116
.b8 117
.b8 47
.b8 80
.b8 84
.b8 88
.b8 95
.b8 100
.b8 97
.b8 116
.b8 97
.b8 115
.b8 101
.b8 116
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 116
.b8 120
.b8 0
.b8 2                                   // Abbrev [2] 0x4a:0x10 DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x5a:0x46 DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 74                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x6f:0x18 DW_TAG_inlined_subroutine
.b32 74                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 93                                  // DW_AT_call_line
.b8 27                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x87:0x18 DW_TAG_inlined_subroutine
.b32 74                                 // DW_AT_abstract_origin
.b64 $L__tmp3                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 120                                 // DW_AT_call_line
.b8 33                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
