//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	matmul_kernel           // -- Begin function matmul_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @matmul_kernel
.visible .entry matmul_kernel(
	.param .u64 .ptr .global .align 1 matmul_kernel_param_0,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_1,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_2,
	.param .u32 matmul_kernel_param_3,
	.param .u32 matmul_kernel_param_4,
	.param .u32 matmul_kernel_param_5,
	.param .u32 matmul_kernel_param_6,
	.param .u32 matmul_kernel_param_7,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_8
)
.reqntid 256
{
	.reg .pred 	%p<77>;
	.reg .b32 	%r<3865>;
	.reg .b64 	%rd<220>;
	.loc	1 68 0                          // gated_mlp.py:68:0
$L__func_begin0:
	.loc	1 68 0                          // gated_mlp.py:68:0

// %bb.0:
	ld.param.b32 	%r444, [matmul_kernel_param_7];
	ld.param.b32 	%r443, [matmul_kernel_param_4];
	ld.param.b32 	%r442, [matmul_kernel_param_3];
	ld.param.b64 	%rd27, [matmul_kernel_param_2];
	ld.param.b64 	%rd26, [matmul_kernel_param_1];
	ld.param.b64 	%rd25, [matmul_kernel_param_0];
$L__tmp0:
	.loc	1 91 24                         // gated_mlp.py:91:24
	mov.u32 	%r542, %ctaid.x;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:93:27 ]
	add.s32 	%r543, %r442, 127;
	.loc	2 40 28                         // standard.py:40:28 @[ gated_mlp.py:93:27 ]
	shr.s32 	%r544, %r543, 31;
	shr.u32 	%r545, %r544, 25;
	add.s32 	%r546, %r543, %r545;
	shr.s32 	%r547, %r546, 7;
$L__tmp2:
	.loc	1 94 38                         // gated_mlp.py:94:38
	shl.b32 	%r549, %r547, 3;
	.loc	1 95 22                         // gated_mlp.py:95:22
	div.s32 	%r550, %r542, %r549;
	ld.param.b32 	%r551, [matmul_kernel_param_6];
	.loc	1 96 29                         // gated_mlp.py:96:29
	shl.b32 	%r1, %r550, 3;
	.loc	1 97 35                         // gated_mlp.py:97:35
	sub.s32 	%r552, 1, %r1;
	.loc	1 97 48                         // gated_mlp.py:97:48
	min.s32 	%r2, %r552, 8;
	.loc	1 98 34                         // gated_mlp.py:98:34
	mul.lo.s32 	%r553, %r550, %r549;
	sub.s32 	%r3, %r542, %r553;
	.loc	1 99 40                         // gated_mlp.py:99:40
	div.s32 	%r4, %r3, %r2;
	.loc	1 109 23                        // gated_mlp.py:109:23
	shl.b32 	%r554, %r4, 7;
	.loc	1 109 51                        // gated_mlp.py:109:51
	mov.u32 	%r5, %tid.x;
	shl.b32 	%r6, %r5, 3;
	and.b32 	%r7, %r6, 56;
	and.b32 	%r555, %r5, 8;
	shl.b32 	%r8, %r555, 3;
	or.b32 	%r9, %r7, %r8;
	.loc	1 109 38                        // gated_mlp.py:109:38
	or.b32 	%r10, %r554, %r9;
	.loc	1 109 68                        // gated_mlp.py:109:68
	rem.s32 	%r556, %r10, %r442;
	.loc	1 111 22                        // gated_mlp.py:111:22
	mul.wide.u32 	%rd76, %r9, 2;
	add.s64 	%rd28, %rd25, %rd76;
	.loc	1 112 29                        // gated_mlp.py:112:29
	and.b32 	%r12, %r5, 16;
	bfe.s32 	%r557, %r5, 4, 1;
	bfe.s32 	%r558, %r5, 5, 1;
	bfe.s32 	%r559, %r5, 6, 1;
	and.b32 	%r13, %r5, 128;
	shr.u32 	%r14, %r5, 4;
	bfe.u32 	%r15, %r5, 4, 4;
	or.b32 	%r16, %r15, 16;
	or.b32 	%r17, %r15, 32;
	or.b32 	%r18, %r14, 48;
	or.b32 	%r19, %r15, 64;
	or.b32 	%r20, %r15, 80;
	or.b32 	%r21, %r15, 96;
	or.b32 	%r22, %r14, 112;
	.loc	1 112 40                        // gated_mlp.py:112:40
	shl.b32 	%r560, %r551, 4;
	shl.b32 	%r561, %r551, 5;
	.loc	1 112 52                        // gated_mlp.py:112:52
	mad.lo.s32 	%r562, %r551, %r15, %r556;
	add.s32 	%r563, %r562, %r560;
	add.s32 	%r564, %r563, %r560;
	mad.lo.s32 	%r565, %r551, %r18, %r556;
	add.s32 	%r566, %r564, %r561;
	add.s32 	%r567, %r566, %r560;
	add.s32 	%r568, %r567, %r560;
	mad.lo.s32 	%r569, %r551, %r22, %r556;
	.loc	1 112 22                        // gated_mlp.py:112:22
	mul.wide.s32 	%rd77, %r562, 2;
	add.s64 	%rd44, %rd26, %rd77;
	mul.wide.s32 	%rd78, %r563, 2;
	add.s64 	%rd45, %rd26, %rd78;
	mul.wide.s32 	%rd79, %r564, 2;
	add.s64 	%rd46, %rd26, %rd79;
	mul.wide.s32 	%rd80, %r565, 2;
	add.s64 	%rd47, %rd26, %rd80;
	mul.wide.s32 	%rd81, %r566, 2;
	add.s64 	%rd48, %rd26, %rd81;
	mul.wide.s32 	%rd82, %r567, 2;
	add.s64 	%rd49, %rd26, %rd82;
	mul.wide.s32 	%rd83, %r568, 2;
	add.s64 	%rd50, %rd26, %rd83;
	mul.wide.s32 	%rd84, %r569, 2;
	add.s64 	%rd51, %rd26, %rd84;
$L__tmp3:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:120:33 ]
	add.s32 	%r570, %r443, 127;
$L__tmp4:
	.loc	1 129 33                        // gated_mlp.py:129:33
	shl.b32 	%r574, %r551, 7;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.lt.s32 	%p1, %r570, 128;
	setp.gt.s32 	%p2, %r570, 127;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p3, %r9, %r443;
	.loc	1 123 20                        // gated_mlp.py:123:20
	shl.b32 	%r575, %r555, 11;
	or.b32 	%r576, %r7, %r575;
	and.b32 	%r577, %r557, 72;
	and.b32 	%r578, %r558, 144;
	and.b32 	%r579, %r559, 288;
	or.b32 	%r580, %r578, %r577;
	xor.b32 	%r581, %r580, %r576;
	xor.b32 	%r582, %r581, %r579;
	shl.b32 	%r583, %r13, 2;
	or.b32 	%r24, %r582, %r583;
	shl.b32 	%r584, %r24, 1;
	mov.b32 	%r585, global_smem;
	add.s32 	%r445, %r585, %r584;
	or.b32 	%r586, %r7, 1024;
	or.b32 	%r587, %r586, %r575;
	or.b32 	%r588, %r580, %r583;
	or.b32 	%r589, %r588, %r579;
	xor.b32 	%r25, %r589, %r587;
	shl.b32 	%r590, %r25, 1;
	add.s32 	%r447, %r585, %r590;
	or.b32 	%r591, %r7, 2048;
	or.b32 	%r592, %r591, %r575;
	xor.b32 	%r26, %r589, %r592;
	shl.b32 	%r593, %r26, 1;
	add.s32 	%r449, %r585, %r593;
	or.b32 	%r594, %r7, 3072;
	or.b32 	%r595, %r594, %r575;
	xor.b32 	%r27, %r589, %r595;
	shl.b32 	%r596, %r27, 1;
	add.s32 	%r451, %r585, %r596;
	or.b32 	%r597, %r7, 4096;
	or.b32 	%r598, %r597, %r575;
	xor.b32 	%r28, %r589, %r598;
	shl.b32 	%r599, %r28, 1;
	add.s32 	%r453, %r585, %r599;
	or.b32 	%r600, %r7, 5120;
	or.b32 	%r601, %r600, %r575;
	xor.b32 	%r29, %r589, %r601;
	shl.b32 	%r602, %r29, 1;
	add.s32 	%r455, %r585, %r602;
	or.b32 	%r603, %r7, 6144;
	or.b32 	%r604, %r603, %r575;
	xor.b32 	%r30, %r589, %r604;
	shl.b32 	%r605, %r30, 1;
	add.s32 	%r457, %r585, %r605;
	or.b32 	%r606, %r7, 7168;
	or.b32 	%r607, %r606, %r575;
	xor.b32 	%r31, %r589, %r607;
	shl.b32 	%r608, %r31, 1;
	add.s32 	%r459, %r585, %r608;
	or.b32 	%r609, %r576, 8192;
	xor.b32 	%r32, %r589, %r609;
	shl.b32 	%r610, %r32, 1;
	add.s32 	%r461, %r585, %r610;
	or.b32 	%r611, %r576, 9216;
	xor.b32 	%r33, %r589, %r611;
	shl.b32 	%r612, %r33, 1;
	add.s32 	%r463, %r585, %r612;
	or.b32 	%r613, %r576, 10240;
	xor.b32 	%r34, %r589, %r613;
	shl.b32 	%r614, %r34, 1;
	add.s32 	%r465, %r585, %r614;
	or.b32 	%r615, %r576, 11264;
	xor.b32 	%r35, %r589, %r615;
	shl.b32 	%r616, %r35, 1;
	add.s32 	%r467, %r585, %r616;
	or.b32 	%r617, %r576, 12288;
	xor.b32 	%r36, %r589, %r617;
	shl.b32 	%r618, %r36, 1;
	add.s32 	%r469, %r585, %r618;
	or.b32 	%r619, %r576, 13312;
	xor.b32 	%r37, %r589, %r619;
	shl.b32 	%r620, %r37, 1;
	add.s32 	%r471, %r585, %r620;
	or.b32 	%r621, %r576, 14336;
	xor.b32 	%r38, %r589, %r621;
	shl.b32 	%r622, %r38, 1;
	add.s32 	%r473, %r585, %r622;
	or.b32 	%r623, %r576, 15360;
	xor.b32 	%r39, %r589, %r623;
	shl.b32 	%r624, %r39, 1;
	add.s32 	%r475, %r585, %r624;
	selp.b32 	%r625, 16, 0, %p2;
	selp.b32 	%r448, %r625, 0, %p3;
	// begin inline asm
	cp.async.cg.shared.global [ %r445 + 0 ], [ %rd28 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r447 + 0 ], [ %rd28 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r449 + 0 ], [ %rd28 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r451 + 0 ], [ %rd28 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r453 + 0 ], [ %rd28 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r455 + 0 ], [ %rd28 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r457 + 0 ], [ %rd28 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r459 + 0 ], [ %rd28 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r461 + 0 ], [ %rd28 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r463 + 0 ], [ %rd28 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r465 + 0 ], [ %rd28 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r467 + 0 ], [ %rd28 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r469 + 0 ], [ %rd28 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r471 + 0 ], [ %rd28 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r473 + 0 ], [ %rd28 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r475 + 0 ], [ %rd28 + 0 ], 0x10, %r448;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p4, %r15, %r443;
	setp.lt.s32 	%p5, %r16, %r443;
	setp.lt.s32 	%p6, %r17, %r443;
	setp.lt.s32 	%p7, %r18, %r443;
	setp.lt.s32 	%p8, %r19, %r443;
	setp.lt.s32 	%p9, %r20, %r443;
	setp.lt.s32 	%p10, %r21, %r443;
	setp.lt.s32 	%p11, %r22, %r443;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r626, %r555, 10;
	or.b32 	%r627, %r7, %r626;
	xor.b32 	%r628, %r580, %r627;
	xor.b32 	%r629, %r628, %r579;
	or.b32 	%r40, %r629, %r583;
	shl.b32 	%r630, %r40, 1;
	add.s32 	%r631, %r585, 196608;
	add.s32 	%r477, %r631, %r630;
	or.b32 	%r632, %r586, %r626;
	xor.b32 	%r41, %r589, %r632;
	shl.b32 	%r633, %r41, 1;
	add.s32 	%r479, %r631, %r633;
	or.b32 	%r634, %r591, %r626;
	xor.b32 	%r42, %r589, %r634;
	shl.b32 	%r635, %r42, 1;
	add.s32 	%r481, %r631, %r635;
	or.b32 	%r636, %r594, %r626;
	xor.b32 	%r43, %r589, %r636;
	shl.b32 	%r637, %r43, 1;
	add.s32 	%r483, %r631, %r637;
	or.b32 	%r638, %r597, %r626;
	xor.b32 	%r44, %r589, %r638;
	shl.b32 	%r639, %r44, 1;
	add.s32 	%r485, %r631, %r639;
	or.b32 	%r640, %r600, %r626;
	xor.b32 	%r45, %r589, %r640;
	shl.b32 	%r641, %r45, 1;
	add.s32 	%r487, %r631, %r641;
	or.b32 	%r642, %r603, %r626;
	xor.b32 	%r46, %r589, %r642;
	shl.b32 	%r643, %r46, 1;
	add.s32 	%r489, %r631, %r643;
	or.b32 	%r644, %r606, %r626;
	xor.b32 	%r47, %r589, %r644;
	shl.b32 	%r645, %r47, 1;
	add.s32 	%r491, %r631, %r645;
	selp.b32 	%r478, %r625, 0, %p4;
	// begin inline asm
	cp.async.cg.shared.global [ %r477 + 0 ], [ %rd44 + 0 ], 0x10, %r478;
	// end inline asm
	selp.b32 	%r480, %r625, 0, %p5;
	// begin inline asm
	cp.async.cg.shared.global [ %r479 + 0 ], [ %rd45 + 0 ], 0x10, %r480;
	// end inline asm
	selp.b32 	%r482, %r625, 0, %p6;
	// begin inline asm
	cp.async.cg.shared.global [ %r481 + 0 ], [ %rd46 + 0 ], 0x10, %r482;
	// end inline asm
	selp.b32 	%r484, %r625, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r483 + 0 ], [ %rd47 + 0 ], 0x10, %r484;
	// end inline asm
	selp.b32 	%r486, %r625, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r485 + 0 ], [ %rd48 + 0 ], 0x10, %r486;
	// end inline asm
	selp.b32 	%r488, %r625, 0, %p9;
	// begin inline asm
	cp.async.cg.shared.global [ %r487 + 0 ], [ %rd49 + 0 ], 0x10, %r488;
	// end inline asm
	selp.b32 	%r490, %r625, 0, %p10;
	// begin inline asm
	cp.async.cg.shared.global [ %r489 + 0 ], [ %rd50 + 0 ], 0x10, %r490;
	// end inline asm
	selp.b32 	%r492, %r625, 0, %p11;
	// begin inline asm
	cp.async.cg.shared.global [ %r491 + 0 ], [ %rd51 + 0 ], 0x10, %r492;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p12, %r570, 255;
	.loc	1 128 18                        // gated_mlp.py:128:18
	add.s64 	%rd52, %rd28, 256;
	.loc	1 129 18                        // gated_mlp.py:129:18
	mul.wide.s32 	%rd85, %r574, 2;
	add.s64 	%rd68, %rd44, %rd85;
	add.s64 	%rd69, %rd45, %rd85;
	add.s64 	%rd70, %rd46, %rd85;
	add.s64 	%rd71, %rd47, %rd85;
	add.s64 	%rd72, %rd48, %rd85;
	add.s64 	%rd73, %rd49, %rd85;
	add.s64 	%rd74, %rd50, %rd85;
	add.s64 	%rd75, %rd51, %rd85;
	.loc	1 123 55                        // gated_mlp.py:123:55
	add.s32 	%r646, %r443, -128;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p13, %r9, %r646;
	.loc	1 123 20                        // gated_mlp.py:123:20
	bar.sync 	0;
	add.s32 	%r647, %r585, 65536;
	add.s32 	%r493, %r647, %r584;
	add.s32 	%r495, %r647, %r590;
	add.s32 	%r497, %r647, %r593;
	add.s32 	%r499, %r647, %r596;
	add.s32 	%r501, %r647, %r599;
	add.s32 	%r503, %r647, %r602;
	add.s32 	%r505, %r647, %r605;
	add.s32 	%r507, %r647, %r608;
	add.s32 	%r509, %r647, %r610;
	add.s32 	%r511, %r647, %r612;
	add.s32 	%r513, %r647, %r614;
	add.s32 	%r515, %r647, %r616;
	add.s32 	%r517, %r647, %r618;
	add.s32 	%r519, %r647, %r620;
	add.s32 	%r521, %r647, %r622;
	add.s32 	%r523, %r647, %r624;
	selp.b32 	%r648, 16, 0, %p13;
	selp.b32 	%r496, %r648, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r493 + 0 ], [ %rd52 + 0 ], 0x10, %r496;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r495 + 0 ], [ %rd52 + 0 ], 0x10, %r496;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r497 + 0 ], [ %rd52 + 0 ], 0x10, %r496;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r499 + 0 ], [ %rd52 + 0 ], 0x10, %r496;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r501 + 0 ], [ %rd52 + 0 ], 0x10, %r496;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r503 + 0 ], [ %rd52 + 0 ], 0x10, %r496;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r505 + 0 ], [ %rd52 + 0 ], 0x10, %r496;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r507 + 0 ], [ %rd52 + 0 ], 0x10, %r496;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r509 + 0 ], [ %rd52 + 0 ], 0x10, %r496;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r511 + 0 ], [ %rd52 + 0 ], 0x10, %r496;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r513 + 0 ], [ %rd52 + 0 ], 0x10, %r496;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r515 + 0 ], [ %rd52 + 0 ], 0x10, %r496;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r517 + 0 ], [ %rd52 + 0 ], 0x10, %r496;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r519 + 0 ], [ %rd52 + 0 ], 0x10, %r496;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r521 + 0 ], [ %rd52 + 0 ], 0x10, %r496;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r523 + 0 ], [ %rd52 + 0 ], 0x10, %r496;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p14, %r15, %r646;
	setp.lt.s32 	%p15, %r16, %r646;
	setp.lt.s32 	%p16, %r17, %r646;
	setp.lt.s32 	%p17, %r18, %r646;
	setp.lt.s32 	%p18, %r19, %r646;
	setp.lt.s32 	%p19, %r20, %r646;
	setp.lt.s32 	%p20, %r21, %r646;
	setp.lt.s32 	%p21, %r22, %r646;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r649, %r585, 229376;
	add.s32 	%r525, %r649, %r630;
	add.s32 	%r527, %r649, %r633;
	add.s32 	%r529, %r649, %r635;
	add.s32 	%r531, %r649, %r637;
	add.s32 	%r533, %r649, %r639;
	add.s32 	%r535, %r649, %r641;
	add.s32 	%r537, %r649, %r643;
	add.s32 	%r539, %r649, %r645;
	selp.b32 	%r650, 16, 0, %p14;
	selp.b32 	%r526, %r650, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r525 + 0 ], [ %rd68 + 0 ], 0x10, %r526;
	// end inline asm
	selp.b32 	%r651, 16, 0, %p15;
	selp.b32 	%r528, %r651, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r527 + 0 ], [ %rd69 + 0 ], 0x10, %r528;
	// end inline asm
	selp.b32 	%r652, 16, 0, %p16;
	selp.b32 	%r530, %r652, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r529 + 0 ], [ %rd70 + 0 ], 0x10, %r530;
	// end inline asm
	selp.b32 	%r653, 16, 0, %p17;
	selp.b32 	%r532, %r653, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r531 + 0 ], [ %rd71 + 0 ], 0x10, %r532;
	// end inline asm
	selp.b32 	%r654, 16, 0, %p18;
	selp.b32 	%r534, %r654, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r533 + 0 ], [ %rd72 + 0 ], 0x10, %r534;
	// end inline asm
	selp.b32 	%r655, 16, 0, %p19;
	selp.b32 	%r536, %r655, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r535 + 0 ], [ %rd73 + 0 ], 0x10, %r536;
	// end inline asm
	selp.b32 	%r656, 16, 0, %p20;
	selp.b32 	%r538, %r656, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r537 + 0 ], [ %rd74 + 0 ], 0x10, %r538;
	// end inline asm
	selp.b32 	%r657, 16, 0, %p21;
	selp.b32 	%r540, %r657, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r539 + 0 ], [ %rd75 + 0 ], 0x10, %r540;
	// end inline asm
	cp.async.commit_group;
	mov.b32 	%r3608, 0f00000000;
	mov.b32 	%r3609, %r3608;
	mov.b32 	%r3610, %r3608;
	mov.b32 	%r3611, %r3608;
	mov.b32 	%r3612, %r3608;
	mov.b32 	%r3613, %r3608;
	mov.b32 	%r3614, %r3608;
	mov.b32 	%r3615, %r3608;
	mov.b32 	%r3616, %r3608;
	mov.b32 	%r3617, %r3608;
	mov.b32 	%r3618, %r3608;
	mov.b32 	%r3619, %r3608;
	mov.b32 	%r3620, %r3608;
	mov.b32 	%r3621, %r3608;
	mov.b32 	%r3622, %r3608;
	mov.b32 	%r3623, %r3608;
	mov.b32 	%r3624, %r3608;
	mov.b32 	%r3625, %r3608;
	mov.b32 	%r3626, %r3608;
	mov.b32 	%r3627, %r3608;
	mov.b32 	%r3628, %r3608;
	mov.b32 	%r3629, %r3608;
	mov.b32 	%r3630, %r3608;
	mov.b32 	%r3631, %r3608;
	mov.b32 	%r3632, %r3608;
	mov.b32 	%r3633, %r3608;
	mov.b32 	%r3634, %r3608;
	mov.b32 	%r3635, %r3608;
	mov.b32 	%r3636, %r3608;
	mov.b32 	%r3637, %r3608;
	mov.b32 	%r3638, %r3608;
	mov.b32 	%r3639, %r3608;
	mov.b32 	%r3640, %r3608;
	mov.b32 	%r3641, %r3608;
	mov.b32 	%r3642, %r3608;
	mov.b32 	%r3643, %r3608;
	mov.b32 	%r3644, %r3608;
	mov.b32 	%r3645, %r3608;
	mov.b32 	%r3646, %r3608;
	mov.b32 	%r3647, %r3608;
	mov.b32 	%r3648, %r3608;
	mov.b32 	%r3649, %r3608;
	mov.b32 	%r3650, %r3608;
	mov.b32 	%r3651, %r3608;
	mov.b32 	%r3652, %r3608;
	mov.b32 	%r3653, %r3608;
	mov.b32 	%r3654, %r3608;
	mov.b32 	%r3655, %r3608;
	mov.b32 	%r3656, %r3608;
	mov.b32 	%r3657, %r3608;
	mov.b32 	%r3658, %r3608;
	mov.b32 	%r3659, %r3608;
	mov.b32 	%r3660, %r3608;
	mov.b32 	%r3661, %r3608;
	mov.b32 	%r3662, %r3608;
	mov.b32 	%r3663, %r3608;
	mov.b32 	%r3664, %r3608;
	mov.b32 	%r3665, %r3608;
	mov.b32 	%r3666, %r3608;
	mov.b32 	%r3667, %r3608;
	mov.b32 	%r3668, %r3608;
	mov.b32 	%r3669, %r3608;
	mov.b32 	%r3670, %r3608;
	mov.b32 	%r3671, %r3608;
	mov.b32 	%r3672, %r3608;
	mov.b32 	%r3673, %r3608;
	mov.b32 	%r3674, %r3608;
	mov.b32 	%r3675, %r3608;
	mov.b32 	%r3676, %r3608;
	mov.b32 	%r3677, %r3608;
	mov.b32 	%r3678, %r3608;
	mov.b32 	%r3679, %r3608;
	mov.b32 	%r3680, %r3608;
	mov.b32 	%r3681, %r3608;
	mov.b32 	%r3682, %r3608;
	mov.b32 	%r3683, %r3608;
	mov.b32 	%r3684, %r3608;
	mov.b32 	%r3685, %r3608;
	mov.b32 	%r3686, %r3608;
	mov.b32 	%r3687, %r3608;
	mov.b32 	%r3688, %r3608;
	mov.b32 	%r3689, %r3608;
	mov.b32 	%r3690, %r3608;
	mov.b32 	%r3691, %r3608;
	mov.b32 	%r3692, %r3608;
	mov.b32 	%r3693, %r3608;
	mov.b32 	%r3694, %r3608;
	mov.b32 	%r3695, %r3608;
	mov.b32 	%r3696, %r3608;
	mov.b32 	%r3697, %r3608;
	mov.b32 	%r3698, %r3608;
	mov.b32 	%r3699, %r3608;
	mov.b32 	%r3700, %r3608;
	mov.b32 	%r3701, %r3608;
	mov.b32 	%r3702, %r3608;
	mov.b32 	%r3703, %r3608;
	mov.b32 	%r3704, %r3608;
	mov.b32 	%r3705, %r3608;
	mov.b32 	%r3706, %r3608;
	mov.b32 	%r3707, %r3608;
	mov.b32 	%r3708, %r3608;
	mov.b32 	%r3709, %r3608;
	mov.b32 	%r3710, %r3608;
	mov.b32 	%r3711, %r3608;
	mov.b32 	%r3712, %r3608;
	mov.b32 	%r3713, %r3608;
	mov.b32 	%r3714, %r3608;
	mov.b32 	%r3715, %r3608;
	mov.b32 	%r3716, %r3608;
	mov.b32 	%r3717, %r3608;
	mov.b32 	%r3718, %r3608;
	mov.b32 	%r3719, %r3608;
	mov.b32 	%r3720, %r3608;
	mov.b32 	%r3721, %r3608;
	mov.b32 	%r3722, %r3608;
	mov.b32 	%r3723, %r3608;
	mov.b32 	%r3724, %r3608;
	mov.b32 	%r3725, %r3608;
	mov.b32 	%r3726, %r3608;
	mov.b32 	%r3727, %r3608;
	mov.b32 	%r3728, %r3608;
	mov.b32 	%r3729, %r3608;
	mov.b32 	%r3730, %r3608;
	mov.b32 	%r3731, %r3608;
	mov.b32 	%r3732, %r3608;
	mov.b32 	%r3733, %r3608;
	mov.b32 	%r3734, %r3608;
	mov.b32 	%r3735, %r3608;
	.loc	1 120 22                        // gated_mlp.py:120:22
	@%p1 bra 	$L__BB0_3;
// %bb.1:                               // %.lr.ph
	.loc	1 0 22                          // gated_mlp.py:0:22
	shr.u32 	%r11, %r5, 5;
	cvt.s64.s32 	%rd1, %r562;
	cvt.s64.s32 	%rd2, %r563;
	cvt.s64.s32 	%rd3, %r564;
	cvt.s64.s32 	%rd4, %r565;
	cvt.s64.s32 	%rd5, %r566;
	cvt.s64.s32 	%rd6, %r567;
	cvt.s64.s32 	%rd7, %r568;
	cvt.s64.s32 	%rd8, %r569;
	shr.s32 	%r571, %r570, 31;
	shr.u32 	%r572, %r571, 25;
	add.s32 	%r573, %r570, %r572;
	shr.s32 	%r23, %r573, 7;
	cvt.s64.s32 	%rd9, %r574;
	add.s32 	%r48, %r23, -2;
	add.s32 	%r3605, %r443, -256;
	.loc	1 120 22                        // gated_mlp.py:120:22
	shl.b64 	%rd10, %rd8, 1;
	shl.b64 	%rd86, %rd9, 2;
	add.s64 	%rd219, %rd26, %rd86;
	shl.b64 	%rd12, %rd9, 1;
	shl.b64 	%rd13, %rd7, 1;
	shl.b64 	%rd14, %rd6, 1;
	shl.b64 	%rd15, %rd5, 1;
	shl.b64 	%rd16, %rd4, 1;
	shl.b64 	%rd17, %rd3, 1;
	shl.b64 	%rd18, %rd2, 1;
	shl.b64 	%rd19, %rd1, 1;
	add.s32 	%r662, %r8, %r7;
	mul.wide.u32 	%rd87, %r662, 2;
	add.s64 	%rd88, %rd87, %rd25;
	add.s64 	%rd218, %rd88, 512;
	mov.b32 	%r2974, 0;
	mov.b32 	%r3608, 0f00000000;
	mov.b32 	%r3607, 1;
	mov.b32 	%r3606, -1;
	mov.b32 	%r3609, %r3608;
	mov.b32 	%r3610, %r3608;
	mov.b32 	%r3611, %r3608;
	mov.b32 	%r3612, %r3608;
	mov.b32 	%r3613, %r3608;
	mov.b32 	%r3614, %r3608;
	mov.b32 	%r3615, %r3608;
	mov.b32 	%r3616, %r3608;
	mov.b32 	%r3617, %r3608;
	mov.b32 	%r3618, %r3608;
	mov.b32 	%r3619, %r3608;
	mov.b32 	%r3620, %r3608;
	mov.b32 	%r3621, %r3608;
	mov.b32 	%r3622, %r3608;
	mov.b32 	%r3623, %r3608;
	mov.b32 	%r3624, %r3608;
	mov.b32 	%r3625, %r3608;
	mov.b32 	%r3626, %r3608;
	mov.b32 	%r3627, %r3608;
	mov.b32 	%r3628, %r3608;
	mov.b32 	%r3629, %r3608;
	mov.b32 	%r3630, %r3608;
	mov.b32 	%r3631, %r3608;
	mov.b32 	%r3632, %r3608;
	mov.b32 	%r3633, %r3608;
	mov.b32 	%r3634, %r3608;
	mov.b32 	%r3635, %r3608;
	mov.b32 	%r3636, %r3608;
	mov.b32 	%r3637, %r3608;
	mov.b32 	%r3638, %r3608;
	mov.b32 	%r3639, %r3608;
	mov.b32 	%r3640, %r3608;
	mov.b32 	%r3641, %r3608;
	mov.b32 	%r3642, %r3608;
	mov.b32 	%r3643, %r3608;
	mov.b32 	%r3644, %r3608;
	mov.b32 	%r3645, %r3608;
	mov.b32 	%r3646, %r3608;
	mov.b32 	%r3647, %r3608;
	mov.b32 	%r3648, %r3608;
	mov.b32 	%r3649, %r3608;
	mov.b32 	%r3650, %r3608;
	mov.b32 	%r3651, %r3608;
	mov.b32 	%r3652, %r3608;
	mov.b32 	%r3653, %r3608;
	mov.b32 	%r3654, %r3608;
	mov.b32 	%r3655, %r3608;
	mov.b32 	%r3656, %r3608;
	mov.b32 	%r3657, %r3608;
	mov.b32 	%r3658, %r3608;
	mov.b32 	%r3659, %r3608;
	mov.b32 	%r3660, %r3608;
	mov.b32 	%r3661, %r3608;
	mov.b32 	%r3662, %r3608;
	mov.b32 	%r3663, %r3608;
	mov.b32 	%r3664, %r3608;
	mov.b32 	%r3665, %r3608;
	mov.b32 	%r3666, %r3608;
	mov.b32 	%r3667, %r3608;
	mov.b32 	%r3668, %r3608;
	mov.b32 	%r3669, %r3608;
	mov.b32 	%r3670, %r3608;
	mov.b32 	%r3671, %r3608;
	mov.b32 	%r3672, %r3608;
	mov.b32 	%r3673, %r3608;
	mov.b32 	%r3674, %r3608;
	mov.b32 	%r3675, %r3608;
	mov.b32 	%r3676, %r3608;
	mov.b32 	%r3677, %r3608;
	mov.b32 	%r3678, %r3608;
	mov.b32 	%r3679, %r3608;
	mov.b32 	%r3680, %r3608;
	mov.b32 	%r3681, %r3608;
	mov.b32 	%r3682, %r3608;
	mov.b32 	%r3683, %r3608;
	mov.b32 	%r3684, %r3608;
	mov.b32 	%r3685, %r3608;
	mov.b32 	%r3686, %r3608;
	mov.b32 	%r3687, %r3608;
	mov.b32 	%r3688, %r3608;
	mov.b32 	%r3689, %r3608;
	mov.b32 	%r3690, %r3608;
	mov.b32 	%r3691, %r3608;
	mov.b32 	%r3692, %r3608;
	mov.b32 	%r3693, %r3608;
	mov.b32 	%r3694, %r3608;
	mov.b32 	%r3695, %r3608;
	mov.b32 	%r3696, %r3608;
	mov.b32 	%r3697, %r3608;
	mov.b32 	%r3698, %r3608;
	mov.b32 	%r3699, %r3608;
	mov.b32 	%r3700, %r3608;
	mov.b32 	%r3701, %r3608;
	mov.b32 	%r3702, %r3608;
	mov.b32 	%r3703, %r3608;
	mov.b32 	%r3704, %r3608;
	mov.b32 	%r3705, %r3608;
	mov.b32 	%r3706, %r3608;
	mov.b32 	%r3707, %r3608;
	mov.b32 	%r3708, %r3608;
	mov.b32 	%r3709, %r3608;
	mov.b32 	%r3710, %r3608;
	mov.b32 	%r3711, %r3608;
	mov.b32 	%r3712, %r3608;
	mov.b32 	%r3713, %r3608;
	mov.b32 	%r3714, %r3608;
	mov.b32 	%r3715, %r3608;
	mov.b32 	%r3716, %r3608;
	mov.b32 	%r3717, %r3608;
	mov.b32 	%r3718, %r3608;
	mov.b32 	%r3719, %r3608;
	mov.b32 	%r3720, %r3608;
	mov.b32 	%r3721, %r3608;
	mov.b32 	%r3722, %r3608;
	mov.b32 	%r3723, %r3608;
	mov.b32 	%r3724, %r3608;
	mov.b32 	%r3725, %r3608;
	mov.b32 	%r3726, %r3608;
	mov.b32 	%r3727, %r3608;
	mov.b32 	%r3728, %r3608;
	mov.b32 	%r3729, %r3608;
	mov.b32 	%r3730, %r3608;
	mov.b32 	%r3731, %r3608;
	mov.b32 	%r3732, %r3608;
	mov.b32 	%r3733, %r3608;
	mov.b32 	%r3734, %r3608;
	mov.b32 	%r3735, %r3608;
	mov.b32 	%r3736, %r2974;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	setp.lt.s32 	%p38, %r3736, %r48;
	add.s32 	%r3027, %r3606, 1;
	setp.gt.s32 	%p39, %r3027, 2;
	selp.b32 	%r3606, 0, %r3027, %p39;
	.loc	1 123 20                        // gated_mlp.py:123:20
	cp.async.wait_group 	2;
	bar.sync 	0;
	shl.b32 	%r3028, %r3606, 16;
	add.s32 	%r2839, %r585, %r3028;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r3030, %r3606, 15;
	add.s32 	%r2842, %r631, %r3030;
	.loc	1 126 35                        // gated_mlp.py:126:35
	shfl.sync.idx.b32 	%r3032, %r11, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r3033, %r3032, 11;
	and.b32 	%r3034, %r3033, 8192;
	add.s32 	%r3035, %r3034, %r2839;
	bfe.u32 	%r3036, %r3035, 4, 14;
	cvt.u64.u32 	%rd145, %r3036;
	or.b64 	%rd89, %rd145, 4611686293439512576;
	bfe.u32 	%r3037, %r2842, 4, 14;
	cvt.u64.u32 	%rd146, %r3037;
	or.b64 	%rd90, %rd146, 4611686293372403712;
	mov.pred 	%p22, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3608,%r3609,%r3610,%r3611,%r3612,%r3613,%r3614,%r3615,%r3616,%r3617,%r3618,%r3619,%r3620,%r3621,%r3622,%r3623,%r3624,%r3625,%r3626,%r3627,%r3628,%r3629,%r3630,%r3631,%r3632,%r3633,%r3634,%r3635,%r3636,%r3637,%r3638,%r3639,%r3640,%r3641,%r3642,%r3643,%r3644,%r3645,%r3646,%r3647,%r3648,%r3649,%r3650,%r3651,%r3652,%r3653,%r3654,%r3655,%r3656,%r3657,%r3658,%r3659,%r3660,%r3661,%r3662,%r3663,%r3664,%r3665,%r3666,%r3667,%r3668,%r3669,%r3670,%r3671}, %rd89, %rd90, %p22, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3038, %r3035, 32;
	bfe.u32 	%r3039, %r3038, 4, 14;
	cvt.u64.u32 	%rd147, %r3039;
	or.b64 	%rd91, %rd147, 4611686293439512576;
	add.s32 	%r3040, %r2842, 2048;
	bfe.u32 	%r3041, %r3040, 4, 14;
	cvt.u64.u32 	%rd148, %r3041;
	or.b64 	%rd92, %rd148, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3608,%r3609,%r3610,%r3611,%r3612,%r3613,%r3614,%r3615,%r3616,%r3617,%r3618,%r3619,%r3620,%r3621,%r3622,%r3623,%r3624,%r3625,%r3626,%r3627,%r3628,%r3629,%r3630,%r3631,%r3632,%r3633,%r3634,%r3635,%r3636,%r3637,%r3638,%r3639,%r3640,%r3641,%r3642,%r3643,%r3644,%r3645,%r3646,%r3647,%r3648,%r3649,%r3650,%r3651,%r3652,%r3653,%r3654,%r3655,%r3656,%r3657,%r3658,%r3659,%r3660,%r3661,%r3662,%r3663,%r3664,%r3665,%r3666,%r3667,%r3668,%r3669,%r3670,%r3671}, %rd91, %rd92, %p22, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3042, %r3035, 64;
	bfe.u32 	%r3043, %r3042, 4, 14;
	cvt.u64.u32 	%rd149, %r3043;
	or.b64 	%rd93, %rd149, 4611686293439512576;
	add.s32 	%r3044, %r2842, 4096;
	bfe.u32 	%r3045, %r3044, 4, 14;
	cvt.u64.u32 	%rd150, %r3045;
	or.b64 	%rd94, %rd150, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3608,%r3609,%r3610,%r3611,%r3612,%r3613,%r3614,%r3615,%r3616,%r3617,%r3618,%r3619,%r3620,%r3621,%r3622,%r3623,%r3624,%r3625,%r3626,%r3627,%r3628,%r3629,%r3630,%r3631,%r3632,%r3633,%r3634,%r3635,%r3636,%r3637,%r3638,%r3639,%r3640,%r3641,%r3642,%r3643,%r3644,%r3645,%r3646,%r3647,%r3648,%r3649,%r3650,%r3651,%r3652,%r3653,%r3654,%r3655,%r3656,%r3657,%r3658,%r3659,%r3660,%r3661,%r3662,%r3663,%r3664,%r3665,%r3666,%r3667,%r3668,%r3669,%r3670,%r3671}, %rd93, %rd94, %p22, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3046, %r3035, 96;
	bfe.u32 	%r3047, %r3046, 4, 14;
	cvt.u64.u32 	%rd151, %r3047;
	or.b64 	%rd95, %rd151, 4611686293439512576;
	add.s32 	%r3048, %r2842, 6144;
	bfe.u32 	%r3049, %r3048, 4, 14;
	cvt.u64.u32 	%rd152, %r3049;
	or.b64 	%rd96, %rd152, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3608,%r3609,%r3610,%r3611,%r3612,%r3613,%r3614,%r3615,%r3616,%r3617,%r3618,%r3619,%r3620,%r3621,%r3622,%r3623,%r3624,%r3625,%r3626,%r3627,%r3628,%r3629,%r3630,%r3631,%r3632,%r3633,%r3634,%r3635,%r3636,%r3637,%r3638,%r3639,%r3640,%r3641,%r3642,%r3643,%r3644,%r3645,%r3646,%r3647,%r3648,%r3649,%r3650,%r3651,%r3652,%r3653,%r3654,%r3655,%r3656,%r3657,%r3658,%r3659,%r3660,%r3661,%r3662,%r3663,%r3664,%r3665,%r3666,%r3667,%r3668,%r3669,%r3670,%r3671}, %rd95, %rd96, %p22, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3050, %r3035, 32768;
	bfe.u32 	%r3051, %r3050, 4, 14;
	cvt.u64.u32 	%rd153, %r3051;
	or.b64 	%rd97, %rd153, 4611686293439512576;
	add.s32 	%r3052, %r2842, 8192;
	bfe.u32 	%r3053, %r3052, 4, 14;
	cvt.u64.u32 	%rd154, %r3053;
	or.b64 	%rd98, %rd154, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3608,%r3609,%r3610,%r3611,%r3612,%r3613,%r3614,%r3615,%r3616,%r3617,%r3618,%r3619,%r3620,%r3621,%r3622,%r3623,%r3624,%r3625,%r3626,%r3627,%r3628,%r3629,%r3630,%r3631,%r3632,%r3633,%r3634,%r3635,%r3636,%r3637,%r3638,%r3639,%r3640,%r3641,%r3642,%r3643,%r3644,%r3645,%r3646,%r3647,%r3648,%r3649,%r3650,%r3651,%r3652,%r3653,%r3654,%r3655,%r3656,%r3657,%r3658,%r3659,%r3660,%r3661,%r3662,%r3663,%r3664,%r3665,%r3666,%r3667,%r3668,%r3669,%r3670,%r3671}, %rd97, %rd98, %p22, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3054, %r3035, 32800;
	bfe.u32 	%r3055, %r3054, 4, 14;
	cvt.u64.u32 	%rd155, %r3055;
	or.b64 	%rd99, %rd155, 4611686293439512576;
	add.s32 	%r3056, %r2842, 10240;
	bfe.u32 	%r3057, %r3056, 4, 14;
	cvt.u64.u32 	%rd156, %r3057;
	or.b64 	%rd100, %rd156, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3608,%r3609,%r3610,%r3611,%r3612,%r3613,%r3614,%r3615,%r3616,%r3617,%r3618,%r3619,%r3620,%r3621,%r3622,%r3623,%r3624,%r3625,%r3626,%r3627,%r3628,%r3629,%r3630,%r3631,%r3632,%r3633,%r3634,%r3635,%r3636,%r3637,%r3638,%r3639,%r3640,%r3641,%r3642,%r3643,%r3644,%r3645,%r3646,%r3647,%r3648,%r3649,%r3650,%r3651,%r3652,%r3653,%r3654,%r3655,%r3656,%r3657,%r3658,%r3659,%r3660,%r3661,%r3662,%r3663,%r3664,%r3665,%r3666,%r3667,%r3668,%r3669,%r3670,%r3671}, %rd99, %rd100, %p22, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3058, %r3035, 32832;
	bfe.u32 	%r3059, %r3058, 4, 14;
	cvt.u64.u32 	%rd157, %r3059;
	or.b64 	%rd101, %rd157, 4611686293439512576;
	add.s32 	%r3060, %r2842, 12288;
	bfe.u32 	%r3061, %r3060, 4, 14;
	cvt.u64.u32 	%rd158, %r3061;
	or.b64 	%rd102, %rd158, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3608,%r3609,%r3610,%r3611,%r3612,%r3613,%r3614,%r3615,%r3616,%r3617,%r3618,%r3619,%r3620,%r3621,%r3622,%r3623,%r3624,%r3625,%r3626,%r3627,%r3628,%r3629,%r3630,%r3631,%r3632,%r3633,%r3634,%r3635,%r3636,%r3637,%r3638,%r3639,%r3640,%r3641,%r3642,%r3643,%r3644,%r3645,%r3646,%r3647,%r3648,%r3649,%r3650,%r3651,%r3652,%r3653,%r3654,%r3655,%r3656,%r3657,%r3658,%r3659,%r3660,%r3661,%r3662,%r3663,%r3664,%r3665,%r3666,%r3667,%r3668,%r3669,%r3670,%r3671}, %rd101, %rd102, %p22, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3062, %r3035, 32864;
	bfe.u32 	%r3063, %r3062, 4, 14;
	cvt.u64.u32 	%rd159, %r3063;
	or.b64 	%rd103, %rd159, 4611686293439512576;
	add.s32 	%r3064, %r2842, 14336;
	bfe.u32 	%r3065, %r3064, 4, 14;
	cvt.u64.u32 	%rd160, %r3065;
	or.b64 	%rd104, %rd160, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3608,%r3609,%r3610,%r3611,%r3612,%r3613,%r3614,%r3615,%r3616,%r3617,%r3618,%r3619,%r3620,%r3621,%r3622,%r3623,%r3624,%r3625,%r3626,%r3627,%r3628,%r3629,%r3630,%r3631,%r3632,%r3633,%r3634,%r3635,%r3636,%r3637,%r3638,%r3639,%r3640,%r3641,%r3642,%r3643,%r3644,%r3645,%r3646,%r3647,%r3648,%r3649,%r3650,%r3651,%r3652,%r3653,%r3654,%r3655,%r3656,%r3657,%r3658,%r3659,%r3660,%r3661,%r3662,%r3663,%r3664,%r3665,%r3666,%r3667,%r3668,%r3669,%r3670,%r3671}, %rd103, %rd104, %p22, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3066, %r3035, 16384;
	bfe.u32 	%r3067, %r3066, 4, 14;
	cvt.u64.u32 	%rd161, %r3067;
	or.b64 	%rd105, %rd161, 4611686293439512576;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3672,%r3673,%r3674,%r3675,%r3676,%r3677,%r3678,%r3679,%r3680,%r3681,%r3682,%r3683,%r3684,%r3685,%r3686,%r3687,%r3688,%r3689,%r3690,%r3691,%r3692,%r3693,%r3694,%r3695,%r3696,%r3697,%r3698,%r3699,%r3700,%r3701,%r3702,%r3703,%r3704,%r3705,%r3706,%r3707,%r3708,%r3709,%r3710,%r3711,%r3712,%r3713,%r3714,%r3715,%r3716,%r3717,%r3718,%r3719,%r3720,%r3721,%r3722,%r3723,%r3724,%r3725,%r3726,%r3727,%r3728,%r3729,%r3730,%r3731,%r3732,%r3733,%r3734,%r3735}, %rd105, %rd90, %p22, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3068, %r3035, 16416;
	bfe.u32 	%r3069, %r3068, 4, 14;
	cvt.u64.u32 	%rd162, %r3069;
	or.b64 	%rd107, %rd162, 4611686293439512576;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3672,%r3673,%r3674,%r3675,%r3676,%r3677,%r3678,%r3679,%r3680,%r3681,%r3682,%r3683,%r3684,%r3685,%r3686,%r3687,%r3688,%r3689,%r3690,%r3691,%r3692,%r3693,%r3694,%r3695,%r3696,%r3697,%r3698,%r3699,%r3700,%r3701,%r3702,%r3703,%r3704,%r3705,%r3706,%r3707,%r3708,%r3709,%r3710,%r3711,%r3712,%r3713,%r3714,%r3715,%r3716,%r3717,%r3718,%r3719,%r3720,%r3721,%r3722,%r3723,%r3724,%r3725,%r3726,%r3727,%r3728,%r3729,%r3730,%r3731,%r3732,%r3733,%r3734,%r3735}, %rd107, %rd92, %p22, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3070, %r3035, 16448;
	bfe.u32 	%r3071, %r3070, 4, 14;
	cvt.u64.u32 	%rd163, %r3071;
	or.b64 	%rd109, %rd163, 4611686293439512576;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3672,%r3673,%r3674,%r3675,%r3676,%r3677,%r3678,%r3679,%r3680,%r3681,%r3682,%r3683,%r3684,%r3685,%r3686,%r3687,%r3688,%r3689,%r3690,%r3691,%r3692,%r3693,%r3694,%r3695,%r3696,%r3697,%r3698,%r3699,%r3700,%r3701,%r3702,%r3703,%r3704,%r3705,%r3706,%r3707,%r3708,%r3709,%r3710,%r3711,%r3712,%r3713,%r3714,%r3715,%r3716,%r3717,%r3718,%r3719,%r3720,%r3721,%r3722,%r3723,%r3724,%r3725,%r3726,%r3727,%r3728,%r3729,%r3730,%r3731,%r3732,%r3733,%r3734,%r3735}, %rd109, %rd94, %p22, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3072, %r3035, 16480;
	bfe.u32 	%r3073, %r3072, 4, 14;
	cvt.u64.u32 	%rd164, %r3073;
	or.b64 	%rd111, %rd164, 4611686293439512576;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3672,%r3673,%r3674,%r3675,%r3676,%r3677,%r3678,%r3679,%r3680,%r3681,%r3682,%r3683,%r3684,%r3685,%r3686,%r3687,%r3688,%r3689,%r3690,%r3691,%r3692,%r3693,%r3694,%r3695,%r3696,%r3697,%r3698,%r3699,%r3700,%r3701,%r3702,%r3703,%r3704,%r3705,%r3706,%r3707,%r3708,%r3709,%r3710,%r3711,%r3712,%r3713,%r3714,%r3715,%r3716,%r3717,%r3718,%r3719,%r3720,%r3721,%r3722,%r3723,%r3724,%r3725,%r3726,%r3727,%r3728,%r3729,%r3730,%r3731,%r3732,%r3733,%r3734,%r3735}, %rd111, %rd96, %p22, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3074, %r3035, 49152;
	bfe.u32 	%r3075, %r3074, 4, 14;
	cvt.u64.u32 	%rd165, %r3075;
	or.b64 	%rd113, %rd165, 4611686293439512576;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3672,%r3673,%r3674,%r3675,%r3676,%r3677,%r3678,%r3679,%r3680,%r3681,%r3682,%r3683,%r3684,%r3685,%r3686,%r3687,%r3688,%r3689,%r3690,%r3691,%r3692,%r3693,%r3694,%r3695,%r3696,%r3697,%r3698,%r3699,%r3700,%r3701,%r3702,%r3703,%r3704,%r3705,%r3706,%r3707,%r3708,%r3709,%r3710,%r3711,%r3712,%r3713,%r3714,%r3715,%r3716,%r3717,%r3718,%r3719,%r3720,%r3721,%r3722,%r3723,%r3724,%r3725,%r3726,%r3727,%r3728,%r3729,%r3730,%r3731,%r3732,%r3733,%r3734,%r3735}, %rd113, %rd98, %p22, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3076, %r3035, 49184;
	bfe.u32 	%r3077, %r3076, 4, 14;
	cvt.u64.u32 	%rd166, %r3077;
	or.b64 	%rd115, %rd166, 4611686293439512576;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3672,%r3673,%r3674,%r3675,%r3676,%r3677,%r3678,%r3679,%r3680,%r3681,%r3682,%r3683,%r3684,%r3685,%r3686,%r3687,%r3688,%r3689,%r3690,%r3691,%r3692,%r3693,%r3694,%r3695,%r3696,%r3697,%r3698,%r3699,%r3700,%r3701,%r3702,%r3703,%r3704,%r3705,%r3706,%r3707,%r3708,%r3709,%r3710,%r3711,%r3712,%r3713,%r3714,%r3715,%r3716,%r3717,%r3718,%r3719,%r3720,%r3721,%r3722,%r3723,%r3724,%r3725,%r3726,%r3727,%r3728,%r3729,%r3730,%r3731,%r3732,%r3733,%r3734,%r3735}, %rd115, %rd100, %p22, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3078, %r3035, 49216;
	bfe.u32 	%r3079, %r3078, 4, 14;
	cvt.u64.u32 	%rd167, %r3079;
	or.b64 	%rd117, %rd167, 4611686293439512576;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3672,%r3673,%r3674,%r3675,%r3676,%r3677,%r3678,%r3679,%r3680,%r3681,%r3682,%r3683,%r3684,%r3685,%r3686,%r3687,%r3688,%r3689,%r3690,%r3691,%r3692,%r3693,%r3694,%r3695,%r3696,%r3697,%r3698,%r3699,%r3700,%r3701,%r3702,%r3703,%r3704,%r3705,%r3706,%r3707,%r3708,%r3709,%r3710,%r3711,%r3712,%r3713,%r3714,%r3715,%r3716,%r3717,%r3718,%r3719,%r3720,%r3721,%r3722,%r3723,%r3724,%r3725,%r3726,%r3727,%r3728,%r3729,%r3730,%r3731,%r3732,%r3733,%r3734,%r3735}, %rd117, %rd102, %p22, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3080, %r3035, 49248;
	bfe.u32 	%r3081, %r3080, 4, 14;
	cvt.u64.u32 	%rd168, %r3081;
	or.b64 	%rd119, %rd168, 4611686293439512576;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3672,%r3673,%r3674,%r3675,%r3676,%r3677,%r3678,%r3679,%r3680,%r3681,%r3682,%r3683,%r3684,%r3685,%r3686,%r3687,%r3688,%r3689,%r3690,%r3691,%r3692,%r3693,%r3694,%r3695,%r3696,%r3697,%r3698,%r3699,%r3700,%r3701,%r3702,%r3703,%r3704,%r3705,%r3706,%r3707,%r3708,%r3709,%r3710,%r3711,%r3712,%r3713,%r3714,%r3715,%r3716,%r3717,%r3718,%r3719,%r3720,%r3721,%r3722,%r3723,%r3724,%r3725,%r3726,%r3727,%r3728,%r3729,%r3730,%r3731,%r3732,%r3733,%r3734,%r3735}, %rd119, %rd104, %p22, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r2840, %r2974;
	mov.b32 	%r2841, %r2974;
	mov.b32 	%r2843, %r2974;
	mov.b32 	%r2844, %r2974;
	// begin inline asm
	// wait for regs: %r3608,%r3609,%r3610,%r3611,%r3612,%r3613,%r3614,%r3615,%r3616,%r3617,%r3618,%r3619,%r3620,%r3621,%r3622,%r3623,%r3624,%r3625,%r3626,%r3627,%r3628,%r3629,%r3630,%r3631,%r3632,%r3633,%r3634,%r3635,%r3636,%r3637,%r3638,%r3639,%r3640,%r3641,%r3642,%r3643,%r3644,%r3645,%r3646,%r3647,%r3648,%r3649,%r3650,%r3651,%r3652,%r3653,%r3654,%r3655,%r3656,%r3657,%r3658,%r3659,%r3660,%r3661,%r3662,%r3663,%r3664,%r3665,%r3666,%r3667,%r3668,%r3669,%r3670,%r3671,%r3672,%r3673,%r3674,%r3675,%r3676,%r3677,%r3678,%r3679,%r3680,%r3681,%r3682,%r3683,%r3684,%r3685,%r3686,%r3687,%r3688,%r3689,%r3690,%r3691,%r3692,%r3693,%r3694,%r3695,%r3696,%r3697,%r3698,%r3699,%r3700,%r3701,%r3702,%r3703,%r3704,%r3705,%r3706,%r3707,%r3708,%r3709,%r3710,%r3711,%r3712,%r3713,%r3714,%r3715,%r3716,%r3717,%r3718,%r3719,%r3720,%r3721,%r3722,%r3723,%r3724,%r3725,%r3726,%r3727,%r3728,%r3729,%r3730,%r3731,%r3732,%r3733,%r3734,%r3735,%r2839,%r2840,%r2841,%r2842,%r2843,%r2844
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 129 18                        // gated_mlp.py:129:18
	add.s64 	%rd137, %rd219, %rd19;
	add.s64 	%rd138, %rd219, %rd18;
	add.s64 	%rd139, %rd219, %rd17;
	add.s64 	%rd140, %rd219, %rd16;
	add.s64 	%rd141, %rd219, %rd15;
	add.s64 	%rd142, %rd219, %rd14;
	add.s64 	%rd143, %rd219, %rd13;
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s64 	%rd144, %rd219, %rd10;
	add.s32 	%r3082, %r3607, 1;
	setp.gt.s32 	%p40, %r3082, 2;
	selp.b32 	%r3607, 0, %r3082, %p40;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p41, %r9, %r3605;
	.loc	1 123 20                        // gated_mlp.py:123:20
	shl.b32 	%r3083, %r3607, 16;
	add.s32 	%r3084, %r585, %r3083;
	bar.sync 	0;
	add.s32 	%r2979, %r3084, %r584;
	add.s32 	%r2981, %r3084, %r590;
	add.s32 	%r2983, %r3084, %r593;
	add.s32 	%r2985, %r3084, %r596;
	add.s32 	%r2987, %r3084, %r599;
	add.s32 	%r2989, %r3084, %r602;
	add.s32 	%r2991, %r3084, %r605;
	add.s32 	%r2993, %r3084, %r608;
	add.s32 	%r2995, %r3084, %r610;
	add.s32 	%r2997, %r3084, %r612;
	add.s32 	%r2999, %r3084, %r614;
	add.s32 	%r3001, %r3084, %r616;
	add.s32 	%r3003, %r3084, %r618;
	add.s32 	%r3005, %r3084, %r620;
	add.s32 	%r3007, %r3084, %r622;
	add.s32 	%r3009, %r3084, %r624;
	selp.b32 	%r3101, 16, 0, %p41;
	selp.b32 	%r2982, %r3101, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r2979 + 0 ], [ %rd218 + 0 ], 0x10, %r2982;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2981 + 0 ], [ %rd218 + 0 ], 0x10, %r2982;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2983 + 0 ], [ %rd218 + 0 ], 0x10, %r2982;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2985 + 0 ], [ %rd218 + 0 ], 0x10, %r2982;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2987 + 0 ], [ %rd218 + 0 ], 0x10, %r2982;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2989 + 0 ], [ %rd218 + 0 ], 0x10, %r2982;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2991 + 0 ], [ %rd218 + 0 ], 0x10, %r2982;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2993 + 0 ], [ %rd218 + 0 ], 0x10, %r2982;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2995 + 0 ], [ %rd218 + 0 ], 0x10, %r2982;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2997 + 0 ], [ %rd218 + 0 ], 0x10, %r2982;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2999 + 0 ], [ %rd218 + 0 ], 0x10, %r2982;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3001 + 0 ], [ %rd218 + 0 ], 0x10, %r2982;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3003 + 0 ], [ %rd218 + 0 ], 0x10, %r2982;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3005 + 0 ], [ %rd218 + 0 ], 0x10, %r2982;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3007 + 0 ], [ %rd218 + 0 ], 0x10, %r2982;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3009 + 0 ], [ %rd218 + 0 ], 0x10, %r2982;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p42, %r15, %r3605;
	setp.lt.s32 	%p43, %r16, %r3605;
	setp.lt.s32 	%p44, %r17, %r3605;
	setp.lt.s32 	%p45, %r18, %r3605;
	setp.lt.s32 	%p46, %r19, %r3605;
	setp.lt.s32 	%p47, %r20, %r3605;
	setp.lt.s32 	%p48, %r21, %r3605;
	setp.lt.s32 	%p49, %r22, %r3605;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r3102, %r3607, 15;
	add.s32 	%r3103, %r631, %r3102;
	add.s32 	%r3011, %r3103, %r630;
	add.s32 	%r3013, %r3103, %r633;
	add.s32 	%r3015, %r3103, %r635;
	add.s32 	%r3017, %r3103, %r637;
	add.s32 	%r3019, %r3103, %r639;
	add.s32 	%r3021, %r3103, %r641;
	add.s32 	%r3023, %r3103, %r643;
	add.s32 	%r3025, %r3103, %r645;
	selp.b32 	%r3112, 16, 0, %p42;
	selp.b32 	%r3012, %r3112, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r3011 + 0 ], [ %rd137 + 0 ], 0x10, %r3012;
	// end inline asm
	selp.b32 	%r3113, 16, 0, %p43;
	selp.b32 	%r3014, %r3113, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r3013 + 0 ], [ %rd138 + 0 ], 0x10, %r3014;
	// end inline asm
	selp.b32 	%r3114, 16, 0, %p44;
	selp.b32 	%r3016, %r3114, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r3015 + 0 ], [ %rd139 + 0 ], 0x10, %r3016;
	// end inline asm
	selp.b32 	%r3115, 16, 0, %p45;
	selp.b32 	%r3018, %r3115, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r3017 + 0 ], [ %rd140 + 0 ], 0x10, %r3018;
	// end inline asm
	selp.b32 	%r3116, 16, 0, %p46;
	selp.b32 	%r3020, %r3116, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r3019 + 0 ], [ %rd141 + 0 ], 0x10, %r3020;
	// end inline asm
	selp.b32 	%r3117, 16, 0, %p47;
	selp.b32 	%r3022, %r3117, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r3021 + 0 ], [ %rd142 + 0 ], 0x10, %r3022;
	// end inline asm
	selp.b32 	%r3118, 16, 0, %p48;
	selp.b32 	%r3024, %r3118, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r3023 + 0 ], [ %rd143 + 0 ], 0x10, %r3024;
	// end inline asm
	selp.b32 	%r3119, 16, 0, %p49;
	selp.b32 	%r3026, %r3119, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r3025 + 0 ], [ %rd144 + 0 ], 0x10, %r3026;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s32 	%r3736, %r3736, 1;
	add.s64 	%rd219, %rd219, %rd12;
	add.s64 	%rd218, %rd218, 256;
	add.s32 	%r3605, %r3605, -128;
	setp.ne.s32 	%p50, %r23, %r3736;
	@%p50 bra 	$L__BB0_2;
$L__BB0_3:                              // %._crit_edge
	.loc	1 98 54                         // gated_mlp.py:98:54
	mul.lo.s32 	%r3440, %r4, %r2;
	sub.s32 	%r3441, %r3, %r3440;
	.loc	1 98 27                         // gated_mlp.py:98:27
	add.s32 	%r3442, %r3441, %r1;
	.loc	1 120 22                        // gated_mlp.py:120:22
	// begin inline asm
	// wait for regs: %r3608,%r3609,%r3610,%r3611,%r3612,%r3613,%r3614,%r3615,%r3616,%r3617,%r3618,%r3619,%r3620,%r3621,%r3622,%r3623,%r3624,%r3625,%r3626,%r3627,%r3628,%r3629,%r3630,%r3631,%r3632,%r3633,%r3634,%r3635,%r3636,%r3637,%r3638,%r3639,%r3640,%r3641,%r3642,%r3643,%r3644,%r3645,%r3646,%r3647,%r3648,%r3649,%r3650,%r3651,%r3652,%r3653,%r3654,%r3655,%r3656,%r3657,%r3658,%r3659,%r3660,%r3661,%r3662,%r3663,%r3664,%r3665,%r3666,%r3667,%r3668,%r3669,%r3670,%r3671,%r3672,%r3673,%r3674,%r3675,%r3676,%r3677,%r3678,%r3679,%r3680,%r3681,%r3682,%r3683,%r3684,%r3685,%r3686,%r3687,%r3688,%r3689,%r3690,%r3691,%r3692,%r3693,%r3694,%r3695,%r3696,%r3697,%r3698,%r3699,%r3700,%r3701,%r3702,%r3703,%r3704,%r3705,%r3706,%r3707,%r3708,%r3709,%r3710,%r3711,%r3712,%r3713,%r3714,%r3715,%r3716,%r3717,%r3718,%r3719,%r3720,%r3721,%r3722,%r3723,%r3724,%r3725,%r3726,%r3727,%r3728,%r3729,%r3730,%r3731,%r3732,%r3733,%r3734,%r3735
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 134 23                        // gated_mlp.py:134:23
	cvt.rn.f16x2.f32 	%r3443, %r3609, %r3608;
	cvt.rn.f16x2.f32 	%r3444, %r3611, %r3610;
	cvt.rn.f16x2.f32 	%r3445, %r3613, %r3612;
	cvt.rn.f16x2.f32 	%r3446, %r3615, %r3614;
	cvt.rn.f16x2.f32 	%r3447, %r3617, %r3616;
	cvt.rn.f16x2.f32 	%r3448, %r3619, %r3618;
	cvt.rn.f16x2.f32 	%r3449, %r3621, %r3620;
	cvt.rn.f16x2.f32 	%r3450, %r3623, %r3622;
	cvt.rn.f16x2.f32 	%r3451, %r3625, %r3624;
	cvt.rn.f16x2.f32 	%r3452, %r3627, %r3626;
	cvt.rn.f16x2.f32 	%r3453, %r3629, %r3628;
	cvt.rn.f16x2.f32 	%r3454, %r3631, %r3630;
	cvt.rn.f16x2.f32 	%r3455, %r3633, %r3632;
	cvt.rn.f16x2.f32 	%r3456, %r3635, %r3634;
	cvt.rn.f16x2.f32 	%r3457, %r3637, %r3636;
	cvt.rn.f16x2.f32 	%r3458, %r3639, %r3638;
	cvt.rn.f16x2.f32 	%r3459, %r3641, %r3640;
	cvt.rn.f16x2.f32 	%r3460, %r3643, %r3642;
	cvt.rn.f16x2.f32 	%r3461, %r3645, %r3644;
	cvt.rn.f16x2.f32 	%r3462, %r3647, %r3646;
	cvt.rn.f16x2.f32 	%r3463, %r3649, %r3648;
	cvt.rn.f16x2.f32 	%r3464, %r3651, %r3650;
	cvt.rn.f16x2.f32 	%r3465, %r3653, %r3652;
	cvt.rn.f16x2.f32 	%r3466, %r3655, %r3654;
	cvt.rn.f16x2.f32 	%r3467, %r3657, %r3656;
	cvt.rn.f16x2.f32 	%r3468, %r3659, %r3658;
	cvt.rn.f16x2.f32 	%r3469, %r3661, %r3660;
	cvt.rn.f16x2.f32 	%r3470, %r3663, %r3662;
	cvt.rn.f16x2.f32 	%r3471, %r3665, %r3664;
	cvt.rn.f16x2.f32 	%r3472, %r3667, %r3666;
	cvt.rn.f16x2.f32 	%r3473, %r3669, %r3668;
	cvt.rn.f16x2.f32 	%r3474, %r3671, %r3670;
	cvt.rn.f16x2.f32 	%r3475, %r3673, %r3672;
	cvt.rn.f16x2.f32 	%r3476, %r3675, %r3674;
	cvt.rn.f16x2.f32 	%r3477, %r3677, %r3676;
	cvt.rn.f16x2.f32 	%r3478, %r3679, %r3678;
	cvt.rn.f16x2.f32 	%r3479, %r3681, %r3680;
	cvt.rn.f16x2.f32 	%r3480, %r3683, %r3682;
	cvt.rn.f16x2.f32 	%r3481, %r3685, %r3684;
	cvt.rn.f16x2.f32 	%r3482, %r3687, %r3686;
	cvt.rn.f16x2.f32 	%r3483, %r3689, %r3688;
	cvt.rn.f16x2.f32 	%r3484, %r3691, %r3690;
	cvt.rn.f16x2.f32 	%r3485, %r3693, %r3692;
	cvt.rn.f16x2.f32 	%r3486, %r3695, %r3694;
	cvt.rn.f16x2.f32 	%r3487, %r3697, %r3696;
	cvt.rn.f16x2.f32 	%r3488, %r3699, %r3698;
	cvt.rn.f16x2.f32 	%r3489, %r3701, %r3700;
	cvt.rn.f16x2.f32 	%r3490, %r3703, %r3702;
	cvt.rn.f16x2.f32 	%r3491, %r3705, %r3704;
	cvt.rn.f16x2.f32 	%r3492, %r3707, %r3706;
	cvt.rn.f16x2.f32 	%r3493, %r3709, %r3708;
	cvt.rn.f16x2.f32 	%r3494, %r3711, %r3710;
	cvt.rn.f16x2.f32 	%r3495, %r3713, %r3712;
	cvt.rn.f16x2.f32 	%r3496, %r3715, %r3714;
	cvt.rn.f16x2.f32 	%r3497, %r3717, %r3716;
	cvt.rn.f16x2.f32 	%r3498, %r3719, %r3718;
	cvt.rn.f16x2.f32 	%r3499, %r3721, %r3720;
	cvt.rn.f16x2.f32 	%r3500, %r3723, %r3722;
	cvt.rn.f16x2.f32 	%r3501, %r3725, %r3724;
	cvt.rn.f16x2.f32 	%r3502, %r3727, %r3726;
	cvt.rn.f16x2.f32 	%r3503, %r3729, %r3728;
	cvt.rn.f16x2.f32 	%r3504, %r3731, %r3730;
	cvt.rn.f16x2.f32 	%r3505, %r3733, %r3732;
	cvt.rn.f16x2.f32 	%r3506, %r3735, %r3734;
	.loc	1 138 22                        // gated_mlp.py:138:22
	shl.b32 	%r3507, %r3442, 8;
	.loc	1 138 37                        // gated_mlp.py:138:37
	or.b32 	%r3508, %r3507, %r15;
	or.b32 	%r3509, %r3507, %r16;
	or.b32 	%r3510, %r3507, %r17;
	or.b32 	%r3511, %r3507, %r18;
	or.b32 	%r3512, %r3507, %r19;
	or.b32 	%r3513, %r3507, %r20;
	or.b32 	%r3514, %r3507, %r21;
	or.b32 	%r3515, %r3507, %r22;
	or.b32 	%r3516, %r14, %r3507;
	or.b32 	%r3517, %r3516, 176;
	or.b32 	%r3518, %r3516, 240;
	.loc	1 140 33                        // gated_mlp.py:140:33
	mul.lo.s32 	%r3519, %r3508, %r444;
	mul.lo.s32 	%r3520, %r3509, %r444;
	mul.lo.s32 	%r3521, %r3510, %r444;
	mul.lo.s32 	%r3522, %r3511, %r444;
	mul.lo.s32 	%r3523, %r3512, %r444;
	mul.lo.s32 	%r3524, %r3513, %r444;
	mul.lo.s32 	%r3525, %r3514, %r444;
	mul.lo.s32 	%r3526, %r3515, %r444;
	shl.b32 	%r3527, %r444, 7;
	add.s32 	%r3528, %r3519, %r3527;
	shl.b32 	%r3529, %r444, 4;
	add.s32 	%r3530, %r3528, %r3529;
	add.s32 	%r3531, %r3530, %r3529;
	mul.lo.s32 	%r3532, %r3517, %r444;
	shl.b32 	%r3533, %r444, 5;
	add.s32 	%r3534, %r3531, %r3533;
	add.s32 	%r3535, %r3534, %r3529;
	add.s32 	%r3536, %r3535, %r3529;
	mul.lo.s32 	%r3537, %r3518, %r444;
	.loc	1 140 21                        // gated_mlp.py:140:21
	mul.wide.s32 	%rd185, %r3519, 2;
	add.s64 	%rd186, %rd27, %rd185;
	mul.wide.s32 	%rd187, %r3520, 2;
	add.s64 	%rd188, %rd27, %rd187;
	mul.wide.s32 	%rd189, %r3521, 2;
	add.s64 	%rd190, %rd27, %rd189;
	mul.wide.s32 	%rd191, %r3522, 2;
	add.s64 	%rd192, %rd27, %rd191;
	mul.wide.s32 	%rd193, %r3523, 2;
	add.s64 	%rd194, %rd27, %rd193;
	mul.wide.s32 	%rd195, %r3524, 2;
	add.s64 	%rd196, %rd27, %rd195;
	mul.wide.s32 	%rd197, %r3525, 2;
	add.s64 	%rd198, %rd27, %rd197;
	mul.wide.s32 	%rd199, %r3526, 2;
	add.s64 	%rd200, %rd27, %rd199;
	mul.wide.s32 	%rd201, %r3528, 2;
	add.s64 	%rd202, %rd27, %rd201;
	mul.wide.s32 	%rd203, %r3530, 2;
	add.s64 	%rd204, %rd27, %rd203;
	mul.wide.s32 	%rd205, %r3531, 2;
	add.s64 	%rd206, %rd27, %rd205;
	mul.wide.s32 	%rd207, %r3532, 2;
	add.s64 	%rd208, %rd27, %rd207;
	mul.wide.s32 	%rd209, %r3534, 2;
	add.s64 	%rd210, %rd27, %rd209;
	mul.wide.s32 	%rd211, %r3535, 2;
	add.s64 	%rd212, %rd27, %rd211;
	mul.wide.s32 	%rd213, %r3536, 2;
	add.s64 	%rd214, %rd27, %rd213;
	mul.wide.s32 	%rd215, %r3537, 2;
	add.s64 	%rd216, %rd27, %rd215;
	.loc	1 140 52                        // gated_mlp.py:140:52
	mul.wide.s32 	%rd217, %r10, 2;
	add.s64 	%rd169, %rd186, %rd217;
	add.s64 	%rd170, %rd188, %rd217;
	add.s64 	%rd171, %rd190, %rd217;
	add.s64 	%rd172, %rd192, %rd217;
	add.s64 	%rd173, %rd194, %rd217;
	add.s64 	%rd174, %rd196, %rd217;
	add.s64 	%rd175, %rd198, %rd217;
	add.s64 	%rd176, %rd200, %rd217;
	add.s64 	%rd177, %rd202, %rd217;
	add.s64 	%rd178, %rd204, %rd217;
	add.s64 	%rd179, %rd206, %rd217;
	add.s64 	%rd180, %rd208, %rd217;
	add.s64 	%rd181, %rd210, %rd217;
	add.s64 	%rd182, %rd212, %rd217;
	add.s64 	%rd183, %rd214, %rd217;
	add.s64 	%rd184, %rd216, %rd217;
	.loc	1 141 33                        // gated_mlp.py:141:33
	setp.lt.s32 	%p67, %r3508, 1;
	setp.lt.s32 	%p68, %r3509, 1;
	setp.lt.s32 	%p69, %r3510, 1;
	setp.lt.s32 	%p70, %r3511, 1;
	setp.lt.s32 	%p71, %r3512, 1;
	setp.lt.s32 	%p72, %r3513, 1;
	setp.lt.s32 	%p73, %r3514, 1;
	setp.lt.s32 	%p74, %r3515, 1;
	setp.lt.s32 	%p75, %r3507, 0;
	.loc	1 141 58                        // gated_mlp.py:141:58
	setp.lt.s32 	%p76, %r10, %r442;
	.loc	1 141 39                        // gated_mlp.py:141:39
	and.pred 	%p51, %p76, %p67;
	and.pred 	%p52, %p76, %p68;
	and.pred 	%p53, %p76, %p69;
	and.pred 	%p54, %p76, %p70;
	and.pred 	%p55, %p76, %p71;
	and.pred 	%p56, %p76, %p72;
	and.pred 	%p57, %p76, %p73;
	and.pred 	%p58, %p76, %p74;
	and.pred 	%p59, %p76, %p75;
	.loc	1 142 21                        // gated_mlp.py:142:21
	shl.b32 	%r3538, %r5, 1;
	and.b32 	%r3539, %r3538, 6;
	shl.b32 	%r3540, %r5, 5;
	and.b32 	%r3541, %r3540, 384;
	or.b32 	%r3542, %r3541, %r3539;
	shl.b32 	%r3543, %r12, 5;
	or.b32 	%r3544, %r3542, %r3543;
	shl.b32 	%r3545, %r5, 6;
	and.b32 	%r3546, %r3545, 6144;
	or.b32 	%r3547, %r3544, %r3546;
	shl.b32 	%r3548, %r13, 6;
	or.b32 	%r3549, %r3547, %r3548;
	and.b32 	%r3550, %r6, 2040;
	shr.u32 	%r3551, %r3549, 3;
	add.s32 	%r3553, %r585, %r3551;
	shl.b32 	%r3554, %r3549, 1;
	add.s32 	%r3555, %r3553, %r3554;
	st.shared.b32 	[%r3555], %r3443;
	or.b32 	%r3556, %r3549, 1024;
	shr.u32 	%r3557, %r3556, 3;
	and.b32 	%r3558, %r3557, 536870910;
	add.s32 	%r3559, %r585, %r3558;
	add.s32 	%r3560, %r3559, %r3554;
	st.shared.b32 	[%r3560+2048], %r3444;
	st.shared.b32 	[%r3555+16], %r3445;
	st.shared.b32 	[%r3560+2064], %r3446;
	st.shared.b32 	[%r3555+32], %r3447;
	and.b32 	%r3561, %r3557, 536870896;
	add.s32 	%r3562, %r585, %r3561;
	add.s32 	%r3563, %r3562, %r3554;
	st.shared.b32 	[%r3563+2080], %r3448;
	st.shared.b32 	[%r3555+48], %r3449;
	st.shared.b32 	[%r3563+2096], %r3450;
	st.shared.b32 	[%r3555+64], %r3451;
	st.shared.b32 	[%r3563+2112], %r3452;
	st.shared.b32 	[%r3555+80], %r3453;
	st.shared.b32 	[%r3563+2128], %r3454;
	st.shared.b32 	[%r3555+96], %r3455;
	st.shared.b32 	[%r3563+2144], %r3456;
	st.shared.b32 	[%r3555+112], %r3457;
	st.shared.b32 	[%r3563+2160], %r3458;
	st.shared.b32 	[%r3555+128], %r3459;
	st.shared.b32 	[%r3563+2176], %r3460;
	st.shared.b32 	[%r3555+144], %r3461;
	st.shared.b32 	[%r3563+2192], %r3462;
	st.shared.b32 	[%r3555+160], %r3463;
	st.shared.b32 	[%r3563+2208], %r3464;
	st.shared.b32 	[%r3555+176], %r3465;
	st.shared.b32 	[%r3563+2224], %r3466;
	st.shared.b32 	[%r3555+192], %r3467;
	st.shared.b32 	[%r3563+2240], %r3468;
	st.shared.b32 	[%r3555+208], %r3469;
	st.shared.b32 	[%r3563+2256], %r3470;
	st.shared.b32 	[%r3555+224], %r3471;
	st.shared.b32 	[%r3563+2272], %r3472;
	st.shared.b32 	[%r3555+240], %r3473;
	st.shared.b32 	[%r3563+2288], %r3474;
	bar.sync 	0;
	and.b32 	%r3564, %r5, 240;
	add.s32 	%r3565, %r585, %r3564;
	shl.b32 	%r3566, %r3550, 1;
	add.s32 	%r3567, %r3565, %r3566;
	ld.shared.v4.b32 	{%r3376, %r3377, %r3378, %r3379}, [%r3567];
	or.b32 	%r3568, %r3550, 2048;
	shr.u32 	%r3569, %r3568, 3;
	and.b32 	%r3570, %r3569, 496;
	add.s32 	%r3571, %r585, %r3570;
	add.s32 	%r3572, %r3571, %r3566;
	ld.shared.v4.b32 	{%r3380, %r3381, %r3382, %r3383}, [%r3572+4096];
	or.b32 	%r3573, %r3550, 4096;
	shr.u32 	%r3574, %r3573, 3;
	and.b32 	%r3575, %r3574, 752;
	add.s32 	%r3576, %r585, %r3575;
	add.s32 	%r3577, %r3576, %r3566;
	ld.shared.v4.b32 	{%r3384, %r3385, %r3386, %r3387}, [%r3577+8192];
	or.b32 	%r3578, %r6, 6144;
	shr.u32 	%r3579, %r3578, 3;
	and.b32 	%r3580, %r3579, 1008;
	add.s32 	%r3581, %r585, %r3580;
	shl.b32 	%r3582, %r3578, 1;
	add.s32 	%r3583, %r3581, %r3582;
	ld.shared.v4.b32 	{%r3388, %r3389, %r3390, %r3391}, [%r3583];
	or.b32 	%r3584, %r6, 8192;
	shr.u32 	%r3585, %r3584, 3;
	and.b32 	%r3586, %r3585, 1264;
	add.s32 	%r3587, %r585, %r3586;
	add.s32 	%r3588, %r3587, %r3566;
	ld.shared.v4.b32 	{%r3392, %r3393, %r3394, %r3395}, [%r3588+16384];
	or.b32 	%r3589, %r3550, 10240;
	shr.u32 	%r3590, %r3589, 3;
	and.b32 	%r3591, %r3590, 1520;
	add.s32 	%r3592, %r585, %r3591;
	add.s32 	%r3593, %r3592, %r3566;
	ld.shared.v4.b32 	{%r3396, %r3397, %r3398, %r3399}, [%r3593+20480];
	or.b32 	%r3594, %r3550, 12288;
	shr.u32 	%r3595, %r3594, 3;
	and.b32 	%r3596, %r3595, 1776;
	add.s32 	%r3597, %r585, %r3596;
	add.s32 	%r3598, %r3597, %r3566;
	ld.shared.v4.b32 	{%r3400, %r3401, %r3402, %r3403}, [%r3598+24576];
	or.b32 	%r3599, %r6, 14336;
	shr.u32 	%r3600, %r3599, 3;
	and.b32 	%r3601, %r3600, 2032;
	add.s32 	%r3602, %r585, %r3601;
	shl.b32 	%r3603, %r3599, 1;
	add.s32 	%r3604, %r3602, %r3603;
	ld.shared.v4.b32 	{%r3404, %r3405, %r3406, %r3407}, [%r3604];
	bar.sync 	0;
	st.shared.b32 	[%r3555], %r3475;
	st.shared.b32 	[%r3560+2048], %r3476;
	st.shared.b32 	[%r3555+16], %r3477;
	st.shared.b32 	[%r3560+2064], %r3478;
	st.shared.b32 	[%r3555+32], %r3479;
	st.shared.b32 	[%r3563+2080], %r3480;
	st.shared.b32 	[%r3555+48], %r3481;
	st.shared.b32 	[%r3563+2096], %r3482;
	st.shared.b32 	[%r3555+64], %r3483;
	st.shared.b32 	[%r3563+2112], %r3484;
	st.shared.b32 	[%r3555+80], %r3485;
	st.shared.b32 	[%r3563+2128], %r3486;
	st.shared.b32 	[%r3555+96], %r3487;
	st.shared.b32 	[%r3563+2144], %r3488;
	st.shared.b32 	[%r3555+112], %r3489;
	st.shared.b32 	[%r3563+2160], %r3490;
	st.shared.b32 	[%r3555+128], %r3491;
	st.shared.b32 	[%r3563+2176], %r3492;
	st.shared.b32 	[%r3555+144], %r3493;
	st.shared.b32 	[%r3563+2192], %r3494;
	st.shared.b32 	[%r3555+160], %r3495;
	st.shared.b32 	[%r3563+2208], %r3496;
	st.shared.b32 	[%r3555+176], %r3497;
	st.shared.b32 	[%r3563+2224], %r3498;
	st.shared.b32 	[%r3555+192], %r3499;
	st.shared.b32 	[%r3563+2240], %r3500;
	st.shared.b32 	[%r3555+208], %r3501;
	st.shared.b32 	[%r3563+2256], %r3502;
	st.shared.b32 	[%r3555+224], %r3503;
	st.shared.b32 	[%r3563+2272], %r3504;
	st.shared.b32 	[%r3555+240], %r3505;
	st.shared.b32 	[%r3563+2288], %r3506;
	bar.sync 	0;
	ld.shared.v4.b32 	{%r3408, %r3409, %r3410, %r3411}, [%r3567];
	ld.shared.v4.b32 	{%r3412, %r3413, %r3414, %r3415}, [%r3572+4096];
	ld.shared.v4.b32 	{%r3416, %r3417, %r3418, %r3419}, [%r3577+8192];
	ld.shared.v4.b32 	{%r3420, %r3421, %r3422, %r3423}, [%r3583];
	ld.shared.v4.b32 	{%r3424, %r3425, %r3426, %r3427}, [%r3588+16384];
	ld.shared.v4.b32 	{%r3428, %r3429, %r3430, %r3431}, [%r3593+20480];
	ld.shared.v4.b32 	{%r3432, %r3433, %r3434, %r3435}, [%r3598+24576];
	ld.shared.v4.b32 	{%r3436, %r3437, %r3438, %r3439}, [%r3604];
	// begin inline asm
	@%p51 st.global.v4.b32 [ %rd169 + 0 ], { %r3376, %r3377, %r3378, %r3379 };
	// end inline asm
	// begin inline asm
	@%p52 st.global.v4.b32 [ %rd170 + 0 ], { %r3380, %r3381, %r3382, %r3383 };
	// end inline asm
	// begin inline asm
	@%p53 st.global.v4.b32 [ %rd171 + 0 ], { %r3384, %r3385, %r3386, %r3387 };
	// end inline asm
	// begin inline asm
	@%p54 st.global.v4.b32 [ %rd172 + 0 ], { %r3388, %r3389, %r3390, %r3391 };
	// end inline asm
	// begin inline asm
	@%p55 st.global.v4.b32 [ %rd173 + 0 ], { %r3392, %r3393, %r3394, %r3395 };
	// end inline asm
	// begin inline asm
	@%p56 st.global.v4.b32 [ %rd174 + 0 ], { %r3396, %r3397, %r3398, %r3399 };
	// end inline asm
	// begin inline asm
	@%p57 st.global.v4.b32 [ %rd175 + 0 ], { %r3400, %r3401, %r3402, %r3403 };
	// end inline asm
	// begin inline asm
	@%p58 st.global.v4.b32 [ %rd176 + 0 ], { %r3404, %r3405, %r3406, %r3407 };
	// end inline asm
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd177 + 0 ], { %r3408, %r3409, %r3410, %r3411 };
	// end inline asm
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd178 + 0 ], { %r3412, %r3413, %r3414, %r3415 };
	// end inline asm
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd179 + 0 ], { %r3416, %r3417, %r3418, %r3419 };
	// end inline asm
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd180 + 0 ], { %r3420, %r3421, %r3422, %r3423 };
	// end inline asm
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd181 + 0 ], { %r3424, %r3425, %r3426, %r3427 };
	// end inline asm
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd182 + 0 ], { %r3428, %r3429, %r3430, %r3431 };
	// end inline asm
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd183 + 0 ], { %r3432, %r3433, %r3434, %r3435 };
	// end inline asm
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd184 + 0 ], { %r3436, %r3437, %r3438, %r3439 };
	// end inline asm
	.loc	1 142 4                         // gated_mlp.py:142:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py"
	.file	2 "/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 157                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x96 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 103                                 // DW_AT_name
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 109
.b8 108
.b8 112
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 117
.b8 98
.b8 117
.b8 110
.b8 116
.b8 117
.b8 47
.b8 80
.b8 84
.b8 88
.b8 95
.b8 100
.b8 97
.b8 116
.b8 97
.b8 115
.b8 101
.b8 116
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 116
.b8 120
.b8 0
.b8 2                                   // Abbrev [2] 0x4a:0x10 DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x5a:0x46 DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 74                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x6f:0x18 DW_TAG_inlined_subroutine
.b32 74                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 93                                  // DW_AT_call_line
.b8 27                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x87:0x18 DW_TAG_inlined_subroutine
.b32 74                                 // DW_AT_abstract_origin
.b64 $L__tmp3                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 120                                 // DW_AT_call_line
.b8 33                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
