//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	matmul_kernel           // -- Begin function matmul_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @matmul_kernel
.visible .entry matmul_kernel(
	.param .u64 .ptr .global .align 1 matmul_kernel_param_0,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_1,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_2,
	.param .u32 matmul_kernel_param_3,
	.param .u32 matmul_kernel_param_4,
	.param .u32 matmul_kernel_param_5,
	.param .u32 matmul_kernel_param_6,
	.param .u32 matmul_kernel_param_7,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_8
)
.reqntid 128
{
	.reg .pred 	%p<126>;
	.reg .b32 	%r<3998>;
	.reg .b64 	%rd<295>;
	.loc	1 68 0                          // gated_mlp.py:68:0
$L__func_begin0:
	.loc	1 68 0                          // gated_mlp.py:68:0

// %bb.0:
	ld.param.b32 	%r444, [matmul_kernel_param_7];
	ld.param.b32 	%r443, [matmul_kernel_param_6];
	ld.param.b32 	%r442, [matmul_kernel_param_4];
	ld.param.b32 	%r441, [matmul_kernel_param_3];
	ld.param.b64 	%rd39, [matmul_kernel_param_2];
	ld.param.b64 	%rd38, [matmul_kernel_param_1];
	ld.param.b64 	%rd37, [matmul_kernel_param_0];
$L__tmp0:
	.loc	1 91 24                         // gated_mlp.py:91:24
	mov.u32 	%r638, %ctaid.x;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:93:27 ]
	add.s32 	%r639, %r441, 127;
	.loc	2 40 28                         // standard.py:40:28 @[ gated_mlp.py:93:27 ]
	shr.s32 	%r640, %r639, 31;
	shr.u32 	%r641, %r640, 25;
	add.s32 	%r642, %r639, %r641;
	shr.s32 	%r643, %r642, 7;
$L__tmp2:
	.loc	1 94 38                         // gated_mlp.py:94:38
	shl.b32 	%r645, %r643, 3;
	.loc	1 95 22                         // gated_mlp.py:95:22
	div.s32 	%r646, %r638, %r645;
	.loc	1 96 29                         // gated_mlp.py:96:29
	shl.b32 	%r1, %r646, 3;
	.loc	1 97 35                         // gated_mlp.py:97:35
	sub.s32 	%r647, 1, %r1;
	.loc	1 97 48                         // gated_mlp.py:97:48
	min.s32 	%r2, %r647, 8;
	.loc	1 98 34                         // gated_mlp.py:98:34
	mul.lo.s32 	%r648, %r646, %r645;
	sub.s32 	%r3, %r638, %r648;
	.loc	1 99 40                         // gated_mlp.py:99:40
	div.s32 	%r4, %r3, %r2;
	.loc	1 109 23                        // gated_mlp.py:109:23
	shl.b32 	%r649, %r4, 7;
	.loc	1 109 51                        // gated_mlp.py:109:51
	mov.u32 	%r5, %tid.x;
	shl.b32 	%r6, %r5, 3;
	and.b32 	%r7, %r6, 56;
	and.b32 	%r650, %r5, 8;
	shl.b32 	%r8, %r650, 3;
	or.b32 	%r9, %r7, %r8;
	and.b32 	%r11, %r5, 16;
	bfe.s32 	%r651, %r5, 4, 1;
	bfe.s32 	%r652, %r5, 5, 1;
	bfe.s32 	%r653, %r5, 6, 1;
	shr.u32 	%r654, %r5, 4;
	bfe.u32 	%r12, %r5, 4, 3;
	or.b32 	%r13, %r12, 8;
	or.b32 	%r14, %r12, 16;
	or.b32 	%r15, %r12, 24;
	or.b32 	%r16, %r12, 32;
	or.b32 	%r17, %r12, 40;
	or.b32 	%r18, %r12, 48;
	or.b32 	%r19, %r654, 56;
	or.b32 	%r20, %r12, 64;
	or.b32 	%r21, %r12, 72;
	or.b32 	%r22, %r12, 80;
	or.b32 	%r23, %r12, 88;
	or.b32 	%r24, %r12, 96;
	or.b32 	%r25, %r12, 104;
	or.b32 	%r26, %r12, 112;
	or.b32 	%r27, %r654, 120;
	.loc	1 109 38                        // gated_mlp.py:109:38
	or.b32 	%r28, %r649, %r9;
	.loc	1 109 68                        // gated_mlp.py:109:68
	rem.s32 	%r29, %r28, %r441;
	.loc	1 111 22                        // gated_mlp.py:111:22
	mul.wide.u32 	%rd136, %r9, 2;
	add.s64 	%rd40, %rd37, %rd136;
	.loc	1 112 40                        // gated_mlp.py:112:40
	mul.lo.s32 	%r655, %r443, %r12;
	shl.b32 	%r656, %r443, 3;
	add.s32 	%r657, %r655, %r656;
	add.s32 	%r658, %r657, %r656;
	add.s32 	%r659, %r658, %r656;
	add.s32 	%r660, %r659, %r656;
	add.s32 	%r661, %r660, %r656;
	add.s32 	%r662, %r661, %r656;
	shl.b32 	%r663, %r443, 4;
	add.s32 	%r664, %r662, %r663;
	add.s32 	%r665, %r664, %r656;
	add.s32 	%r666, %r665, %r656;
	add.s32 	%r667, %r666, %r656;
	add.s32 	%r668, %r667, %r656;
	add.s32 	%r669, %r668, %r656;
	add.s32 	%r670, %r669, %r656;
	.loc	1 112 52                        // gated_mlp.py:112:52
	add.s32 	%r671, %r29, %r655;
	add.s32 	%r672, %r29, %r657;
	add.s32 	%r673, %r29, %r658;
	add.s32 	%r674, %r29, %r659;
	add.s32 	%r675, %r29, %r660;
	add.s32 	%r676, %r29, %r661;
	add.s32 	%r677, %r29, %r662;
	mad.lo.s32 	%r678, %r443, %r19, %r29;
	add.s32 	%r679, %r29, %r664;
	add.s32 	%r680, %r29, %r665;
	add.s32 	%r681, %r29, %r666;
	add.s32 	%r682, %r29, %r667;
	add.s32 	%r683, %r29, %r668;
	add.s32 	%r684, %r29, %r669;
	add.s32 	%r685, %r29, %r670;
	mad.lo.s32 	%r686, %r443, %r27, %r29;
	.loc	1 112 22                        // gated_mlp.py:112:22
	mul.wide.s32 	%rd137, %r671, 2;
	add.s64 	%rd56, %rd38, %rd137;
	mul.wide.s32 	%rd138, %r672, 2;
	add.s64 	%rd57, %rd38, %rd138;
	mul.wide.s32 	%rd139, %r673, 2;
	add.s64 	%rd58, %rd38, %rd139;
	mul.wide.s32 	%rd140, %r674, 2;
	add.s64 	%rd59, %rd38, %rd140;
	mul.wide.s32 	%rd141, %r675, 2;
	add.s64 	%rd60, %rd38, %rd141;
	mul.wide.s32 	%rd142, %r676, 2;
	add.s64 	%rd61, %rd38, %rd142;
	mul.wide.s32 	%rd143, %r677, 2;
	add.s64 	%rd62, %rd38, %rd143;
	mul.wide.s32 	%rd144, %r678, 2;
	add.s64 	%rd63, %rd38, %rd144;
	mul.wide.s32 	%rd145, %r679, 2;
	add.s64 	%rd64, %rd38, %rd145;
	mul.wide.s32 	%rd146, %r680, 2;
	add.s64 	%rd65, %rd38, %rd146;
	mul.wide.s32 	%rd147, %r681, 2;
	add.s64 	%rd66, %rd38, %rd147;
	mul.wide.s32 	%rd148, %r682, 2;
	add.s64 	%rd67, %rd38, %rd148;
	mul.wide.s32 	%rd149, %r683, 2;
	add.s64 	%rd68, %rd38, %rd149;
	mul.wide.s32 	%rd150, %r684, 2;
	add.s64 	%rd69, %rd38, %rd150;
	mul.wide.s32 	%rd151, %r685, 2;
	add.s64 	%rd70, %rd38, %rd151;
	mul.wide.s32 	%rd152, %r686, 2;
	add.s64 	%rd71, %rd38, %rd152;
$L__tmp3:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:120:33 ]
	add.s32 	%r687, %r442, 127;
$L__tmp4:
	.loc	1 129 33                        // gated_mlp.py:129:33
	shl.b32 	%r691, %r443, 7;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.lt.s32 	%p1, %r687, 128;
	setp.gt.s32 	%p2, %r687, 127;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p3, %r9, %r442;
	.loc	1 123 20                        // gated_mlp.py:123:20
	shl.b32 	%r692, %r650, 10;
	or.b32 	%r693, %r7, %r692;
	and.b32 	%r694, %r651, 72;
	and.b32 	%r695, %r652, 144;
	and.b32 	%r696, %r653, 288;
	or.b32 	%r697, %r695, %r694;
	xor.b32 	%r698, %r697, %r693;
	xor.b32 	%r31, %r698, %r696;
	shl.b32 	%r699, %r31, 1;
	mov.b32 	%r700, global_smem;
	add.s32 	%r445, %r700, %r699;
	or.b32 	%r701, %r693, 512;
	or.b32 	%r702, %r697, %r696;
	xor.b32 	%r32, %r702, %r701;
	shl.b32 	%r703, %r32, 1;
	add.s32 	%r447, %r700, %r703;
	or.b32 	%r704, %r693, 1024;
	xor.b32 	%r33, %r702, %r704;
	shl.b32 	%r705, %r33, 1;
	add.s32 	%r449, %r700, %r705;
	or.b32 	%r706, %r693, 1536;
	xor.b32 	%r34, %r702, %r706;
	shl.b32 	%r707, %r34, 1;
	add.s32 	%r451, %r700, %r707;
	or.b32 	%r708, %r693, 2048;
	xor.b32 	%r35, %r702, %r708;
	shl.b32 	%r709, %r35, 1;
	add.s32 	%r453, %r700, %r709;
	or.b32 	%r710, %r693, 2560;
	xor.b32 	%r36, %r702, %r710;
	shl.b32 	%r711, %r36, 1;
	add.s32 	%r455, %r700, %r711;
	or.b32 	%r712, %r693, 3072;
	xor.b32 	%r37, %r702, %r712;
	shl.b32 	%r713, %r37, 1;
	add.s32 	%r457, %r700, %r713;
	or.b32 	%r714, %r693, 3584;
	xor.b32 	%r38, %r702, %r714;
	shl.b32 	%r715, %r38, 1;
	add.s32 	%r459, %r700, %r715;
	or.b32 	%r716, %r693, 4096;
	xor.b32 	%r39, %r702, %r716;
	shl.b32 	%r717, %r39, 1;
	add.s32 	%r461, %r700, %r717;
	or.b32 	%r718, %r693, 4608;
	xor.b32 	%r40, %r702, %r718;
	shl.b32 	%r719, %r40, 1;
	add.s32 	%r463, %r700, %r719;
	or.b32 	%r720, %r693, 5120;
	xor.b32 	%r41, %r702, %r720;
	shl.b32 	%r721, %r41, 1;
	add.s32 	%r465, %r700, %r721;
	or.b32 	%r722, %r693, 5632;
	xor.b32 	%r42, %r702, %r722;
	shl.b32 	%r723, %r42, 1;
	add.s32 	%r467, %r700, %r723;
	or.b32 	%r724, %r693, 6144;
	xor.b32 	%r43, %r702, %r724;
	shl.b32 	%r725, %r43, 1;
	add.s32 	%r469, %r700, %r725;
	or.b32 	%r726, %r693, 6656;
	xor.b32 	%r44, %r702, %r726;
	shl.b32 	%r727, %r44, 1;
	add.s32 	%r471, %r700, %r727;
	or.b32 	%r728, %r693, 7168;
	xor.b32 	%r45, %r702, %r728;
	shl.b32 	%r729, %r45, 1;
	add.s32 	%r473, %r700, %r729;
	or.b32 	%r730, %r693, 7680;
	xor.b32 	%r46, %r702, %r730;
	shl.b32 	%r731, %r46, 1;
	add.s32 	%r475, %r700, %r731;
	selp.b32 	%r732, 16, 0, %p2;
	selp.b32 	%r448, %r732, 0, %p3;
	// begin inline asm
	cp.async.cg.shared.global [ %r445 + 0 ], [ %rd40 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r447 + 0 ], [ %rd40 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r449 + 0 ], [ %rd40 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r451 + 0 ], [ %rd40 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r453 + 0 ], [ %rd40 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r455 + 0 ], [ %rd40 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r457 + 0 ], [ %rd40 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r459 + 0 ], [ %rd40 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r461 + 0 ], [ %rd40 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r463 + 0 ], [ %rd40 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r465 + 0 ], [ %rd40 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r467 + 0 ], [ %rd40 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r469 + 0 ], [ %rd40 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r471 + 0 ], [ %rd40 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r473 + 0 ], [ %rd40 + 0 ], 0x10, %r448;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r475 + 0 ], [ %rd40 + 0 ], 0x10, %r448;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p4, %r12, %r442;
	setp.lt.s32 	%p5, %r13, %r442;
	setp.lt.s32 	%p6, %r14, %r442;
	setp.lt.s32 	%p7, %r15, %r442;
	setp.lt.s32 	%p8, %r16, %r442;
	setp.lt.s32 	%p9, %r17, %r442;
	setp.lt.s32 	%p10, %r18, %r442;
	setp.lt.s32 	%p11, %r19, %r442;
	setp.lt.s32 	%p12, %r20, %r442;
	setp.lt.s32 	%p13, %r21, %r442;
	setp.lt.s32 	%p14, %r22, %r442;
	setp.lt.s32 	%p15, %r23, %r442;
	setp.lt.s32 	%p16, %r24, %r442;
	setp.lt.s32 	%p17, %r25, %r442;
	setp.lt.s32 	%p18, %r26, %r442;
	setp.lt.s32 	%p19, %r27, %r442;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r733, %r700, 131072;
	add.s32 	%r477, %r733, %r699;
	add.s32 	%r479, %r733, %r703;
	add.s32 	%r481, %r733, %r705;
	add.s32 	%r483, %r733, %r707;
	add.s32 	%r485, %r733, %r709;
	add.s32 	%r487, %r733, %r711;
	add.s32 	%r489, %r733, %r713;
	add.s32 	%r491, %r733, %r715;
	add.s32 	%r493, %r733, %r717;
	add.s32 	%r495, %r733, %r719;
	add.s32 	%r497, %r733, %r721;
	add.s32 	%r499, %r733, %r723;
	add.s32 	%r501, %r733, %r725;
	add.s32 	%r503, %r733, %r727;
	add.s32 	%r505, %r733, %r729;
	add.s32 	%r507, %r733, %r731;
	selp.b32 	%r478, %r732, 0, %p4;
	// begin inline asm
	cp.async.cg.shared.global [ %r477 + 0 ], [ %rd56 + 0 ], 0x10, %r478;
	// end inline asm
	selp.b32 	%r480, %r732, 0, %p5;
	// begin inline asm
	cp.async.cg.shared.global [ %r479 + 0 ], [ %rd57 + 0 ], 0x10, %r480;
	// end inline asm
	selp.b32 	%r482, %r732, 0, %p6;
	// begin inline asm
	cp.async.cg.shared.global [ %r481 + 0 ], [ %rd58 + 0 ], 0x10, %r482;
	// end inline asm
	selp.b32 	%r484, %r732, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r483 + 0 ], [ %rd59 + 0 ], 0x10, %r484;
	// end inline asm
	selp.b32 	%r486, %r732, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r485 + 0 ], [ %rd60 + 0 ], 0x10, %r486;
	// end inline asm
	selp.b32 	%r488, %r732, 0, %p9;
	// begin inline asm
	cp.async.cg.shared.global [ %r487 + 0 ], [ %rd61 + 0 ], 0x10, %r488;
	// end inline asm
	selp.b32 	%r490, %r732, 0, %p10;
	// begin inline asm
	cp.async.cg.shared.global [ %r489 + 0 ], [ %rd62 + 0 ], 0x10, %r490;
	// end inline asm
	selp.b32 	%r492, %r732, 0, %p11;
	// begin inline asm
	cp.async.cg.shared.global [ %r491 + 0 ], [ %rd63 + 0 ], 0x10, %r492;
	// end inline asm
	selp.b32 	%r494, %r732, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r493 + 0 ], [ %rd64 + 0 ], 0x10, %r494;
	// end inline asm
	selp.b32 	%r496, %r732, 0, %p13;
	// begin inline asm
	cp.async.cg.shared.global [ %r495 + 0 ], [ %rd65 + 0 ], 0x10, %r496;
	// end inline asm
	selp.b32 	%r498, %r732, 0, %p14;
	// begin inline asm
	cp.async.cg.shared.global [ %r497 + 0 ], [ %rd66 + 0 ], 0x10, %r498;
	// end inline asm
	selp.b32 	%r500, %r732, 0, %p15;
	// begin inline asm
	cp.async.cg.shared.global [ %r499 + 0 ], [ %rd67 + 0 ], 0x10, %r500;
	// end inline asm
	selp.b32 	%r502, %r732, 0, %p16;
	// begin inline asm
	cp.async.cg.shared.global [ %r501 + 0 ], [ %rd68 + 0 ], 0x10, %r502;
	// end inline asm
	selp.b32 	%r504, %r732, 0, %p17;
	// begin inline asm
	cp.async.cg.shared.global [ %r503 + 0 ], [ %rd69 + 0 ], 0x10, %r504;
	// end inline asm
	selp.b32 	%r506, %r732, 0, %p18;
	// begin inline asm
	cp.async.cg.shared.global [ %r505 + 0 ], [ %rd70 + 0 ], 0x10, %r506;
	// end inline asm
	selp.b32 	%r508, %r732, 0, %p19;
	// begin inline asm
	cp.async.cg.shared.global [ %r507 + 0 ], [ %rd71 + 0 ], 0x10, %r508;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p20, %r687, 255;
	.loc	1 128 18                        // gated_mlp.py:128:18
	add.s64 	%rd72, %rd40, 256;
	.loc	1 129 18                        // gated_mlp.py:129:18
	mul.wide.s32 	%rd153, %r691, 2;
	add.s64 	%rd88, %rd56, %rd153;
	add.s64 	%rd89, %rd57, %rd153;
	add.s64 	%rd90, %rd58, %rd153;
	add.s64 	%rd91, %rd59, %rd153;
	add.s64 	%rd92, %rd60, %rd153;
	add.s64 	%rd93, %rd61, %rd153;
	add.s64 	%rd94, %rd62, %rd153;
	add.s64 	%rd95, %rd63, %rd153;
	add.s64 	%rd96, %rd64, %rd153;
	add.s64 	%rd97, %rd65, %rd153;
	add.s64 	%rd98, %rd66, %rd153;
	add.s64 	%rd99, %rd67, %rd153;
	add.s64 	%rd100, %rd68, %rd153;
	add.s64 	%rd101, %rd69, %rd153;
	add.s64 	%rd102, %rd70, %rd153;
	add.s64 	%rd103, %rd71, %rd153;
	.loc	1 123 55                        // gated_mlp.py:123:55
	add.s32 	%r734, %r442, -128;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p21, %r9, %r734;
	.loc	1 123 20                        // gated_mlp.py:123:20
	bar.sync 	0;
	add.s32 	%r735, %r700, 32768;
	add.s32 	%r509, %r735, %r699;
	add.s32 	%r511, %r735, %r703;
	add.s32 	%r513, %r735, %r705;
	add.s32 	%r515, %r735, %r707;
	add.s32 	%r517, %r735, %r709;
	add.s32 	%r519, %r735, %r711;
	add.s32 	%r521, %r735, %r713;
	add.s32 	%r523, %r735, %r715;
	add.s32 	%r525, %r735, %r717;
	add.s32 	%r527, %r735, %r719;
	add.s32 	%r529, %r735, %r721;
	add.s32 	%r531, %r735, %r723;
	add.s32 	%r533, %r735, %r725;
	add.s32 	%r535, %r735, %r727;
	add.s32 	%r537, %r735, %r729;
	add.s32 	%r539, %r735, %r731;
	selp.b32 	%r736, 16, 0, %p21;
	selp.b32 	%r512, %r736, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r509 + 0 ], [ %rd72 + 0 ], 0x10, %r512;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r511 + 0 ], [ %rd72 + 0 ], 0x10, %r512;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r513 + 0 ], [ %rd72 + 0 ], 0x10, %r512;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r515 + 0 ], [ %rd72 + 0 ], 0x10, %r512;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r517 + 0 ], [ %rd72 + 0 ], 0x10, %r512;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r519 + 0 ], [ %rd72 + 0 ], 0x10, %r512;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r521 + 0 ], [ %rd72 + 0 ], 0x10, %r512;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r523 + 0 ], [ %rd72 + 0 ], 0x10, %r512;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r525 + 0 ], [ %rd72 + 0 ], 0x10, %r512;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r527 + 0 ], [ %rd72 + 0 ], 0x10, %r512;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r529 + 0 ], [ %rd72 + 0 ], 0x10, %r512;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r531 + 0 ], [ %rd72 + 0 ], 0x10, %r512;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r533 + 0 ], [ %rd72 + 0 ], 0x10, %r512;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r535 + 0 ], [ %rd72 + 0 ], 0x10, %r512;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r537 + 0 ], [ %rd72 + 0 ], 0x10, %r512;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r539 + 0 ], [ %rd72 + 0 ], 0x10, %r512;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p22, %r12, %r734;
	setp.lt.s32 	%p23, %r13, %r734;
	setp.lt.s32 	%p24, %r14, %r734;
	setp.lt.s32 	%p25, %r15, %r734;
	setp.lt.s32 	%p26, %r16, %r734;
	setp.lt.s32 	%p27, %r17, %r734;
	setp.lt.s32 	%p28, %r18, %r734;
	setp.lt.s32 	%p29, %r19, %r734;
	setp.lt.s32 	%p30, %r20, %r734;
	setp.lt.s32 	%p31, %r21, %r734;
	setp.lt.s32 	%p32, %r22, %r734;
	setp.lt.s32 	%p33, %r23, %r734;
	setp.lt.s32 	%p34, %r24, %r734;
	setp.lt.s32 	%p35, %r25, %r734;
	setp.lt.s32 	%p36, %r26, %r734;
	setp.lt.s32 	%p37, %r27, %r734;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r737, %r700, 163840;
	add.s32 	%r541, %r737, %r699;
	add.s32 	%r543, %r737, %r703;
	add.s32 	%r545, %r737, %r705;
	add.s32 	%r547, %r737, %r707;
	add.s32 	%r549, %r737, %r709;
	add.s32 	%r551, %r737, %r711;
	add.s32 	%r553, %r737, %r713;
	add.s32 	%r555, %r737, %r715;
	add.s32 	%r557, %r737, %r717;
	add.s32 	%r559, %r737, %r719;
	add.s32 	%r561, %r737, %r721;
	add.s32 	%r563, %r737, %r723;
	add.s32 	%r565, %r737, %r725;
	add.s32 	%r567, %r737, %r727;
	add.s32 	%r569, %r737, %r729;
	add.s32 	%r571, %r737, %r731;
	selp.b32 	%r738, 16, 0, %p22;
	selp.b32 	%r542, %r738, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r541 + 0 ], [ %rd88 + 0 ], 0x10, %r542;
	// end inline asm
	selp.b32 	%r739, 16, 0, %p23;
	selp.b32 	%r544, %r739, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r543 + 0 ], [ %rd89 + 0 ], 0x10, %r544;
	// end inline asm
	selp.b32 	%r740, 16, 0, %p24;
	selp.b32 	%r546, %r740, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r545 + 0 ], [ %rd90 + 0 ], 0x10, %r546;
	// end inline asm
	selp.b32 	%r741, 16, 0, %p25;
	selp.b32 	%r548, %r741, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r547 + 0 ], [ %rd91 + 0 ], 0x10, %r548;
	// end inline asm
	selp.b32 	%r742, 16, 0, %p26;
	selp.b32 	%r550, %r742, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r549 + 0 ], [ %rd92 + 0 ], 0x10, %r550;
	// end inline asm
	selp.b32 	%r743, 16, 0, %p27;
	selp.b32 	%r552, %r743, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r551 + 0 ], [ %rd93 + 0 ], 0x10, %r552;
	// end inline asm
	selp.b32 	%r744, 16, 0, %p28;
	selp.b32 	%r554, %r744, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r553 + 0 ], [ %rd94 + 0 ], 0x10, %r554;
	// end inline asm
	selp.b32 	%r745, 16, 0, %p29;
	selp.b32 	%r556, %r745, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r555 + 0 ], [ %rd95 + 0 ], 0x10, %r556;
	// end inline asm
	selp.b32 	%r746, 16, 0, %p30;
	selp.b32 	%r558, %r746, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r557 + 0 ], [ %rd96 + 0 ], 0x10, %r558;
	// end inline asm
	selp.b32 	%r747, 16, 0, %p31;
	selp.b32 	%r560, %r747, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r559 + 0 ], [ %rd97 + 0 ], 0x10, %r560;
	// end inline asm
	selp.b32 	%r748, 16, 0, %p32;
	selp.b32 	%r562, %r748, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r561 + 0 ], [ %rd98 + 0 ], 0x10, %r562;
	// end inline asm
	selp.b32 	%r749, 16, 0, %p33;
	selp.b32 	%r564, %r749, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r563 + 0 ], [ %rd99 + 0 ], 0x10, %r564;
	// end inline asm
	selp.b32 	%r750, 16, 0, %p34;
	selp.b32 	%r566, %r750, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r565 + 0 ], [ %rd100 + 0 ], 0x10, %r566;
	// end inline asm
	selp.b32 	%r751, 16, 0, %p35;
	selp.b32 	%r568, %r751, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r567 + 0 ], [ %rd101 + 0 ], 0x10, %r568;
	// end inline asm
	selp.b32 	%r752, 16, 0, %p36;
	selp.b32 	%r570, %r752, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r569 + 0 ], [ %rd102 + 0 ], 0x10, %r570;
	// end inline asm
	selp.b32 	%r753, 16, 0, %p37;
	selp.b32 	%r572, %r753, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r571 + 0 ], [ %rd103 + 0 ], 0x10, %r572;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p38, %r687, 383;
	.loc	1 128 18                        // gated_mlp.py:128:18
	add.s64 	%rd104, %rd40, 512;
	.loc	1 129 18                        // gated_mlp.py:129:18
	add.s64 	%rd120, %rd88, %rd153;
	add.s64 	%rd121, %rd89, %rd153;
	add.s64 	%rd122, %rd90, %rd153;
	add.s64 	%rd123, %rd91, %rd153;
	add.s64 	%rd124, %rd92, %rd153;
	add.s64 	%rd125, %rd93, %rd153;
	add.s64 	%rd126, %rd94, %rd153;
	add.s64 	%rd127, %rd95, %rd153;
	add.s64 	%rd128, %rd96, %rd153;
	add.s64 	%rd129, %rd97, %rd153;
	add.s64 	%rd130, %rd98, %rd153;
	add.s64 	%rd131, %rd99, %rd153;
	add.s64 	%rd132, %rd100, %rd153;
	add.s64 	%rd133, %rd101, %rd153;
	add.s64 	%rd134, %rd102, %rd153;
	add.s64 	%rd135, %rd103, %rd153;
	.loc	1 123 55                        // gated_mlp.py:123:55
	add.s32 	%r754, %r442, -256;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p39, %r9, %r754;
	.loc	1 123 20                        // gated_mlp.py:123:20
	bar.sync 	0;
	add.s32 	%r755, %r700, 65536;
	add.s32 	%r573, %r755, %r699;
	add.s32 	%r575, %r755, %r703;
	add.s32 	%r577, %r755, %r705;
	add.s32 	%r579, %r755, %r707;
	add.s32 	%r581, %r755, %r709;
	add.s32 	%r583, %r755, %r711;
	add.s32 	%r585, %r755, %r713;
	add.s32 	%r587, %r755, %r715;
	add.s32 	%r589, %r755, %r717;
	add.s32 	%r591, %r755, %r719;
	add.s32 	%r593, %r755, %r721;
	add.s32 	%r595, %r755, %r723;
	add.s32 	%r597, %r755, %r725;
	add.s32 	%r599, %r755, %r727;
	add.s32 	%r601, %r755, %r729;
	add.s32 	%r603, %r755, %r731;
	selp.b32 	%r756, 16, 0, %p39;
	selp.b32 	%r576, %r756, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r573 + 0 ], [ %rd104 + 0 ], 0x10, %r576;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r575 + 0 ], [ %rd104 + 0 ], 0x10, %r576;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r577 + 0 ], [ %rd104 + 0 ], 0x10, %r576;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r579 + 0 ], [ %rd104 + 0 ], 0x10, %r576;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r581 + 0 ], [ %rd104 + 0 ], 0x10, %r576;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r583 + 0 ], [ %rd104 + 0 ], 0x10, %r576;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r585 + 0 ], [ %rd104 + 0 ], 0x10, %r576;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r587 + 0 ], [ %rd104 + 0 ], 0x10, %r576;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r589 + 0 ], [ %rd104 + 0 ], 0x10, %r576;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r591 + 0 ], [ %rd104 + 0 ], 0x10, %r576;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r593 + 0 ], [ %rd104 + 0 ], 0x10, %r576;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r595 + 0 ], [ %rd104 + 0 ], 0x10, %r576;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r597 + 0 ], [ %rd104 + 0 ], 0x10, %r576;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r599 + 0 ], [ %rd104 + 0 ], 0x10, %r576;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r601 + 0 ], [ %rd104 + 0 ], 0x10, %r576;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r603 + 0 ], [ %rd104 + 0 ], 0x10, %r576;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p40, %r12, %r754;
	setp.lt.s32 	%p41, %r13, %r754;
	setp.lt.s32 	%p42, %r14, %r754;
	setp.lt.s32 	%p43, %r15, %r754;
	setp.lt.s32 	%p44, %r16, %r754;
	setp.lt.s32 	%p45, %r17, %r754;
	setp.lt.s32 	%p46, %r18, %r754;
	setp.lt.s32 	%p47, %r19, %r754;
	setp.lt.s32 	%p48, %r20, %r754;
	setp.lt.s32 	%p49, %r21, %r754;
	setp.lt.s32 	%p50, %r22, %r754;
	setp.lt.s32 	%p51, %r23, %r754;
	setp.lt.s32 	%p52, %r24, %r754;
	setp.lt.s32 	%p53, %r25, %r754;
	setp.lt.s32 	%p54, %r26, %r754;
	setp.lt.s32 	%p55, %r27, %r754;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r757, %r700, 196608;
	add.s32 	%r605, %r757, %r699;
	add.s32 	%r607, %r757, %r703;
	add.s32 	%r609, %r757, %r705;
	add.s32 	%r611, %r757, %r707;
	add.s32 	%r613, %r757, %r709;
	add.s32 	%r615, %r757, %r711;
	add.s32 	%r617, %r757, %r713;
	add.s32 	%r619, %r757, %r715;
	add.s32 	%r621, %r757, %r717;
	add.s32 	%r623, %r757, %r719;
	add.s32 	%r625, %r757, %r721;
	add.s32 	%r627, %r757, %r723;
	add.s32 	%r629, %r757, %r725;
	add.s32 	%r631, %r757, %r727;
	add.s32 	%r633, %r757, %r729;
	add.s32 	%r635, %r757, %r731;
	selp.b32 	%r758, 16, 0, %p40;
	selp.b32 	%r606, %r758, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r605 + 0 ], [ %rd120 + 0 ], 0x10, %r606;
	// end inline asm
	selp.b32 	%r759, 16, 0, %p41;
	selp.b32 	%r608, %r759, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r607 + 0 ], [ %rd121 + 0 ], 0x10, %r608;
	// end inline asm
	selp.b32 	%r760, 16, 0, %p42;
	selp.b32 	%r610, %r760, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r609 + 0 ], [ %rd122 + 0 ], 0x10, %r610;
	// end inline asm
	selp.b32 	%r761, 16, 0, %p43;
	selp.b32 	%r612, %r761, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r611 + 0 ], [ %rd123 + 0 ], 0x10, %r612;
	// end inline asm
	selp.b32 	%r762, 16, 0, %p44;
	selp.b32 	%r614, %r762, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r613 + 0 ], [ %rd124 + 0 ], 0x10, %r614;
	// end inline asm
	selp.b32 	%r763, 16, 0, %p45;
	selp.b32 	%r616, %r763, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r615 + 0 ], [ %rd125 + 0 ], 0x10, %r616;
	// end inline asm
	selp.b32 	%r764, 16, 0, %p46;
	selp.b32 	%r618, %r764, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r617 + 0 ], [ %rd126 + 0 ], 0x10, %r618;
	// end inline asm
	selp.b32 	%r765, 16, 0, %p47;
	selp.b32 	%r620, %r765, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r619 + 0 ], [ %rd127 + 0 ], 0x10, %r620;
	// end inline asm
	selp.b32 	%r766, 16, 0, %p48;
	selp.b32 	%r622, %r766, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r621 + 0 ], [ %rd128 + 0 ], 0x10, %r622;
	// end inline asm
	selp.b32 	%r767, 16, 0, %p49;
	selp.b32 	%r624, %r767, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r623 + 0 ], [ %rd129 + 0 ], 0x10, %r624;
	// end inline asm
	selp.b32 	%r768, 16, 0, %p50;
	selp.b32 	%r626, %r768, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r625 + 0 ], [ %rd130 + 0 ], 0x10, %r626;
	// end inline asm
	selp.b32 	%r769, 16, 0, %p51;
	selp.b32 	%r628, %r769, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r627 + 0 ], [ %rd131 + 0 ], 0x10, %r628;
	// end inline asm
	selp.b32 	%r770, 16, 0, %p52;
	selp.b32 	%r630, %r770, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r629 + 0 ], [ %rd132 + 0 ], 0x10, %r630;
	// end inline asm
	selp.b32 	%r771, 16, 0, %p53;
	selp.b32 	%r632, %r771, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r631 + 0 ], [ %rd133 + 0 ], 0x10, %r632;
	// end inline asm
	selp.b32 	%r772, 16, 0, %p54;
	selp.b32 	%r634, %r772, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r633 + 0 ], [ %rd134 + 0 ], 0x10, %r634;
	// end inline asm
	selp.b32 	%r773, 16, 0, %p55;
	selp.b32 	%r636, %r773, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r635 + 0 ], [ %rd135 + 0 ], 0x10, %r636;
	// end inline asm
	cp.async.commit_group;
	mov.b32 	%r3741, 0f00000000;
	mov.b32 	%r3742, %r3741;
	mov.b32 	%r3743, %r3741;
	mov.b32 	%r3744, %r3741;
	mov.b32 	%r3745, %r3741;
	mov.b32 	%r3746, %r3741;
	mov.b32 	%r3747, %r3741;
	mov.b32 	%r3748, %r3741;
	mov.b32 	%r3749, %r3741;
	mov.b32 	%r3750, %r3741;
	mov.b32 	%r3751, %r3741;
	mov.b32 	%r3752, %r3741;
	mov.b32 	%r3753, %r3741;
	mov.b32 	%r3754, %r3741;
	mov.b32 	%r3755, %r3741;
	mov.b32 	%r3756, %r3741;
	mov.b32 	%r3757, %r3741;
	mov.b32 	%r3758, %r3741;
	mov.b32 	%r3759, %r3741;
	mov.b32 	%r3760, %r3741;
	mov.b32 	%r3761, %r3741;
	mov.b32 	%r3762, %r3741;
	mov.b32 	%r3763, %r3741;
	mov.b32 	%r3764, %r3741;
	mov.b32 	%r3765, %r3741;
	mov.b32 	%r3766, %r3741;
	mov.b32 	%r3767, %r3741;
	mov.b32 	%r3768, %r3741;
	mov.b32 	%r3769, %r3741;
	mov.b32 	%r3770, %r3741;
	mov.b32 	%r3771, %r3741;
	mov.b32 	%r3772, %r3741;
	mov.b32 	%r3773, %r3741;
	mov.b32 	%r3774, %r3741;
	mov.b32 	%r3775, %r3741;
	mov.b32 	%r3776, %r3741;
	mov.b32 	%r3777, %r3741;
	mov.b32 	%r3778, %r3741;
	mov.b32 	%r3779, %r3741;
	mov.b32 	%r3780, %r3741;
	mov.b32 	%r3781, %r3741;
	mov.b32 	%r3782, %r3741;
	mov.b32 	%r3783, %r3741;
	mov.b32 	%r3784, %r3741;
	mov.b32 	%r3785, %r3741;
	mov.b32 	%r3786, %r3741;
	mov.b32 	%r3787, %r3741;
	mov.b32 	%r3788, %r3741;
	mov.b32 	%r3789, %r3741;
	mov.b32 	%r3790, %r3741;
	mov.b32 	%r3791, %r3741;
	mov.b32 	%r3792, %r3741;
	mov.b32 	%r3793, %r3741;
	mov.b32 	%r3794, %r3741;
	mov.b32 	%r3795, %r3741;
	mov.b32 	%r3796, %r3741;
	mov.b32 	%r3797, %r3741;
	mov.b32 	%r3798, %r3741;
	mov.b32 	%r3799, %r3741;
	mov.b32 	%r3800, %r3741;
	mov.b32 	%r3801, %r3741;
	mov.b32 	%r3802, %r3741;
	mov.b32 	%r3803, %r3741;
	mov.b32 	%r3804, %r3741;
	mov.b32 	%r3805, %r3741;
	mov.b32 	%r3806, %r3741;
	mov.b32 	%r3807, %r3741;
	mov.b32 	%r3808, %r3741;
	mov.b32 	%r3809, %r3741;
	mov.b32 	%r3810, %r3741;
	mov.b32 	%r3811, %r3741;
	mov.b32 	%r3812, %r3741;
	mov.b32 	%r3813, %r3741;
	mov.b32 	%r3814, %r3741;
	mov.b32 	%r3815, %r3741;
	mov.b32 	%r3816, %r3741;
	mov.b32 	%r3817, %r3741;
	mov.b32 	%r3818, %r3741;
	mov.b32 	%r3819, %r3741;
	mov.b32 	%r3820, %r3741;
	mov.b32 	%r3821, %r3741;
	mov.b32 	%r3822, %r3741;
	mov.b32 	%r3823, %r3741;
	mov.b32 	%r3824, %r3741;
	mov.b32 	%r3825, %r3741;
	mov.b32 	%r3826, %r3741;
	mov.b32 	%r3827, %r3741;
	mov.b32 	%r3828, %r3741;
	mov.b32 	%r3829, %r3741;
	mov.b32 	%r3830, %r3741;
	mov.b32 	%r3831, %r3741;
	mov.b32 	%r3832, %r3741;
	mov.b32 	%r3833, %r3741;
	mov.b32 	%r3834, %r3741;
	mov.b32 	%r3835, %r3741;
	mov.b32 	%r3836, %r3741;
	mov.b32 	%r3837, %r3741;
	mov.b32 	%r3838, %r3741;
	mov.b32 	%r3839, %r3741;
	mov.b32 	%r3840, %r3741;
	mov.b32 	%r3841, %r3741;
	mov.b32 	%r3842, %r3741;
	mov.b32 	%r3843, %r3741;
	mov.b32 	%r3844, %r3741;
	mov.b32 	%r3845, %r3741;
	mov.b32 	%r3846, %r3741;
	mov.b32 	%r3847, %r3741;
	mov.b32 	%r3848, %r3741;
	mov.b32 	%r3849, %r3741;
	mov.b32 	%r3850, %r3741;
	mov.b32 	%r3851, %r3741;
	mov.b32 	%r3852, %r3741;
	mov.b32 	%r3853, %r3741;
	mov.b32 	%r3854, %r3741;
	mov.b32 	%r3855, %r3741;
	mov.b32 	%r3856, %r3741;
	mov.b32 	%r3857, %r3741;
	mov.b32 	%r3858, %r3741;
	mov.b32 	%r3859, %r3741;
	mov.b32 	%r3860, %r3741;
	mov.b32 	%r3861, %r3741;
	mov.b32 	%r3862, %r3741;
	mov.b32 	%r3863, %r3741;
	mov.b32 	%r3864, %r3741;
	mov.b32 	%r3865, %r3741;
	mov.b32 	%r3866, %r3741;
	mov.b32 	%r3867, %r3741;
	mov.b32 	%r3868, %r3741;
	.loc	1 120 22                        // gated_mlp.py:120:22
	@%p1 bra 	$L__BB0_3;
// %bb.1:                               // %.lr.ph
	.loc	1 0 22                          // gated_mlp.py:0:22
	shr.u32 	%r10, %r5, 5;
	cvt.s64.s32 	%rd1, %r671;
	cvt.s64.s32 	%rd2, %r672;
	cvt.s64.s32 	%rd3, %r673;
	cvt.s64.s32 	%rd4, %r674;
	cvt.s64.s32 	%rd5, %r675;
	cvt.s64.s32 	%rd6, %r676;
	cvt.s64.s32 	%rd7, %r677;
	cvt.s64.s32 	%rd8, %r678;
	cvt.s64.s32 	%rd9, %r679;
	cvt.s64.s32 	%rd10, %r680;
	cvt.s64.s32 	%rd11, %r681;
	cvt.s64.s32 	%rd12, %r686;
	shr.s32 	%r688, %r687, 31;
	shr.u32 	%r689, %r688, 25;
	add.s32 	%r690, %r687, %r689;
	shr.s32 	%r30, %r690, 7;
	cvt.s64.s32 	%rd13, %r691;
	add.s32 	%r47, %r30, -3;
	add.s32 	%r3738, %r442, -384;
	.loc	1 120 22                        // gated_mlp.py:120:22
	shl.b64 	%rd14, %rd12, 1;
	mad.lo.s64 	%rd294, %rd13, 6, %rd38;
	shl.b64 	%rd16, %rd13, 1;
	mad.lo.s32 	%r779, %r443, %r26, %r29;
	mul.wide.s32 	%rd17, %r779, 2;
	mad.lo.s32 	%r781, %r443, %r25, %r29;
	mul.wide.s32 	%rd18, %r781, 2;
	mad.lo.s32 	%r783, %r443, %r24, %r29;
	mul.wide.s32 	%rd19, %r783, 2;
	mad.lo.s32 	%r785, %r443, %r23, %r29;
	mul.wide.s32 	%rd20, %r785, 2;
	shl.b64 	%rd21, %rd11, 1;
	shl.b64 	%rd22, %rd10, 1;
	shl.b64 	%rd23, %rd9, 1;
	shl.b64 	%rd24, %rd8, 1;
	shl.b64 	%rd25, %rd7, 1;
	shl.b64 	%rd26, %rd6, 1;
	shl.b64 	%rd27, %rd5, 1;
	shl.b64 	%rd28, %rd4, 1;
	shl.b64 	%rd29, %rd3, 1;
	shl.b64 	%rd30, %rd2, 1;
	shl.b64 	%rd31, %rd1, 1;
	add.s32 	%r786, %r8, %r7;
	mul.wide.u32 	%rd154, %r786, 2;
	add.s64 	%rd155, %rd154, %rd37;
	add.s64 	%rd293, %rd155, 768;
	mov.b32 	%r3098, 0;
	mov.b32 	%r3741, 0f00000000;
	mov.b32 	%r3740, 2;
	mov.b32 	%r3739, -1;
	mov.b32 	%r3742, %r3741;
	mov.b32 	%r3743, %r3741;
	mov.b32 	%r3744, %r3741;
	mov.b32 	%r3745, %r3741;
	mov.b32 	%r3746, %r3741;
	mov.b32 	%r3747, %r3741;
	mov.b32 	%r3748, %r3741;
	mov.b32 	%r3749, %r3741;
	mov.b32 	%r3750, %r3741;
	mov.b32 	%r3751, %r3741;
	mov.b32 	%r3752, %r3741;
	mov.b32 	%r3753, %r3741;
	mov.b32 	%r3754, %r3741;
	mov.b32 	%r3755, %r3741;
	mov.b32 	%r3756, %r3741;
	mov.b32 	%r3757, %r3741;
	mov.b32 	%r3758, %r3741;
	mov.b32 	%r3759, %r3741;
	mov.b32 	%r3760, %r3741;
	mov.b32 	%r3761, %r3741;
	mov.b32 	%r3762, %r3741;
	mov.b32 	%r3763, %r3741;
	mov.b32 	%r3764, %r3741;
	mov.b32 	%r3765, %r3741;
	mov.b32 	%r3766, %r3741;
	mov.b32 	%r3767, %r3741;
	mov.b32 	%r3768, %r3741;
	mov.b32 	%r3769, %r3741;
	mov.b32 	%r3770, %r3741;
	mov.b32 	%r3771, %r3741;
	mov.b32 	%r3772, %r3741;
	mov.b32 	%r3773, %r3741;
	mov.b32 	%r3774, %r3741;
	mov.b32 	%r3775, %r3741;
	mov.b32 	%r3776, %r3741;
	mov.b32 	%r3777, %r3741;
	mov.b32 	%r3778, %r3741;
	mov.b32 	%r3779, %r3741;
	mov.b32 	%r3780, %r3741;
	mov.b32 	%r3781, %r3741;
	mov.b32 	%r3782, %r3741;
	mov.b32 	%r3783, %r3741;
	mov.b32 	%r3784, %r3741;
	mov.b32 	%r3785, %r3741;
	mov.b32 	%r3786, %r3741;
	mov.b32 	%r3787, %r3741;
	mov.b32 	%r3788, %r3741;
	mov.b32 	%r3789, %r3741;
	mov.b32 	%r3790, %r3741;
	mov.b32 	%r3791, %r3741;
	mov.b32 	%r3792, %r3741;
	mov.b32 	%r3793, %r3741;
	mov.b32 	%r3794, %r3741;
	mov.b32 	%r3795, %r3741;
	mov.b32 	%r3796, %r3741;
	mov.b32 	%r3797, %r3741;
	mov.b32 	%r3798, %r3741;
	mov.b32 	%r3799, %r3741;
	mov.b32 	%r3800, %r3741;
	mov.b32 	%r3801, %r3741;
	mov.b32 	%r3802, %r3741;
	mov.b32 	%r3803, %r3741;
	mov.b32 	%r3804, %r3741;
	mov.b32 	%r3805, %r3741;
	mov.b32 	%r3806, %r3741;
	mov.b32 	%r3807, %r3741;
	mov.b32 	%r3808, %r3741;
	mov.b32 	%r3809, %r3741;
	mov.b32 	%r3810, %r3741;
	mov.b32 	%r3811, %r3741;
	mov.b32 	%r3812, %r3741;
	mov.b32 	%r3813, %r3741;
	mov.b32 	%r3814, %r3741;
	mov.b32 	%r3815, %r3741;
	mov.b32 	%r3816, %r3741;
	mov.b32 	%r3817, %r3741;
	mov.b32 	%r3818, %r3741;
	mov.b32 	%r3819, %r3741;
	mov.b32 	%r3820, %r3741;
	mov.b32 	%r3821, %r3741;
	mov.b32 	%r3822, %r3741;
	mov.b32 	%r3823, %r3741;
	mov.b32 	%r3824, %r3741;
	mov.b32 	%r3825, %r3741;
	mov.b32 	%r3826, %r3741;
	mov.b32 	%r3827, %r3741;
	mov.b32 	%r3828, %r3741;
	mov.b32 	%r3829, %r3741;
	mov.b32 	%r3830, %r3741;
	mov.b32 	%r3831, %r3741;
	mov.b32 	%r3832, %r3741;
	mov.b32 	%r3833, %r3741;
	mov.b32 	%r3834, %r3741;
	mov.b32 	%r3835, %r3741;
	mov.b32 	%r3836, %r3741;
	mov.b32 	%r3837, %r3741;
	mov.b32 	%r3838, %r3741;
	mov.b32 	%r3839, %r3741;
	mov.b32 	%r3840, %r3741;
	mov.b32 	%r3841, %r3741;
	mov.b32 	%r3842, %r3741;
	mov.b32 	%r3843, %r3741;
	mov.b32 	%r3844, %r3741;
	mov.b32 	%r3845, %r3741;
	mov.b32 	%r3846, %r3741;
	mov.b32 	%r3847, %r3741;
	mov.b32 	%r3848, %r3741;
	mov.b32 	%r3849, %r3741;
	mov.b32 	%r3850, %r3741;
	mov.b32 	%r3851, %r3741;
	mov.b32 	%r3852, %r3741;
	mov.b32 	%r3853, %r3741;
	mov.b32 	%r3854, %r3741;
	mov.b32 	%r3855, %r3741;
	mov.b32 	%r3856, %r3741;
	mov.b32 	%r3857, %r3741;
	mov.b32 	%r3858, %r3741;
	mov.b32 	%r3859, %r3741;
	mov.b32 	%r3860, %r3741;
	mov.b32 	%r3861, %r3741;
	mov.b32 	%r3862, %r3741;
	mov.b32 	%r3863, %r3741;
	mov.b32 	%r3864, %r3741;
	mov.b32 	%r3865, %r3741;
	mov.b32 	%r3866, %r3741;
	mov.b32 	%r3867, %r3741;
	mov.b32 	%r3868, %r3741;
	mov.b32 	%r3869, %r3098;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	setp.lt.s32 	%p72, %r3869, %r47;
	add.s32 	%r3167, %r3739, 1;
	setp.gt.s32 	%p73, %r3167, 3;
	selp.b32 	%r3739, 0, %r3167, %p73;
	.loc	1 123 20                        // gated_mlp.py:123:20
	cp.async.wait_group 	4;
	bar.sync 	0;
	shl.b32 	%r3168, %r3739, 15;
	add.s32 	%r2963, %r700, %r3168;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r2966, %r733, %r3168;
	.loc	1 126 35                        // gated_mlp.py:126:35
	shfl.sync.idx.b32 	%r3171, %r10, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r3172, %r2963, 4, 14;
	cvt.u64.u32 	%rd220, %r3172;
	or.b64 	%rd156, %rd220, 4611686293372403712;
	bfe.u32 	%r3173, %r2966, 4, 14;
	cvt.u64.u32 	%rd221, %r3173;
	or.b64 	%rd157, %rd221, 4611686293372403712;
	mov.pred 	%p56, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3741,%r3742,%r3743,%r3744,%r3745,%r3746,%r3747,%r3748,%r3749,%r3750,%r3751,%r3752,%r3753,%r3754,%r3755,%r3756,%r3757,%r3758,%r3759,%r3760,%r3761,%r3762,%r3763,%r3764,%r3765,%r3766,%r3767,%r3768,%r3769,%r3770,%r3771,%r3772,%r3773,%r3774,%r3775,%r3776,%r3777,%r3778,%r3779,%r3780,%r3781,%r3782,%r3783,%r3784,%r3785,%r3786,%r3787,%r3788,%r3789,%r3790,%r3791,%r3792,%r3793,%r3794,%r3795,%r3796,%r3797,%r3798,%r3799,%r3800,%r3801,%r3802,%r3803,%r3804}, %rd156, %rd157, %p56, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3174, %r2963, 32;
	bfe.u32 	%r3175, %r3174, 4, 14;
	cvt.u64.u32 	%rd222, %r3175;
	or.b64 	%rd158, %rd222, 4611686293372403712;
	add.s32 	%r3176, %r2966, 2048;
	bfe.u32 	%r3177, %r3176, 4, 14;
	cvt.u64.u32 	%rd223, %r3177;
	or.b64 	%rd159, %rd223, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3741,%r3742,%r3743,%r3744,%r3745,%r3746,%r3747,%r3748,%r3749,%r3750,%r3751,%r3752,%r3753,%r3754,%r3755,%r3756,%r3757,%r3758,%r3759,%r3760,%r3761,%r3762,%r3763,%r3764,%r3765,%r3766,%r3767,%r3768,%r3769,%r3770,%r3771,%r3772,%r3773,%r3774,%r3775,%r3776,%r3777,%r3778,%r3779,%r3780,%r3781,%r3782,%r3783,%r3784,%r3785,%r3786,%r3787,%r3788,%r3789,%r3790,%r3791,%r3792,%r3793,%r3794,%r3795,%r3796,%r3797,%r3798,%r3799,%r3800,%r3801,%r3802,%r3803,%r3804}, %rd158, %rd159, %p56, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3178, %r2963, 64;
	bfe.u32 	%r3179, %r3178, 4, 14;
	cvt.u64.u32 	%rd224, %r3179;
	or.b64 	%rd160, %rd224, 4611686293372403712;
	add.s32 	%r3180, %r2966, 4096;
	bfe.u32 	%r3181, %r3180, 4, 14;
	cvt.u64.u32 	%rd225, %r3181;
	or.b64 	%rd161, %rd225, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3741,%r3742,%r3743,%r3744,%r3745,%r3746,%r3747,%r3748,%r3749,%r3750,%r3751,%r3752,%r3753,%r3754,%r3755,%r3756,%r3757,%r3758,%r3759,%r3760,%r3761,%r3762,%r3763,%r3764,%r3765,%r3766,%r3767,%r3768,%r3769,%r3770,%r3771,%r3772,%r3773,%r3774,%r3775,%r3776,%r3777,%r3778,%r3779,%r3780,%r3781,%r3782,%r3783,%r3784,%r3785,%r3786,%r3787,%r3788,%r3789,%r3790,%r3791,%r3792,%r3793,%r3794,%r3795,%r3796,%r3797,%r3798,%r3799,%r3800,%r3801,%r3802,%r3803,%r3804}, %rd160, %rd161, %p56, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3182, %r2963, 96;
	bfe.u32 	%r3183, %r3182, 4, 14;
	cvt.u64.u32 	%rd226, %r3183;
	or.b64 	%rd162, %rd226, 4611686293372403712;
	add.s32 	%r3184, %r2966, 6144;
	bfe.u32 	%r3185, %r3184, 4, 14;
	cvt.u64.u32 	%rd227, %r3185;
	or.b64 	%rd163, %rd227, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3741,%r3742,%r3743,%r3744,%r3745,%r3746,%r3747,%r3748,%r3749,%r3750,%r3751,%r3752,%r3753,%r3754,%r3755,%r3756,%r3757,%r3758,%r3759,%r3760,%r3761,%r3762,%r3763,%r3764,%r3765,%r3766,%r3767,%r3768,%r3769,%r3770,%r3771,%r3772,%r3773,%r3774,%r3775,%r3776,%r3777,%r3778,%r3779,%r3780,%r3781,%r3782,%r3783,%r3784,%r3785,%r3786,%r3787,%r3788,%r3789,%r3790,%r3791,%r3792,%r3793,%r3794,%r3795,%r3796,%r3797,%r3798,%r3799,%r3800,%r3801,%r3802,%r3803,%r3804}, %rd162, %rd163, %p56, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3186, %r2963, 16384;
	bfe.u32 	%r3187, %r3186, 4, 14;
	cvt.u64.u32 	%rd228, %r3187;
	or.b64 	%rd164, %rd228, 4611686293372403712;
	add.s32 	%r3188, %r2966, 8192;
	bfe.u32 	%r3189, %r3188, 4, 14;
	cvt.u64.u32 	%rd229, %r3189;
	or.b64 	%rd165, %rd229, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3741,%r3742,%r3743,%r3744,%r3745,%r3746,%r3747,%r3748,%r3749,%r3750,%r3751,%r3752,%r3753,%r3754,%r3755,%r3756,%r3757,%r3758,%r3759,%r3760,%r3761,%r3762,%r3763,%r3764,%r3765,%r3766,%r3767,%r3768,%r3769,%r3770,%r3771,%r3772,%r3773,%r3774,%r3775,%r3776,%r3777,%r3778,%r3779,%r3780,%r3781,%r3782,%r3783,%r3784,%r3785,%r3786,%r3787,%r3788,%r3789,%r3790,%r3791,%r3792,%r3793,%r3794,%r3795,%r3796,%r3797,%r3798,%r3799,%r3800,%r3801,%r3802,%r3803,%r3804}, %rd164, %rd165, %p56, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3190, %r2963, 16416;
	bfe.u32 	%r3191, %r3190, 4, 14;
	cvt.u64.u32 	%rd230, %r3191;
	or.b64 	%rd166, %rd230, 4611686293372403712;
	add.s32 	%r3192, %r2966, 10240;
	bfe.u32 	%r3193, %r3192, 4, 14;
	cvt.u64.u32 	%rd231, %r3193;
	or.b64 	%rd167, %rd231, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3741,%r3742,%r3743,%r3744,%r3745,%r3746,%r3747,%r3748,%r3749,%r3750,%r3751,%r3752,%r3753,%r3754,%r3755,%r3756,%r3757,%r3758,%r3759,%r3760,%r3761,%r3762,%r3763,%r3764,%r3765,%r3766,%r3767,%r3768,%r3769,%r3770,%r3771,%r3772,%r3773,%r3774,%r3775,%r3776,%r3777,%r3778,%r3779,%r3780,%r3781,%r3782,%r3783,%r3784,%r3785,%r3786,%r3787,%r3788,%r3789,%r3790,%r3791,%r3792,%r3793,%r3794,%r3795,%r3796,%r3797,%r3798,%r3799,%r3800,%r3801,%r3802,%r3803,%r3804}, %rd166, %rd167, %p56, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3194, %r2963, 16448;
	bfe.u32 	%r3195, %r3194, 4, 14;
	cvt.u64.u32 	%rd232, %r3195;
	or.b64 	%rd168, %rd232, 4611686293372403712;
	add.s32 	%r3196, %r2966, 12288;
	bfe.u32 	%r3197, %r3196, 4, 14;
	cvt.u64.u32 	%rd233, %r3197;
	or.b64 	%rd169, %rd233, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3741,%r3742,%r3743,%r3744,%r3745,%r3746,%r3747,%r3748,%r3749,%r3750,%r3751,%r3752,%r3753,%r3754,%r3755,%r3756,%r3757,%r3758,%r3759,%r3760,%r3761,%r3762,%r3763,%r3764,%r3765,%r3766,%r3767,%r3768,%r3769,%r3770,%r3771,%r3772,%r3773,%r3774,%r3775,%r3776,%r3777,%r3778,%r3779,%r3780,%r3781,%r3782,%r3783,%r3784,%r3785,%r3786,%r3787,%r3788,%r3789,%r3790,%r3791,%r3792,%r3793,%r3794,%r3795,%r3796,%r3797,%r3798,%r3799,%r3800,%r3801,%r3802,%r3803,%r3804}, %rd168, %rd169, %p56, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3198, %r2963, 16480;
	bfe.u32 	%r3199, %r3198, 4, 14;
	cvt.u64.u32 	%rd234, %r3199;
	or.b64 	%rd170, %rd234, 4611686293372403712;
	add.s32 	%r3200, %r2966, 14336;
	bfe.u32 	%r3201, %r3200, 4, 14;
	cvt.u64.u32 	%rd235, %r3201;
	or.b64 	%rd171, %rd235, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3741,%r3742,%r3743,%r3744,%r3745,%r3746,%r3747,%r3748,%r3749,%r3750,%r3751,%r3752,%r3753,%r3754,%r3755,%r3756,%r3757,%r3758,%r3759,%r3760,%r3761,%r3762,%r3763,%r3764,%r3765,%r3766,%r3767,%r3768,%r3769,%r3770,%r3771,%r3772,%r3773,%r3774,%r3775,%r3776,%r3777,%r3778,%r3779,%r3780,%r3781,%r3782,%r3783,%r3784,%r3785,%r3786,%r3787,%r3788,%r3789,%r3790,%r3791,%r3792,%r3793,%r3794,%r3795,%r3796,%r3797,%r3798,%r3799,%r3800,%r3801,%r3802,%r3803,%r3804}, %rd170, %rd171, %p56, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3202, %r2963, 8192;
	bfe.u32 	%r3203, %r3202, 4, 14;
	cvt.u64.u32 	%rd236, %r3203;
	or.b64 	%rd172, %rd236, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3805,%r3806,%r3807,%r3808,%r3809,%r3810,%r3811,%r3812,%r3813,%r3814,%r3815,%r3816,%r3817,%r3818,%r3819,%r3820,%r3821,%r3822,%r3823,%r3824,%r3825,%r3826,%r3827,%r3828,%r3829,%r3830,%r3831,%r3832,%r3833,%r3834,%r3835,%r3836,%r3837,%r3838,%r3839,%r3840,%r3841,%r3842,%r3843,%r3844,%r3845,%r3846,%r3847,%r3848,%r3849,%r3850,%r3851,%r3852,%r3853,%r3854,%r3855,%r3856,%r3857,%r3858,%r3859,%r3860,%r3861,%r3862,%r3863,%r3864,%r3865,%r3866,%r3867,%r3868}, %rd172, %rd157, %p56, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3204, %r2963, 8224;
	bfe.u32 	%r3205, %r3204, 4, 14;
	cvt.u64.u32 	%rd237, %r3205;
	or.b64 	%rd174, %rd237, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3805,%r3806,%r3807,%r3808,%r3809,%r3810,%r3811,%r3812,%r3813,%r3814,%r3815,%r3816,%r3817,%r3818,%r3819,%r3820,%r3821,%r3822,%r3823,%r3824,%r3825,%r3826,%r3827,%r3828,%r3829,%r3830,%r3831,%r3832,%r3833,%r3834,%r3835,%r3836,%r3837,%r3838,%r3839,%r3840,%r3841,%r3842,%r3843,%r3844,%r3845,%r3846,%r3847,%r3848,%r3849,%r3850,%r3851,%r3852,%r3853,%r3854,%r3855,%r3856,%r3857,%r3858,%r3859,%r3860,%r3861,%r3862,%r3863,%r3864,%r3865,%r3866,%r3867,%r3868}, %rd174, %rd159, %p56, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3206, %r2963, 8256;
	bfe.u32 	%r3207, %r3206, 4, 14;
	cvt.u64.u32 	%rd238, %r3207;
	or.b64 	%rd176, %rd238, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3805,%r3806,%r3807,%r3808,%r3809,%r3810,%r3811,%r3812,%r3813,%r3814,%r3815,%r3816,%r3817,%r3818,%r3819,%r3820,%r3821,%r3822,%r3823,%r3824,%r3825,%r3826,%r3827,%r3828,%r3829,%r3830,%r3831,%r3832,%r3833,%r3834,%r3835,%r3836,%r3837,%r3838,%r3839,%r3840,%r3841,%r3842,%r3843,%r3844,%r3845,%r3846,%r3847,%r3848,%r3849,%r3850,%r3851,%r3852,%r3853,%r3854,%r3855,%r3856,%r3857,%r3858,%r3859,%r3860,%r3861,%r3862,%r3863,%r3864,%r3865,%r3866,%r3867,%r3868}, %rd176, %rd161, %p56, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3208, %r2963, 8288;
	bfe.u32 	%r3209, %r3208, 4, 14;
	cvt.u64.u32 	%rd239, %r3209;
	or.b64 	%rd178, %rd239, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3805,%r3806,%r3807,%r3808,%r3809,%r3810,%r3811,%r3812,%r3813,%r3814,%r3815,%r3816,%r3817,%r3818,%r3819,%r3820,%r3821,%r3822,%r3823,%r3824,%r3825,%r3826,%r3827,%r3828,%r3829,%r3830,%r3831,%r3832,%r3833,%r3834,%r3835,%r3836,%r3837,%r3838,%r3839,%r3840,%r3841,%r3842,%r3843,%r3844,%r3845,%r3846,%r3847,%r3848,%r3849,%r3850,%r3851,%r3852,%r3853,%r3854,%r3855,%r3856,%r3857,%r3858,%r3859,%r3860,%r3861,%r3862,%r3863,%r3864,%r3865,%r3866,%r3867,%r3868}, %rd178, %rd163, %p56, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3210, %r2963, 24576;
	bfe.u32 	%r3211, %r3210, 4, 14;
	cvt.u64.u32 	%rd240, %r3211;
	or.b64 	%rd180, %rd240, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3805,%r3806,%r3807,%r3808,%r3809,%r3810,%r3811,%r3812,%r3813,%r3814,%r3815,%r3816,%r3817,%r3818,%r3819,%r3820,%r3821,%r3822,%r3823,%r3824,%r3825,%r3826,%r3827,%r3828,%r3829,%r3830,%r3831,%r3832,%r3833,%r3834,%r3835,%r3836,%r3837,%r3838,%r3839,%r3840,%r3841,%r3842,%r3843,%r3844,%r3845,%r3846,%r3847,%r3848,%r3849,%r3850,%r3851,%r3852,%r3853,%r3854,%r3855,%r3856,%r3857,%r3858,%r3859,%r3860,%r3861,%r3862,%r3863,%r3864,%r3865,%r3866,%r3867,%r3868}, %rd180, %rd165, %p56, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3212, %r2963, 24608;
	bfe.u32 	%r3213, %r3212, 4, 14;
	cvt.u64.u32 	%rd241, %r3213;
	or.b64 	%rd182, %rd241, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3805,%r3806,%r3807,%r3808,%r3809,%r3810,%r3811,%r3812,%r3813,%r3814,%r3815,%r3816,%r3817,%r3818,%r3819,%r3820,%r3821,%r3822,%r3823,%r3824,%r3825,%r3826,%r3827,%r3828,%r3829,%r3830,%r3831,%r3832,%r3833,%r3834,%r3835,%r3836,%r3837,%r3838,%r3839,%r3840,%r3841,%r3842,%r3843,%r3844,%r3845,%r3846,%r3847,%r3848,%r3849,%r3850,%r3851,%r3852,%r3853,%r3854,%r3855,%r3856,%r3857,%r3858,%r3859,%r3860,%r3861,%r3862,%r3863,%r3864,%r3865,%r3866,%r3867,%r3868}, %rd182, %rd167, %p56, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3214, %r2963, 24640;
	bfe.u32 	%r3215, %r3214, 4, 14;
	cvt.u64.u32 	%rd242, %r3215;
	or.b64 	%rd184, %rd242, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3805,%r3806,%r3807,%r3808,%r3809,%r3810,%r3811,%r3812,%r3813,%r3814,%r3815,%r3816,%r3817,%r3818,%r3819,%r3820,%r3821,%r3822,%r3823,%r3824,%r3825,%r3826,%r3827,%r3828,%r3829,%r3830,%r3831,%r3832,%r3833,%r3834,%r3835,%r3836,%r3837,%r3838,%r3839,%r3840,%r3841,%r3842,%r3843,%r3844,%r3845,%r3846,%r3847,%r3848,%r3849,%r3850,%r3851,%r3852,%r3853,%r3854,%r3855,%r3856,%r3857,%r3858,%r3859,%r3860,%r3861,%r3862,%r3863,%r3864,%r3865,%r3866,%r3867,%r3868}, %rd184, %rd169, %p56, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r3216, %r2963, 24672;
	bfe.u32 	%r3217, %r3216, 4, 14;
	cvt.u64.u32 	%rd243, %r3217;
	or.b64 	%rd186, %rd243, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.f16.f16 {%r3805,%r3806,%r3807,%r3808,%r3809,%r3810,%r3811,%r3812,%r3813,%r3814,%r3815,%r3816,%r3817,%r3818,%r3819,%r3820,%r3821,%r3822,%r3823,%r3824,%r3825,%r3826,%r3827,%r3828,%r3829,%r3830,%r3831,%r3832,%r3833,%r3834,%r3835,%r3836,%r3837,%r3838,%r3839,%r3840,%r3841,%r3842,%r3843,%r3844,%r3845,%r3846,%r3847,%r3848,%r3849,%r3850,%r3851,%r3852,%r3853,%r3854,%r3855,%r3856,%r3857,%r3858,%r3859,%r3860,%r3861,%r3862,%r3863,%r3864,%r3865,%r3866,%r3867,%r3868}, %rd186, %rd171, %p56, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r2968, %r3098;
	mov.b32 	%r2964, %r3098;
	mov.b32 	%r2965, %r3098;
	mov.b32 	%r2967, %r3098;
	// begin inline asm
	// wait for regs: %r3741,%r3742,%r3743,%r3744,%r3745,%r3746,%r3747,%r3748,%r3749,%r3750,%r3751,%r3752,%r3753,%r3754,%r3755,%r3756,%r3757,%r3758,%r3759,%r3760,%r3761,%r3762,%r3763,%r3764,%r3765,%r3766,%r3767,%r3768,%r3769,%r3770,%r3771,%r3772,%r3773,%r3774,%r3775,%r3776,%r3777,%r3778,%r3779,%r3780,%r3781,%r3782,%r3783,%r3784,%r3785,%r3786,%r3787,%r3788,%r3789,%r3790,%r3791,%r3792,%r3793,%r3794,%r3795,%r3796,%r3797,%r3798,%r3799,%r3800,%r3801,%r3802,%r3803,%r3804,%r3805,%r3806,%r3807,%r3808,%r3809,%r3810,%r3811,%r3812,%r3813,%r3814,%r3815,%r3816,%r3817,%r3818,%r3819,%r3820,%r3821,%r3822,%r3823,%r3824,%r3825,%r3826,%r3827,%r3828,%r3829,%r3830,%r3831,%r3832,%r3833,%r3834,%r3835,%r3836,%r3837,%r3838,%r3839,%r3840,%r3841,%r3842,%r3843,%r3844,%r3845,%r3846,%r3847,%r3848,%r3849,%r3850,%r3851,%r3852,%r3853,%r3854,%r3855,%r3856,%r3857,%r3858,%r3859,%r3860,%r3861,%r3862,%r3863,%r3864,%r3865,%r3866,%r3867,%r3868,%r2963,%r2964,%r2965,%r2966,%r2967,%r2968
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 129 18                        // gated_mlp.py:129:18
	add.s64 	%rd204, %rd294, %rd31;
	add.s64 	%rd205, %rd294, %rd30;
	add.s64 	%rd206, %rd294, %rd29;
	add.s64 	%rd207, %rd294, %rd28;
	add.s64 	%rd208, %rd294, %rd27;
	add.s64 	%rd209, %rd294, %rd26;
	add.s64 	%rd210, %rd294, %rd25;
	add.s64 	%rd211, %rd294, %rd24;
	add.s64 	%rd212, %rd294, %rd23;
	add.s64 	%rd213, %rd294, %rd22;
	add.s64 	%rd214, %rd294, %rd21;
	add.s64 	%rd215, %rd294, %rd20;
	add.s64 	%rd216, %rd294, %rd19;
	add.s64 	%rd217, %rd294, %rd18;
	add.s64 	%rd218, %rd294, %rd17;
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s64 	%rd219, %rd294, %rd14;
	add.s32 	%r3218, %r3740, 1;
	setp.gt.s32 	%p74, %r3218, 3;
	selp.b32 	%r3740, 0, %r3218, %p74;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p75, %r9, %r3738;
	.loc	1 123 20                        // gated_mlp.py:123:20
	shl.b32 	%r3219, %r3740, 15;
	add.s32 	%r3220, %r700, %r3219;
	bar.sync 	0;
	add.s32 	%r3103, %r3220, %r699;
	add.s32 	%r3105, %r3220, %r703;
	add.s32 	%r3107, %r3220, %r705;
	add.s32 	%r3109, %r3220, %r707;
	add.s32 	%r3111, %r3220, %r709;
	add.s32 	%r3113, %r3220, %r711;
	add.s32 	%r3115, %r3220, %r713;
	add.s32 	%r3117, %r3220, %r715;
	add.s32 	%r3119, %r3220, %r717;
	add.s32 	%r3121, %r3220, %r719;
	add.s32 	%r3123, %r3220, %r721;
	add.s32 	%r3125, %r3220, %r723;
	add.s32 	%r3127, %r3220, %r725;
	add.s32 	%r3129, %r3220, %r727;
	add.s32 	%r3131, %r3220, %r729;
	add.s32 	%r3133, %r3220, %r731;
	selp.b32 	%r3237, 16, 0, %p75;
	selp.b32 	%r3106, %r3237, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r3103 + 0 ], [ %rd293 + 0 ], 0x10, %r3106;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3105 + 0 ], [ %rd293 + 0 ], 0x10, %r3106;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3107 + 0 ], [ %rd293 + 0 ], 0x10, %r3106;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3109 + 0 ], [ %rd293 + 0 ], 0x10, %r3106;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3111 + 0 ], [ %rd293 + 0 ], 0x10, %r3106;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3113 + 0 ], [ %rd293 + 0 ], 0x10, %r3106;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3115 + 0 ], [ %rd293 + 0 ], 0x10, %r3106;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3117 + 0 ], [ %rd293 + 0 ], 0x10, %r3106;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3119 + 0 ], [ %rd293 + 0 ], 0x10, %r3106;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3121 + 0 ], [ %rd293 + 0 ], 0x10, %r3106;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3123 + 0 ], [ %rd293 + 0 ], 0x10, %r3106;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3125 + 0 ], [ %rd293 + 0 ], 0x10, %r3106;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3127 + 0 ], [ %rd293 + 0 ], 0x10, %r3106;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3129 + 0 ], [ %rd293 + 0 ], 0x10, %r3106;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3131 + 0 ], [ %rd293 + 0 ], 0x10, %r3106;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r3133 + 0 ], [ %rd293 + 0 ], 0x10, %r3106;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p76, %r12, %r3738;
	setp.lt.s32 	%p77, %r13, %r3738;
	setp.lt.s32 	%p78, %r14, %r3738;
	setp.lt.s32 	%p79, %r15, %r3738;
	setp.lt.s32 	%p80, %r16, %r3738;
	setp.lt.s32 	%p81, %r17, %r3738;
	setp.lt.s32 	%p82, %r18, %r3738;
	setp.lt.s32 	%p83, %r19, %r3738;
	setp.lt.s32 	%p84, %r20, %r3738;
	setp.lt.s32 	%p85, %r21, %r3738;
	setp.lt.s32 	%p86, %r22, %r3738;
	setp.lt.s32 	%p87, %r23, %r3738;
	setp.lt.s32 	%p88, %r24, %r3738;
	setp.lt.s32 	%p89, %r25, %r3738;
	setp.lt.s32 	%p90, %r26, %r3738;
	setp.lt.s32 	%p91, %r27, %r3738;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r3238, %r733, %r3219;
	add.s32 	%r3135, %r3238, %r699;
	add.s32 	%r3137, %r3238, %r703;
	add.s32 	%r3139, %r3238, %r705;
	add.s32 	%r3141, %r3238, %r707;
	add.s32 	%r3143, %r3238, %r709;
	add.s32 	%r3145, %r3238, %r711;
	add.s32 	%r3147, %r3238, %r713;
	add.s32 	%r3149, %r3238, %r715;
	add.s32 	%r3151, %r3238, %r717;
	add.s32 	%r3153, %r3238, %r719;
	add.s32 	%r3155, %r3238, %r721;
	add.s32 	%r3157, %r3238, %r723;
	add.s32 	%r3159, %r3238, %r725;
	add.s32 	%r3161, %r3238, %r727;
	add.s32 	%r3163, %r3238, %r729;
	add.s32 	%r3165, %r3238, %r731;
	selp.b32 	%r3239, 16, 0, %p76;
	selp.b32 	%r3136, %r3239, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r3135 + 0 ], [ %rd204 + 0 ], 0x10, %r3136;
	// end inline asm
	selp.b32 	%r3240, 16, 0, %p77;
	selp.b32 	%r3138, %r3240, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r3137 + 0 ], [ %rd205 + 0 ], 0x10, %r3138;
	// end inline asm
	selp.b32 	%r3241, 16, 0, %p78;
	selp.b32 	%r3140, %r3241, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r3139 + 0 ], [ %rd206 + 0 ], 0x10, %r3140;
	// end inline asm
	selp.b32 	%r3242, 16, 0, %p79;
	selp.b32 	%r3142, %r3242, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r3141 + 0 ], [ %rd207 + 0 ], 0x10, %r3142;
	// end inline asm
	selp.b32 	%r3243, 16, 0, %p80;
	selp.b32 	%r3144, %r3243, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r3143 + 0 ], [ %rd208 + 0 ], 0x10, %r3144;
	// end inline asm
	selp.b32 	%r3244, 16, 0, %p81;
	selp.b32 	%r3146, %r3244, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r3145 + 0 ], [ %rd209 + 0 ], 0x10, %r3146;
	// end inline asm
	selp.b32 	%r3245, 16, 0, %p82;
	selp.b32 	%r3148, %r3245, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r3147 + 0 ], [ %rd210 + 0 ], 0x10, %r3148;
	// end inline asm
	selp.b32 	%r3246, 16, 0, %p83;
	selp.b32 	%r3150, %r3246, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r3149 + 0 ], [ %rd211 + 0 ], 0x10, %r3150;
	// end inline asm
	selp.b32 	%r3247, 16, 0, %p84;
	selp.b32 	%r3152, %r3247, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r3151 + 0 ], [ %rd212 + 0 ], 0x10, %r3152;
	// end inline asm
	selp.b32 	%r3248, 16, 0, %p85;
	selp.b32 	%r3154, %r3248, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r3153 + 0 ], [ %rd213 + 0 ], 0x10, %r3154;
	// end inline asm
	selp.b32 	%r3249, 16, 0, %p86;
	selp.b32 	%r3156, %r3249, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r3155 + 0 ], [ %rd214 + 0 ], 0x10, %r3156;
	// end inline asm
	selp.b32 	%r3250, 16, 0, %p87;
	selp.b32 	%r3158, %r3250, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r3157 + 0 ], [ %rd215 + 0 ], 0x10, %r3158;
	// end inline asm
	selp.b32 	%r3251, 16, 0, %p88;
	selp.b32 	%r3160, %r3251, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r3159 + 0 ], [ %rd216 + 0 ], 0x10, %r3160;
	// end inline asm
	selp.b32 	%r3252, 16, 0, %p89;
	selp.b32 	%r3162, %r3252, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r3161 + 0 ], [ %rd217 + 0 ], 0x10, %r3162;
	// end inline asm
	selp.b32 	%r3253, 16, 0, %p90;
	selp.b32 	%r3164, %r3253, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r3163 + 0 ], [ %rd218 + 0 ], 0x10, %r3164;
	// end inline asm
	selp.b32 	%r3254, 16, 0, %p91;
	selp.b32 	%r3166, %r3254, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r3165 + 0 ], [ %rd219 + 0 ], 0x10, %r3166;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s32 	%r3869, %r3869, 1;
	add.s64 	%rd294, %rd294, %rd16;
	add.s64 	%rd293, %rd293, 256;
	add.s32 	%r3738, %r3738, -128;
	setp.ne.s32 	%p92, %r30, %r3869;
	@%p92 bra 	$L__BB0_2;
$L__BB0_3:                              // %._crit_edge
	.loc	1 98 54                         // gated_mlp.py:98:54
	mul.lo.s32 	%r3575, %r4, %r2;
	sub.s32 	%r3576, %r3, %r3575;
	.loc	1 98 27                         // gated_mlp.py:98:27
	add.s32 	%r3577, %r3576, %r1;
	.loc	1 120 22                        // gated_mlp.py:120:22
	// begin inline asm
	// wait for regs: %r3741,%r3742,%r3743,%r3744,%r3745,%r3746,%r3747,%r3748,%r3749,%r3750,%r3751,%r3752,%r3753,%r3754,%r3755,%r3756,%r3757,%r3758,%r3759,%r3760,%r3761,%r3762,%r3763,%r3764,%r3765,%r3766,%r3767,%r3768,%r3769,%r3770,%r3771,%r3772,%r3773,%r3774,%r3775,%r3776,%r3777,%r3778,%r3779,%r3780,%r3781,%r3782,%r3783,%r3784,%r3785,%r3786,%r3787,%r3788,%r3789,%r3790,%r3791,%r3792,%r3793,%r3794,%r3795,%r3796,%r3797,%r3798,%r3799,%r3800,%r3801,%r3802,%r3803,%r3804,%r3805,%r3806,%r3807,%r3808,%r3809,%r3810,%r3811,%r3812,%r3813,%r3814,%r3815,%r3816,%r3817,%r3818,%r3819,%r3820,%r3821,%r3822,%r3823,%r3824,%r3825,%r3826,%r3827,%r3828,%r3829,%r3830,%r3831,%r3832,%r3833,%r3834,%r3835,%r3836,%r3837,%r3838,%r3839,%r3840,%r3841,%r3842,%r3843,%r3844,%r3845,%r3846,%r3847,%r3848,%r3849,%r3850,%r3851,%r3852,%r3853,%r3854,%r3855,%r3856,%r3857,%r3858,%r3859,%r3860,%r3861,%r3862,%r3863,%r3864,%r3865,%r3866,%r3867,%r3868
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 134 23                        // gated_mlp.py:134:23
	cvt.rn.f16x2.f32 	%r3578, %r3742, %r3741;
	cvt.rn.f16x2.f32 	%r3579, %r3744, %r3743;
	cvt.rn.f16x2.f32 	%r3580, %r3746, %r3745;
	cvt.rn.f16x2.f32 	%r3581, %r3748, %r3747;
	cvt.rn.f16x2.f32 	%r3582, %r3750, %r3749;
	cvt.rn.f16x2.f32 	%r3583, %r3752, %r3751;
	cvt.rn.f16x2.f32 	%r3584, %r3754, %r3753;
	cvt.rn.f16x2.f32 	%r3585, %r3756, %r3755;
	cvt.rn.f16x2.f32 	%r3586, %r3758, %r3757;
	cvt.rn.f16x2.f32 	%r3587, %r3760, %r3759;
	cvt.rn.f16x2.f32 	%r3588, %r3762, %r3761;
	cvt.rn.f16x2.f32 	%r3589, %r3764, %r3763;
	cvt.rn.f16x2.f32 	%r3590, %r3766, %r3765;
	cvt.rn.f16x2.f32 	%r3591, %r3768, %r3767;
	cvt.rn.f16x2.f32 	%r3592, %r3770, %r3769;
	cvt.rn.f16x2.f32 	%r3593, %r3772, %r3771;
	cvt.rn.f16x2.f32 	%r3594, %r3774, %r3773;
	cvt.rn.f16x2.f32 	%r3595, %r3776, %r3775;
	cvt.rn.f16x2.f32 	%r3596, %r3778, %r3777;
	cvt.rn.f16x2.f32 	%r3597, %r3780, %r3779;
	cvt.rn.f16x2.f32 	%r3598, %r3782, %r3781;
	cvt.rn.f16x2.f32 	%r3599, %r3784, %r3783;
	cvt.rn.f16x2.f32 	%r3600, %r3786, %r3785;
	cvt.rn.f16x2.f32 	%r3601, %r3788, %r3787;
	cvt.rn.f16x2.f32 	%r3602, %r3790, %r3789;
	cvt.rn.f16x2.f32 	%r3603, %r3792, %r3791;
	cvt.rn.f16x2.f32 	%r3604, %r3794, %r3793;
	cvt.rn.f16x2.f32 	%r3605, %r3796, %r3795;
	cvt.rn.f16x2.f32 	%r3606, %r3798, %r3797;
	cvt.rn.f16x2.f32 	%r3607, %r3800, %r3799;
	cvt.rn.f16x2.f32 	%r3608, %r3802, %r3801;
	cvt.rn.f16x2.f32 	%r3609, %r3804, %r3803;
	cvt.rn.f16x2.f32 	%r3610, %r3806, %r3805;
	cvt.rn.f16x2.f32 	%r3611, %r3808, %r3807;
	cvt.rn.f16x2.f32 	%r3612, %r3810, %r3809;
	cvt.rn.f16x2.f32 	%r3613, %r3812, %r3811;
	cvt.rn.f16x2.f32 	%r3614, %r3814, %r3813;
	cvt.rn.f16x2.f32 	%r3615, %r3816, %r3815;
	cvt.rn.f16x2.f32 	%r3616, %r3818, %r3817;
	cvt.rn.f16x2.f32 	%r3617, %r3820, %r3819;
	cvt.rn.f16x2.f32 	%r3618, %r3822, %r3821;
	cvt.rn.f16x2.f32 	%r3619, %r3824, %r3823;
	cvt.rn.f16x2.f32 	%r3620, %r3826, %r3825;
	cvt.rn.f16x2.f32 	%r3621, %r3828, %r3827;
	cvt.rn.f16x2.f32 	%r3622, %r3830, %r3829;
	cvt.rn.f16x2.f32 	%r3623, %r3832, %r3831;
	cvt.rn.f16x2.f32 	%r3624, %r3834, %r3833;
	cvt.rn.f16x2.f32 	%r3625, %r3836, %r3835;
	cvt.rn.f16x2.f32 	%r3626, %r3838, %r3837;
	cvt.rn.f16x2.f32 	%r3627, %r3840, %r3839;
	cvt.rn.f16x2.f32 	%r3628, %r3842, %r3841;
	cvt.rn.f16x2.f32 	%r3629, %r3844, %r3843;
	cvt.rn.f16x2.f32 	%r3630, %r3846, %r3845;
	cvt.rn.f16x2.f32 	%r3631, %r3848, %r3847;
	cvt.rn.f16x2.f32 	%r3632, %r3850, %r3849;
	cvt.rn.f16x2.f32 	%r3633, %r3852, %r3851;
	cvt.rn.f16x2.f32 	%r3634, %r3854, %r3853;
	cvt.rn.f16x2.f32 	%r3635, %r3856, %r3855;
	cvt.rn.f16x2.f32 	%r3636, %r3858, %r3857;
	cvt.rn.f16x2.f32 	%r3637, %r3860, %r3859;
	cvt.rn.f16x2.f32 	%r3638, %r3862, %r3861;
	cvt.rn.f16x2.f32 	%r3639, %r3864, %r3863;
	cvt.rn.f16x2.f32 	%r3640, %r3866, %r3865;
	cvt.rn.f16x2.f32 	%r3641, %r3868, %r3867;
	.loc	1 138 22                        // gated_mlp.py:138:22
	shl.b32 	%r3642, %r3577, 7;
	.loc	1 138 37                        // gated_mlp.py:138:37
	or.b32 	%r3643, %r3642, %r12;
	or.b32 	%r3644, %r3642, %r13;
	or.b32 	%r3645, %r3642, %r14;
	or.b32 	%r3646, %r3642, %r15;
	or.b32 	%r3647, %r3642, %r16;
	or.b32 	%r3648, %r3642, %r17;
	or.b32 	%r3649, %r3642, %r18;
	or.b32 	%r3650, %r3642, %r19;
	or.b32 	%r3651, %r3642, %r20;
	or.b32 	%r3652, %r3642, %r21;
	or.b32 	%r3653, %r3642, %r22;
	or.b32 	%r3654, %r3642, %r23;
	or.b32 	%r3655, %r3642, %r24;
	or.b32 	%r3656, %r3642, %r25;
	or.b32 	%r3657, %r3642, %r26;
	or.b32 	%r3658, %r3642, %r27;
	.loc	1 140 33                        // gated_mlp.py:140:33
	mul.lo.s32 	%r3659, %r3643, %r444;
	mul.lo.s32 	%r3660, %r3644, %r444;
	mul.lo.s32 	%r3661, %r3645, %r444;
	mul.lo.s32 	%r3662, %r3646, %r444;
	mul.lo.s32 	%r3663, %r3647, %r444;
	mul.lo.s32 	%r3664, %r3648, %r444;
	mul.lo.s32 	%r3665, %r3649, %r444;
	mul.lo.s32 	%r3666, %r3650, %r444;
	mul.lo.s32 	%r3667, %r3651, %r444;
	mul.lo.s32 	%r3668, %r3652, %r444;
	mul.lo.s32 	%r3669, %r3653, %r444;
	mul.lo.s32 	%r3670, %r3654, %r444;
	mul.lo.s32 	%r3671, %r3655, %r444;
	mul.lo.s32 	%r3672, %r3656, %r444;
	mul.lo.s32 	%r3673, %r3657, %r444;
	mul.lo.s32 	%r3674, %r3658, %r444;
	.loc	1 140 21                        // gated_mlp.py:140:21
	mul.wide.s32 	%rd260, %r3659, 2;
	add.s64 	%rd261, %rd39, %rd260;
	mul.wide.s32 	%rd262, %r3660, 2;
	add.s64 	%rd263, %rd39, %rd262;
	mul.wide.s32 	%rd264, %r3661, 2;
	add.s64 	%rd265, %rd39, %rd264;
	mul.wide.s32 	%rd266, %r3662, 2;
	add.s64 	%rd267, %rd39, %rd266;
	mul.wide.s32 	%rd268, %r3663, 2;
	add.s64 	%rd269, %rd39, %rd268;
	mul.wide.s32 	%rd270, %r3664, 2;
	add.s64 	%rd271, %rd39, %rd270;
	mul.wide.s32 	%rd272, %r3665, 2;
	add.s64 	%rd273, %rd39, %rd272;
	mul.wide.s32 	%rd274, %r3666, 2;
	add.s64 	%rd275, %rd39, %rd274;
	mul.wide.s32 	%rd276, %r3667, 2;
	add.s64 	%rd277, %rd39, %rd276;
	mul.wide.s32 	%rd278, %r3668, 2;
	add.s64 	%rd279, %rd39, %rd278;
	mul.wide.s32 	%rd280, %r3669, 2;
	add.s64 	%rd281, %rd39, %rd280;
	mul.wide.s32 	%rd282, %r3670, 2;
	add.s64 	%rd283, %rd39, %rd282;
	mul.wide.s32 	%rd284, %r3671, 2;
	add.s64 	%rd285, %rd39, %rd284;
	mul.wide.s32 	%rd286, %r3672, 2;
	add.s64 	%rd287, %rd39, %rd286;
	mul.wide.s32 	%rd288, %r3673, 2;
	add.s64 	%rd289, %rd39, %rd288;
	mul.wide.s32 	%rd290, %r3674, 2;
	add.s64 	%rd291, %rd39, %rd290;
	.loc	1 140 52                        // gated_mlp.py:140:52
	mul.wide.s32 	%rd292, %r28, 2;
	add.s64 	%rd244, %rd261, %rd292;
	add.s64 	%rd245, %rd263, %rd292;
	add.s64 	%rd246, %rd265, %rd292;
	add.s64 	%rd247, %rd267, %rd292;
	add.s64 	%rd248, %rd269, %rd292;
	add.s64 	%rd249, %rd271, %rd292;
	add.s64 	%rd250, %rd273, %rd292;
	add.s64 	%rd251, %rd275, %rd292;
	add.s64 	%rd252, %rd277, %rd292;
	add.s64 	%rd253, %rd279, %rd292;
	add.s64 	%rd254, %rd281, %rd292;
	add.s64 	%rd255, %rd283, %rd292;
	add.s64 	%rd256, %rd285, %rd292;
	add.s64 	%rd257, %rd287, %rd292;
	add.s64 	%rd258, %rd289, %rd292;
	add.s64 	%rd259, %rd291, %rd292;
	.loc	1 141 33                        // gated_mlp.py:141:33
	setp.lt.s32 	%p109, %r3643, 1;
	setp.lt.s32 	%p110, %r3644, 1;
	setp.lt.s32 	%p111, %r3645, 1;
	setp.lt.s32 	%p112, %r3646, 1;
	setp.lt.s32 	%p113, %r3647, 1;
	setp.lt.s32 	%p114, %r3648, 1;
	setp.lt.s32 	%p115, %r3649, 1;
	setp.lt.s32 	%p116, %r3650, 1;
	setp.lt.s32 	%p117, %r3651, 1;
	setp.lt.s32 	%p118, %r3652, 1;
	setp.lt.s32 	%p119, %r3653, 1;
	setp.lt.s32 	%p120, %r3654, 1;
	setp.lt.s32 	%p121, %r3655, 1;
	setp.lt.s32 	%p122, %r3656, 1;
	setp.lt.s32 	%p123, %r3657, 1;
	setp.lt.s32 	%p124, %r3658, 1;
	.loc	1 141 58                        // gated_mlp.py:141:58
	setp.lt.s32 	%p125, %r28, %r441;
	.loc	1 141 39                        // gated_mlp.py:141:39
	and.pred 	%p93, %p125, %p109;
	and.pred 	%p94, %p125, %p110;
	and.pred 	%p95, %p125, %p111;
	and.pred 	%p96, %p125, %p112;
	and.pred 	%p97, %p125, %p113;
	and.pred 	%p98, %p125, %p114;
	and.pred 	%p99, %p125, %p115;
	and.pred 	%p100, %p125, %p116;
	and.pred 	%p101, %p125, %p117;
	and.pred 	%p102, %p125, %p118;
	and.pred 	%p103, %p125, %p119;
	and.pred 	%p104, %p125, %p120;
	and.pred 	%p105, %p125, %p121;
	and.pred 	%p106, %p125, %p122;
	and.pred 	%p107, %p125, %p123;
	and.pred 	%p108, %p125, %p124;
	.loc	1 142 21                        // gated_mlp.py:142:21
	shl.b32 	%r3675, %r5, 1;
	and.b32 	%r3676, %r3675, 6;
	shl.b32 	%r3677, %r5, 5;
	and.b32 	%r3678, %r3677, 384;
	or.b32 	%r3679, %r3678, %r3676;
	shl.b32 	%r3680, %r11, 5;
	or.b32 	%r3681, %r3679, %r3680;
	shl.b32 	%r3682, %r5, 6;
	and.b32 	%r3683, %r3682, 6144;
	or.b32 	%r3684, %r3681, %r3683;
	and.b32 	%r3685, %r6, 1016;
	shr.u32 	%r3686, %r3684, 3;
	add.s32 	%r3688, %r700, %r3686;
	shl.b32 	%r3689, %r3684, 1;
	add.s32 	%r3690, %r3688, %r3689;
	st.shared.b32 	[%r3690], %r3578;
	or.b32 	%r3691, %r3684, 1024;
	shr.u32 	%r3692, %r3691, 3;
	add.s32 	%r3693, %r700, %r3692;
	add.s32 	%r3694, %r3693, %r3689;
	st.shared.b32 	[%r3694+2048], %r3579;
	st.shared.b32 	[%r3690+16], %r3580;
	st.shared.b32 	[%r3694+2064], %r3581;
	st.shared.b32 	[%r3690+32], %r3582;
	and.b32 	%r3695, %r3692, 1008;
	add.s32 	%r3696, %r700, %r3695;
	add.s32 	%r3697, %r3696, %r3689;
	st.shared.b32 	[%r3697+2080], %r3583;
	st.shared.b32 	[%r3690+48], %r3584;
	st.shared.b32 	[%r3697+2096], %r3585;
	st.shared.b32 	[%r3690+64], %r3586;
	st.shared.b32 	[%r3697+2112], %r3587;
	st.shared.b32 	[%r3690+80], %r3588;
	st.shared.b32 	[%r3697+2128], %r3589;
	st.shared.b32 	[%r3690+96], %r3590;
	st.shared.b32 	[%r3697+2144], %r3591;
	st.shared.b32 	[%r3690+112], %r3592;
	st.shared.b32 	[%r3697+2160], %r3593;
	st.shared.b32 	[%r3690+128], %r3594;
	st.shared.b32 	[%r3697+2176], %r3595;
	st.shared.b32 	[%r3690+144], %r3596;
	st.shared.b32 	[%r3697+2192], %r3597;
	st.shared.b32 	[%r3690+160], %r3598;
	st.shared.b32 	[%r3697+2208], %r3599;
	st.shared.b32 	[%r3690+176], %r3600;
	st.shared.b32 	[%r3697+2224], %r3601;
	st.shared.b32 	[%r3690+192], %r3602;
	st.shared.b32 	[%r3697+2240], %r3603;
	st.shared.b32 	[%r3690+208], %r3604;
	st.shared.b32 	[%r3697+2256], %r3605;
	st.shared.b32 	[%r3690+224], %r3606;
	st.shared.b32 	[%r3697+2272], %r3607;
	st.shared.b32 	[%r3690+240], %r3608;
	st.shared.b32 	[%r3697+2288], %r3609;
	bar.sync 	0;
	and.b32 	%r3698, %r5, 112;
	add.s32 	%r3699, %r700, %r3698;
	shl.b32 	%r3700, %r3685, 1;
	add.s32 	%r3701, %r3699, %r3700;
	ld.shared.v4.b32 	{%r3511, %r3512, %r3513, %r3514}, [%r3701];
	or.b32 	%r3702, %r3685, 1024;
	shr.u32 	%r3703, %r3702, 3;
	and.b32 	%r3704, %r3703, 240;
	add.s32 	%r3705, %r700, %r3704;
	add.s32 	%r3706, %r3705, %r3700;
	ld.shared.v4.b32 	{%r3515, %r3516, %r3517, %r3518}, [%r3706+2048];
	or.b32 	%r3707, %r3685, 2048;
	shr.u32 	%r3708, %r3707, 3;
	and.b32 	%r3709, %r3708, 368;
	add.s32 	%r3710, %r700, %r3709;
	add.s32 	%r3711, %r3710, %r3700;
	ld.shared.v4.b32 	{%r3519, %r3520, %r3521, %r3522}, [%r3711+4096];
	or.b32 	%r3712, %r3685, 3072;
	shr.u32 	%r3713, %r3712, 3;
	and.b32 	%r3714, %r3713, 496;
	add.s32 	%r3715, %r700, %r3714;
	add.s32 	%r3716, %r3715, %r3700;
	ld.shared.v4.b32 	{%r3523, %r3524, %r3525, %r3526}, [%r3716+6144];
	or.b32 	%r3717, %r3685, 4096;
	shr.u32 	%r3718, %r3717, 3;
	and.b32 	%r3719, %r3718, 624;
	add.s32 	%r3720, %r700, %r3719;
	add.s32 	%r3721, %r3720, %r3700;
	ld.shared.v4.b32 	{%r3527, %r3528, %r3529, %r3530}, [%r3721+8192];
	or.b32 	%r3722, %r3685, 5120;
	shr.u32 	%r3723, %r3722, 3;
	and.b32 	%r3724, %r3723, 752;
	add.s32 	%r3725, %r700, %r3724;
	add.s32 	%r3726, %r3725, %r3700;
	ld.shared.v4.b32 	{%r3531, %r3532, %r3533, %r3534}, [%r3726+10240];
	or.b32 	%r3727, %r3685, 6144;
	shr.u32 	%r3728, %r3727, 3;
	and.b32 	%r3729, %r3728, 880;
	add.s32 	%r3730, %r700, %r3729;
	add.s32 	%r3731, %r3730, %r3700;
	ld.shared.v4.b32 	{%r3535, %r3536, %r3537, %r3538}, [%r3731+12288];
	or.b32 	%r3732, %r6, 7168;
	shr.u32 	%r3733, %r3732, 3;
	and.b32 	%r3734, %r3733, 1008;
	add.s32 	%r3735, %r700, %r3734;
	shl.b32 	%r3736, %r3732, 1;
	add.s32 	%r3737, %r3735, %r3736;
	ld.shared.v4.b32 	{%r3539, %r3540, %r3541, %r3542}, [%r3737];
	bar.sync 	0;
	st.shared.b32 	[%r3690], %r3610;
	st.shared.b32 	[%r3694+2048], %r3611;
	st.shared.b32 	[%r3690+16], %r3612;
	st.shared.b32 	[%r3694+2064], %r3613;
	st.shared.b32 	[%r3690+32], %r3614;
	st.shared.b32 	[%r3697+2080], %r3615;
	st.shared.b32 	[%r3690+48], %r3616;
	st.shared.b32 	[%r3697+2096], %r3617;
	st.shared.b32 	[%r3690+64], %r3618;
	st.shared.b32 	[%r3697+2112], %r3619;
	st.shared.b32 	[%r3690+80], %r3620;
	st.shared.b32 	[%r3697+2128], %r3621;
	st.shared.b32 	[%r3690+96], %r3622;
	st.shared.b32 	[%r3697+2144], %r3623;
	st.shared.b32 	[%r3690+112], %r3624;
	st.shared.b32 	[%r3697+2160], %r3625;
	st.shared.b32 	[%r3690+128], %r3626;
	st.shared.b32 	[%r3697+2176], %r3627;
	st.shared.b32 	[%r3690+144], %r3628;
	st.shared.b32 	[%r3697+2192], %r3629;
	st.shared.b32 	[%r3690+160], %r3630;
	st.shared.b32 	[%r3697+2208], %r3631;
	st.shared.b32 	[%r3690+176], %r3632;
	st.shared.b32 	[%r3697+2224], %r3633;
	st.shared.b32 	[%r3690+192], %r3634;
	st.shared.b32 	[%r3697+2240], %r3635;
	st.shared.b32 	[%r3690+208], %r3636;
	st.shared.b32 	[%r3697+2256], %r3637;
	st.shared.b32 	[%r3690+224], %r3638;
	st.shared.b32 	[%r3697+2272], %r3639;
	st.shared.b32 	[%r3690+240], %r3640;
	st.shared.b32 	[%r3697+2288], %r3641;
	bar.sync 	0;
	ld.shared.v4.b32 	{%r3543, %r3544, %r3545, %r3546}, [%r3701];
	ld.shared.v4.b32 	{%r3547, %r3548, %r3549, %r3550}, [%r3706+2048];
	ld.shared.v4.b32 	{%r3551, %r3552, %r3553, %r3554}, [%r3711+4096];
	ld.shared.v4.b32 	{%r3555, %r3556, %r3557, %r3558}, [%r3716+6144];
	ld.shared.v4.b32 	{%r3559, %r3560, %r3561, %r3562}, [%r3721+8192];
	ld.shared.v4.b32 	{%r3563, %r3564, %r3565, %r3566}, [%r3726+10240];
	ld.shared.v4.b32 	{%r3567, %r3568, %r3569, %r3570}, [%r3731+12288];
	ld.shared.v4.b32 	{%r3571, %r3572, %r3573, %r3574}, [%r3737];
	// begin inline asm
	@%p93 st.global.v4.b32 [ %rd244 + 0 ], { %r3511, %r3512, %r3513, %r3514 };
	// end inline asm
	// begin inline asm
	@%p94 st.global.v4.b32 [ %rd245 + 0 ], { %r3515, %r3516, %r3517, %r3518 };
	// end inline asm
	// begin inline asm
	@%p95 st.global.v4.b32 [ %rd246 + 0 ], { %r3519, %r3520, %r3521, %r3522 };
	// end inline asm
	// begin inline asm
	@%p96 st.global.v4.b32 [ %rd247 + 0 ], { %r3523, %r3524, %r3525, %r3526 };
	// end inline asm
	// begin inline asm
	@%p97 st.global.v4.b32 [ %rd248 + 0 ], { %r3527, %r3528, %r3529, %r3530 };
	// end inline asm
	// begin inline asm
	@%p98 st.global.v4.b32 [ %rd249 + 0 ], { %r3531, %r3532, %r3533, %r3534 };
	// end inline asm
	// begin inline asm
	@%p99 st.global.v4.b32 [ %rd250 + 0 ], { %r3535, %r3536, %r3537, %r3538 };
	// end inline asm
	// begin inline asm
	@%p100 st.global.v4.b32 [ %rd251 + 0 ], { %r3539, %r3540, %r3541, %r3542 };
	// end inline asm
	// begin inline asm
	@%p101 st.global.v4.b32 [ %rd252 + 0 ], { %r3543, %r3544, %r3545, %r3546 };
	// end inline asm
	// begin inline asm
	@%p102 st.global.v4.b32 [ %rd253 + 0 ], { %r3547, %r3548, %r3549, %r3550 };
	// end inline asm
	// begin inline asm
	@%p103 st.global.v4.b32 [ %rd254 + 0 ], { %r3551, %r3552, %r3553, %r3554 };
	// end inline asm
	// begin inline asm
	@%p104 st.global.v4.b32 [ %rd255 + 0 ], { %r3555, %r3556, %r3557, %r3558 };
	// end inline asm
	// begin inline asm
	@%p105 st.global.v4.b32 [ %rd256 + 0 ], { %r3559, %r3560, %r3561, %r3562 };
	// end inline asm
	// begin inline asm
	@%p106 st.global.v4.b32 [ %rd257 + 0 ], { %r3563, %r3564, %r3565, %r3566 };
	// end inline asm
	// begin inline asm
	@%p107 st.global.v4.b32 [ %rd258 + 0 ], { %r3567, %r3568, %r3569, %r3570 };
	// end inline asm
	// begin inline asm
	@%p108 st.global.v4.b32 [ %rd259 + 0 ], { %r3571, %r3572, %r3573, %r3574 };
	// end inline asm
	.loc	1 142 4                         // gated_mlp.py:142:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py"
	.file	2 "/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 157                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x96 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 103                                 // DW_AT_name
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 109
.b8 108
.b8 112
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 117
.b8 98
.b8 117
.b8 110
.b8 116
.b8 117
.b8 47
.b8 80
.b8 84
.b8 88
.b8 95
.b8 100
.b8 97
.b8 116
.b8 97
.b8 115
.b8 101
.b8 116
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 116
.b8 120
.b8 0
.b8 2                                   // Abbrev [2] 0x4a:0x10 DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x5a:0x46 DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 74                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x6f:0x18 DW_TAG_inlined_subroutine
.b32 74                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 93                                  // DW_AT_call_line
.b8 27                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x87:0x18 DW_TAG_inlined_subroutine
.b32 74                                 // DW_AT_abstract_origin
.b64 $L__tmp3                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 120                                 // DW_AT_call_line
.b8 33                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
