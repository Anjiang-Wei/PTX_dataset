//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	matmul_kernel           // -- Begin function matmul_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @matmul_kernel
.visible .entry matmul_kernel(
	.param .u64 .ptr .global .align 1 matmul_kernel_param_0,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_1,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_2,
	.param .u32 matmul_kernel_param_3,
	.param .u32 matmul_kernel_param_4,
	.param .u32 matmul_kernel_param_5,
	.param .u32 matmul_kernel_param_6,
	.param .u32 matmul_kernel_param_7,
	.param .u64 .ptr .global .align 1 matmul_kernel_param_8
)
.reqntid 256
{
	.reg .pred 	%p<65>;
	.reg .b32 	%r<2740>;
	.reg .b64 	%rd<144>;
	.loc	1 68 0                          // gated_mlp.py:68:0
$L__func_begin0:
	.loc	1 68 0                          // gated_mlp.py:68:0

// %bb.0:
	ld.param.b32 	%r432, [matmul_kernel_param_7];
	ld.param.b32 	%r431, [matmul_kernel_param_4];
	ld.param.b32 	%r430, [matmul_kernel_param_3];
	ld.param.b64 	%rd27, [matmul_kernel_param_2];
	ld.param.b64 	%rd26, [matmul_kernel_param_1];
	ld.param.b64 	%rd25, [matmul_kernel_param_0];
$L__tmp0:
	.loc	1 91 24                         // gated_mlp.py:91:24
	mov.u32 	%r482, %ctaid.x;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:93:27 ]
	add.s32 	%r483, %r430, 255;
	.loc	2 40 28                         // standard.py:40:28 @[ gated_mlp.py:93:27 ]
	shr.s32 	%r484, %r483, 31;
	shr.u32 	%r485, %r484, 24;
	add.s32 	%r486, %r483, %r485;
	shr.s32 	%r487, %r486, 8;
$L__tmp2:
	.loc	1 94 38                         // gated_mlp.py:94:38
	shl.b32 	%r489, %r487, 3;
	.loc	1 95 22                         // gated_mlp.py:95:22
	div.s32 	%r490, %r482, %r489;
	ld.param.b32 	%r491, [matmul_kernel_param_6];
	.loc	1 96 29                         // gated_mlp.py:96:29
	shl.b32 	%r1, %r490, 3;
	.loc	1 97 35                         // gated_mlp.py:97:35
	sub.s32 	%r492, 1, %r1;
	.loc	1 97 48                         // gated_mlp.py:97:48
	min.s32 	%r2, %r492, 8;
	.loc	1 98 34                         // gated_mlp.py:98:34
	mul.lo.s32 	%r493, %r490, %r489;
	sub.s32 	%r3, %r482, %r493;
	.loc	1 99 40                         // gated_mlp.py:99:40
	div.s32 	%r4, %r3, %r2;
	.loc	1 109 23                        // gated_mlp.py:109:23
	shl.b32 	%r494, %r4, 8;
	.loc	1 109 51                        // gated_mlp.py:109:51
	mov.u32 	%r5, %tid.x;
	shl.b32 	%r495, %r5, 3;
	and.b32 	%r6, %r495, 56;
	and.b32 	%r7, %r5, 16;
	and.b32 	%r8, %r495, 248;
	.loc	1 109 38                        // gated_mlp.py:109:38
	or.b32 	%r9, %r494, %r8;
	.loc	1 109 68                        // gated_mlp.py:109:68
	rem.s32 	%r496, %r9, %r430;
	.loc	1 111 22                        // gated_mlp.py:111:22
	mul.wide.u32 	%rd52, %r6, 2;
	add.s64 	%rd28, %rd25, %rd52;
	.loc	1 112 29                        // gated_mlp.py:112:29
	shr.u32 	%r10, %r5, 5;
	and.b32 	%r11, %r5, 32;
	bfe.s32 	%r497, %r5, 5, 1;
	bfe.s32 	%r498, %r5, 6, 1;
	and.b32 	%r499, %r5, 64;
	bfe.s32 	%r500, %r5, 7, 1;
	and.b32 	%r12, %r5, 128;
	bfe.u32 	%r13, %r5, 5, 3;
	or.b32 	%r14, %r13, 8;
	or.b32 	%r15, %r13, 16;
	or.b32 	%r16, %r10, 24;
	or.b32 	%r17, %r13, 32;
	or.b32 	%r18, %r13, 40;
	or.b32 	%r19, %r13, 48;
	or.b32 	%r20, %r10, 56;
	.loc	1 112 40                        // gated_mlp.py:112:40
	shl.b32 	%r501, %r491, 3;
	shl.b32 	%r502, %r491, 4;
	.loc	1 112 52                        // gated_mlp.py:112:52
	mad.lo.s32 	%r503, %r491, %r13, %r496;
	add.s32 	%r504, %r503, %r501;
	add.s32 	%r505, %r504, %r501;
	mad.lo.s32 	%r506, %r491, %r16, %r496;
	add.s32 	%r507, %r505, %r502;
	add.s32 	%r508, %r507, %r501;
	add.s32 	%r509, %r508, %r501;
	mad.lo.s32 	%r510, %r491, %r20, %r496;
	.loc	1 112 22                        // gated_mlp.py:112:22
	mul.wide.s32 	%rd53, %r503, 2;
	add.s64 	%rd32, %rd26, %rd53;
	mul.wide.s32 	%rd54, %r504, 2;
	add.s64 	%rd33, %rd26, %rd54;
	mul.wide.s32 	%rd55, %r505, 2;
	add.s64 	%rd34, %rd26, %rd55;
	mul.wide.s32 	%rd56, %r506, 2;
	add.s64 	%rd35, %rd26, %rd56;
	mul.wide.s32 	%rd57, %r507, 2;
	add.s64 	%rd36, %rd26, %rd57;
	mul.wide.s32 	%rd58, %r508, 2;
	add.s64 	%rd37, %rd26, %rd58;
	mul.wide.s32 	%rd59, %r509, 2;
	add.s64 	%rd38, %rd26, %rd59;
	mul.wide.s32 	%rd60, %r510, 2;
	add.s64 	%rd39, %rd26, %rd60;
$L__tmp3:
	.loc	2 40 22                         // standard.py:40:22 @[ gated_mlp.py:120:33 ]
	add.s32 	%r511, %r431, 63;
$L__tmp4:
	.loc	1 129 33                        // gated_mlp.py:129:33
	shl.b32 	%r515, %r491, 6;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.lt.s32 	%p1, %r511, 64;
	setp.gt.s32 	%p2, %r511, 63;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p3, %r6, %r431;
	.loc	1 123 20                        // gated_mlp.py:123:20
	and.b32 	%r516, %r497, 288;
	and.b32 	%r517, %r5, 24;
	mul.lo.s32 	%r518, %r517, 9;
	xor.b32 	%r519, %r518, %r6;
	xor.b32 	%r520, %r519, %r516;
	shl.b32 	%r22, %r499, 3;
	shl.b32 	%r23, %r12, 3;
	or.b32 	%r521, %r22, %r520;
	or.b32 	%r24, %r521, %r23;
	shl.b32 	%r522, %r24, 1;
	mov.b32 	%r523, global_smem;
	add.s32 	%r524, %r523, 98304;
	add.s32 	%r433, %r524, %r522;
	or.b32 	%r525, %r6, 2048;
	xor.b32 	%r526, %r518, %r525;
	xor.b32 	%r527, %r526, %r516;
	or.b32 	%r528, %r527, %r22;
	or.b32 	%r25, %r528, %r23;
	shl.b32 	%r529, %r25, 1;
	add.s32 	%r435, %r524, %r529;
	or.b32 	%r530, %r6, 4096;
	xor.b32 	%r531, %r518, %r530;
	xor.b32 	%r532, %r531, %r516;
	or.b32 	%r533, %r532, %r22;
	or.b32 	%r26, %r533, %r23;
	shl.b32 	%r534, %r26, 1;
	add.s32 	%r437, %r524, %r534;
	or.b32 	%r535, %r6, 6144;
	xor.b32 	%r536, %r518, %r535;
	xor.b32 	%r537, %r536, %r516;
	or.b32 	%r538, %r537, %r22;
	or.b32 	%r27, %r538, %r23;
	shl.b32 	%r539, %r27, 1;
	add.s32 	%r439, %r524, %r539;
	selp.b32 	%r540, 16, 0, %p2;
	selp.b32 	%r436, %r540, 0, %p3;
	// begin inline asm
	cp.async.cg.shared.global [ %r433 + 0 ], [ %rd28 + 0 ], 0x10, %r436;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r435 + 0 ], [ %rd28 + 0 ], 0x10, %r436;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r437 + 0 ], [ %rd28 + 0 ], 0x10, %r436;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r439 + 0 ], [ %rd28 + 0 ], 0x10, %r436;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p4, %r13, %r431;
	setp.lt.s32 	%p5, %r14, %r431;
	setp.lt.s32 	%p6, %r15, %r431;
	setp.lt.s32 	%p7, %r16, %r431;
	setp.lt.s32 	%p8, %r17, %r431;
	setp.lt.s32 	%p9, %r18, %r431;
	setp.lt.s32 	%p10, %r19, %r431;
	setp.lt.s32 	%p11, %r20, %r431;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r541, %r5, 9;
	and.b32 	%r542, %r541, 4096;
	or.b32 	%r543, %r6, %r542;
	shl.b32 	%r544, %r7, 9;
	or.b32 	%r545, %r543, %r544;
	and.b32 	%r546, %r497, 72;
	and.b32 	%r547, %r498, 144;
	and.b32 	%r548, %r500, 288;
	or.b32 	%r549, %r547, %r546;
	or.b32 	%r550, %r549, %r548;
	xor.b32 	%r28, %r550, %r545;
	shl.b32 	%r551, %r28, 1;
	add.s32 	%r441, %r523, %r551;
	or.b32 	%r552, %r545, 512;
	xor.b32 	%r29, %r550, %r552;
	shl.b32 	%r553, %r29, 1;
	add.s32 	%r443, %r523, %r553;
	or.b32 	%r554, %r545, 1024;
	xor.b32 	%r30, %r550, %r554;
	shl.b32 	%r555, %r30, 1;
	add.s32 	%r445, %r523, %r555;
	or.b32 	%r556, %r545, 1536;
	xor.b32 	%r31, %r550, %r556;
	shl.b32 	%r557, %r31, 1;
	add.s32 	%r447, %r523, %r557;
	or.b32 	%r558, %r544, %r542;
	or.b32 	%r559, %r558, %r525;
	xor.b32 	%r32, %r550, %r559;
	shl.b32 	%r560, %r32, 1;
	add.s32 	%r449, %r523, %r560;
	or.b32 	%r561, %r545, 2560;
	xor.b32 	%r33, %r550, %r561;
	shl.b32 	%r562, %r33, 1;
	add.s32 	%r451, %r523, %r562;
	or.b32 	%r563, %r545, 3072;
	xor.b32 	%r34, %r550, %r563;
	shl.b32 	%r564, %r34, 1;
	add.s32 	%r453, %r523, %r564;
	or.b32 	%r565, %r545, 3584;
	xor.b32 	%r35, %r550, %r565;
	shl.b32 	%r566, %r35, 1;
	add.s32 	%r455, %r523, %r566;
	selp.b32 	%r442, %r540, 0, %p4;
	// begin inline asm
	cp.async.cg.shared.global [ %r441 + 0 ], [ %rd32 + 0 ], 0x10, %r442;
	// end inline asm
	selp.b32 	%r444, %r540, 0, %p5;
	// begin inline asm
	cp.async.cg.shared.global [ %r443 + 0 ], [ %rd33 + 0 ], 0x10, %r444;
	// end inline asm
	selp.b32 	%r446, %r540, 0, %p6;
	// begin inline asm
	cp.async.cg.shared.global [ %r445 + 0 ], [ %rd34 + 0 ], 0x10, %r446;
	// end inline asm
	selp.b32 	%r448, %r540, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r447 + 0 ], [ %rd35 + 0 ], 0x10, %r448;
	// end inline asm
	selp.b32 	%r450, %r540, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r449 + 0 ], [ %rd36 + 0 ], 0x10, %r450;
	// end inline asm
	selp.b32 	%r452, %r540, 0, %p9;
	// begin inline asm
	cp.async.cg.shared.global [ %r451 + 0 ], [ %rd37 + 0 ], 0x10, %r452;
	// end inline asm
	selp.b32 	%r454, %r540, 0, %p10;
	// begin inline asm
	cp.async.cg.shared.global [ %r453 + 0 ], [ %rd38 + 0 ], 0x10, %r454;
	// end inline asm
	selp.b32 	%r456, %r540, 0, %p11;
	// begin inline asm
	cp.async.cg.shared.global [ %r455 + 0 ], [ %rd39 + 0 ], 0x10, %r456;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	setp.gt.s32 	%p12, %r511, 127;
	.loc	1 128 18                        // gated_mlp.py:128:18
	add.s64 	%rd40, %rd28, 128;
	.loc	1 129 18                        // gated_mlp.py:129:18
	mul.wide.s32 	%rd61, %r515, 2;
	add.s64 	%rd44, %rd32, %rd61;
	add.s64 	%rd45, %rd33, %rd61;
	add.s64 	%rd46, %rd34, %rd61;
	add.s64 	%rd47, %rd35, %rd61;
	add.s64 	%rd48, %rd36, %rd61;
	add.s64 	%rd49, %rd37, %rd61;
	add.s64 	%rd50, %rd38, %rd61;
	add.s64 	%rd51, %rd39, %rd61;
	.loc	1 123 55                        // gated_mlp.py:123:55
	add.s32 	%r567, %r431, -64;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p13, %r6, %r567;
	.loc	1 123 20                        // gated_mlp.py:123:20
	bar.sync 	0;
	add.s32 	%r568, %r523, 114688;
	add.s32 	%r457, %r568, %r522;
	add.s32 	%r459, %r568, %r529;
	add.s32 	%r461, %r568, %r534;
	add.s32 	%r463, %r568, %r539;
	selp.b32 	%r569, 16, 0, %p13;
	selp.b32 	%r460, %r569, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r457 + 0 ], [ %rd40 + 0 ], 0x10, %r460;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r459 + 0 ], [ %rd40 + 0 ], 0x10, %r460;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r461 + 0 ], [ %rd40 + 0 ], 0x10, %r460;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r463 + 0 ], [ %rd40 + 0 ], 0x10, %r460;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p14, %r13, %r567;
	setp.lt.s32 	%p15, %r14, %r567;
	setp.lt.s32 	%p16, %r15, %r567;
	setp.lt.s32 	%p17, %r16, %r567;
	setp.lt.s32 	%p18, %r17, %r567;
	setp.lt.s32 	%p19, %r18, %r567;
	setp.lt.s32 	%p20, %r19, %r567;
	setp.lt.s32 	%p21, %r20, %r567;
	.loc	1 124 20                        // gated_mlp.py:124:20
	add.s32 	%r570, %r523, 32768;
	add.s32 	%r465, %r570, %r551;
	add.s32 	%r467, %r570, %r553;
	add.s32 	%r469, %r570, %r555;
	add.s32 	%r471, %r570, %r557;
	add.s32 	%r473, %r570, %r560;
	add.s32 	%r475, %r570, %r562;
	add.s32 	%r477, %r570, %r564;
	add.s32 	%r479, %r570, %r566;
	selp.b32 	%r571, 16, 0, %p14;
	selp.b32 	%r466, %r571, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r465 + 0 ], [ %rd44 + 0 ], 0x10, %r466;
	// end inline asm
	selp.b32 	%r572, 16, 0, %p15;
	selp.b32 	%r468, %r572, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r467 + 0 ], [ %rd45 + 0 ], 0x10, %r468;
	// end inline asm
	selp.b32 	%r573, 16, 0, %p16;
	selp.b32 	%r470, %r573, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r469 + 0 ], [ %rd46 + 0 ], 0x10, %r470;
	// end inline asm
	selp.b32 	%r574, 16, 0, %p17;
	selp.b32 	%r472, %r574, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r471 + 0 ], [ %rd47 + 0 ], 0x10, %r472;
	// end inline asm
	selp.b32 	%r575, 16, 0, %p18;
	selp.b32 	%r474, %r575, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r473 + 0 ], [ %rd48 + 0 ], 0x10, %r474;
	// end inline asm
	selp.b32 	%r576, 16, 0, %p19;
	selp.b32 	%r476, %r576, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r475 + 0 ], [ %rd49 + 0 ], 0x10, %r476;
	// end inline asm
	selp.b32 	%r577, 16, 0, %p20;
	selp.b32 	%r478, %r577, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r477 + 0 ], [ %rd50 + 0 ], 0x10, %r478;
	// end inline asm
	selp.b32 	%r578, 16, 0, %p21;
	selp.b32 	%r480, %r578, 0, %p12;
	// begin inline asm
	cp.async.cg.shared.global [ %r479 + 0 ], [ %rd51 + 0 ], 0x10, %r480;
	// end inline asm
	cp.async.commit_group;
	mov.b32 	%r2483, 0f00000000;
	mov.b32 	%r2484, %r2483;
	mov.b32 	%r2485, %r2483;
	mov.b32 	%r2486, %r2483;
	mov.b32 	%r2487, %r2483;
	mov.b32 	%r2488, %r2483;
	mov.b32 	%r2489, %r2483;
	mov.b32 	%r2490, %r2483;
	mov.b32 	%r2491, %r2483;
	mov.b32 	%r2492, %r2483;
	mov.b32 	%r2493, %r2483;
	mov.b32 	%r2494, %r2483;
	mov.b32 	%r2495, %r2483;
	mov.b32 	%r2496, %r2483;
	mov.b32 	%r2497, %r2483;
	mov.b32 	%r2498, %r2483;
	mov.b32 	%r2499, %r2483;
	mov.b32 	%r2500, %r2483;
	mov.b32 	%r2501, %r2483;
	mov.b32 	%r2502, %r2483;
	mov.b32 	%r2503, %r2483;
	mov.b32 	%r2504, %r2483;
	mov.b32 	%r2505, %r2483;
	mov.b32 	%r2506, %r2483;
	mov.b32 	%r2507, %r2483;
	mov.b32 	%r2508, %r2483;
	mov.b32 	%r2509, %r2483;
	mov.b32 	%r2510, %r2483;
	mov.b32 	%r2511, %r2483;
	mov.b32 	%r2512, %r2483;
	mov.b32 	%r2513, %r2483;
	mov.b32 	%r2514, %r2483;
	mov.b32 	%r2515, %r2483;
	mov.b32 	%r2516, %r2483;
	mov.b32 	%r2517, %r2483;
	mov.b32 	%r2518, %r2483;
	mov.b32 	%r2519, %r2483;
	mov.b32 	%r2520, %r2483;
	mov.b32 	%r2521, %r2483;
	mov.b32 	%r2522, %r2483;
	mov.b32 	%r2523, %r2483;
	mov.b32 	%r2524, %r2483;
	mov.b32 	%r2525, %r2483;
	mov.b32 	%r2526, %r2483;
	mov.b32 	%r2527, %r2483;
	mov.b32 	%r2528, %r2483;
	mov.b32 	%r2529, %r2483;
	mov.b32 	%r2530, %r2483;
	mov.b32 	%r2531, %r2483;
	mov.b32 	%r2532, %r2483;
	mov.b32 	%r2533, %r2483;
	mov.b32 	%r2534, %r2483;
	mov.b32 	%r2535, %r2483;
	mov.b32 	%r2536, %r2483;
	mov.b32 	%r2537, %r2483;
	mov.b32 	%r2538, %r2483;
	mov.b32 	%r2539, %r2483;
	mov.b32 	%r2540, %r2483;
	mov.b32 	%r2541, %r2483;
	mov.b32 	%r2542, %r2483;
	mov.b32 	%r2543, %r2483;
	mov.b32 	%r2544, %r2483;
	mov.b32 	%r2545, %r2483;
	mov.b32 	%r2546, %r2483;
	mov.b32 	%r2547, %r2483;
	mov.b32 	%r2548, %r2483;
	mov.b32 	%r2549, %r2483;
	mov.b32 	%r2550, %r2483;
	mov.b32 	%r2551, %r2483;
	mov.b32 	%r2552, %r2483;
	mov.b32 	%r2553, %r2483;
	mov.b32 	%r2554, %r2483;
	mov.b32 	%r2555, %r2483;
	mov.b32 	%r2556, %r2483;
	mov.b32 	%r2557, %r2483;
	mov.b32 	%r2558, %r2483;
	mov.b32 	%r2559, %r2483;
	mov.b32 	%r2560, %r2483;
	mov.b32 	%r2561, %r2483;
	mov.b32 	%r2562, %r2483;
	mov.b32 	%r2563, %r2483;
	mov.b32 	%r2564, %r2483;
	mov.b32 	%r2565, %r2483;
	mov.b32 	%r2566, %r2483;
	mov.b32 	%r2567, %r2483;
	mov.b32 	%r2568, %r2483;
	mov.b32 	%r2569, %r2483;
	mov.b32 	%r2570, %r2483;
	mov.b32 	%r2571, %r2483;
	mov.b32 	%r2572, %r2483;
	mov.b32 	%r2573, %r2483;
	mov.b32 	%r2574, %r2483;
	mov.b32 	%r2575, %r2483;
	mov.b32 	%r2576, %r2483;
	mov.b32 	%r2577, %r2483;
	mov.b32 	%r2578, %r2483;
	mov.b32 	%r2579, %r2483;
	mov.b32 	%r2580, %r2483;
	mov.b32 	%r2581, %r2483;
	mov.b32 	%r2582, %r2483;
	mov.b32 	%r2583, %r2483;
	mov.b32 	%r2584, %r2483;
	mov.b32 	%r2585, %r2483;
	mov.b32 	%r2586, %r2483;
	mov.b32 	%r2587, %r2483;
	mov.b32 	%r2588, %r2483;
	mov.b32 	%r2589, %r2483;
	mov.b32 	%r2590, %r2483;
	mov.b32 	%r2591, %r2483;
	mov.b32 	%r2592, %r2483;
	mov.b32 	%r2593, %r2483;
	mov.b32 	%r2594, %r2483;
	mov.b32 	%r2595, %r2483;
	mov.b32 	%r2596, %r2483;
	mov.b32 	%r2597, %r2483;
	mov.b32 	%r2598, %r2483;
	mov.b32 	%r2599, %r2483;
	mov.b32 	%r2600, %r2483;
	mov.b32 	%r2601, %r2483;
	mov.b32 	%r2602, %r2483;
	mov.b32 	%r2603, %r2483;
	mov.b32 	%r2604, %r2483;
	mov.b32 	%r2605, %r2483;
	mov.b32 	%r2606, %r2483;
	mov.b32 	%r2607, %r2483;
	mov.b32 	%r2608, %r2483;
	mov.b32 	%r2609, %r2483;
	mov.b32 	%r2610, %r2483;
	.loc	1 120 22                        // gated_mlp.py:120:22
	@%p1 bra 	$L__BB0_3;
// %bb.1:                               // %.lr.ph
	.loc	1 0 22                          // gated_mlp.py:0:22
	cvt.s64.s32 	%rd1, %r503;
	cvt.s64.s32 	%rd2, %r504;
	cvt.s64.s32 	%rd3, %r505;
	cvt.s64.s32 	%rd4, %r506;
	cvt.s64.s32 	%rd5, %r507;
	cvt.s64.s32 	%rd6, %r508;
	cvt.s64.s32 	%rd7, %r509;
	cvt.s64.s32 	%rd8, %r510;
	shr.s32 	%r512, %r511, 31;
	shr.u32 	%r513, %r512, 26;
	add.s32 	%r514, %r511, %r513;
	shr.s32 	%r21, %r514, 6;
	cvt.s64.s32 	%rd9, %r515;
	add.s32 	%r36, %r21, -2;
	add.s32 	%r2480, %r431, -128;
	.loc	1 120 22                        // gated_mlp.py:120:22
	shl.b64 	%rd10, %rd8, 1;
	shl.b64 	%rd62, %rd9, 2;
	add.s64 	%rd143, %rd26, %rd62;
	shl.b64 	%rd12, %rd9, 1;
	shl.b64 	%rd13, %rd7, 1;
	shl.b64 	%rd14, %rd6, 1;
	shl.b64 	%rd15, %rd5, 1;
	shl.b64 	%rd16, %rd4, 1;
	shl.b64 	%rd17, %rd3, 1;
	shl.b64 	%rd18, %rd2, 1;
	shl.b64 	%rd19, %rd1, 1;
	and.b32 	%r583, %r5, 7;
	mul.wide.u32 	%rd63, %r583, 16;
	add.s64 	%rd64, %rd63, %rd25;
	add.s64 	%rd142, %rd64, 256;
	mov.b32 	%r1871, 0;
	mov.b32 	%r2483, 0f00000000;
	mov.b32 	%r2482, 1;
	mov.b32 	%r2481, -1;
	mov.b32 	%r2484, %r2483;
	mov.b32 	%r2485, %r2483;
	mov.b32 	%r2486, %r2483;
	mov.b32 	%r2487, %r2483;
	mov.b32 	%r2488, %r2483;
	mov.b32 	%r2489, %r2483;
	mov.b32 	%r2490, %r2483;
	mov.b32 	%r2491, %r2483;
	mov.b32 	%r2492, %r2483;
	mov.b32 	%r2493, %r2483;
	mov.b32 	%r2494, %r2483;
	mov.b32 	%r2495, %r2483;
	mov.b32 	%r2496, %r2483;
	mov.b32 	%r2497, %r2483;
	mov.b32 	%r2498, %r2483;
	mov.b32 	%r2499, %r2483;
	mov.b32 	%r2500, %r2483;
	mov.b32 	%r2501, %r2483;
	mov.b32 	%r2502, %r2483;
	mov.b32 	%r2503, %r2483;
	mov.b32 	%r2504, %r2483;
	mov.b32 	%r2505, %r2483;
	mov.b32 	%r2506, %r2483;
	mov.b32 	%r2507, %r2483;
	mov.b32 	%r2508, %r2483;
	mov.b32 	%r2509, %r2483;
	mov.b32 	%r2510, %r2483;
	mov.b32 	%r2511, %r2483;
	mov.b32 	%r2512, %r2483;
	mov.b32 	%r2513, %r2483;
	mov.b32 	%r2514, %r2483;
	mov.b32 	%r2515, %r2483;
	mov.b32 	%r2516, %r2483;
	mov.b32 	%r2517, %r2483;
	mov.b32 	%r2518, %r2483;
	mov.b32 	%r2519, %r2483;
	mov.b32 	%r2520, %r2483;
	mov.b32 	%r2521, %r2483;
	mov.b32 	%r2522, %r2483;
	mov.b32 	%r2523, %r2483;
	mov.b32 	%r2524, %r2483;
	mov.b32 	%r2525, %r2483;
	mov.b32 	%r2526, %r2483;
	mov.b32 	%r2527, %r2483;
	mov.b32 	%r2528, %r2483;
	mov.b32 	%r2529, %r2483;
	mov.b32 	%r2530, %r2483;
	mov.b32 	%r2531, %r2483;
	mov.b32 	%r2532, %r2483;
	mov.b32 	%r2533, %r2483;
	mov.b32 	%r2534, %r2483;
	mov.b32 	%r2535, %r2483;
	mov.b32 	%r2536, %r2483;
	mov.b32 	%r2537, %r2483;
	mov.b32 	%r2538, %r2483;
	mov.b32 	%r2539, %r2483;
	mov.b32 	%r2540, %r2483;
	mov.b32 	%r2541, %r2483;
	mov.b32 	%r2542, %r2483;
	mov.b32 	%r2543, %r2483;
	mov.b32 	%r2544, %r2483;
	mov.b32 	%r2545, %r2483;
	mov.b32 	%r2546, %r2483;
	mov.b32 	%r2547, %r2483;
	mov.b32 	%r2548, %r2483;
	mov.b32 	%r2549, %r2483;
	mov.b32 	%r2550, %r2483;
	mov.b32 	%r2551, %r2483;
	mov.b32 	%r2552, %r2483;
	mov.b32 	%r2553, %r2483;
	mov.b32 	%r2554, %r2483;
	mov.b32 	%r2555, %r2483;
	mov.b32 	%r2556, %r2483;
	mov.b32 	%r2557, %r2483;
	mov.b32 	%r2558, %r2483;
	mov.b32 	%r2559, %r2483;
	mov.b32 	%r2560, %r2483;
	mov.b32 	%r2561, %r2483;
	mov.b32 	%r2562, %r2483;
	mov.b32 	%r2563, %r2483;
	mov.b32 	%r2564, %r2483;
	mov.b32 	%r2565, %r2483;
	mov.b32 	%r2566, %r2483;
	mov.b32 	%r2567, %r2483;
	mov.b32 	%r2568, %r2483;
	mov.b32 	%r2569, %r2483;
	mov.b32 	%r2570, %r2483;
	mov.b32 	%r2571, %r2483;
	mov.b32 	%r2572, %r2483;
	mov.b32 	%r2573, %r2483;
	mov.b32 	%r2574, %r2483;
	mov.b32 	%r2575, %r2483;
	mov.b32 	%r2576, %r2483;
	mov.b32 	%r2577, %r2483;
	mov.b32 	%r2578, %r2483;
	mov.b32 	%r2579, %r2483;
	mov.b32 	%r2580, %r2483;
	mov.b32 	%r2581, %r2483;
	mov.b32 	%r2582, %r2483;
	mov.b32 	%r2583, %r2483;
	mov.b32 	%r2584, %r2483;
	mov.b32 	%r2585, %r2483;
	mov.b32 	%r2586, %r2483;
	mov.b32 	%r2587, %r2483;
	mov.b32 	%r2588, %r2483;
	mov.b32 	%r2589, %r2483;
	mov.b32 	%r2590, %r2483;
	mov.b32 	%r2591, %r2483;
	mov.b32 	%r2592, %r2483;
	mov.b32 	%r2593, %r2483;
	mov.b32 	%r2594, %r2483;
	mov.b32 	%r2595, %r2483;
	mov.b32 	%r2596, %r2483;
	mov.b32 	%r2597, %r2483;
	mov.b32 	%r2598, %r2483;
	mov.b32 	%r2599, %r2483;
	mov.b32 	%r2600, %r2483;
	mov.b32 	%r2601, %r2483;
	mov.b32 	%r2602, %r2483;
	mov.b32 	%r2603, %r2483;
	mov.b32 	%r2604, %r2483;
	mov.b32 	%r2605, %r2483;
	mov.b32 	%r2606, %r2483;
	mov.b32 	%r2607, %r2483;
	mov.b32 	%r2608, %r2483;
	mov.b32 	%r2609, %r2483;
	mov.b32 	%r2610, %r2483;
	mov.b32 	%r2611, %r1871;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	setp.lt.s32 	%p26, %r2611, %r36;
	add.s32 	%r1900, %r2481, 1;
	setp.gt.s32 	%p27, %r1900, 2;
	selp.b32 	%r2481, 0, %r1900, %p27;
	.loc	1 123 20                        // gated_mlp.py:123:20
	cp.async.wait_group 	2;
	bar.sync 	0;
	shl.b32 	%r1901, %r2481, 14;
	add.s32 	%r1736, %r524, %r1901;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r1904, %r2481, 15;
	add.s32 	%r1739, %r523, %r1904;
	.loc	1 126 35                        // gated_mlp.py:126:35
	shfl.sync.idx.b32 	%r1905, %r10, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r1906, %r1905, 11;
	and.b32 	%r1907, %r1906, 8192;
	add.s32 	%r1908, %r1907, %r1736;
	bfe.u32 	%r1909, %r1908, 4, 14;
	cvt.u64.u32 	%rd85, %r1909;
	or.b64 	%rd65, %rd85, 4611686293372403712;
	bfe.u32 	%r1910, %r1739, 4, 14;
	cvt.u64.u32 	%rd86, %r1910;
	or.b64 	%rd66, %rd86, 4611686293338849280;
	mov.pred 	%p22, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n256k16.f32.f16.f16 {%r2483,%r2484,%r2485,%r2486,%r2487,%r2488,%r2489,%r2490,%r2491,%r2492,%r2493,%r2494,%r2495,%r2496,%r2497,%r2498,%r2499,%r2500,%r2501,%r2502,%r2503,%r2504,%r2505,%r2506,%r2507,%r2508,%r2509,%r2510,%r2511,%r2512,%r2513,%r2514,%r2515,%r2516,%r2517,%r2518,%r2519,%r2520,%r2521,%r2522,%r2523,%r2524,%r2525,%r2526,%r2527,%r2528,%r2529,%r2530,%r2531,%r2532,%r2533,%r2534,%r2535,%r2536,%r2537,%r2538,%r2539,%r2540,%r2541,%r2542,%r2543,%r2544,%r2545,%r2546,%r2547,%r2548,%r2549,%r2550,%r2551,%r2552,%r2553,%r2554,%r2555,%r2556,%r2557,%r2558,%r2559,%r2560,%r2561,%r2562,%r2563,%r2564,%r2565,%r2566,%r2567,%r2568,%r2569,%r2570,%r2571,%r2572,%r2573,%r2574,%r2575,%r2576,%r2577,%r2578,%r2579,%r2580,%r2581,%r2582,%r2583,%r2584,%r2585,%r2586,%r2587,%r2588,%r2589,%r2590,%r2591,%r2592,%r2593,%r2594,%r2595,%r2596,%r2597,%r2598,%r2599,%r2600,%r2601,%r2602,%r2603,%r2604,%r2605,%r2606,%r2607,%r2608,%r2609,%r2610}, %rd65, %rd66, %p22, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1911, %r1908, 32;
	bfe.u32 	%r1912, %r1911, 4, 14;
	cvt.u64.u32 	%rd87, %r1912;
	or.b64 	%rd67, %rd87, 4611686293372403712;
	add.s32 	%r1913, %r1739, 2048;
	bfe.u32 	%r1914, %r1913, 4, 14;
	cvt.u64.u32 	%rd88, %r1914;
	or.b64 	%rd68, %rd88, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n256k16.f32.f16.f16 {%r2483,%r2484,%r2485,%r2486,%r2487,%r2488,%r2489,%r2490,%r2491,%r2492,%r2493,%r2494,%r2495,%r2496,%r2497,%r2498,%r2499,%r2500,%r2501,%r2502,%r2503,%r2504,%r2505,%r2506,%r2507,%r2508,%r2509,%r2510,%r2511,%r2512,%r2513,%r2514,%r2515,%r2516,%r2517,%r2518,%r2519,%r2520,%r2521,%r2522,%r2523,%r2524,%r2525,%r2526,%r2527,%r2528,%r2529,%r2530,%r2531,%r2532,%r2533,%r2534,%r2535,%r2536,%r2537,%r2538,%r2539,%r2540,%r2541,%r2542,%r2543,%r2544,%r2545,%r2546,%r2547,%r2548,%r2549,%r2550,%r2551,%r2552,%r2553,%r2554,%r2555,%r2556,%r2557,%r2558,%r2559,%r2560,%r2561,%r2562,%r2563,%r2564,%r2565,%r2566,%r2567,%r2568,%r2569,%r2570,%r2571,%r2572,%r2573,%r2574,%r2575,%r2576,%r2577,%r2578,%r2579,%r2580,%r2581,%r2582,%r2583,%r2584,%r2585,%r2586,%r2587,%r2588,%r2589,%r2590,%r2591,%r2592,%r2593,%r2594,%r2595,%r2596,%r2597,%r2598,%r2599,%r2600,%r2601,%r2602,%r2603,%r2604,%r2605,%r2606,%r2607,%r2608,%r2609,%r2610}, %rd67, %rd68, %p22, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1915, %r1908, 64;
	bfe.u32 	%r1916, %r1915, 4, 14;
	cvt.u64.u32 	%rd89, %r1916;
	or.b64 	%rd69, %rd89, 4611686293372403712;
	add.s32 	%r1917, %r1739, 4096;
	bfe.u32 	%r1918, %r1917, 4, 14;
	cvt.u64.u32 	%rd90, %r1918;
	or.b64 	%rd70, %rd90, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n256k16.f32.f16.f16 {%r2483,%r2484,%r2485,%r2486,%r2487,%r2488,%r2489,%r2490,%r2491,%r2492,%r2493,%r2494,%r2495,%r2496,%r2497,%r2498,%r2499,%r2500,%r2501,%r2502,%r2503,%r2504,%r2505,%r2506,%r2507,%r2508,%r2509,%r2510,%r2511,%r2512,%r2513,%r2514,%r2515,%r2516,%r2517,%r2518,%r2519,%r2520,%r2521,%r2522,%r2523,%r2524,%r2525,%r2526,%r2527,%r2528,%r2529,%r2530,%r2531,%r2532,%r2533,%r2534,%r2535,%r2536,%r2537,%r2538,%r2539,%r2540,%r2541,%r2542,%r2543,%r2544,%r2545,%r2546,%r2547,%r2548,%r2549,%r2550,%r2551,%r2552,%r2553,%r2554,%r2555,%r2556,%r2557,%r2558,%r2559,%r2560,%r2561,%r2562,%r2563,%r2564,%r2565,%r2566,%r2567,%r2568,%r2569,%r2570,%r2571,%r2572,%r2573,%r2574,%r2575,%r2576,%r2577,%r2578,%r2579,%r2580,%r2581,%r2582,%r2583,%r2584,%r2585,%r2586,%r2587,%r2588,%r2589,%r2590,%r2591,%r2592,%r2593,%r2594,%r2595,%r2596,%r2597,%r2598,%r2599,%r2600,%r2601,%r2602,%r2603,%r2604,%r2605,%r2606,%r2607,%r2608,%r2609,%r2610}, %rd69, %rd70, %p22, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1919, %r1908, 96;
	bfe.u32 	%r1920, %r1919, 4, 14;
	cvt.u64.u32 	%rd91, %r1920;
	or.b64 	%rd71, %rd91, 4611686293372403712;
	add.s32 	%r1921, %r1739, 6144;
	bfe.u32 	%r1922, %r1921, 4, 14;
	cvt.u64.u32 	%rd92, %r1922;
	or.b64 	%rd72, %rd92, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n256k16.f32.f16.f16 {%r2483,%r2484,%r2485,%r2486,%r2487,%r2488,%r2489,%r2490,%r2491,%r2492,%r2493,%r2494,%r2495,%r2496,%r2497,%r2498,%r2499,%r2500,%r2501,%r2502,%r2503,%r2504,%r2505,%r2506,%r2507,%r2508,%r2509,%r2510,%r2511,%r2512,%r2513,%r2514,%r2515,%r2516,%r2517,%r2518,%r2519,%r2520,%r2521,%r2522,%r2523,%r2524,%r2525,%r2526,%r2527,%r2528,%r2529,%r2530,%r2531,%r2532,%r2533,%r2534,%r2535,%r2536,%r2537,%r2538,%r2539,%r2540,%r2541,%r2542,%r2543,%r2544,%r2545,%r2546,%r2547,%r2548,%r2549,%r2550,%r2551,%r2552,%r2553,%r2554,%r2555,%r2556,%r2557,%r2558,%r2559,%r2560,%r2561,%r2562,%r2563,%r2564,%r2565,%r2566,%r2567,%r2568,%r2569,%r2570,%r2571,%r2572,%r2573,%r2574,%r2575,%r2576,%r2577,%r2578,%r2579,%r2580,%r2581,%r2582,%r2583,%r2584,%r2585,%r2586,%r2587,%r2588,%r2589,%r2590,%r2591,%r2592,%r2593,%r2594,%r2595,%r2596,%r2597,%r2598,%r2599,%r2600,%r2601,%r2602,%r2603,%r2604,%r2605,%r2606,%r2607,%r2608,%r2609,%r2610}, %rd71, %rd72, %p22, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r1737, %r1871;
	mov.b32 	%r1738, %r1871;
	mov.b32 	%r1740, %r1871;
	mov.b32 	%r1741, %r1871;
	// begin inline asm
	// wait for regs: %r2483,%r2484,%r2485,%r2486,%r2487,%r2488,%r2489,%r2490,%r2491,%r2492,%r2493,%r2494,%r2495,%r2496,%r2497,%r2498,%r2499,%r2500,%r2501,%r2502,%r2503,%r2504,%r2505,%r2506,%r2507,%r2508,%r2509,%r2510,%r2511,%r2512,%r2513,%r2514,%r2515,%r2516,%r2517,%r2518,%r2519,%r2520,%r2521,%r2522,%r2523,%r2524,%r2525,%r2526,%r2527,%r2528,%r2529,%r2530,%r2531,%r2532,%r2533,%r2534,%r2535,%r2536,%r2537,%r2538,%r2539,%r2540,%r2541,%r2542,%r2543,%r2544,%r2545,%r2546,%r2547,%r2548,%r2549,%r2550,%r2551,%r2552,%r2553,%r2554,%r2555,%r2556,%r2557,%r2558,%r2559,%r2560,%r2561,%r2562,%r2563,%r2564,%r2565,%r2566,%r2567,%r2568,%r2569,%r2570,%r2571,%r2572,%r2573,%r2574,%r2575,%r2576,%r2577,%r2578,%r2579,%r2580,%r2581,%r2582,%r2583,%r2584,%r2585,%r2586,%r2587,%r2588,%r2589,%r2590,%r2591,%r2592,%r2593,%r2594,%r2595,%r2596,%r2597,%r2598,%r2599,%r2600,%r2601,%r2602,%r2603,%r2604,%r2605,%r2606,%r2607,%r2608,%r2609,%r2610,%r1736,%r1737,%r1738,%r1739,%r1740,%r1741
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 129 18                        // gated_mlp.py:129:18
	add.s64 	%rd77, %rd143, %rd19;
	add.s64 	%rd78, %rd143, %rd18;
	add.s64 	%rd79, %rd143, %rd17;
	add.s64 	%rd80, %rd143, %rd16;
	add.s64 	%rd81, %rd143, %rd15;
	add.s64 	%rd82, %rd143, %rd14;
	add.s64 	%rd83, %rd143, %rd13;
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s64 	%rd84, %rd143, %rd10;
	add.s32 	%r1923, %r2482, 1;
	setp.gt.s32 	%p28, %r1923, 2;
	selp.b32 	%r2482, 0, %r1923, %p28;
	.loc	1 123 51                        // gated_mlp.py:123:51
	setp.lt.s32 	%p29, %r6, %r2480;
	.loc	1 123 20                        // gated_mlp.py:123:20
	shl.b32 	%r1924, %r2482, 14;
	add.s32 	%r1925, %r524, %r1924;
	bar.sync 	0;
	add.s32 	%r1876, %r1925, %r522;
	add.s32 	%r1878, %r1925, %r529;
	add.s32 	%r1880, %r1925, %r534;
	add.s32 	%r1882, %r1925, %r539;
	selp.b32 	%r1930, 16, 0, %p29;
	selp.b32 	%r1879, %r1930, 0, %p26;
	// begin inline asm
	cp.async.cg.shared.global [ %r1876 + 0 ], [ %rd142 + 0 ], 0x10, %r1879;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1878 + 0 ], [ %rd142 + 0 ], 0x10, %r1879;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1880 + 0 ], [ %rd142 + 0 ], 0x10, %r1879;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1882 + 0 ], [ %rd142 + 0 ], 0x10, %r1879;
	// end inline asm
	cp.async.commit_group;
	.loc	1 124 51                        // gated_mlp.py:124:51
	setp.lt.s32 	%p30, %r13, %r2480;
	setp.lt.s32 	%p31, %r14, %r2480;
	setp.lt.s32 	%p32, %r15, %r2480;
	setp.lt.s32 	%p33, %r16, %r2480;
	setp.lt.s32 	%p34, %r17, %r2480;
	setp.lt.s32 	%p35, %r18, %r2480;
	setp.lt.s32 	%p36, %r19, %r2480;
	setp.lt.s32 	%p37, %r20, %r2480;
	.loc	1 124 20                        // gated_mlp.py:124:20
	shl.b32 	%r1931, %r2482, 15;
	add.s32 	%r1932, %r523, %r1931;
	add.s32 	%r1884, %r1932, %r551;
	add.s32 	%r1886, %r1932, %r553;
	add.s32 	%r1888, %r1932, %r555;
	add.s32 	%r1890, %r1932, %r557;
	add.s32 	%r1892, %r1932, %r560;
	add.s32 	%r1894, %r1932, %r562;
	add.s32 	%r1896, %r1932, %r564;
	add.s32 	%r1898, %r1932, %r566;
	selp.b32 	%r1941, 16, 0, %p30;
	selp.b32 	%r1885, %r1941, 0, %p26;
	// begin inline asm
	cp.async.cg.shared.global [ %r1884 + 0 ], [ %rd77 + 0 ], 0x10, %r1885;
	// end inline asm
	selp.b32 	%r1942, 16, 0, %p31;
	selp.b32 	%r1887, %r1942, 0, %p26;
	// begin inline asm
	cp.async.cg.shared.global [ %r1886 + 0 ], [ %rd78 + 0 ], 0x10, %r1887;
	// end inline asm
	selp.b32 	%r1943, 16, 0, %p32;
	selp.b32 	%r1889, %r1943, 0, %p26;
	// begin inline asm
	cp.async.cg.shared.global [ %r1888 + 0 ], [ %rd79 + 0 ], 0x10, %r1889;
	// end inline asm
	selp.b32 	%r1944, 16, 0, %p33;
	selp.b32 	%r1891, %r1944, 0, %p26;
	// begin inline asm
	cp.async.cg.shared.global [ %r1890 + 0 ], [ %rd80 + 0 ], 0x10, %r1891;
	// end inline asm
	selp.b32 	%r1945, 16, 0, %p34;
	selp.b32 	%r1893, %r1945, 0, %p26;
	// begin inline asm
	cp.async.cg.shared.global [ %r1892 + 0 ], [ %rd81 + 0 ], 0x10, %r1893;
	// end inline asm
	selp.b32 	%r1946, 16, 0, %p35;
	selp.b32 	%r1895, %r1946, 0, %p26;
	// begin inline asm
	cp.async.cg.shared.global [ %r1894 + 0 ], [ %rd82 + 0 ], 0x10, %r1895;
	// end inline asm
	selp.b32 	%r1947, 16, 0, %p36;
	selp.b32 	%r1897, %r1947, 0, %p26;
	// begin inline asm
	cp.async.cg.shared.global [ %r1896 + 0 ], [ %rd83 + 0 ], 0x10, %r1897;
	// end inline asm
	selp.b32 	%r1948, 16, 0, %p37;
	selp.b32 	%r1899, %r1948, 0, %p26;
	// begin inline asm
	cp.async.cg.shared.global [ %r1898 + 0 ], [ %rd84 + 0 ], 0x10, %r1899;
	// end inline asm
	cp.async.commit_group;
	.loc	1 120 22                        // gated_mlp.py:120:22
	add.s32 	%r2611, %r2611, 1;
	add.s64 	%rd143, %rd143, %rd12;
	add.s64 	%rd142, %rd142, 128;
	add.s32 	%r2480, %r2480, -64;
	setp.ne.s32 	%p38, %r21, %r2611;
	@%p38 bra 	$L__BB0_2;
$L__BB0_3:                              // %._crit_edge
	.loc	1 98 54                         // gated_mlp.py:98:54
	mul.lo.s32 	%r2349, %r4, %r2;
	sub.s32 	%r2350, %r3, %r2349;
	.loc	1 98 27                         // gated_mlp.py:98:27
	add.s32 	%r2351, %r2350, %r1;
	.loc	1 120 22                        // gated_mlp.py:120:22
	// begin inline asm
	// wait for regs: %r2483,%r2484,%r2485,%r2486,%r2487,%r2488,%r2489,%r2490,%r2491,%r2492,%r2493,%r2494,%r2495,%r2496,%r2497,%r2498,%r2499,%r2500,%r2501,%r2502,%r2503,%r2504,%r2505,%r2506,%r2507,%r2508,%r2509,%r2510,%r2511,%r2512,%r2513,%r2514,%r2515,%r2516,%r2517,%r2518,%r2519,%r2520,%r2521,%r2522,%r2523,%r2524,%r2525,%r2526,%r2527,%r2528,%r2529,%r2530,%r2531,%r2532,%r2533,%r2534,%r2535,%r2536,%r2537,%r2538,%r2539,%r2540,%r2541,%r2542,%r2543,%r2544,%r2545,%r2546,%r2547,%r2548,%r2549,%r2550,%r2551,%r2552,%r2553,%r2554,%r2555,%r2556,%r2557,%r2558,%r2559,%r2560,%r2561,%r2562,%r2563,%r2564,%r2565,%r2566,%r2567,%r2568,%r2569,%r2570,%r2571,%r2572,%r2573,%r2574,%r2575,%r2576,%r2577,%r2578,%r2579,%r2580,%r2581,%r2582,%r2583,%r2584,%r2585,%r2586,%r2587,%r2588,%r2589,%r2590,%r2591,%r2592,%r2593,%r2594,%r2595,%r2596,%r2597,%r2598,%r2599,%r2600,%r2601,%r2602,%r2603,%r2604,%r2605,%r2606,%r2607,%r2608,%r2609,%r2610
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 134 23                        // gated_mlp.py:134:23
	cvt.rn.f16x2.f32 	%r2206, %r2484, %r2483;
	cvt.rn.f16x2.f32 	%r2207, %r2486, %r2485;
	cvt.rn.f16x2.f32 	%r2208, %r2488, %r2487;
	cvt.rn.f16x2.f32 	%r2209, %r2490, %r2489;
	cvt.rn.f16x2.f32 	%r2211, %r2492, %r2491;
	cvt.rn.f16x2.f32 	%r2212, %r2494, %r2493;
	cvt.rn.f16x2.f32 	%r2213, %r2496, %r2495;
	cvt.rn.f16x2.f32 	%r2214, %r2498, %r2497;
	cvt.rn.f16x2.f32 	%r2216, %r2500, %r2499;
	cvt.rn.f16x2.f32 	%r2217, %r2502, %r2501;
	cvt.rn.f16x2.f32 	%r2218, %r2504, %r2503;
	cvt.rn.f16x2.f32 	%r2219, %r2506, %r2505;
	cvt.rn.f16x2.f32 	%r2221, %r2508, %r2507;
	cvt.rn.f16x2.f32 	%r2222, %r2510, %r2509;
	cvt.rn.f16x2.f32 	%r2223, %r2512, %r2511;
	cvt.rn.f16x2.f32 	%r2224, %r2514, %r2513;
	cvt.rn.f16x2.f32 	%r2226, %r2516, %r2515;
	cvt.rn.f16x2.f32 	%r2227, %r2518, %r2517;
	cvt.rn.f16x2.f32 	%r2228, %r2520, %r2519;
	cvt.rn.f16x2.f32 	%r2229, %r2522, %r2521;
	cvt.rn.f16x2.f32 	%r2231, %r2524, %r2523;
	cvt.rn.f16x2.f32 	%r2232, %r2526, %r2525;
	cvt.rn.f16x2.f32 	%r2233, %r2528, %r2527;
	cvt.rn.f16x2.f32 	%r2234, %r2530, %r2529;
	cvt.rn.f16x2.f32 	%r2236, %r2532, %r2531;
	cvt.rn.f16x2.f32 	%r2237, %r2534, %r2533;
	cvt.rn.f16x2.f32 	%r2238, %r2536, %r2535;
	cvt.rn.f16x2.f32 	%r2239, %r2538, %r2537;
	cvt.rn.f16x2.f32 	%r2241, %r2540, %r2539;
	cvt.rn.f16x2.f32 	%r2242, %r2542, %r2541;
	cvt.rn.f16x2.f32 	%r2243, %r2544, %r2543;
	cvt.rn.f16x2.f32 	%r2244, %r2546, %r2545;
	cvt.rn.f16x2.f32 	%r2246, %r2548, %r2547;
	cvt.rn.f16x2.f32 	%r2247, %r2550, %r2549;
	cvt.rn.f16x2.f32 	%r2248, %r2552, %r2551;
	cvt.rn.f16x2.f32 	%r2249, %r2554, %r2553;
	cvt.rn.f16x2.f32 	%r2251, %r2556, %r2555;
	cvt.rn.f16x2.f32 	%r2252, %r2558, %r2557;
	cvt.rn.f16x2.f32 	%r2253, %r2560, %r2559;
	cvt.rn.f16x2.f32 	%r2254, %r2562, %r2561;
	cvt.rn.f16x2.f32 	%r2256, %r2564, %r2563;
	cvt.rn.f16x2.f32 	%r2257, %r2566, %r2565;
	cvt.rn.f16x2.f32 	%r2258, %r2568, %r2567;
	cvt.rn.f16x2.f32 	%r2259, %r2570, %r2569;
	cvt.rn.f16x2.f32 	%r2261, %r2572, %r2571;
	cvt.rn.f16x2.f32 	%r2262, %r2574, %r2573;
	cvt.rn.f16x2.f32 	%r2263, %r2576, %r2575;
	cvt.rn.f16x2.f32 	%r2264, %r2578, %r2577;
	cvt.rn.f16x2.f32 	%r2266, %r2580, %r2579;
	cvt.rn.f16x2.f32 	%r2267, %r2582, %r2581;
	cvt.rn.f16x2.f32 	%r2268, %r2584, %r2583;
	cvt.rn.f16x2.f32 	%r2269, %r2586, %r2585;
	cvt.rn.f16x2.f32 	%r2271, %r2588, %r2587;
	cvt.rn.f16x2.f32 	%r2272, %r2590, %r2589;
	cvt.rn.f16x2.f32 	%r2273, %r2592, %r2591;
	cvt.rn.f16x2.f32 	%r2274, %r2594, %r2593;
	cvt.rn.f16x2.f32 	%r2276, %r2596, %r2595;
	cvt.rn.f16x2.f32 	%r2277, %r2598, %r2597;
	cvt.rn.f16x2.f32 	%r2278, %r2600, %r2599;
	cvt.rn.f16x2.f32 	%r2279, %r2602, %r2601;
	cvt.rn.f16x2.f32 	%r2281, %r2604, %r2603;
	cvt.rn.f16x2.f32 	%r2282, %r2606, %r2605;
	cvt.rn.f16x2.f32 	%r2283, %r2608, %r2607;
	cvt.rn.f16x2.f32 	%r2284, %r2610, %r2609;
	.loc	1 138 22                        // gated_mlp.py:138:22
	shl.b32 	%r2352, %r2351, 7;
	.loc	1 138 37                        // gated_mlp.py:138:37
	or.b32 	%r2353, %r2352, %r13;
	or.b32 	%r2354, %r2352, %r14;
	or.b32 	%r2355, %r2352, %r15;
	or.b32 	%r2356, %r2352, %r16;
	or.b32 	%r2357, %r2352, %r17;
	or.b32 	%r2358, %r2352, %r18;
	or.b32 	%r2359, %r2352, %r19;
	or.b32 	%r2360, %r2352, %r20;
	or.b32 	%r2361, %r10, %r2352;
	or.b32 	%r2362, %r2361, 88;
	or.b32 	%r2363, %r2361, 120;
	.loc	1 140 33                        // gated_mlp.py:140:33
	mul.lo.s32 	%r2364, %r2353, %r432;
	mul.lo.s32 	%r2365, %r2354, %r432;
	mul.lo.s32 	%r2366, %r2355, %r432;
	mul.lo.s32 	%r2367, %r2356, %r432;
	mul.lo.s32 	%r2368, %r2357, %r432;
	mul.lo.s32 	%r2369, %r2358, %r432;
	mul.lo.s32 	%r2370, %r2359, %r432;
	mul.lo.s32 	%r2371, %r2360, %r432;
	shl.b32 	%r2372, %r432, 6;
	add.s32 	%r2373, %r2364, %r2372;
	shl.b32 	%r2374, %r432, 3;
	add.s32 	%r2375, %r2373, %r2374;
	add.s32 	%r2376, %r2375, %r2374;
	mul.lo.s32 	%r2377, %r2362, %r432;
	shl.b32 	%r2378, %r432, 4;
	add.s32 	%r2379, %r2376, %r2378;
	add.s32 	%r2380, %r2379, %r2374;
	add.s32 	%r2381, %r2380, %r2374;
	mul.lo.s32 	%r2382, %r2363, %r432;
	.loc	1 140 21                        // gated_mlp.py:140:21
	mul.wide.s32 	%rd109, %r2364, 2;
	add.s64 	%rd110, %rd27, %rd109;
	mul.wide.s32 	%rd111, %r2365, 2;
	add.s64 	%rd112, %rd27, %rd111;
	mul.wide.s32 	%rd113, %r2366, 2;
	add.s64 	%rd114, %rd27, %rd113;
	mul.wide.s32 	%rd115, %r2367, 2;
	add.s64 	%rd116, %rd27, %rd115;
	mul.wide.s32 	%rd117, %r2368, 2;
	add.s64 	%rd118, %rd27, %rd117;
	mul.wide.s32 	%rd119, %r2369, 2;
	add.s64 	%rd120, %rd27, %rd119;
	mul.wide.s32 	%rd121, %r2370, 2;
	add.s64 	%rd122, %rd27, %rd121;
	mul.wide.s32 	%rd123, %r2371, 2;
	add.s64 	%rd124, %rd27, %rd123;
	mul.wide.s32 	%rd125, %r2373, 2;
	add.s64 	%rd126, %rd27, %rd125;
	mul.wide.s32 	%rd127, %r2375, 2;
	add.s64 	%rd128, %rd27, %rd127;
	mul.wide.s32 	%rd129, %r2376, 2;
	add.s64 	%rd130, %rd27, %rd129;
	mul.wide.s32 	%rd131, %r2377, 2;
	add.s64 	%rd132, %rd27, %rd131;
	mul.wide.s32 	%rd133, %r2379, 2;
	add.s64 	%rd134, %rd27, %rd133;
	mul.wide.s32 	%rd135, %r2380, 2;
	add.s64 	%rd136, %rd27, %rd135;
	mul.wide.s32 	%rd137, %r2381, 2;
	add.s64 	%rd138, %rd27, %rd137;
	mul.wide.s32 	%rd139, %r2382, 2;
	add.s64 	%rd140, %rd27, %rd139;
	.loc	1 140 52                        // gated_mlp.py:140:52
	mul.wide.s32 	%rd141, %r9, 2;
	add.s64 	%rd93, %rd110, %rd141;
	add.s64 	%rd94, %rd112, %rd141;
	add.s64 	%rd95, %rd114, %rd141;
	add.s64 	%rd96, %rd116, %rd141;
	add.s64 	%rd97, %rd118, %rd141;
	add.s64 	%rd98, %rd120, %rd141;
	add.s64 	%rd99, %rd122, %rd141;
	add.s64 	%rd100, %rd124, %rd141;
	add.s64 	%rd101, %rd126, %rd141;
	add.s64 	%rd102, %rd128, %rd141;
	add.s64 	%rd103, %rd130, %rd141;
	add.s64 	%rd104, %rd132, %rd141;
	add.s64 	%rd105, %rd134, %rd141;
	add.s64 	%rd106, %rd136, %rd141;
	add.s64 	%rd107, %rd138, %rd141;
	add.s64 	%rd108, %rd140, %rd141;
	.loc	1 141 33                        // gated_mlp.py:141:33
	setp.lt.s32 	%p55, %r2353, 1;
	setp.lt.s32 	%p56, %r2354, 1;
	setp.lt.s32 	%p57, %r2355, 1;
	setp.lt.s32 	%p58, %r2356, 1;
	setp.lt.s32 	%p59, %r2357, 1;
	setp.lt.s32 	%p60, %r2358, 1;
	setp.lt.s32 	%p61, %r2359, 1;
	setp.lt.s32 	%p62, %r2360, 1;
	setp.lt.s32 	%p63, %r2352, 0;
	.loc	1 141 58                        // gated_mlp.py:141:58
	setp.lt.s32 	%p64, %r9, %r430;
	.loc	1 141 39                        // gated_mlp.py:141:39
	and.pred 	%p39, %p64, %p55;
	and.pred 	%p40, %p64, %p56;
	and.pred 	%p41, %p64, %p57;
	and.pred 	%p42, %p64, %p58;
	and.pred 	%p43, %p64, %p59;
	and.pred 	%p44, %p64, %p60;
	and.pred 	%p45, %p64, %p61;
	and.pred 	%p46, %p64, %p62;
	and.pred 	%p47, %p64, %p63;
	.loc	1 142 21                        // gated_mlp.py:142:21
	shl.b32 	%r2383, %r5, 8;
	and.b32 	%r2384, %r2383, 3840;
	shr.u32 	%r2385, %r7, 1;
	or.b32 	%r2386, %r2384, %r2385;
	shl.b32 	%r2387, %r5, 7;
	and.b32 	%r2388, %r2387, 12288;
	or.b32 	%r2389, %r2386, %r2388;
	shl.b32 	%r2390, %r12, 7;
	or.b32 	%r2391, %r2389, %r2390;
	shl.b32 	%r2392, %r11, 3;
	or.b32 	%r2393, %r8, %r2392;
	or.b32 	%r2394, %r2393, %r22;
	or.b32 	%r2395, %r2394, %r23;
	shr.u32 	%r2396, %r2391, 4;
	add.s32 	%r2398, %r523, %r2396;
	shl.b32 	%r2399, %r2391, 1;
	add.s32 	%r2205, %r2398, %r2399;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r2205], {%r2206, %r2207, %r2208, %r2209};
	// end inline asm
	add.s32 	%r2210, %r2205, 32;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r2210], {%r2211, %r2212, %r2213, %r2214};
	// end inline asm
	add.s32 	%r2215, %r2205, 64;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r2215], {%r2216, %r2217, %r2218, %r2219};
	// end inline asm
	add.s32 	%r2220, %r2205, 96;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r2220], {%r2221, %r2222, %r2223, %r2224};
	// end inline asm
	add.s32 	%r2225, %r2205, 128;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r2225], {%r2226, %r2227, %r2228, %r2229};
	// end inline asm
	add.s32 	%r2230, %r2205, 160;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r2230], {%r2231, %r2232, %r2233, %r2234};
	// end inline asm
	add.s32 	%r2235, %r2205, 192;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r2235], {%r2236, %r2237, %r2238, %r2239};
	// end inline asm
	add.s32 	%r2240, %r2205, 224;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r2240], {%r2241, %r2242, %r2243, %r2244};
	// end inline asm
	add.s32 	%r2245, %r2205, 256;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r2245], {%r2246, %r2247, %r2248, %r2249};
	// end inline asm
	add.s32 	%r2250, %r2205, 288;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r2250], {%r2251, %r2252, %r2253, %r2254};
	// end inline asm
	add.s32 	%r2255, %r2205, 320;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r2255], {%r2256, %r2257, %r2258, %r2259};
	// end inline asm
	add.s32 	%r2260, %r2205, 352;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r2260], {%r2261, %r2262, %r2263, %r2264};
	// end inline asm
	add.s32 	%r2265, %r2205, 384;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r2265], {%r2266, %r2267, %r2268, %r2269};
	// end inline asm
	add.s32 	%r2270, %r2205, 416;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r2270], {%r2271, %r2272, %r2273, %r2274};
	// end inline asm
	add.s32 	%r2275, %r2205, 448;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r2275], {%r2276, %r2277, %r2278, %r2279};
	// end inline asm
	add.s32 	%r2280, %r2205, 480;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r2280], {%r2281, %r2282, %r2283, %r2284};
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r2400, %r2395, 4;
	and.b32 	%r2401, %r2400, 112;
	add.s32 	%r2402, %r523, %r2401;
	shl.b32 	%r2403, %r2395, 1;
	add.s32 	%r2404, %r2402, %r2403;
	ld.shared.v4.b32 	{%r2285, %r2286, %r2287, %r2288}, [%r2404];
	or.b32 	%r2405, %r2395, 2048;
	shr.u32 	%r2406, %r2405, 4;
	and.b32 	%r2407, %r2406, 134217712;
	add.s32 	%r2408, %r523, %r2407;
	add.s32 	%r2409, %r2408, %r2403;
	ld.shared.v4.b32 	{%r2289, %r2290, %r2291, %r2292}, [%r2409+4096];
	or.b32 	%r2410, %r2395, 4096;
	shr.u32 	%r2411, %r2410, 4;
	and.b32 	%r2412, %r2411, 134217712;
	add.s32 	%r2413, %r523, %r2412;
	add.s32 	%r2414, %r2413, %r2403;
	ld.shared.v4.b32 	{%r2293, %r2294, %r2295, %r2296}, [%r2414+8192];
	or.b32 	%r2415, %r2395, 6144;
	shr.u32 	%r2416, %r2415, 4;
	and.b32 	%r2417, %r2416, 134217712;
	add.s32 	%r2418, %r523, %r2417;
	add.s32 	%r2419, %r2418, %r2403;
	ld.shared.v4.b32 	{%r2297, %r2298, %r2299, %r2300}, [%r2419+12288];
	or.b32 	%r2420, %r2395, 8192;
	shr.u32 	%r2421, %r2420, 4;
	and.b32 	%r2422, %r2421, 134217712;
	add.s32 	%r2423, %r523, %r2422;
	add.s32 	%r2424, %r2423, %r2403;
	ld.shared.v4.b32 	{%r2301, %r2302, %r2303, %r2304}, [%r2424+16384];
	or.b32 	%r2425, %r2395, 10240;
	shr.u32 	%r2426, %r2425, 4;
	and.b32 	%r2427, %r2426, 134217712;
	add.s32 	%r2428, %r523, %r2427;
	add.s32 	%r2429, %r2428, %r2403;
	ld.shared.v4.b32 	{%r2305, %r2306, %r2307, %r2308}, [%r2429+20480];
	or.b32 	%r2430, %r2395, 12288;
	shr.u32 	%r2431, %r2430, 4;
	and.b32 	%r2432, %r2431, 134217712;
	add.s32 	%r2433, %r523, %r2432;
	add.s32 	%r2434, %r2433, %r2403;
	ld.shared.v4.b32 	{%r2309, %r2310, %r2311, %r2312}, [%r2434+24576];
	or.b32 	%r2435, %r2395, 14336;
	shr.u32 	%r2436, %r2435, 4;
	and.b32 	%r2437, %r2436, 134217712;
	add.s32 	%r2438, %r523, %r2437;
	add.s32 	%r2439, %r2438, %r2403;
	ld.shared.v4.b32 	{%r2313, %r2314, %r2315, %r2316}, [%r2439+28672];
	or.b32 	%r2440, %r2395, 16384;
	shr.u32 	%r2441, %r2440, 4;
	and.b32 	%r2442, %r2441, 134217712;
	add.s32 	%r2443, %r523, %r2442;
	add.s32 	%r2444, %r2443, %r2403;
	ld.shared.v4.b32 	{%r2317, %r2318, %r2319, %r2320}, [%r2444+32768];
	or.b32 	%r2445, %r2395, 18432;
	shr.u32 	%r2446, %r2445, 4;
	and.b32 	%r2447, %r2446, 134217712;
	add.s32 	%r2448, %r523, %r2447;
	add.s32 	%r2449, %r2448, %r2403;
	ld.shared.v4.b32 	{%r2321, %r2322, %r2323, %r2324}, [%r2449+36864];
	or.b32 	%r2450, %r2395, 20480;
	shr.u32 	%r2451, %r2450, 4;
	and.b32 	%r2452, %r2451, 134217712;
	add.s32 	%r2453, %r523, %r2452;
	add.s32 	%r2454, %r2453, %r2403;
	ld.shared.v4.b32 	{%r2325, %r2326, %r2327, %r2328}, [%r2454+40960];
	or.b32 	%r2455, %r2395, 22528;
	shr.u32 	%r2456, %r2455, 4;
	and.b32 	%r2457, %r2456, 134217712;
	add.s32 	%r2458, %r523, %r2457;
	add.s32 	%r2459, %r2458, %r2403;
	ld.shared.v4.b32 	{%r2329, %r2330, %r2331, %r2332}, [%r2459+45056];
	or.b32 	%r2460, %r2395, 24576;
	shr.u32 	%r2461, %r2460, 4;
	and.b32 	%r2462, %r2461, 134217712;
	add.s32 	%r2463, %r523, %r2462;
	add.s32 	%r2464, %r2463, %r2403;
	ld.shared.v4.b32 	{%r2333, %r2334, %r2335, %r2336}, [%r2464+49152];
	or.b32 	%r2465, %r2395, 26624;
	shr.u32 	%r2466, %r2465, 4;
	and.b32 	%r2467, %r2466, 134217712;
	add.s32 	%r2468, %r523, %r2467;
	add.s32 	%r2469, %r2468, %r2403;
	ld.shared.v4.b32 	{%r2337, %r2338, %r2339, %r2340}, [%r2469+53248];
	or.b32 	%r2470, %r2395, 28672;
	shr.u32 	%r2471, %r2470, 4;
	and.b32 	%r2472, %r2471, 134217712;
	add.s32 	%r2473, %r523, %r2472;
	add.s32 	%r2474, %r2473, %r2403;
	ld.shared.v4.b32 	{%r2341, %r2342, %r2343, %r2344}, [%r2474+57344];
	or.b32 	%r2475, %r2395, 30720;
	shr.u32 	%r2476, %r2475, 4;
	and.b32 	%r2477, %r2476, 134217712;
	add.s32 	%r2478, %r523, %r2477;
	add.s32 	%r2479, %r2478, %r2403;
	ld.shared.v4.b32 	{%r2345, %r2346, %r2347, %r2348}, [%r2479+61440];
	// begin inline asm
	@%p39 st.global.v4.b32 [ %rd93 + 0 ], { %r2285, %r2286, %r2287, %r2288 };
	// end inline asm
	// begin inline asm
	@%p40 st.global.v4.b32 [ %rd94 + 0 ], { %r2289, %r2290, %r2291, %r2292 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.v4.b32 [ %rd95 + 0 ], { %r2293, %r2294, %r2295, %r2296 };
	// end inline asm
	// begin inline asm
	@%p42 st.global.v4.b32 [ %rd96 + 0 ], { %r2297, %r2298, %r2299, %r2300 };
	// end inline asm
	// begin inline asm
	@%p43 st.global.v4.b32 [ %rd97 + 0 ], { %r2301, %r2302, %r2303, %r2304 };
	// end inline asm
	// begin inline asm
	@%p44 st.global.v4.b32 [ %rd98 + 0 ], { %r2305, %r2306, %r2307, %r2308 };
	// end inline asm
	// begin inline asm
	@%p45 st.global.v4.b32 [ %rd99 + 0 ], { %r2309, %r2310, %r2311, %r2312 };
	// end inline asm
	// begin inline asm
	@%p46 st.global.v4.b32 [ %rd100 + 0 ], { %r2313, %r2314, %r2315, %r2316 };
	// end inline asm
	// begin inline asm
	@%p47 st.global.v4.b32 [ %rd101 + 0 ], { %r2317, %r2318, %r2319, %r2320 };
	// end inline asm
	// begin inline asm
	@%p47 st.global.v4.b32 [ %rd102 + 0 ], { %r2321, %r2322, %r2323, %r2324 };
	// end inline asm
	// begin inline asm
	@%p47 st.global.v4.b32 [ %rd103 + 0 ], { %r2325, %r2326, %r2327, %r2328 };
	// end inline asm
	// begin inline asm
	@%p47 st.global.v4.b32 [ %rd104 + 0 ], { %r2329, %r2330, %r2331, %r2332 };
	// end inline asm
	// begin inline asm
	@%p47 st.global.v4.b32 [ %rd105 + 0 ], { %r2333, %r2334, %r2335, %r2336 };
	// end inline asm
	// begin inline asm
	@%p47 st.global.v4.b32 [ %rd106 + 0 ], { %r2337, %r2338, %r2339, %r2340 };
	// end inline asm
	// begin inline asm
	@%p47 st.global.v4.b32 [ %rd107 + 0 ], { %r2341, %r2342, %r2343, %r2344 };
	// end inline asm
	// begin inline asm
	@%p47 st.global.v4.b32 [ %rd108 + 0 ], { %r2345, %r2346, %r2347, %r2348 };
	// end inline asm
	.loc	1 142 4                         // gated_mlp.py:142:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/ubuntu/PTX_dataset/triton_ptx/gated_mlp.py"
	.file	2 "/home/joy/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 157                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x96 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 103                                 // DW_AT_name
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 109
.b8 108
.b8 112
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 117
.b8 98
.b8 117
.b8 110
.b8 116
.b8 117
.b8 47
.b8 80
.b8 84
.b8 88
.b8 95
.b8 100
.b8 97
.b8 116
.b8 97
.b8 115
.b8 101
.b8 116
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 116
.b8 120
.b8 0
.b8 2                                   // Abbrev [2] 0x4a:0x10 DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x5a:0x46 DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 74                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x6f:0x18 DW_TAG_inlined_subroutine
.b32 74                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 93                                  // DW_AT_call_line
.b8 27                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x87:0x18 DW_TAG_inlined_subroutine
.b32 74                                 // DW_AT_abstract_origin
.b64 $L__tmp3                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 120                                 // DW_AT_call_line
.b8 33                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
