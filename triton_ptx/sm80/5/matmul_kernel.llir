; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @matmul_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = add i32 %3, 31, !dbg !9
  %12 = sdiv i32 %11, 32, !dbg !13
  %13 = shl nsw i32 %12, 3, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %14 = sdiv i32 %10, %.frozen, !dbg !15
  %15 = shl i32 %14, 3, !dbg !16
  %16 = sub i32 1, %15, !dbg !17
  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 8), !dbg !18
  %18 = mul i32 %14, %.frozen, !dbg !19
  %.decomposed = sub i32 %10, %18, !dbg !19
  %19 = sdiv i32 %.decomposed, %17, !dbg !20
  %20 = shl i32 %19, 5, !dbg !21
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !22
  %22 = shl nuw nsw i32 %21, 3, !dbg !22
  %23 = and i32 %22, 24, !dbg !22
  %24 = or disjoint i32 %20, %23, !dbg !23
  %25 = srem i32 %24, %3, !dbg !24
  %26 = zext nneg i32 %23 to i64, !dbg !25
  %27 = getelementptr half, ptr addrspace(1) %0, i64 %26, !dbg !25
  %28 = and i32 %21, 4, !dbg !26
  %29 = and i32 %21, 8, !dbg !26
  %30 = and i32 %21, 16, !dbg !26
  %31 = and i32 %21, 32, !dbg !26
  %32 = and i32 %21, 64, !dbg !26
  %33 = lshr i32 %21, 2, !dbg !26
  %34 = and i32 %33, 31, !dbg !26
  %35 = mul i32 %6, %34, !dbg !27
  %36 = add i32 %25, %35, !dbg !28
  %37 = sext i32 %36 to i64, !dbg !29
  %38 = getelementptr half, ptr addrspace(1) %1, i64 %37, !dbg !29
  %39 = add i32 %4, 31, !dbg !30
  %40 = sdiv i32 %39, 32, !dbg !32
  %41 = shl i32 %6, 5, !dbg !33
  %42 = icmp sgt i32 %39, 31, !dbg !34
  %43 = icmp slt i32 %23, %4, !dbg !35
  %44 = and i1 %43, %42, !dbg !34
  %45 = xor i32 %22, %21, !dbg !36
  %46 = and i32 %45, 24, !dbg !36
  %47 = shl nuw nsw i32 %34, 5, !dbg !36
  %48 = or disjoint i32 %47, %46, !dbg !36
  %49 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %48, !dbg !36
  %50 = or disjoint i32 %48, 1024, !dbg !36
  %51 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %50, !dbg !36
  %52 = or disjoint i32 %48, 2048, !dbg !36
  %53 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %52, !dbg !36
  %54 = or disjoint i32 %48, 3072, !dbg !36
  %55 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %54, !dbg !36
  %56 = select i1 %44, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %49, ptr addrspace(1) %27, i32 %56) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %51, ptr addrspace(1) %27, i32 %56) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %53, ptr addrspace(1) %27, i32 %56) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %55, ptr addrspace(1) %27, i32 %56) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %57 = icmp slt i32 %34, %4, !dbg !37
  %58 = and i1 %57, %42, !dbg !34
  %59 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %48, !dbg !38
  %60 = select i1 %58, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %59, ptr addrspace(1) %38, i32 %60) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %61 = icmp sgt i32 %39, 63, !dbg !34
  %62 = getelementptr i8, ptr addrspace(1) %27, i64 64, !dbg !39
  %63 = sext i32 %41 to i64, !dbg !40
  %64 = getelementptr half, ptr addrspace(1) %38, i64 %63, !dbg !40
  %65 = add i32 %4, -32, !dbg !41
  %66 = icmp slt i32 %23, %65, !dbg !35
  %67 = and i1 %61, %66, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %68 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %48, !dbg !36
  %69 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %50, !dbg !36
  %70 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %52, !dbg !36
  %71 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %54, !dbg !36
  %72 = select i1 %67, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %68, ptr addrspace(1) %62, i32 %72) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %69, ptr addrspace(1) %62, i32 %72) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %70, ptr addrspace(1) %62, i32 %72) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %71, ptr addrspace(1) %62, i32 %72) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %73 = icmp slt i32 %34, %65, !dbg !37
  %74 = and i1 %61, %73, !dbg !34
  %75 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26624), i32 %48, !dbg !38
  %76 = select i1 %74, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %75, ptr addrspace(1) %64, i32 %76) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %77 = icmp sgt i32 %39, 95, !dbg !34
  %78 = getelementptr i8, ptr addrspace(1) %27, i64 128, !dbg !39
  %79 = getelementptr half, ptr addrspace(1) %64, i64 %63, !dbg !40
  %80 = add i32 %4, -64, !dbg !41
  %81 = icmp slt i32 %23, %80, !dbg !35
  %82 = and i1 %77, %81, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %83 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %48, !dbg !36
  %84 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %50, !dbg !36
  %85 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %52, !dbg !36
  %86 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %54, !dbg !36
  %87 = select i1 %82, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %83, ptr addrspace(1) %78, i32 %87) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %84, ptr addrspace(1) %78, i32 %87) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %85, ptr addrspace(1) %78, i32 %87) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %86, ptr addrspace(1) %78, i32 %87) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %88 = icmp slt i32 %34, %80, !dbg !37
  %89 = and i1 %77, %88, !dbg !34
  %90 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 28672), i32 %48, !dbg !38
  %91 = select i1 %89, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %90, ptr addrspace(1) %79, i32 %91) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  br i1 %42, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !34

.._crit_edge_crit_edge:                           ; preds = %9
  %.pre = shl nuw nsw i32 %31, 4, !dbg !42
  %.pre168 = shl nuw nsw i32 %32, 4, !dbg !42
  br label %._crit_edge, !dbg !34

.lr.ph:                                           ; preds = %9
  %.not = icmp eq i32 %28, 0, !dbg !26
  %92 = and i32 %21, 2, !dbg !22
  %93 = icmp eq i32 %92, 0, !dbg !22
  %94 = add nsw i32 %40, -3
  %95 = shl nuw nsw i32 %21, 5
  %96 = and i32 %95, 32
  %97 = select i1 %93, i32 0, i32 72
  %98 = or disjoint i32 %97, %96
  %99 = select i1 %.not, i32 0, i32 144
  %100 = or disjoint i32 %98, %99
  %101 = shl nuw nsw i32 %29, 5
  %102 = or disjoint i32 %100, %101
  %103 = lshr exact i32 %30, 1
  %104 = xor i32 %102, %103
  %105 = shl nuw nsw i32 %31, 4
  %106 = or disjoint i32 %104, %105
  %107 = shl nuw nsw i32 %32, 4
  %108 = xor i32 %106, %107
  %109 = xor i32 %108, 16
  %110 = xor i32 %108, 2048
  %111 = xor i32 %108, 2064
  %112 = and i32 %95, 768
  %113 = or disjoint i32 %100, %112
  %114 = xor i32 %113, 8
  %115 = xor i32 %113, 16
  %116 = xor i32 %113, 24
  %.neg161 = add nsw i32 %4, -96
  br label %117, !dbg !34

117:                                              ; preds = %.lr.ph, %117
  %118 = phi i32 [ -1, %.lr.ph ], [ %156, %117 ]
  %119 = phi i32 [ 2, %.lr.ph ], [ %299, %117 ]
  %.pn80166 = phi ptr addrspace(1) [ %79, %.lr.ph ], [ %296, %117 ]
  %.pn16165 = phi ptr addrspace(1) [ %78, %.lr.ph ], [ %295, %117 ]
  %120 = phi float [ 0.000000e+00, %.lr.ph ], [ %256, %117 ]
  %121 = phi float [ 0.000000e+00, %.lr.ph ], [ %257, %117 ]
  %122 = phi float [ 0.000000e+00, %.lr.ph ], [ %258, %117 ]
  %123 = phi float [ 0.000000e+00, %.lr.ph ], [ %259, %117 ]
  %124 = phi float [ 0.000000e+00, %.lr.ph ], [ %261, %117 ]
  %125 = phi float [ 0.000000e+00, %.lr.ph ], [ %262, %117 ]
  %126 = phi float [ 0.000000e+00, %.lr.ph ], [ %263, %117 ]
  %127 = phi float [ 0.000000e+00, %.lr.ph ], [ %264, %117 ]
  %128 = phi float [ 0.000000e+00, %.lr.ph ], [ %266, %117 ]
  %129 = phi float [ 0.000000e+00, %.lr.ph ], [ %267, %117 ]
  %130 = phi float [ 0.000000e+00, %.lr.ph ], [ %268, %117 ]
  %131 = phi float [ 0.000000e+00, %.lr.ph ], [ %269, %117 ]
  %132 = phi float [ 0.000000e+00, %.lr.ph ], [ %271, %117 ]
  %133 = phi float [ 0.000000e+00, %.lr.ph ], [ %272, %117 ]
  %134 = phi float [ 0.000000e+00, %.lr.ph ], [ %273, %117 ]
  %135 = phi float [ 0.000000e+00, %.lr.ph ], [ %274, %117 ]
  %136 = phi float [ 0.000000e+00, %.lr.ph ], [ %276, %117 ]
  %137 = phi float [ 0.000000e+00, %.lr.ph ], [ %277, %117 ]
  %138 = phi float [ 0.000000e+00, %.lr.ph ], [ %278, %117 ]
  %139 = phi float [ 0.000000e+00, %.lr.ph ], [ %279, %117 ]
  %140 = phi float [ 0.000000e+00, %.lr.ph ], [ %281, %117 ]
  %141 = phi float [ 0.000000e+00, %.lr.ph ], [ %282, %117 ]
  %142 = phi float [ 0.000000e+00, %.lr.ph ], [ %283, %117 ]
  %143 = phi float [ 0.000000e+00, %.lr.ph ], [ %284, %117 ]
  %144 = phi float [ 0.000000e+00, %.lr.ph ], [ %286, %117 ]
  %145 = phi float [ 0.000000e+00, %.lr.ph ], [ %287, %117 ]
  %146 = phi float [ 0.000000e+00, %.lr.ph ], [ %288, %117 ]
  %147 = phi float [ 0.000000e+00, %.lr.ph ], [ %289, %117 ]
  %148 = phi float [ 0.000000e+00, %.lr.ph ], [ %291, %117 ]
  %149 = phi float [ 0.000000e+00, %.lr.ph ], [ %292, %117 ]
  %150 = phi float [ 0.000000e+00, %.lr.ph ], [ %293, %117 ]
  %151 = phi float [ 0.000000e+00, %.lr.ph ], [ %294, %117 ]
  %152 = phi i32 [ 0, %.lr.ph ], [ %313, %117 ]
  %153 = icmp slt i32 %152, %94, !dbg !34
  %154 = add i32 %118, 1, !dbg !34
  %155 = icmp sgt i32 %154, 2, !dbg !34
  %156 = select i1 %155, i32 0, i32 %154, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 4), !dbg !36
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %.idx = shl i32 %156, 13, !dbg !36
  %157 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !36
  %158 = getelementptr inbounds nuw half, ptr addrspace(3) %157, i32 %108, !dbg !36
  %159 = ptrtoint ptr addrspace(3) %158 to i32, !dbg !36
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %159) #2, !dbg !36
  %161 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !36
  %162 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !36
  %163 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !36
  %164 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !36
  %165 = getelementptr inbounds nuw half, ptr addrspace(3) %157, i32 %109, !dbg !36
  %166 = ptrtoint ptr addrspace(3) %165 to i32, !dbg !36
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %166) #2, !dbg !36
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !36
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !36
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !36
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !36
  %172 = getelementptr inbounds nuw half, ptr addrspace(3) %157, i32 %110, !dbg !36
  %173 = ptrtoint ptr addrspace(3) %172 to i32, !dbg !36
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %173) #2, !dbg !36
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !36
  %176 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !36
  %177 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !36
  %178 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !36
  %179 = getelementptr inbounds nuw half, ptr addrspace(3) %157, i32 %111, !dbg !36
  %180 = ptrtoint ptr addrspace(3) %179 to i32, !dbg !36
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %180) #2, !dbg !36
  %182 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !36
  %183 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !36
  %184 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !36
  %185 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !36
  %.idx127 = shl i32 %156, 11, !dbg !38
  %186 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %.idx127, !dbg !38
  %187 = getelementptr inbounds nuw half, ptr addrspace(3) %186, i32 %113, !dbg !38
  %188 = ptrtoint ptr addrspace(3) %187 to i32, !dbg !38
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %188) #2, !dbg !38
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !38
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !38
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !38
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !38
  %194 = getelementptr inbounds nuw half, ptr addrspace(3) %186, i32 %114, !dbg !38
  %195 = ptrtoint ptr addrspace(3) %194 to i32, !dbg !38
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %195) #2, !dbg !38
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !38
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !38
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !38
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !38
  %201 = getelementptr inbounds nuw half, ptr addrspace(3) %186, i32 %115, !dbg !38
  %202 = ptrtoint ptr addrspace(3) %201 to i32, !dbg !38
  %203 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %202) #2, !dbg !38
  %204 = extractvalue { i32, i32, i32, i32 } %203, 0, !dbg !38
  %205 = extractvalue { i32, i32, i32, i32 } %203, 1, !dbg !38
  %206 = extractvalue { i32, i32, i32, i32 } %203, 2, !dbg !38
  %207 = extractvalue { i32, i32, i32, i32 } %203, 3, !dbg !38
  %208 = getelementptr inbounds nuw half, ptr addrspace(3) %186, i32 %116, !dbg !38
  %209 = ptrtoint ptr addrspace(3) %208 to i32, !dbg !38
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %209) #2, !dbg !38
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !38
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !38
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !38
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !38
  %215 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %120, float %121, float %122, float %123, i32 %161, i32 %162, i32 %163, i32 %164, i32 %190, i32 %191) #2, !dbg !43
  %216 = extractvalue { float, float, float, float } %215, 0, !dbg !43
  %217 = extractvalue { float, float, float, float } %215, 1, !dbg !43
  %218 = extractvalue { float, float, float, float } %215, 2, !dbg !43
  %219 = extractvalue { float, float, float, float } %215, 3, !dbg !43
  %220 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %124, float %125, float %126, float %127, i32 %161, i32 %162, i32 %163, i32 %164, i32 %197, i32 %198) #2, !dbg !43
  %221 = extractvalue { float, float, float, float } %220, 0, !dbg !43
  %222 = extractvalue { float, float, float, float } %220, 1, !dbg !43
  %223 = extractvalue { float, float, float, float } %220, 2, !dbg !43
  %224 = extractvalue { float, float, float, float } %220, 3, !dbg !43
  %225 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %128, float %129, float %130, float %131, i32 %161, i32 %162, i32 %163, i32 %164, i32 %204, i32 %205) #2, !dbg !43
  %226 = extractvalue { float, float, float, float } %225, 0, !dbg !43
  %227 = extractvalue { float, float, float, float } %225, 1, !dbg !43
  %228 = extractvalue { float, float, float, float } %225, 2, !dbg !43
  %229 = extractvalue { float, float, float, float } %225, 3, !dbg !43
  %230 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %132, float %133, float %134, float %135, i32 %161, i32 %162, i32 %163, i32 %164, i32 %211, i32 %212) #2, !dbg !43
  %231 = extractvalue { float, float, float, float } %230, 0, !dbg !43
  %232 = extractvalue { float, float, float, float } %230, 1, !dbg !43
  %233 = extractvalue { float, float, float, float } %230, 2, !dbg !43
  %234 = extractvalue { float, float, float, float } %230, 3, !dbg !43
  %235 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %136, float %137, float %138, float %139, i32 %175, i32 %176, i32 %177, i32 %178, i32 %190, i32 %191) #2, !dbg !43
  %236 = extractvalue { float, float, float, float } %235, 0, !dbg !43
  %237 = extractvalue { float, float, float, float } %235, 1, !dbg !43
  %238 = extractvalue { float, float, float, float } %235, 2, !dbg !43
  %239 = extractvalue { float, float, float, float } %235, 3, !dbg !43
  %240 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %140, float %141, float %142, float %143, i32 %175, i32 %176, i32 %177, i32 %178, i32 %197, i32 %198) #2, !dbg !43
  %241 = extractvalue { float, float, float, float } %240, 0, !dbg !43
  %242 = extractvalue { float, float, float, float } %240, 1, !dbg !43
  %243 = extractvalue { float, float, float, float } %240, 2, !dbg !43
  %244 = extractvalue { float, float, float, float } %240, 3, !dbg !43
  %245 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %144, float %145, float %146, float %147, i32 %175, i32 %176, i32 %177, i32 %178, i32 %204, i32 %205) #2, !dbg !43
  %246 = extractvalue { float, float, float, float } %245, 0, !dbg !43
  %247 = extractvalue { float, float, float, float } %245, 1, !dbg !43
  %248 = extractvalue { float, float, float, float } %245, 2, !dbg !43
  %249 = extractvalue { float, float, float, float } %245, 3, !dbg !43
  %250 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %148, float %149, float %150, float %151, i32 %175, i32 %176, i32 %177, i32 %178, i32 %211, i32 %212) #2, !dbg !43
  %251 = extractvalue { float, float, float, float } %250, 0, !dbg !43
  %252 = extractvalue { float, float, float, float } %250, 1, !dbg !43
  %253 = extractvalue { float, float, float, float } %250, 2, !dbg !43
  %254 = extractvalue { float, float, float, float } %250, 3, !dbg !43
  %255 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %216, float %217, float %218, float %219, i32 %168, i32 %169, i32 %170, i32 %171, i32 %192, i32 %193) #2, !dbg !43
  %256 = extractvalue { float, float, float, float } %255, 0, !dbg !43
  %257 = extractvalue { float, float, float, float } %255, 1, !dbg !43
  %258 = extractvalue { float, float, float, float } %255, 2, !dbg !43
  %259 = extractvalue { float, float, float, float } %255, 3, !dbg !43
  %260 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %221, float %222, float %223, float %224, i32 %168, i32 %169, i32 %170, i32 %171, i32 %199, i32 %200) #2, !dbg !43
  %261 = extractvalue { float, float, float, float } %260, 0, !dbg !43
  %262 = extractvalue { float, float, float, float } %260, 1, !dbg !43
  %263 = extractvalue { float, float, float, float } %260, 2, !dbg !43
  %264 = extractvalue { float, float, float, float } %260, 3, !dbg !43
  %265 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %226, float %227, float %228, float %229, i32 %168, i32 %169, i32 %170, i32 %171, i32 %206, i32 %207) #2, !dbg !43
  %266 = extractvalue { float, float, float, float } %265, 0, !dbg !43
  %267 = extractvalue { float, float, float, float } %265, 1, !dbg !43
  %268 = extractvalue { float, float, float, float } %265, 2, !dbg !43
  %269 = extractvalue { float, float, float, float } %265, 3, !dbg !43
  %270 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %231, float %232, float %233, float %234, i32 %168, i32 %169, i32 %170, i32 %171, i32 %213, i32 %214) #2, !dbg !43
  %271 = extractvalue { float, float, float, float } %270, 0, !dbg !43
  %272 = extractvalue { float, float, float, float } %270, 1, !dbg !43
  %273 = extractvalue { float, float, float, float } %270, 2, !dbg !43
  %274 = extractvalue { float, float, float, float } %270, 3, !dbg !43
  %275 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %236, float %237, float %238, float %239, i32 %182, i32 %183, i32 %184, i32 %185, i32 %192, i32 %193) #2, !dbg !43
  %276 = extractvalue { float, float, float, float } %275, 0, !dbg !43
  %277 = extractvalue { float, float, float, float } %275, 1, !dbg !43
  %278 = extractvalue { float, float, float, float } %275, 2, !dbg !43
  %279 = extractvalue { float, float, float, float } %275, 3, !dbg !43
  %280 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %241, float %242, float %243, float %244, i32 %182, i32 %183, i32 %184, i32 %185, i32 %199, i32 %200) #2, !dbg !43
  %281 = extractvalue { float, float, float, float } %280, 0, !dbg !43
  %282 = extractvalue { float, float, float, float } %280, 1, !dbg !43
  %283 = extractvalue { float, float, float, float } %280, 2, !dbg !43
  %284 = extractvalue { float, float, float, float } %280, 3, !dbg !43
  %285 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %246, float %247, float %248, float %249, i32 %182, i32 %183, i32 %184, i32 %185, i32 %206, i32 %207) #2, !dbg !43
  %286 = extractvalue { float, float, float, float } %285, 0, !dbg !43
  %287 = extractvalue { float, float, float, float } %285, 1, !dbg !43
  %288 = extractvalue { float, float, float, float } %285, 2, !dbg !43
  %289 = extractvalue { float, float, float, float } %285, 3, !dbg !43
  %290 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %251, float %252, float %253, float %254, i32 %182, i32 %183, i32 %184, i32 %185, i32 %213, i32 %214) #2, !dbg !43
  %291 = extractvalue { float, float, float, float } %290, 0, !dbg !43
  %292 = extractvalue { float, float, float, float } %290, 1, !dbg !43
  %293 = extractvalue { float, float, float, float } %290, 2, !dbg !43
  %294 = extractvalue { float, float, float, float } %290, 3, !dbg !43
  %295 = getelementptr i8, ptr addrspace(1) %.pn16165, i64 64, !dbg !39
  %296 = getelementptr half, ptr addrspace(1) %.pn80166, i64 %63, !dbg !40
  %297 = add i32 %119, 1, !dbg !34
  %298 = icmp sgt i32 %297, 2, !dbg !34
  %299 = select i1 %298, i32 0, i32 %297, !dbg !34
  %300 = shl i32 %152, 5, !dbg !41
  %301 = sub i32 %.neg161, %300, !dbg !41
  %302 = icmp slt i32 %23, %301, !dbg !35
  %.idx128 = shl i32 %299, 13, !dbg !36
  %303 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx128, !dbg !36
  %304 = and i1 %153, %302, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %305 = getelementptr inbounds nuw half, ptr addrspace(3) %303, i32 %48, !dbg !36
  %306 = getelementptr inbounds nuw half, ptr addrspace(3) %303, i32 %50, !dbg !36
  %307 = getelementptr inbounds nuw half, ptr addrspace(3) %303, i32 %52, !dbg !36
  %308 = getelementptr inbounds nuw half, ptr addrspace(3) %303, i32 %54, !dbg !36
  %309 = select i1 %304, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %305, ptr addrspace(1) %295, i32 %309) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %306, ptr addrspace(1) %295, i32 %309) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %307, ptr addrspace(1) %295, i32 %309) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %308, ptr addrspace(1) %295, i32 %309) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %310 = icmp slt i32 %34, %301, !dbg !37
  %.idx129 = shl i32 %299, 11, !dbg !38
  %311 = and i1 %153, %310, !dbg !34
  %gep = getelementptr i8, ptr addrspace(3) %59, i32 %.idx129, !dbg !38
  %312 = select i1 %311, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %296, i32 %312) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %313 = add nuw nsw i32 %152, 1, !dbg !34
  %exitcond.not = icmp eq i32 %313, %40, !dbg !34
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %117, !dbg !34

._crit_edge.loopexit:                             ; preds = %117
  %314 = insertelement <32 x float> poison, float %256, i64 0, !dbg !44
  %315 = insertelement <32 x float> %314, float %257, i64 1, !dbg !44
  %316 = insertelement <32 x float> %315, float %258, i64 2, !dbg !44
  %317 = insertelement <32 x float> %316, float %259, i64 3, !dbg !44
  %318 = insertelement <32 x float> %317, float %261, i64 4, !dbg !44
  %319 = insertelement <32 x float> %318, float %262, i64 5, !dbg !44
  %320 = insertelement <32 x float> %319, float %263, i64 6, !dbg !44
  %321 = insertelement <32 x float> %320, float %264, i64 7, !dbg !44
  %322 = insertelement <32 x float> %321, float %266, i64 8, !dbg !44
  %323 = insertelement <32 x float> %322, float %267, i64 9, !dbg !44
  %324 = insertelement <32 x float> %323, float %268, i64 10, !dbg !44
  %325 = insertelement <32 x float> %324, float %269, i64 11, !dbg !44
  %326 = insertelement <32 x float> %325, float %271, i64 12, !dbg !44
  %327 = insertelement <32 x float> %326, float %272, i64 13, !dbg !44
  %328 = insertelement <32 x float> %327, float %273, i64 14, !dbg !44
  %329 = insertelement <32 x float> %328, float %274, i64 15, !dbg !44
  %330 = insertelement <32 x float> %329, float %276, i64 16, !dbg !44
  %331 = insertelement <32 x float> %330, float %277, i64 17, !dbg !44
  %332 = insertelement <32 x float> %331, float %278, i64 18, !dbg !44
  %333 = insertelement <32 x float> %332, float %279, i64 19, !dbg !44
  %334 = insertelement <32 x float> %333, float %281, i64 20, !dbg !44
  %335 = insertelement <32 x float> %334, float %282, i64 21, !dbg !44
  %336 = insertelement <32 x float> %335, float %283, i64 22, !dbg !44
  %337 = insertelement <32 x float> %336, float %284, i64 23, !dbg !44
  %338 = insertelement <32 x float> %337, float %286, i64 24, !dbg !44
  %339 = insertelement <32 x float> %338, float %287, i64 25, !dbg !44
  %340 = insertelement <32 x float> %339, float %288, i64 26, !dbg !44
  %341 = insertelement <32 x float> %340, float %289, i64 27, !dbg !44
  %342 = insertelement <32 x float> %341, float %291, i64 28, !dbg !44
  %343 = insertelement <32 x float> %342, float %292, i64 29, !dbg !44
  %344 = insertelement <32 x float> %343, float %293, i64 30, !dbg !44
  %345 = insertelement <32 x float> %344, float %294, i64 31, !dbg !44
  %346 = fptrunc <32 x float> %345 to <32 x half>, !dbg !44
  br label %._crit_edge, !dbg !45

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.._crit_edge_crit_edge
  %.pre-phi169 = phi i32 [ %.pre168, %.._crit_edge_crit_edge ], [ %107, %._crit_edge.loopexit ], !dbg !42
  %.pre-phi = phi i32 [ %.pre, %.._crit_edge_crit_edge ], [ %105, %._crit_edge.loopexit ], !dbg !42
  %347 = phi <32 x half> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %346, %._crit_edge.loopexit ]
  %348 = mul i32 %19, %17, !dbg !45
  %.decomposed264 = sub i32 %.decomposed, %348, !dbg !45
  %349 = add i32 %.decomposed264, %15, !dbg !46
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %350 = shl i32 %349, 7, !dbg !47
  %351 = or disjoint i32 %350, %34, !dbg !48
  %352 = or disjoint i32 %351, 32, !dbg !48
  %353 = or disjoint i32 %351, 64, !dbg !48
  %354 = or disjoint i32 %351, 96, !dbg !48
  %355 = mul i32 %351, %7, !dbg !49
  %356 = mul i32 %352, %7, !dbg !49
  %357 = mul i32 %353, %7, !dbg !49
  %358 = mul i32 %354, %7, !dbg !49
  %359 = sext i32 %355 to i64, !dbg !50
  %360 = getelementptr half, ptr addrspace(1) %2, i64 %359, !dbg !50
  %361 = sext i32 %356 to i64, !dbg !50
  %362 = getelementptr half, ptr addrspace(1) %2, i64 %361, !dbg !50
  %363 = sext i32 %357 to i64, !dbg !50
  %364 = getelementptr half, ptr addrspace(1) %2, i64 %363, !dbg !50
  %365 = sext i32 %358 to i64, !dbg !50
  %366 = getelementptr half, ptr addrspace(1) %2, i64 %365, !dbg !50
  %367 = sext i32 %24 to i64, !dbg !51
  %368 = getelementptr half, ptr addrspace(1) %360, i64 %367, !dbg !51
  %369 = getelementptr half, ptr addrspace(1) %362, i64 %367, !dbg !51
  %370 = getelementptr half, ptr addrspace(1) %364, i64 %367, !dbg !51
  %371 = getelementptr half, ptr addrspace(1) %366, i64 %367, !dbg !51
  %372 = icmp slt i32 %351, 1, !dbg !52
  %373 = icmp slt i32 %350, 0, !dbg !52
  %374 = icmp slt i32 %24, %3, !dbg !53
  %375 = and i1 %374, %372, !dbg !54
  %376 = and i1 %374, %373, !dbg !54
  %377 = shl nuw nsw i32 %21, 1, !dbg !42
  %378 = and i32 %377, 6, !dbg !42
  %379 = shl nuw nsw i32 %28, 3, !dbg !42
  %380 = shl nuw nsw i32 %29, 3, !dbg !42
  %381 = shl nuw nsw i32 %30, 3, !dbg !42
  %382 = or disjoint i32 %378, %.pre-phi, !dbg !42
  %383 = or disjoint i32 %382, %379, !dbg !42
  %384 = or disjoint i32 %383, %380, !dbg !42
  %385 = or disjoint i32 %384, %381, !dbg !42
  %386 = xor i32 %385, %.pre-phi169, !dbg !42
  %387 = and i32 %22, 824, !dbg !42
  %388 = or disjoint i32 %380, %387, !dbg !42
  %389 = or disjoint i32 %388, %381, !dbg !42
  %390 = lshr i32 %386, 2, !dbg !42
  %391 = and i32 %390, 1073741816, !dbg !42
  %392 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %391, !dbg !42
  %393 = getelementptr inbounds nuw half, ptr addrspace(3) %392, i32 %386, !dbg !42
  %394 = shufflevector <32 x half> %347, <32 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !42
  store <2 x half> %394, ptr addrspace(3) %393, align 4, !dbg !42
  %395 = xor i32 %386, 256, !dbg !42
  %396 = lshr i32 %395, 2, !dbg !42
  %397 = and i32 %396, 1073741816, !dbg !42
  %398 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %397, !dbg !42
  %399 = getelementptr inbounds nuw half, ptr addrspace(3) %398, i32 %395, !dbg !42
  %400 = shufflevector <32 x half> %347, <32 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !42
  store <2 x half> %400, ptr addrspace(3) %399, align 4, !dbg !42
  %401 = xor i32 %386, 8, !dbg !42
  %402 = getelementptr inbounds nuw half, ptr addrspace(3) %392, i32 %401, !dbg !42
  %403 = shufflevector <32 x half> %347, <32 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !42
  store <2 x half> %403, ptr addrspace(3) %402, align 4, !dbg !42
  %404 = xor i32 %386, 264, !dbg !42
  %405 = lshr i32 %404, 2, !dbg !42
  %406 = and i32 %405, 1073741816, !dbg !42
  %407 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %406, !dbg !42
  %408 = getelementptr inbounds nuw half, ptr addrspace(3) %407, i32 %404, !dbg !42
  %409 = shufflevector <32 x half> %347, <32 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !42
  store <2 x half> %409, ptr addrspace(3) %408, align 4, !dbg !42
  %410 = xor i32 %386, 16, !dbg !42
  %411 = getelementptr inbounds nuw half, ptr addrspace(3) %392, i32 %410, !dbg !42
  %412 = shufflevector <32 x half> %347, <32 x half> poison, <2 x i32> <i32 8, i32 9>, !dbg !42
  store <2 x half> %412, ptr addrspace(3) %411, align 4, !dbg !42
  %413 = xor i32 %386, 272, !dbg !42
  %414 = lshr i32 %413, 2, !dbg !42
  %415 = and i32 %414, 1073741816, !dbg !42
  %416 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %415, !dbg !42
  %417 = getelementptr inbounds nuw half, ptr addrspace(3) %416, i32 %413, !dbg !42
  %418 = shufflevector <32 x half> %347, <32 x half> poison, <2 x i32> <i32 10, i32 11>, !dbg !42
  store <2 x half> %418, ptr addrspace(3) %417, align 4, !dbg !42
  %419 = xor i32 %386, 24, !dbg !42
  %420 = getelementptr inbounds nuw half, ptr addrspace(3) %392, i32 %419, !dbg !42
  %421 = shufflevector <32 x half> %347, <32 x half> poison, <2 x i32> <i32 12, i32 13>, !dbg !42
  store <2 x half> %421, ptr addrspace(3) %420, align 4, !dbg !42
  %422 = xor i32 %386, 280, !dbg !42
  %423 = lshr i32 %422, 2, !dbg !42
  %424 = and i32 %423, 1073741816, !dbg !42
  %425 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %424, !dbg !42
  %426 = getelementptr inbounds nuw half, ptr addrspace(3) %425, i32 %422, !dbg !42
  %427 = shufflevector <32 x half> %347, <32 x half> poison, <2 x i32> <i32 14, i32 15>, !dbg !42
  store <2 x half> %427, ptr addrspace(3) %426, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %428 = lshr exact i32 %389, 2, !dbg !42
  %429 = and i32 %428, 248, !dbg !42
  %430 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %429, !dbg !42
  %431 = getelementptr inbounds nuw half, ptr addrspace(3) %430, i32 %389, !dbg !42
  %432 = load <4 x i32>, ptr addrspace(3) %431, align 16, !dbg !42
  %433 = or disjoint i32 %389, 1024, !dbg !42
  %434 = lshr exact i32 %433, 2, !dbg !42
  %435 = and i32 %434, 536870904, !dbg !42
  %436 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %435, !dbg !42
  %437 = getelementptr inbounds nuw half, ptr addrspace(3) %436, i32 %433, !dbg !42
  %438 = load <4 x i32>, ptr addrspace(3) %437, align 16, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %439 = shufflevector <32 x half> %347, <32 x half> poison, <2 x i32> <i32 16, i32 17>, !dbg !42
  store <2 x half> %439, ptr addrspace(3) %393, align 4, !dbg !42
  %440 = shufflevector <32 x half> %347, <32 x half> poison, <2 x i32> <i32 18, i32 19>, !dbg !42
  store <2 x half> %440, ptr addrspace(3) %399, align 4, !dbg !42
  %441 = shufflevector <32 x half> %347, <32 x half> poison, <2 x i32> <i32 20, i32 21>, !dbg !42
  store <2 x half> %441, ptr addrspace(3) %402, align 4, !dbg !42
  %442 = shufflevector <32 x half> %347, <32 x half> poison, <2 x i32> <i32 22, i32 23>, !dbg !42
  store <2 x half> %442, ptr addrspace(3) %408, align 4, !dbg !42
  %443 = shufflevector <32 x half> %347, <32 x half> poison, <2 x i32> <i32 24, i32 25>, !dbg !42
  store <2 x half> %443, ptr addrspace(3) %411, align 4, !dbg !42
  %444 = shufflevector <32 x half> %347, <32 x half> poison, <2 x i32> <i32 26, i32 27>, !dbg !42
  store <2 x half> %444, ptr addrspace(3) %417, align 4, !dbg !42
  %445 = shufflevector <32 x half> %347, <32 x half> poison, <2 x i32> <i32 28, i32 29>, !dbg !42
  store <2 x half> %445, ptr addrspace(3) %420, align 4, !dbg !42
  %446 = shufflevector <32 x half> %347, <32 x half> poison, <2 x i32> <i32 30, i32 31>, !dbg !42
  store <2 x half> %446, ptr addrspace(3) %426, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %447 = load <4 x i32>, ptr addrspace(3) %431, align 16, !dbg !42
  %448 = load <4 x i32>, ptr addrspace(3) %437, align 16, !dbg !42
  %.extract = extractelement <4 x i32> %432, i64 0, !dbg !42
  %.extract132 = extractelement <4 x i32> %432, i64 1, !dbg !42
  %.extract134 = extractelement <4 x i32> %432, i64 2, !dbg !42
  %.extract136 = extractelement <4 x i32> %432, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract132, i32 %.extract134, i32 %.extract136, ptr addrspace(1) %368, i1 %375) #2, !dbg !42
  %.extract138 = extractelement <4 x i32> %438, i64 0, !dbg !42
  %.extract140 = extractelement <4 x i32> %438, i64 1, !dbg !42
  %.extract142 = extractelement <4 x i32> %438, i64 2, !dbg !42
  %.extract144 = extractelement <4 x i32> %438, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract138, i32 %.extract140, i32 %.extract142, i32 %.extract144, ptr addrspace(1) %369, i1 %376) #2, !dbg !42
  %.extract146 = extractelement <4 x i32> %447, i64 0, !dbg !42
  %.extract148 = extractelement <4 x i32> %447, i64 1, !dbg !42
  %.extract150 = extractelement <4 x i32> %447, i64 2, !dbg !42
  %.extract152 = extractelement <4 x i32> %447, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract146, i32 %.extract148, i32 %.extract150, i32 %.extract152, ptr addrspace(1) %370, i1 %376) #2, !dbg !42
  %.extract154 = extractelement <4 x i32> %448, i64 0, !dbg !42
  %.extract156 = extractelement <4 x i32> %448, i64 1, !dbg !42
  %.extract158 = extractelement <4 x i32> %448, i64 2, !dbg !42
  %.extract160 = extractelement <4 x i32> %448, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract154, i32 %.extract156, i32 %.extract158, i32 %.extract160, ptr addrspace(1) %371, i1 %376) #2, !dbg !42
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "gated_mlp.py", directory: "/home/ubuntu/anjiang/PTX_dataset/triton_ptx")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !1, file: !1, line: 68, type: !6, scopeLine: 68, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 91, column: 24, scope: !5)
!9 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !12)
!10 = distinct !DILexicalBlockFile(scope: !5, file: !11, discriminator: 0)
!11 = !DIFile(filename: "standard.py", directory: "/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language")
!12 = !DILocation(line: 93, column: 27, scope: !5)
!13 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !12)
!14 = !DILocation(line: 94, column: 38, scope: !5)
!15 = !DILocation(line: 95, column: 22, scope: !5)
!16 = !DILocation(line: 96, column: 29, scope: !5)
!17 = !DILocation(line: 97, column: 35, scope: !5)
!18 = !DILocation(line: 97, column: 48, scope: !5)
!19 = !DILocation(line: 98, column: 34, scope: !5)
!20 = !DILocation(line: 99, column: 40, scope: !5)
!21 = !DILocation(line: 109, column: 23, scope: !5)
!22 = !DILocation(line: 109, column: 51, scope: !5)
!23 = !DILocation(line: 109, column: 38, scope: !5)
!24 = !DILocation(line: 109, column: 68, scope: !5)
!25 = !DILocation(line: 111, column: 22, scope: !5)
!26 = !DILocation(line: 112, column: 29, scope: !5)
!27 = !DILocation(line: 112, column: 40, scope: !5)
!28 = !DILocation(line: 112, column: 52, scope: !5)
!29 = !DILocation(line: 112, column: 22, scope: !5)
!30 = !DILocation(line: 40, column: 22, scope: !10, inlinedAt: !31)
!31 = !DILocation(line: 120, column: 33, scope: !5)
!32 = !DILocation(line: 40, column: 28, scope: !10, inlinedAt: !31)
!33 = !DILocation(line: 129, column: 33, scope: !5)
!34 = !DILocation(line: 120, column: 22, scope: !5)
!35 = !DILocation(line: 123, column: 51, scope: !5)
!36 = !DILocation(line: 123, column: 20, scope: !5)
!37 = !DILocation(line: 124, column: 51, scope: !5)
!38 = !DILocation(line: 124, column: 20, scope: !5)
!39 = !DILocation(line: 128, column: 18, scope: !5)
!40 = !DILocation(line: 129, column: 18, scope: !5)
!41 = !DILocation(line: 123, column: 55, scope: !5)
!42 = !DILocation(line: 142, column: 21, scope: !5)
!43 = !DILocation(line: 126, column: 35, scope: !5)
!44 = !DILocation(line: 134, column: 23, scope: !5)
!45 = !DILocation(line: 98, column: 54, scope: !5)
!46 = !DILocation(line: 98, column: 27, scope: !5)
!47 = !DILocation(line: 138, column: 22, scope: !5)
!48 = !DILocation(line: 138, column: 37, scope: !5)
!49 = !DILocation(line: 140, column: 33, scope: !5)
!50 = !DILocation(line: 140, column: 21, scope: !5)
!51 = !DILocation(line: 140, column: 52, scope: !5)
!52 = !DILocation(line: 141, column: 33, scope: !5)
!53 = !DILocation(line: 141, column: 58, scope: !5)
!54 = !DILocation(line: 141, column: 39, scope: !5)
!55 = !DILocation(line: 142, column: 4, scope: !5)
