; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @_attn_fwd(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, float %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, ptr addrspace(1) readnone captures(none) %19) local_unnamed_addr #0 !dbg !5 {
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %.frozen = freeze i32 %18, !dbg !10
  %23 = sdiv i32 %22, %.frozen, !dbg !10
  %24 = mul i32 %23, %.frozen, !dbg !11
  %.decomposed = sub i32 %22, %24, !dbg !11
  %25 = sext i32 %23 to i64, !dbg !12
  %26 = sext i32 %6 to i64, !dbg !13
  %27 = mul nsw i64 %25, %26, !dbg !13
  %28 = zext nneg i32 %.decomposed to i64, !dbg !14
  %29 = sext i32 %7 to i64, !dbg !15
  %30 = mul nsw i64 %28, %29, !dbg !15
  %31 = add nsw i64 %30, %27, !dbg !16
  %32 = getelementptr half, ptr addrspace(1) %0, i64 %31, !dbg !17
  %33 = shl i32 %21, 8, !dbg !18
  %34 = sext i32 %8 to i64, !dbg !19
  %35 = sext i32 %33 to i64, !dbg !19
  %36 = getelementptr half, ptr addrspace(1) %2, i64 %31, !dbg !20
  %37 = sext i32 %14 to i64, !dbg !21
  %38 = getelementptr half, ptr addrspace(1) %1, i64 %31, !dbg !22
  %39 = sext i32 %11 to i64, !dbg !23
  %40 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %41 = and i32 %40, 16, !dbg !24
  %42 = lshr i32 %40, 3, !dbg !24
  %43 = and i32 %42, 31, !dbg !24
  %44 = or disjoint i32 %43, 32, !dbg !24
  %45 = or disjoint i32 %43, 64, !dbg !24
  %46 = or i32 %42, 96, !dbg !24
  %47 = or disjoint i32 %43, 128, !dbg !24
  %48 = or disjoint i32 %43, 160, !dbg !24
  %49 = or disjoint i32 %43, 192, !dbg !24
  %50 = or i32 %42, 224, !dbg !24
  %51 = and i32 %40, 4, !dbg !24
  %.not8 = icmp eq i32 %51, 0, !dbg !24
  %52 = fmul float %3, 0x3FF7154760000000, !dbg !25
  %53 = zext nneg i32 %43 to i64, !dbg !26
  %54 = zext nneg i32 %44 to i64, !dbg !26
  %55 = zext nneg i32 %45 to i64, !dbg !26
  %56 = zext nneg i32 %46 to i64, !dbg !26
  %57 = zext nneg i32 %47 to i64, !dbg !26
  %58 = zext nneg i32 %48 to i64, !dbg !26
  %59 = zext nneg i32 %49 to i64, !dbg !26
  %60 = zext nneg i32 %50 to i64, !dbg !26
  %61 = or disjoint i64 %53, %35, !dbg !26
  %62 = or disjoint i64 %54, %35, !dbg !26
  %63 = or disjoint i64 %55, %35, !dbg !26
  %64 = or disjoint i64 %56, %35, !dbg !26
  %65 = or disjoint i64 %57, %35, !dbg !26
  %66 = or disjoint i64 %58, %35, !dbg !26
  %67 = or disjoint i64 %59, %35, !dbg !26
  %68 = or disjoint i64 %60, %35, !dbg !26
  %69 = mul nsw i64 %61, %34, !dbg !26
  %70 = mul nsw i64 %62, %34, !dbg !26
  %71 = mul nsw i64 %63, %34, !dbg !26
  %72 = mul nsw i64 %64, %34, !dbg !26
  %73 = mul nsw i64 %65, %34, !dbg !26
  %74 = mul nsw i64 %66, %34, !dbg !26
  %75 = mul nsw i64 %67, %34, !dbg !26
  %76 = mul nsw i64 %68, %34, !dbg !26
  %77 = shl nuw nsw i32 %40, 3, !dbg !26
  %78 = and i32 %77, 56, !dbg !26
  %79 = zext nneg i32 %78 to i64, !dbg !26
  %80 = getelementptr half, ptr addrspace(1) %32, i64 %69, !dbg !26
  %81 = getelementptr half, ptr addrspace(1) %80, i64 %79, !dbg !26
  %82 = getelementptr half, ptr addrspace(1) %32, i64 %70, !dbg !26
  %83 = getelementptr half, ptr addrspace(1) %82, i64 %79, !dbg !26
  %84 = getelementptr half, ptr addrspace(1) %32, i64 %71, !dbg !26
  %85 = getelementptr half, ptr addrspace(1) %84, i64 %79, !dbg !26
  %86 = getelementptr half, ptr addrspace(1) %32, i64 %72, !dbg !26
  %87 = getelementptr half, ptr addrspace(1) %86, i64 %79, !dbg !26
  %88 = getelementptr half, ptr addrspace(1) %32, i64 %73, !dbg !26
  %89 = getelementptr half, ptr addrspace(1) %88, i64 %79, !dbg !26
  %90 = getelementptr half, ptr addrspace(1) %32, i64 %74, !dbg !26
  %91 = getelementptr half, ptr addrspace(1) %90, i64 %79, !dbg !26
  %92 = getelementptr half, ptr addrspace(1) %32, i64 %75, !dbg !26
  %93 = getelementptr half, ptr addrspace(1) %92, i64 %79, !dbg !26
  %94 = getelementptr half, ptr addrspace(1) %32, i64 %76, !dbg !26
  %95 = getelementptr half, ptr addrspace(1) %94, i64 %79, !dbg !26
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %81) #2, !dbg !26
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !26
  %98 = bitcast i32 %97 to <2 x half>, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !26
  %100 = bitcast i32 %99 to <2 x half>, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !26
  %102 = bitcast i32 %101 to <2 x half>, !dbg !26
  %103 = shufflevector <2 x half> %102, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %104 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !26
  %105 = bitcast i32 %104 to <2 x half>, !dbg !26
  %106 = shufflevector <2 x half> %105, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %83) #2, !dbg !26
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !26
  %109 = bitcast i32 %108 to <2 x half>, !dbg !26
  %110 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !26
  %111 = bitcast i32 %110 to <2 x half>, !dbg !26
  %112 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !26
  %113 = bitcast i32 %112 to <2 x half>, !dbg !26
  %114 = shufflevector <2 x half> %113, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %115 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !26
  %116 = bitcast i32 %115 to <2 x half>, !dbg !26
  %117 = shufflevector <2 x half> %116, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %85) #2, !dbg !26
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !26
  %120 = bitcast i32 %119 to <2 x half>, !dbg !26
  %121 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !26
  %122 = bitcast i32 %121 to <2 x half>, !dbg !26
  %123 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !26
  %124 = bitcast i32 %123 to <2 x half>, !dbg !26
  %125 = shufflevector <2 x half> %124, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %126 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !26
  %127 = bitcast i32 %126 to <2 x half>, !dbg !26
  %128 = shufflevector <2 x half> %127, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %87) #2, !dbg !26
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !26
  %131 = bitcast i32 %130 to <2 x half>, !dbg !26
  %132 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !26
  %133 = bitcast i32 %132 to <2 x half>, !dbg !26
  %134 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !26
  %135 = bitcast i32 %134 to <2 x half>, !dbg !26
  %136 = shufflevector <2 x half> %135, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %137 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !26
  %138 = bitcast i32 %137 to <2 x half>, !dbg !26
  %139 = shufflevector <2 x half> %138, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %89) #2, !dbg !26
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !26
  %142 = bitcast i32 %141 to <2 x half>, !dbg !26
  %143 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !26
  %144 = bitcast i32 %143 to <2 x half>, !dbg !26
  %145 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !26
  %146 = bitcast i32 %145 to <2 x half>, !dbg !26
  %147 = shufflevector <2 x half> %146, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %148 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !26
  %149 = bitcast i32 %148 to <2 x half>, !dbg !26
  %150 = shufflevector <2 x half> %149, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %91) #2, !dbg !26
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !26
  %153 = bitcast i32 %152 to <2 x half>, !dbg !26
  %154 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !26
  %155 = bitcast i32 %154 to <2 x half>, !dbg !26
  %156 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !26
  %157 = bitcast i32 %156 to <2 x half>, !dbg !26
  %158 = shufflevector <2 x half> %157, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %159 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !26
  %160 = bitcast i32 %159 to <2 x half>, !dbg !26
  %161 = shufflevector <2 x half> %160, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %93) #2, !dbg !26
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !26
  %164 = bitcast i32 %163 to <2 x half>, !dbg !26
  %165 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !26
  %166 = bitcast i32 %165 to <2 x half>, !dbg !26
  %167 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !26
  %168 = bitcast i32 %167 to <2 x half>, !dbg !26
  %169 = shufflevector <2 x half> %168, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %170 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !26
  %171 = bitcast i32 %170 to <2 x half>, !dbg !26
  %172 = shufflevector <2 x half> %171, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %95) #2, !dbg !26
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !26
  %175 = bitcast i32 %174 to <2 x half>, !dbg !26
  %176 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !26
  %177 = bitcast i32 %176 to <2 x half>, !dbg !26
  %178 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !26
  %179 = bitcast i32 %178 to <2 x half>, !dbg !26
  %180 = shufflevector <2 x half> %179, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %181 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !26
  %182 = bitcast i32 %181 to <2 x half>, !dbg !26
  %183 = shufflevector <2 x half> %182, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %184 = xor i32 %77, %40, !dbg !26
  %185 = and i32 %184, 56, !dbg !26
  %186 = shl nuw nsw i32 %43, 6, !dbg !26
  %187 = or disjoint i32 %186, %185, !dbg !26
  %188 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %187, !dbg !26
  %189 = shufflevector <2 x half> %98, <2 x half> %100, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %190 = shufflevector <8 x half> %189, <8 x half> %103, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %191 = shufflevector <8 x half> %190, <8 x half> %106, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %191, ptr addrspace(3) %188, align 16, !dbg !26
  %192 = or disjoint i32 %187, 2048, !dbg !26
  %193 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %192, !dbg !26
  %194 = shufflevector <2 x half> %109, <2 x half> %111, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %195 = shufflevector <8 x half> %194, <8 x half> %114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %196 = shufflevector <8 x half> %195, <8 x half> %117, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %196, ptr addrspace(3) %193, align 16, !dbg !26
  %197 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %185, !dbg !26
  %198 = shl nuw nsw i32 %43, 7, !dbg !26
  %199 = getelementptr inbounds nuw i8, ptr addrspace(3) %197, i32 %198, !dbg !26
  %200 = getelementptr inbounds nuw i8, ptr addrspace(3) %199, i32 8192, !dbg !26
  %201 = shufflevector <2 x half> %120, <2 x half> %122, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %202 = shufflevector <8 x half> %201, <8 x half> %125, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %203 = shufflevector <8 x half> %202, <8 x half> %128, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %203, ptr addrspace(3) %200, align 16, !dbg !26
  %204 = getelementptr inbounds nuw i8, ptr addrspace(3) %199, i32 12288, !dbg !26
  %205 = shufflevector <2 x half> %131, <2 x half> %133, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %206 = shufflevector <8 x half> %205, <8 x half> %136, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %207 = shufflevector <8 x half> %206, <8 x half> %139, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %207, ptr addrspace(3) %204, align 16, !dbg !26
  %208 = getelementptr inbounds nuw i8, ptr addrspace(3) %199, i32 16384, !dbg !26
  %209 = shufflevector <2 x half> %142, <2 x half> %144, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %210 = shufflevector <8 x half> %209, <8 x half> %147, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %211 = shufflevector <8 x half> %210, <8 x half> %150, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %211, ptr addrspace(3) %208, align 16, !dbg !26
  %212 = getelementptr inbounds nuw i8, ptr addrspace(3) %199, i32 20480, !dbg !26
  %213 = shufflevector <2 x half> %153, <2 x half> %155, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %214 = shufflevector <8 x half> %213, <8 x half> %158, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %215 = shufflevector <8 x half> %214, <8 x half> %161, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %215, ptr addrspace(3) %212, align 16, !dbg !26
  %216 = getelementptr inbounds nuw i8, ptr addrspace(3) %199, i32 24576, !dbg !26
  %217 = shufflevector <2 x half> %164, <2 x half> %166, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %218 = shufflevector <8 x half> %217, <8 x half> %169, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %219 = shufflevector <8 x half> %218, <8 x half> %172, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %219, ptr addrspace(3) %216, align 16, !dbg !26
  %220 = getelementptr inbounds nuw i8, ptr addrspace(3) %199, i32 28672, !dbg !26
  %221 = shufflevector <2 x half> %175, <2 x half> %177, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %222 = shufflevector <8 x half> %221, <8 x half> %180, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %223 = shufflevector <8 x half> %222, <8 x half> %183, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %223, ptr addrspace(3) %220, align 16, !dbg !26
  %224 = mul nsw i64 %39, %53, !dbg !27
  %225 = mul nsw i64 %39, %54, !dbg !27
  %226 = getelementptr half, ptr addrspace(1) %38, i64 %224, !dbg !27
  %227 = getelementptr half, ptr addrspace(1) %226, i64 %79, !dbg !27
  %228 = getelementptr half, ptr addrspace(1) %38, i64 %225, !dbg !27
  %229 = getelementptr half, ptr addrspace(1) %228, i64 %79, !dbg !27
  %230 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %187, !dbg !27
  %231 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %192, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %230, ptr addrspace(1) %227, i32 16) #2, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %231, ptr addrspace(1) %229, i32 16) #2, !dbg !27
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !27
  %232 = mul nsw i64 %37, %53, !dbg !30
  %233 = mul nsw i64 %37, %54, !dbg !30
  %234 = getelementptr half, ptr addrspace(1) %36, i64 %232, !dbg !30
  %235 = getelementptr half, ptr addrspace(1) %234, i64 %79, !dbg !30
  %236 = getelementptr half, ptr addrspace(1) %36, i64 %233, !dbg !30
  %237 = getelementptr half, ptr addrspace(1) %236, i64 %79, !dbg !30
  %238 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %187, !dbg !30
  %239 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %192, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %238, ptr addrspace(1) %235, i32 16) #2, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %239, ptr addrspace(1) %237, i32 16) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %240 = or disjoint i64 %53, 64, !dbg !27
  %241 = or disjoint i64 %54, 64, !dbg !27
  %242 = mul nsw i64 %240, %39, !dbg !27
  %243 = mul nsw i64 %241, %39, !dbg !27
  %244 = getelementptr half, ptr addrspace(1) %38, i64 %242, !dbg !27
  %245 = getelementptr half, ptr addrspace(1) %244, i64 %79, !dbg !27
  %246 = getelementptr half, ptr addrspace(1) %38, i64 %243, !dbg !27
  %247 = getelementptr half, ptr addrspace(1) %246, i64 %79, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %248 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %187, !dbg !27
  %249 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %192, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %248, ptr addrspace(1) %245, i32 16) #2, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %249, ptr addrspace(1) %247, i32 16) #2, !dbg !27
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !27
  %250 = mul nsw i64 %240, %37, !dbg !30
  %251 = mul nsw i64 %241, %37, !dbg !30
  %252 = getelementptr half, ptr addrspace(1) %36, i64 %250, !dbg !30
  %253 = getelementptr half, ptr addrspace(1) %252, i64 %79, !dbg !30
  %254 = getelementptr half, ptr addrspace(1) %36, i64 %251, !dbg !30
  %255 = getelementptr half, ptr addrspace(1) %254, i64 %79, !dbg !30
  %256 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %187, !dbg !30
  %257 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %192, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %256, ptr addrspace(1) %253, i32 16) #2, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %257, ptr addrspace(1) %255, i32 16) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %invariant.gep = getelementptr half, ptr addrspace(1) %38, i64 %79, !dbg !31
  %invariant.gep465 = getelementptr half, ptr addrspace(1) %36, i64 %79, !dbg !31
  %258 = and i32 %40, 3
  %259 = mul nuw nsw i32 %258, 72
  %260 = select i1 %.not8, i32 0, i32 288
  %261 = xor i32 %260, %259
  %262 = shl nuw nsw i32 %40, 6
  %263 = and i32 %262, 512
  %264 = or disjoint i32 %261, %263
  %265 = lshr exact i32 %41, 1
  %266 = xor i32 %264, %265
  %267 = shl nuw nsw i32 %40, 5
  %268 = and i32 %267, 1024
  %269 = or disjoint i32 %266, %268
  %270 = and i32 %267, 6144
  %271 = xor i32 %269, %270
  %272 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %271
  %273 = ptrtoint ptr addrspace(3) %272 to i32
  %274 = xor i32 %271, 16
  %275 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %274
  %276 = ptrtoint ptr addrspace(3) %275 to i32
  %277 = xor i32 %271, 32
  %278 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %277
  %279 = ptrtoint ptr addrspace(3) %278 to i32
  %280 = xor i32 %271, 48
  %281 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %280
  %282 = ptrtoint ptr addrspace(3) %281 to i32
  %283 = xor i32 %271, 8192
  %284 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %283
  %285 = ptrtoint ptr addrspace(3) %284 to i32
  %286 = xor i32 %271, 8208
  %287 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %286
  %288 = ptrtoint ptr addrspace(3) %287 to i32
  %289 = xor i32 %271, 8224
  %290 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %289
  %291 = ptrtoint ptr addrspace(3) %290 to i32
  %292 = xor i32 %271, 8240
  %293 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %292
  %294 = ptrtoint ptr addrspace(3) %293 to i32
  %and.ra = and i32 %40, 24
  %295 = xor i32 %261, %and.ra
  %296 = xor i32 %295, 32
  %297 = xor i32 %295, 544
  %298 = xor i32 %295, 1056
  %299 = xor i32 %295, 1568
  %300 = xor i32 %295, 2080
  %301 = xor i32 %295, 2592
  %302 = xor i32 %295, 3104
  %303 = xor i32 %295, 3616
  %304 = and i32 %262, 1536
  %305 = or disjoint i32 %261, %304
  %306 = xor i32 %305, 8
  %307 = xor i32 %305, 2056
  %308 = xor i32 %305, 16
  %309 = xor i32 %305, 2064
  %310 = xor i32 %305, 24
  %311 = xor i32 %305, 2072
  %312 = xor i32 %305, 32
  %313 = xor i32 %305, 2080
  %314 = xor i32 %305, 40
  %315 = xor i32 %305, 2088
  %316 = xor i32 %305, 48
  %317 = xor i32 %305, 2096
  %318 = xor i32 %305, 56
  %319 = xor i32 %305, 2104
  %320 = insertelement <4 x float> poison, float %52, i64 0, !dbg !32
  %321 = shufflevector <4 x float> %320, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !32
  br label %322, !dbg !31

322:                                              ; preds = %20, %__nv_exp2f.exit304
  %323 = phi i32 [ -1, %20 ], [ %396, %__nv_exp2f.exit304 ]
  %324 = phi i32 [ 1, %20 ], [ %2175, %__nv_exp2f.exit304 ]
  %325 = phi i64 [ 64, %20 ], [ %2172, %__nv_exp2f.exit304 ]
  %326 = phi float [ 0.000000e+00, %20 ], [ %2093, %__nv_exp2f.exit304 ]
  %327 = phi float [ 0.000000e+00, %20 ], [ %2094, %__nv_exp2f.exit304 ]
  %328 = phi float [ 0.000000e+00, %20 ], [ %2095, %__nv_exp2f.exit304 ]
  %329 = phi float [ 0.000000e+00, %20 ], [ %2096, %__nv_exp2f.exit304 ]
  %330 = phi float [ 0.000000e+00, %20 ], [ %2098, %__nv_exp2f.exit304 ]
  %331 = phi float [ 0.000000e+00, %20 ], [ %2099, %__nv_exp2f.exit304 ]
  %332 = phi float [ 0.000000e+00, %20 ], [ %2100, %__nv_exp2f.exit304 ]
  %333 = phi float [ 0.000000e+00, %20 ], [ %2101, %__nv_exp2f.exit304 ]
  %334 = phi float [ 0.000000e+00, %20 ], [ %2103, %__nv_exp2f.exit304 ]
  %335 = phi float [ 0.000000e+00, %20 ], [ %2104, %__nv_exp2f.exit304 ]
  %336 = phi float [ 0.000000e+00, %20 ], [ %2105, %__nv_exp2f.exit304 ]
  %337 = phi float [ 0.000000e+00, %20 ], [ %2106, %__nv_exp2f.exit304 ]
  %338 = phi float [ 0.000000e+00, %20 ], [ %2108, %__nv_exp2f.exit304 ]
  %339 = phi float [ 0.000000e+00, %20 ], [ %2109, %__nv_exp2f.exit304 ]
  %340 = phi float [ 0.000000e+00, %20 ], [ %2110, %__nv_exp2f.exit304 ]
  %341 = phi float [ 0.000000e+00, %20 ], [ %2111, %__nv_exp2f.exit304 ]
  %342 = phi float [ 0.000000e+00, %20 ], [ %2113, %__nv_exp2f.exit304 ]
  %343 = phi float [ 0.000000e+00, %20 ], [ %2114, %__nv_exp2f.exit304 ]
  %344 = phi float [ 0.000000e+00, %20 ], [ %2115, %__nv_exp2f.exit304 ]
  %345 = phi float [ 0.000000e+00, %20 ], [ %2116, %__nv_exp2f.exit304 ]
  %346 = phi float [ 0.000000e+00, %20 ], [ %2118, %__nv_exp2f.exit304 ]
  %347 = phi float [ 0.000000e+00, %20 ], [ %2119, %__nv_exp2f.exit304 ]
  %348 = phi float [ 0.000000e+00, %20 ], [ %2120, %__nv_exp2f.exit304 ]
  %349 = phi float [ 0.000000e+00, %20 ], [ %2121, %__nv_exp2f.exit304 ]
  %350 = phi float [ 0.000000e+00, %20 ], [ %2123, %__nv_exp2f.exit304 ]
  %351 = phi float [ 0.000000e+00, %20 ], [ %2124, %__nv_exp2f.exit304 ]
  %352 = phi float [ 0.000000e+00, %20 ], [ %2125, %__nv_exp2f.exit304 ]
  %353 = phi float [ 0.000000e+00, %20 ], [ %2126, %__nv_exp2f.exit304 ]
  %354 = phi float [ 0.000000e+00, %20 ], [ %2128, %__nv_exp2f.exit304 ]
  %355 = phi float [ 0.000000e+00, %20 ], [ %2129, %__nv_exp2f.exit304 ]
  %356 = phi float [ 0.000000e+00, %20 ], [ %2130, %__nv_exp2f.exit304 ]
  %357 = phi float [ 0.000000e+00, %20 ], [ %2131, %__nv_exp2f.exit304 ]
  %358 = phi float [ 0.000000e+00, %20 ], [ %2133, %__nv_exp2f.exit304 ]
  %359 = phi float [ 0.000000e+00, %20 ], [ %2134, %__nv_exp2f.exit304 ]
  %360 = phi float [ 0.000000e+00, %20 ], [ %2135, %__nv_exp2f.exit304 ]
  %361 = phi float [ 0.000000e+00, %20 ], [ %2136, %__nv_exp2f.exit304 ]
  %362 = phi float [ 0.000000e+00, %20 ], [ %2138, %__nv_exp2f.exit304 ]
  %363 = phi float [ 0.000000e+00, %20 ], [ %2139, %__nv_exp2f.exit304 ]
  %364 = phi float [ 0.000000e+00, %20 ], [ %2140, %__nv_exp2f.exit304 ]
  %365 = phi float [ 0.000000e+00, %20 ], [ %2141, %__nv_exp2f.exit304 ]
  %366 = phi float [ 0.000000e+00, %20 ], [ %2143, %__nv_exp2f.exit304 ]
  %367 = phi float [ 0.000000e+00, %20 ], [ %2144, %__nv_exp2f.exit304 ]
  %368 = phi float [ 0.000000e+00, %20 ], [ %2145, %__nv_exp2f.exit304 ]
  %369 = phi float [ 0.000000e+00, %20 ], [ %2146, %__nv_exp2f.exit304 ]
  %370 = phi float [ 0.000000e+00, %20 ], [ %2148, %__nv_exp2f.exit304 ]
  %371 = phi float [ 0.000000e+00, %20 ], [ %2149, %__nv_exp2f.exit304 ]
  %372 = phi float [ 0.000000e+00, %20 ], [ %2150, %__nv_exp2f.exit304 ]
  %373 = phi float [ 0.000000e+00, %20 ], [ %2151, %__nv_exp2f.exit304 ]
  %374 = phi float [ 0.000000e+00, %20 ], [ %2153, %__nv_exp2f.exit304 ]
  %375 = phi float [ 0.000000e+00, %20 ], [ %2154, %__nv_exp2f.exit304 ]
  %376 = phi float [ 0.000000e+00, %20 ], [ %2155, %__nv_exp2f.exit304 ]
  %377 = phi float [ 0.000000e+00, %20 ], [ %2156, %__nv_exp2f.exit304 ]
  %378 = phi float [ 0.000000e+00, %20 ], [ %2158, %__nv_exp2f.exit304 ]
  %379 = phi float [ 0.000000e+00, %20 ], [ %2159, %__nv_exp2f.exit304 ]
  %380 = phi float [ 0.000000e+00, %20 ], [ %2160, %__nv_exp2f.exit304 ]
  %381 = phi float [ 0.000000e+00, %20 ], [ %2161, %__nv_exp2f.exit304 ]
  %382 = phi float [ 0.000000e+00, %20 ], [ %2163, %__nv_exp2f.exit304 ]
  %383 = phi float [ 0.000000e+00, %20 ], [ %2164, %__nv_exp2f.exit304 ]
  %384 = phi float [ 0.000000e+00, %20 ], [ %2165, %__nv_exp2f.exit304 ]
  %385 = phi float [ 0.000000e+00, %20 ], [ %2166, %__nv_exp2f.exit304 ]
  %386 = phi float [ 0.000000e+00, %20 ], [ %2168, %__nv_exp2f.exit304 ]
  %387 = phi float [ 0.000000e+00, %20 ], [ %2169, %__nv_exp2f.exit304 ]
  %388 = phi float [ 0.000000e+00, %20 ], [ %2170, %__nv_exp2f.exit304 ]
  %389 = phi float [ 0.000000e+00, %20 ], [ %2171, %__nv_exp2f.exit304 ]
  %390 = phi i32 [ 0, %20 ], [ %2190, %__nv_exp2f.exit304 ]
  %391 = phi <4 x float> [ splat (float 0xFFF0000000000000), %20 ], [ %966, %__nv_exp2f.exit304 ]
  %392 = phi <4 x float> [ splat (float 1.000000e+00), %20 ], [ %1546, %__nv_exp2f.exit304 ]
  %393 = icmp samesign ult i32 %390, 3968, !dbg !31
  %394 = add i32 %323, 1, !dbg !31
  %395 = icmp sgt i32 %394, 1, !dbg !31
  %396 = select i1 %395, i32 0, i32 %394, !dbg !31
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %397 = shl i32 %396, 12, !dbg !27
  %398 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %397, !dbg !27
  %399 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %273) #2, !dbg !26
  %400 = extractvalue { i32, i32, i32, i32 } %399, 0, !dbg !26
  %401 = extractvalue { i32, i32, i32, i32 } %399, 1, !dbg !26
  %402 = extractvalue { i32, i32, i32, i32 } %399, 2, !dbg !26
  %403 = extractvalue { i32, i32, i32, i32 } %399, 3, !dbg !26
  %404 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %276) #2, !dbg !26
  %405 = extractvalue { i32, i32, i32, i32 } %404, 0, !dbg !26
  %406 = extractvalue { i32, i32, i32, i32 } %404, 1, !dbg !26
  %407 = extractvalue { i32, i32, i32, i32 } %404, 2, !dbg !26
  %408 = extractvalue { i32, i32, i32, i32 } %404, 3, !dbg !26
  %409 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %279) #2, !dbg !26
  %410 = extractvalue { i32, i32, i32, i32 } %409, 0, !dbg !26
  %411 = extractvalue { i32, i32, i32, i32 } %409, 1, !dbg !26
  %412 = extractvalue { i32, i32, i32, i32 } %409, 2, !dbg !26
  %413 = extractvalue { i32, i32, i32, i32 } %409, 3, !dbg !26
  %414 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %282) #2, !dbg !26
  %415 = extractvalue { i32, i32, i32, i32 } %414, 0, !dbg !26
  %416 = extractvalue { i32, i32, i32, i32 } %414, 1, !dbg !26
  %417 = extractvalue { i32, i32, i32, i32 } %414, 2, !dbg !26
  %418 = extractvalue { i32, i32, i32, i32 } %414, 3, !dbg !26
  %419 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %285) #2, !dbg !26
  %420 = extractvalue { i32, i32, i32, i32 } %419, 0, !dbg !26
  %421 = extractvalue { i32, i32, i32, i32 } %419, 1, !dbg !26
  %422 = extractvalue { i32, i32, i32, i32 } %419, 2, !dbg !26
  %423 = extractvalue { i32, i32, i32, i32 } %419, 3, !dbg !26
  %424 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %288) #2, !dbg !26
  %425 = extractvalue { i32, i32, i32, i32 } %424, 0, !dbg !26
  %426 = extractvalue { i32, i32, i32, i32 } %424, 1, !dbg !26
  %427 = extractvalue { i32, i32, i32, i32 } %424, 2, !dbg !26
  %428 = extractvalue { i32, i32, i32, i32 } %424, 3, !dbg !26
  %429 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %291) #2, !dbg !26
  %430 = extractvalue { i32, i32, i32, i32 } %429, 0, !dbg !26
  %431 = extractvalue { i32, i32, i32, i32 } %429, 1, !dbg !26
  %432 = extractvalue { i32, i32, i32, i32 } %429, 2, !dbg !26
  %433 = extractvalue { i32, i32, i32, i32 } %429, 3, !dbg !26
  %434 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %294) #2, !dbg !26
  %435 = extractvalue { i32, i32, i32, i32 } %434, 0, !dbg !26
  %436 = extractvalue { i32, i32, i32, i32 } %434, 1, !dbg !26
  %437 = extractvalue { i32, i32, i32, i32 } %434, 2, !dbg !26
  %438 = extractvalue { i32, i32, i32, i32 } %434, 3, !dbg !26
  %439 = getelementptr inbounds nuw half, ptr addrspace(3) %398, i32 %295, !dbg !27
  %440 = ptrtoint ptr addrspace(3) %439 to i32, !dbg !27
  %441 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %440) #2, !dbg !27
  %442 = extractvalue { i32, i32, i32, i32 } %441, 0, !dbg !27
  %443 = extractvalue { i32, i32, i32, i32 } %441, 1, !dbg !27
  %444 = extractvalue { i32, i32, i32, i32 } %441, 2, !dbg !27
  %445 = extractvalue { i32, i32, i32, i32 } %441, 3, !dbg !27
  %446 = getelementptr inbounds nuw half, ptr addrspace(3) %398, i32 %296, !dbg !27
  %447 = ptrtoint ptr addrspace(3) %446 to i32, !dbg !27
  %448 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %447) #2, !dbg !27
  %449 = extractvalue { i32, i32, i32, i32 } %448, 0, !dbg !27
  %450 = extractvalue { i32, i32, i32, i32 } %448, 1, !dbg !27
  %451 = extractvalue { i32, i32, i32, i32 } %448, 2, !dbg !27
  %452 = extractvalue { i32, i32, i32, i32 } %448, 3, !dbg !27
  %453 = getelementptr inbounds nuw i8, ptr addrspace(3) %439, i32 1024, !dbg !27
  %454 = ptrtoint ptr addrspace(3) %453 to i32, !dbg !27
  %455 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %454) #2, !dbg !27
  %456 = extractvalue { i32, i32, i32, i32 } %455, 0, !dbg !27
  %457 = extractvalue { i32, i32, i32, i32 } %455, 1, !dbg !27
  %458 = extractvalue { i32, i32, i32, i32 } %455, 2, !dbg !27
  %459 = extractvalue { i32, i32, i32, i32 } %455, 3, !dbg !27
  %460 = getelementptr inbounds nuw half, ptr addrspace(3) %398, i32 %297, !dbg !27
  %461 = ptrtoint ptr addrspace(3) %460 to i32, !dbg !27
  %462 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %461) #2, !dbg !27
  %463 = extractvalue { i32, i32, i32, i32 } %462, 0, !dbg !27
  %464 = extractvalue { i32, i32, i32, i32 } %462, 1, !dbg !27
  %465 = extractvalue { i32, i32, i32, i32 } %462, 2, !dbg !27
  %466 = extractvalue { i32, i32, i32, i32 } %462, 3, !dbg !27
  %467 = getelementptr inbounds nuw i8, ptr addrspace(3) %439, i32 2048, !dbg !27
  %468 = ptrtoint ptr addrspace(3) %467 to i32, !dbg !27
  %469 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %468) #2, !dbg !27
  %470 = extractvalue { i32, i32, i32, i32 } %469, 0, !dbg !27
  %471 = extractvalue { i32, i32, i32, i32 } %469, 1, !dbg !27
  %472 = extractvalue { i32, i32, i32, i32 } %469, 2, !dbg !27
  %473 = extractvalue { i32, i32, i32, i32 } %469, 3, !dbg !27
  %474 = getelementptr inbounds nuw half, ptr addrspace(3) %398, i32 %298, !dbg !27
  %475 = ptrtoint ptr addrspace(3) %474 to i32, !dbg !27
  %476 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %475) #2, !dbg !27
  %477 = extractvalue { i32, i32, i32, i32 } %476, 0, !dbg !27
  %478 = extractvalue { i32, i32, i32, i32 } %476, 1, !dbg !27
  %479 = extractvalue { i32, i32, i32, i32 } %476, 2, !dbg !27
  %480 = extractvalue { i32, i32, i32, i32 } %476, 3, !dbg !27
  %481 = getelementptr inbounds nuw i8, ptr addrspace(3) %439, i32 3072, !dbg !27
  %482 = ptrtoint ptr addrspace(3) %481 to i32, !dbg !27
  %483 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %482) #2, !dbg !27
  %484 = extractvalue { i32, i32, i32, i32 } %483, 0, !dbg !27
  %485 = extractvalue { i32, i32, i32, i32 } %483, 1, !dbg !27
  %486 = extractvalue { i32, i32, i32, i32 } %483, 2, !dbg !27
  %487 = extractvalue { i32, i32, i32, i32 } %483, 3, !dbg !27
  %488 = getelementptr inbounds nuw half, ptr addrspace(3) %398, i32 %299, !dbg !27
  %489 = ptrtoint ptr addrspace(3) %488 to i32, !dbg !27
  %490 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %489) #2, !dbg !27
  %491 = extractvalue { i32, i32, i32, i32 } %490, 0, !dbg !27
  %492 = extractvalue { i32, i32, i32, i32 } %490, 1, !dbg !27
  %493 = extractvalue { i32, i32, i32, i32 } %490, 2, !dbg !27
  %494 = extractvalue { i32, i32, i32, i32 } %490, 3, !dbg !27
  %495 = getelementptr inbounds nuw i8, ptr addrspace(3) %439, i32 4096, !dbg !27
  %496 = ptrtoint ptr addrspace(3) %495 to i32, !dbg !27
  %497 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %496) #2, !dbg !27
  %498 = extractvalue { i32, i32, i32, i32 } %497, 0, !dbg !27
  %499 = extractvalue { i32, i32, i32, i32 } %497, 1, !dbg !27
  %500 = extractvalue { i32, i32, i32, i32 } %497, 2, !dbg !27
  %501 = extractvalue { i32, i32, i32, i32 } %497, 3, !dbg !27
  %502 = getelementptr inbounds nuw half, ptr addrspace(3) %398, i32 %300, !dbg !27
  %503 = ptrtoint ptr addrspace(3) %502 to i32, !dbg !27
  %504 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %503) #2, !dbg !27
  %505 = extractvalue { i32, i32, i32, i32 } %504, 0, !dbg !27
  %506 = extractvalue { i32, i32, i32, i32 } %504, 1, !dbg !27
  %507 = extractvalue { i32, i32, i32, i32 } %504, 2, !dbg !27
  %508 = extractvalue { i32, i32, i32, i32 } %504, 3, !dbg !27
  %509 = getelementptr inbounds nuw i8, ptr addrspace(3) %439, i32 5120, !dbg !27
  %510 = ptrtoint ptr addrspace(3) %509 to i32, !dbg !27
  %511 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %510) #2, !dbg !27
  %512 = extractvalue { i32, i32, i32, i32 } %511, 0, !dbg !27
  %513 = extractvalue { i32, i32, i32, i32 } %511, 1, !dbg !27
  %514 = extractvalue { i32, i32, i32, i32 } %511, 2, !dbg !27
  %515 = extractvalue { i32, i32, i32, i32 } %511, 3, !dbg !27
  %516 = getelementptr inbounds nuw half, ptr addrspace(3) %398, i32 %301, !dbg !27
  %517 = ptrtoint ptr addrspace(3) %516 to i32, !dbg !27
  %518 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %517) #2, !dbg !27
  %519 = extractvalue { i32, i32, i32, i32 } %518, 0, !dbg !27
  %520 = extractvalue { i32, i32, i32, i32 } %518, 1, !dbg !27
  %521 = extractvalue { i32, i32, i32, i32 } %518, 2, !dbg !27
  %522 = extractvalue { i32, i32, i32, i32 } %518, 3, !dbg !27
  %523 = getelementptr inbounds nuw i8, ptr addrspace(3) %439, i32 6144, !dbg !27
  %524 = ptrtoint ptr addrspace(3) %523 to i32, !dbg !27
  %525 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %524) #2, !dbg !27
  %526 = extractvalue { i32, i32, i32, i32 } %525, 0, !dbg !27
  %527 = extractvalue { i32, i32, i32, i32 } %525, 1, !dbg !27
  %528 = extractvalue { i32, i32, i32, i32 } %525, 2, !dbg !27
  %529 = extractvalue { i32, i32, i32, i32 } %525, 3, !dbg !27
  %530 = getelementptr inbounds nuw half, ptr addrspace(3) %398, i32 %302, !dbg !27
  %531 = ptrtoint ptr addrspace(3) %530 to i32, !dbg !27
  %532 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %531) #2, !dbg !27
  %533 = extractvalue { i32, i32, i32, i32 } %532, 0, !dbg !27
  %534 = extractvalue { i32, i32, i32, i32 } %532, 1, !dbg !27
  %535 = extractvalue { i32, i32, i32, i32 } %532, 2, !dbg !27
  %536 = extractvalue { i32, i32, i32, i32 } %532, 3, !dbg !27
  %537 = getelementptr inbounds nuw i8, ptr addrspace(3) %439, i32 7168, !dbg !27
  %538 = ptrtoint ptr addrspace(3) %537 to i32, !dbg !27
  %539 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %538) #2, !dbg !27
  %540 = extractvalue { i32, i32, i32, i32 } %539, 0, !dbg !27
  %541 = extractvalue { i32, i32, i32, i32 } %539, 1, !dbg !27
  %542 = extractvalue { i32, i32, i32, i32 } %539, 2, !dbg !27
  %543 = extractvalue { i32, i32, i32, i32 } %539, 3, !dbg !27
  %544 = getelementptr inbounds nuw half, ptr addrspace(3) %398, i32 %303, !dbg !27
  %545 = ptrtoint ptr addrspace(3) %544 to i32, !dbg !27
  %546 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %545) #2, !dbg !27
  %547 = extractvalue { i32, i32, i32, i32 } %546, 0, !dbg !27
  %548 = extractvalue { i32, i32, i32, i32 } %546, 1, !dbg !27
  %549 = extractvalue { i32, i32, i32, i32 } %546, 2, !dbg !27
  %550 = extractvalue { i32, i32, i32, i32 } %546, 3, !dbg !27
  %551 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %400, i32 %401, i32 %402, i32 %403, i32 %442, i32 %443) #2, !dbg !33
  %552 = extractvalue { float, float, float, float } %551, 0, !dbg !33
  %553 = extractvalue { float, float, float, float } %551, 1, !dbg !33
  %554 = extractvalue { float, float, float, float } %551, 2, !dbg !33
  %555 = extractvalue { float, float, float, float } %551, 3, !dbg !33
  %556 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %400, i32 %401, i32 %402, i32 %403, i32 %456, i32 %457) #2, !dbg !33
  %557 = extractvalue { float, float, float, float } %556, 0, !dbg !33
  %558 = extractvalue { float, float, float, float } %556, 1, !dbg !33
  %559 = extractvalue { float, float, float, float } %556, 2, !dbg !33
  %560 = extractvalue { float, float, float, float } %556, 3, !dbg !33
  %561 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %400, i32 %401, i32 %402, i32 %403, i32 %470, i32 %471) #2, !dbg !33
  %562 = extractvalue { float, float, float, float } %561, 0, !dbg !33
  %563 = extractvalue { float, float, float, float } %561, 1, !dbg !33
  %564 = extractvalue { float, float, float, float } %561, 2, !dbg !33
  %565 = extractvalue { float, float, float, float } %561, 3, !dbg !33
  %566 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %400, i32 %401, i32 %402, i32 %403, i32 %484, i32 %485) #2, !dbg !33
  %567 = extractvalue { float, float, float, float } %566, 0, !dbg !33
  %568 = extractvalue { float, float, float, float } %566, 1, !dbg !33
  %569 = extractvalue { float, float, float, float } %566, 2, !dbg !33
  %570 = extractvalue { float, float, float, float } %566, 3, !dbg !33
  %571 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %400, i32 %401, i32 %402, i32 %403, i32 %498, i32 %499) #2, !dbg !33
  %572 = extractvalue { float, float, float, float } %571, 0, !dbg !33
  %573 = extractvalue { float, float, float, float } %571, 1, !dbg !33
  %574 = extractvalue { float, float, float, float } %571, 2, !dbg !33
  %575 = extractvalue { float, float, float, float } %571, 3, !dbg !33
  %576 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %400, i32 %401, i32 %402, i32 %403, i32 %512, i32 %513) #2, !dbg !33
  %577 = extractvalue { float, float, float, float } %576, 0, !dbg !33
  %578 = extractvalue { float, float, float, float } %576, 1, !dbg !33
  %579 = extractvalue { float, float, float, float } %576, 2, !dbg !33
  %580 = extractvalue { float, float, float, float } %576, 3, !dbg !33
  %581 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %400, i32 %401, i32 %402, i32 %403, i32 %526, i32 %527) #2, !dbg !33
  %582 = extractvalue { float, float, float, float } %581, 0, !dbg !33
  %583 = extractvalue { float, float, float, float } %581, 1, !dbg !33
  %584 = extractvalue { float, float, float, float } %581, 2, !dbg !33
  %585 = extractvalue { float, float, float, float } %581, 3, !dbg !33
  %586 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %400, i32 %401, i32 %402, i32 %403, i32 %540, i32 %541) #2, !dbg !33
  %587 = extractvalue { float, float, float, float } %586, 0, !dbg !33
  %588 = extractvalue { float, float, float, float } %586, 1, !dbg !33
  %589 = extractvalue { float, float, float, float } %586, 2, !dbg !33
  %590 = extractvalue { float, float, float, float } %586, 3, !dbg !33
  %591 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %420, i32 %421, i32 %422, i32 %423, i32 %442, i32 %443) #2, !dbg !33
  %592 = extractvalue { float, float, float, float } %591, 0, !dbg !33
  %593 = extractvalue { float, float, float, float } %591, 1, !dbg !33
  %594 = extractvalue { float, float, float, float } %591, 2, !dbg !33
  %595 = extractvalue { float, float, float, float } %591, 3, !dbg !33
  %596 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %420, i32 %421, i32 %422, i32 %423, i32 %456, i32 %457) #2, !dbg !33
  %597 = extractvalue { float, float, float, float } %596, 0, !dbg !33
  %598 = extractvalue { float, float, float, float } %596, 1, !dbg !33
  %599 = extractvalue { float, float, float, float } %596, 2, !dbg !33
  %600 = extractvalue { float, float, float, float } %596, 3, !dbg !33
  %601 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %420, i32 %421, i32 %422, i32 %423, i32 %470, i32 %471) #2, !dbg !33
  %602 = extractvalue { float, float, float, float } %601, 0, !dbg !33
  %603 = extractvalue { float, float, float, float } %601, 1, !dbg !33
  %604 = extractvalue { float, float, float, float } %601, 2, !dbg !33
  %605 = extractvalue { float, float, float, float } %601, 3, !dbg !33
  %606 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %420, i32 %421, i32 %422, i32 %423, i32 %484, i32 %485) #2, !dbg !33
  %607 = extractvalue { float, float, float, float } %606, 0, !dbg !33
  %608 = extractvalue { float, float, float, float } %606, 1, !dbg !33
  %609 = extractvalue { float, float, float, float } %606, 2, !dbg !33
  %610 = extractvalue { float, float, float, float } %606, 3, !dbg !33
  %611 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %420, i32 %421, i32 %422, i32 %423, i32 %498, i32 %499) #2, !dbg !33
  %612 = extractvalue { float, float, float, float } %611, 0, !dbg !33
  %613 = extractvalue { float, float, float, float } %611, 1, !dbg !33
  %614 = extractvalue { float, float, float, float } %611, 2, !dbg !33
  %615 = extractvalue { float, float, float, float } %611, 3, !dbg !33
  %616 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %420, i32 %421, i32 %422, i32 %423, i32 %512, i32 %513) #2, !dbg !33
  %617 = extractvalue { float, float, float, float } %616, 0, !dbg !33
  %618 = extractvalue { float, float, float, float } %616, 1, !dbg !33
  %619 = extractvalue { float, float, float, float } %616, 2, !dbg !33
  %620 = extractvalue { float, float, float, float } %616, 3, !dbg !33
  %621 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %420, i32 %421, i32 %422, i32 %423, i32 %526, i32 %527) #2, !dbg !33
  %622 = extractvalue { float, float, float, float } %621, 0, !dbg !33
  %623 = extractvalue { float, float, float, float } %621, 1, !dbg !33
  %624 = extractvalue { float, float, float, float } %621, 2, !dbg !33
  %625 = extractvalue { float, float, float, float } %621, 3, !dbg !33
  %626 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %420, i32 %421, i32 %422, i32 %423, i32 %540, i32 %541) #2, !dbg !33
  %627 = extractvalue { float, float, float, float } %626, 0, !dbg !33
  %628 = extractvalue { float, float, float, float } %626, 1, !dbg !33
  %629 = extractvalue { float, float, float, float } %626, 2, !dbg !33
  %630 = extractvalue { float, float, float, float } %626, 3, !dbg !33
  %631 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %552, float %553, float %554, float %555, i32 %405, i32 %406, i32 %407, i32 %408, i32 %444, i32 %445) #2, !dbg !33
  %632 = extractvalue { float, float, float, float } %631, 0, !dbg !33
  %633 = extractvalue { float, float, float, float } %631, 1, !dbg !33
  %634 = extractvalue { float, float, float, float } %631, 2, !dbg !33
  %635 = extractvalue { float, float, float, float } %631, 3, !dbg !33
  %636 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %557, float %558, float %559, float %560, i32 %405, i32 %406, i32 %407, i32 %408, i32 %458, i32 %459) #2, !dbg !33
  %637 = extractvalue { float, float, float, float } %636, 0, !dbg !33
  %638 = extractvalue { float, float, float, float } %636, 1, !dbg !33
  %639 = extractvalue { float, float, float, float } %636, 2, !dbg !33
  %640 = extractvalue { float, float, float, float } %636, 3, !dbg !33
  %641 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %562, float %563, float %564, float %565, i32 %405, i32 %406, i32 %407, i32 %408, i32 %472, i32 %473) #2, !dbg !33
  %642 = extractvalue { float, float, float, float } %641, 0, !dbg !33
  %643 = extractvalue { float, float, float, float } %641, 1, !dbg !33
  %644 = extractvalue { float, float, float, float } %641, 2, !dbg !33
  %645 = extractvalue { float, float, float, float } %641, 3, !dbg !33
  %646 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %567, float %568, float %569, float %570, i32 %405, i32 %406, i32 %407, i32 %408, i32 %486, i32 %487) #2, !dbg !33
  %647 = extractvalue { float, float, float, float } %646, 0, !dbg !33
  %648 = extractvalue { float, float, float, float } %646, 1, !dbg !33
  %649 = extractvalue { float, float, float, float } %646, 2, !dbg !33
  %650 = extractvalue { float, float, float, float } %646, 3, !dbg !33
  %651 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %572, float %573, float %574, float %575, i32 %405, i32 %406, i32 %407, i32 %408, i32 %500, i32 %501) #2, !dbg !33
  %652 = extractvalue { float, float, float, float } %651, 0, !dbg !33
  %653 = extractvalue { float, float, float, float } %651, 1, !dbg !33
  %654 = extractvalue { float, float, float, float } %651, 2, !dbg !33
  %655 = extractvalue { float, float, float, float } %651, 3, !dbg !33
  %656 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %577, float %578, float %579, float %580, i32 %405, i32 %406, i32 %407, i32 %408, i32 %514, i32 %515) #2, !dbg !33
  %657 = extractvalue { float, float, float, float } %656, 0, !dbg !33
  %658 = extractvalue { float, float, float, float } %656, 1, !dbg !33
  %659 = extractvalue { float, float, float, float } %656, 2, !dbg !33
  %660 = extractvalue { float, float, float, float } %656, 3, !dbg !33
  %661 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %582, float %583, float %584, float %585, i32 %405, i32 %406, i32 %407, i32 %408, i32 %528, i32 %529) #2, !dbg !33
  %662 = extractvalue { float, float, float, float } %661, 0, !dbg !33
  %663 = extractvalue { float, float, float, float } %661, 1, !dbg !33
  %664 = extractvalue { float, float, float, float } %661, 2, !dbg !33
  %665 = extractvalue { float, float, float, float } %661, 3, !dbg !33
  %666 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %587, float %588, float %589, float %590, i32 %405, i32 %406, i32 %407, i32 %408, i32 %542, i32 %543) #2, !dbg !33
  %667 = extractvalue { float, float, float, float } %666, 0, !dbg !33
  %668 = extractvalue { float, float, float, float } %666, 1, !dbg !33
  %669 = extractvalue { float, float, float, float } %666, 2, !dbg !33
  %670 = extractvalue { float, float, float, float } %666, 3, !dbg !33
  %671 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %592, float %593, float %594, float %595, i32 %425, i32 %426, i32 %427, i32 %428, i32 %444, i32 %445) #2, !dbg !33
  %672 = extractvalue { float, float, float, float } %671, 0, !dbg !33
  %673 = extractvalue { float, float, float, float } %671, 1, !dbg !33
  %674 = extractvalue { float, float, float, float } %671, 2, !dbg !33
  %675 = extractvalue { float, float, float, float } %671, 3, !dbg !33
  %676 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %597, float %598, float %599, float %600, i32 %425, i32 %426, i32 %427, i32 %428, i32 %458, i32 %459) #2, !dbg !33
  %677 = extractvalue { float, float, float, float } %676, 0, !dbg !33
  %678 = extractvalue { float, float, float, float } %676, 1, !dbg !33
  %679 = extractvalue { float, float, float, float } %676, 2, !dbg !33
  %680 = extractvalue { float, float, float, float } %676, 3, !dbg !33
  %681 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %602, float %603, float %604, float %605, i32 %425, i32 %426, i32 %427, i32 %428, i32 %472, i32 %473) #2, !dbg !33
  %682 = extractvalue { float, float, float, float } %681, 0, !dbg !33
  %683 = extractvalue { float, float, float, float } %681, 1, !dbg !33
  %684 = extractvalue { float, float, float, float } %681, 2, !dbg !33
  %685 = extractvalue { float, float, float, float } %681, 3, !dbg !33
  %686 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %607, float %608, float %609, float %610, i32 %425, i32 %426, i32 %427, i32 %428, i32 %486, i32 %487) #2, !dbg !33
  %687 = extractvalue { float, float, float, float } %686, 0, !dbg !33
  %688 = extractvalue { float, float, float, float } %686, 1, !dbg !33
  %689 = extractvalue { float, float, float, float } %686, 2, !dbg !33
  %690 = extractvalue { float, float, float, float } %686, 3, !dbg !33
  %691 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %612, float %613, float %614, float %615, i32 %425, i32 %426, i32 %427, i32 %428, i32 %500, i32 %501) #2, !dbg !33
  %692 = extractvalue { float, float, float, float } %691, 0, !dbg !33
  %693 = extractvalue { float, float, float, float } %691, 1, !dbg !33
  %694 = extractvalue { float, float, float, float } %691, 2, !dbg !33
  %695 = extractvalue { float, float, float, float } %691, 3, !dbg !33
  %696 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %617, float %618, float %619, float %620, i32 %425, i32 %426, i32 %427, i32 %428, i32 %514, i32 %515) #2, !dbg !33
  %697 = extractvalue { float, float, float, float } %696, 0, !dbg !33
  %698 = extractvalue { float, float, float, float } %696, 1, !dbg !33
  %699 = extractvalue { float, float, float, float } %696, 2, !dbg !33
  %700 = extractvalue { float, float, float, float } %696, 3, !dbg !33
  %701 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %622, float %623, float %624, float %625, i32 %425, i32 %426, i32 %427, i32 %428, i32 %528, i32 %529) #2, !dbg !33
  %702 = extractvalue { float, float, float, float } %701, 0, !dbg !33
  %703 = extractvalue { float, float, float, float } %701, 1, !dbg !33
  %704 = extractvalue { float, float, float, float } %701, 2, !dbg !33
  %705 = extractvalue { float, float, float, float } %701, 3, !dbg !33
  %706 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %627, float %628, float %629, float %630, i32 %425, i32 %426, i32 %427, i32 %428, i32 %542, i32 %543) #2, !dbg !33
  %707 = extractvalue { float, float, float, float } %706, 0, !dbg !33
  %708 = extractvalue { float, float, float, float } %706, 1, !dbg !33
  %709 = extractvalue { float, float, float, float } %706, 2, !dbg !33
  %710 = extractvalue { float, float, float, float } %706, 3, !dbg !33
  %711 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %632, float %633, float %634, float %635, i32 %410, i32 %411, i32 %412, i32 %413, i32 %449, i32 %450) #2, !dbg !33
  %712 = extractvalue { float, float, float, float } %711, 0, !dbg !33
  %713 = extractvalue { float, float, float, float } %711, 1, !dbg !33
  %714 = extractvalue { float, float, float, float } %711, 2, !dbg !33
  %715 = extractvalue { float, float, float, float } %711, 3, !dbg !33
  %716 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %637, float %638, float %639, float %640, i32 %410, i32 %411, i32 %412, i32 %413, i32 %463, i32 %464) #2, !dbg !33
  %717 = extractvalue { float, float, float, float } %716, 0, !dbg !33
  %718 = extractvalue { float, float, float, float } %716, 1, !dbg !33
  %719 = extractvalue { float, float, float, float } %716, 2, !dbg !33
  %720 = extractvalue { float, float, float, float } %716, 3, !dbg !33
  %721 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %642, float %643, float %644, float %645, i32 %410, i32 %411, i32 %412, i32 %413, i32 %477, i32 %478) #2, !dbg !33
  %722 = extractvalue { float, float, float, float } %721, 0, !dbg !33
  %723 = extractvalue { float, float, float, float } %721, 1, !dbg !33
  %724 = extractvalue { float, float, float, float } %721, 2, !dbg !33
  %725 = extractvalue { float, float, float, float } %721, 3, !dbg !33
  %726 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %647, float %648, float %649, float %650, i32 %410, i32 %411, i32 %412, i32 %413, i32 %491, i32 %492) #2, !dbg !33
  %727 = extractvalue { float, float, float, float } %726, 0, !dbg !33
  %728 = extractvalue { float, float, float, float } %726, 1, !dbg !33
  %729 = extractvalue { float, float, float, float } %726, 2, !dbg !33
  %730 = extractvalue { float, float, float, float } %726, 3, !dbg !33
  %731 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %652, float %653, float %654, float %655, i32 %410, i32 %411, i32 %412, i32 %413, i32 %505, i32 %506) #2, !dbg !33
  %732 = extractvalue { float, float, float, float } %731, 0, !dbg !33
  %733 = extractvalue { float, float, float, float } %731, 1, !dbg !33
  %734 = extractvalue { float, float, float, float } %731, 2, !dbg !33
  %735 = extractvalue { float, float, float, float } %731, 3, !dbg !33
  %736 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %657, float %658, float %659, float %660, i32 %410, i32 %411, i32 %412, i32 %413, i32 %519, i32 %520) #2, !dbg !33
  %737 = extractvalue { float, float, float, float } %736, 0, !dbg !33
  %738 = extractvalue { float, float, float, float } %736, 1, !dbg !33
  %739 = extractvalue { float, float, float, float } %736, 2, !dbg !33
  %740 = extractvalue { float, float, float, float } %736, 3, !dbg !33
  %741 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %662, float %663, float %664, float %665, i32 %410, i32 %411, i32 %412, i32 %413, i32 %533, i32 %534) #2, !dbg !33
  %742 = extractvalue { float, float, float, float } %741, 0, !dbg !33
  %743 = extractvalue { float, float, float, float } %741, 1, !dbg !33
  %744 = extractvalue { float, float, float, float } %741, 2, !dbg !33
  %745 = extractvalue { float, float, float, float } %741, 3, !dbg !33
  %746 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %667, float %668, float %669, float %670, i32 %410, i32 %411, i32 %412, i32 %413, i32 %547, i32 %548) #2, !dbg !33
  %747 = extractvalue { float, float, float, float } %746, 0, !dbg !33
  %748 = extractvalue { float, float, float, float } %746, 1, !dbg !33
  %749 = extractvalue { float, float, float, float } %746, 2, !dbg !33
  %750 = extractvalue { float, float, float, float } %746, 3, !dbg !33
  %751 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %672, float %673, float %674, float %675, i32 %430, i32 %431, i32 %432, i32 %433, i32 %449, i32 %450) #2, !dbg !33
  %752 = extractvalue { float, float, float, float } %751, 0, !dbg !33
  %753 = extractvalue { float, float, float, float } %751, 1, !dbg !33
  %754 = extractvalue { float, float, float, float } %751, 2, !dbg !33
  %755 = extractvalue { float, float, float, float } %751, 3, !dbg !33
  %756 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %677, float %678, float %679, float %680, i32 %430, i32 %431, i32 %432, i32 %433, i32 %463, i32 %464) #2, !dbg !33
  %757 = extractvalue { float, float, float, float } %756, 0, !dbg !33
  %758 = extractvalue { float, float, float, float } %756, 1, !dbg !33
  %759 = extractvalue { float, float, float, float } %756, 2, !dbg !33
  %760 = extractvalue { float, float, float, float } %756, 3, !dbg !33
  %761 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %682, float %683, float %684, float %685, i32 %430, i32 %431, i32 %432, i32 %433, i32 %477, i32 %478) #2, !dbg !33
  %762 = extractvalue { float, float, float, float } %761, 0, !dbg !33
  %763 = extractvalue { float, float, float, float } %761, 1, !dbg !33
  %764 = extractvalue { float, float, float, float } %761, 2, !dbg !33
  %765 = extractvalue { float, float, float, float } %761, 3, !dbg !33
  %766 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %687, float %688, float %689, float %690, i32 %430, i32 %431, i32 %432, i32 %433, i32 %491, i32 %492) #2, !dbg !33
  %767 = extractvalue { float, float, float, float } %766, 0, !dbg !33
  %768 = extractvalue { float, float, float, float } %766, 1, !dbg !33
  %769 = extractvalue { float, float, float, float } %766, 2, !dbg !33
  %770 = extractvalue { float, float, float, float } %766, 3, !dbg !33
  %771 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %692, float %693, float %694, float %695, i32 %430, i32 %431, i32 %432, i32 %433, i32 %505, i32 %506) #2, !dbg !33
  %772 = extractvalue { float, float, float, float } %771, 0, !dbg !33
  %773 = extractvalue { float, float, float, float } %771, 1, !dbg !33
  %774 = extractvalue { float, float, float, float } %771, 2, !dbg !33
  %775 = extractvalue { float, float, float, float } %771, 3, !dbg !33
  %776 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %697, float %698, float %699, float %700, i32 %430, i32 %431, i32 %432, i32 %433, i32 %519, i32 %520) #2, !dbg !33
  %777 = extractvalue { float, float, float, float } %776, 0, !dbg !33
  %778 = extractvalue { float, float, float, float } %776, 1, !dbg !33
  %779 = extractvalue { float, float, float, float } %776, 2, !dbg !33
  %780 = extractvalue { float, float, float, float } %776, 3, !dbg !33
  %781 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %702, float %703, float %704, float %705, i32 %430, i32 %431, i32 %432, i32 %433, i32 %533, i32 %534) #2, !dbg !33
  %782 = extractvalue { float, float, float, float } %781, 0, !dbg !33
  %783 = extractvalue { float, float, float, float } %781, 1, !dbg !33
  %784 = extractvalue { float, float, float, float } %781, 2, !dbg !33
  %785 = extractvalue { float, float, float, float } %781, 3, !dbg !33
  %786 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %707, float %708, float %709, float %710, i32 %430, i32 %431, i32 %432, i32 %433, i32 %547, i32 %548) #2, !dbg !33
  %787 = extractvalue { float, float, float, float } %786, 0, !dbg !33
  %788 = extractvalue { float, float, float, float } %786, 1, !dbg !33
  %789 = extractvalue { float, float, float, float } %786, 2, !dbg !33
  %790 = extractvalue { float, float, float, float } %786, 3, !dbg !33
  %791 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %712, float %713, float %714, float %715, i32 %415, i32 %416, i32 %417, i32 %418, i32 %451, i32 %452) #2, !dbg !33
  %792 = extractvalue { float, float, float, float } %791, 0, !dbg !33
  %793 = extractvalue { float, float, float, float } %791, 1, !dbg !33
  %794 = extractvalue { float, float, float, float } %791, 2, !dbg !33
  %795 = extractvalue { float, float, float, float } %791, 3, !dbg !33
  %796 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %717, float %718, float %719, float %720, i32 %415, i32 %416, i32 %417, i32 %418, i32 %465, i32 %466) #2, !dbg !33
  %797 = extractvalue { float, float, float, float } %796, 0, !dbg !33
  %798 = extractvalue { float, float, float, float } %796, 1, !dbg !33
  %799 = extractvalue { float, float, float, float } %796, 2, !dbg !33
  %800 = extractvalue { float, float, float, float } %796, 3, !dbg !33
  %801 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %722, float %723, float %724, float %725, i32 %415, i32 %416, i32 %417, i32 %418, i32 %479, i32 %480) #2, !dbg !33
  %802 = extractvalue { float, float, float, float } %801, 0, !dbg !33
  %803 = extractvalue { float, float, float, float } %801, 1, !dbg !33
  %804 = extractvalue { float, float, float, float } %801, 2, !dbg !33
  %805 = extractvalue { float, float, float, float } %801, 3, !dbg !33
  %806 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %727, float %728, float %729, float %730, i32 %415, i32 %416, i32 %417, i32 %418, i32 %493, i32 %494) #2, !dbg !33
  %807 = extractvalue { float, float, float, float } %806, 0, !dbg !33
  %808 = extractvalue { float, float, float, float } %806, 1, !dbg !33
  %809 = extractvalue { float, float, float, float } %806, 2, !dbg !33
  %810 = extractvalue { float, float, float, float } %806, 3, !dbg !33
  %811 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %732, float %733, float %734, float %735, i32 %415, i32 %416, i32 %417, i32 %418, i32 %507, i32 %508) #2, !dbg !33
  %812 = extractvalue { float, float, float, float } %811, 0, !dbg !33
  %813 = extractvalue { float, float, float, float } %811, 1, !dbg !33
  %814 = extractvalue { float, float, float, float } %811, 2, !dbg !33
  %815 = extractvalue { float, float, float, float } %811, 3, !dbg !33
  %816 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %737, float %738, float %739, float %740, i32 %415, i32 %416, i32 %417, i32 %418, i32 %521, i32 %522) #2, !dbg !33
  %817 = extractvalue { float, float, float, float } %816, 0, !dbg !33
  %818 = extractvalue { float, float, float, float } %816, 1, !dbg !33
  %819 = extractvalue { float, float, float, float } %816, 2, !dbg !33
  %820 = extractvalue { float, float, float, float } %816, 3, !dbg !33
  %821 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %742, float %743, float %744, float %745, i32 %415, i32 %416, i32 %417, i32 %418, i32 %535, i32 %536) #2, !dbg !33
  %822 = extractvalue { float, float, float, float } %821, 0, !dbg !33
  %823 = extractvalue { float, float, float, float } %821, 1, !dbg !33
  %824 = extractvalue { float, float, float, float } %821, 2, !dbg !33
  %825 = extractvalue { float, float, float, float } %821, 3, !dbg !33
  %826 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %747, float %748, float %749, float %750, i32 %415, i32 %416, i32 %417, i32 %418, i32 %549, i32 %550) #2, !dbg !33
  %827 = extractvalue { float, float, float, float } %826, 0, !dbg !33
  %828 = extractvalue { float, float, float, float } %826, 1, !dbg !33
  %829 = extractvalue { float, float, float, float } %826, 2, !dbg !33
  %830 = extractvalue { float, float, float, float } %826, 3, !dbg !33
  %831 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %752, float %753, float %754, float %755, i32 %435, i32 %436, i32 %437, i32 %438, i32 %451, i32 %452) #2, !dbg !33
  %832 = extractvalue { float, float, float, float } %831, 0, !dbg !33
  %833 = extractvalue { float, float, float, float } %831, 1, !dbg !33
  %834 = extractvalue { float, float, float, float } %831, 2, !dbg !33
  %835 = extractvalue { float, float, float, float } %831, 3, !dbg !33
  %836 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %757, float %758, float %759, float %760, i32 %435, i32 %436, i32 %437, i32 %438, i32 %465, i32 %466) #2, !dbg !33
  %837 = extractvalue { float, float, float, float } %836, 0, !dbg !33
  %838 = extractvalue { float, float, float, float } %836, 1, !dbg !33
  %839 = extractvalue { float, float, float, float } %836, 2, !dbg !33
  %840 = extractvalue { float, float, float, float } %836, 3, !dbg !33
  %841 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %762, float %763, float %764, float %765, i32 %435, i32 %436, i32 %437, i32 %438, i32 %479, i32 %480) #2, !dbg !33
  %842 = extractvalue { float, float, float, float } %841, 0, !dbg !33
  %843 = extractvalue { float, float, float, float } %841, 1, !dbg !33
  %844 = extractvalue { float, float, float, float } %841, 2, !dbg !33
  %845 = extractvalue { float, float, float, float } %841, 3, !dbg !33
  %846 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %767, float %768, float %769, float %770, i32 %435, i32 %436, i32 %437, i32 %438, i32 %493, i32 %494) #2, !dbg !33
  %847 = extractvalue { float, float, float, float } %846, 0, !dbg !33
  %848 = extractvalue { float, float, float, float } %846, 1, !dbg !33
  %849 = extractvalue { float, float, float, float } %846, 2, !dbg !33
  %850 = extractvalue { float, float, float, float } %846, 3, !dbg !33
  %851 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %772, float %773, float %774, float %775, i32 %435, i32 %436, i32 %437, i32 %438, i32 %507, i32 %508) #2, !dbg !33
  %852 = extractvalue { float, float, float, float } %851, 0, !dbg !33
  %853 = extractvalue { float, float, float, float } %851, 1, !dbg !33
  %854 = extractvalue { float, float, float, float } %851, 2, !dbg !33
  %855 = extractvalue { float, float, float, float } %851, 3, !dbg !33
  %856 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %777, float %778, float %779, float %780, i32 %435, i32 %436, i32 %437, i32 %438, i32 %521, i32 %522) #2, !dbg !33
  %857 = extractvalue { float, float, float, float } %856, 0, !dbg !33
  %858 = extractvalue { float, float, float, float } %856, 1, !dbg !33
  %859 = extractvalue { float, float, float, float } %856, 2, !dbg !33
  %860 = extractvalue { float, float, float, float } %856, 3, !dbg !33
  %861 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %782, float %783, float %784, float %785, i32 %435, i32 %436, i32 %437, i32 %438, i32 %535, i32 %536) #2, !dbg !33
  %862 = extractvalue { float, float, float, float } %861, 0, !dbg !33
  %863 = extractvalue { float, float, float, float } %861, 1, !dbg !33
  %864 = extractvalue { float, float, float, float } %861, 2, !dbg !33
  %865 = extractvalue { float, float, float, float } %861, 3, !dbg !33
  %866 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %787, float %788, float %789, float %790, i32 %435, i32 %436, i32 %437, i32 %438, i32 %549, i32 %550) #2, !dbg !33
  %867 = extractvalue { float, float, float, float } %866, 0, !dbg !33
  %868 = extractvalue { float, float, float, float } %866, 1, !dbg !33
  %869 = extractvalue { float, float, float, float } %866, 2, !dbg !33
  %870 = extractvalue { float, float, float, float } %866, 3, !dbg !33
  %871 = tail call float @llvm.maxnum.f32(float %792, float %793), !dbg !34
  %872 = tail call float @llvm.maxnum.f32(float %794, float %795), !dbg !34
  %873 = tail call float @llvm.maxnum.f32(float %871, float %797), !dbg !34
  %874 = tail call float @llvm.maxnum.f32(float %873, float %798), !dbg !34
  %875 = tail call float @llvm.maxnum.f32(float %872, float %799), !dbg !34
  %876 = tail call float @llvm.maxnum.f32(float %875, float %800), !dbg !34
  %877 = tail call float @llvm.maxnum.f32(float %874, float %802), !dbg !34
  %878 = tail call float @llvm.maxnum.f32(float %877, float %803), !dbg !34
  %879 = tail call float @llvm.maxnum.f32(float %876, float %804), !dbg !34
  %880 = tail call float @llvm.maxnum.f32(float %879, float %805), !dbg !34
  %881 = tail call float @llvm.maxnum.f32(float %878, float %807), !dbg !34
  %882 = tail call float @llvm.maxnum.f32(float %881, float %808), !dbg !34
  %883 = tail call float @llvm.maxnum.f32(float %880, float %809), !dbg !34
  %884 = tail call float @llvm.maxnum.f32(float %883, float %810), !dbg !34
  %885 = tail call float @llvm.maxnum.f32(float %882, float %812), !dbg !34
  %886 = tail call float @llvm.maxnum.f32(float %885, float %813), !dbg !34
  %887 = tail call float @llvm.maxnum.f32(float %884, float %814), !dbg !34
  %888 = tail call float @llvm.maxnum.f32(float %887, float %815), !dbg !34
  %889 = tail call float @llvm.maxnum.f32(float %886, float %817), !dbg !34
  %890 = tail call float @llvm.maxnum.f32(float %889, float %818), !dbg !34
  %891 = tail call float @llvm.maxnum.f32(float %888, float %819), !dbg !34
  %892 = tail call float @llvm.maxnum.f32(float %891, float %820), !dbg !34
  %893 = tail call float @llvm.maxnum.f32(float %890, float %822), !dbg !34
  %894 = tail call float @llvm.maxnum.f32(float %893, float %823), !dbg !34
  %895 = tail call float @llvm.maxnum.f32(float %892, float %824), !dbg !34
  %896 = tail call float @llvm.maxnum.f32(float %895, float %825), !dbg !34
  %897 = tail call float @llvm.maxnum.f32(float %894, float %827), !dbg !34
  %898 = tail call float @llvm.maxnum.f32(float %897, float %828), !dbg !34
  %899 = tail call float @llvm.maxnum.f32(float %896, float %829), !dbg !34
  %900 = tail call float @llvm.maxnum.f32(float %899, float %830), !dbg !34
  %901 = tail call float @llvm.maxnum.f32(float %832, float %833), !dbg !34
  %902 = tail call float @llvm.maxnum.f32(float %834, float %835), !dbg !34
  %903 = tail call float @llvm.maxnum.f32(float %901, float %837), !dbg !34
  %904 = tail call float @llvm.maxnum.f32(float %903, float %838), !dbg !34
  %905 = tail call float @llvm.maxnum.f32(float %902, float %839), !dbg !34
  %906 = tail call float @llvm.maxnum.f32(float %905, float %840), !dbg !34
  %907 = tail call float @llvm.maxnum.f32(float %904, float %842), !dbg !34
  %908 = tail call float @llvm.maxnum.f32(float %907, float %843), !dbg !34
  %909 = tail call float @llvm.maxnum.f32(float %906, float %844), !dbg !34
  %910 = tail call float @llvm.maxnum.f32(float %909, float %845), !dbg !34
  %911 = tail call float @llvm.maxnum.f32(float %908, float %847), !dbg !34
  %912 = tail call float @llvm.maxnum.f32(float %911, float %848), !dbg !34
  %913 = tail call float @llvm.maxnum.f32(float %910, float %849), !dbg !34
  %914 = tail call float @llvm.maxnum.f32(float %913, float %850), !dbg !34
  %915 = tail call float @llvm.maxnum.f32(float %912, float %852), !dbg !34
  %916 = tail call float @llvm.maxnum.f32(float %915, float %853), !dbg !34
  %917 = tail call float @llvm.maxnum.f32(float %914, float %854), !dbg !34
  %918 = tail call float @llvm.maxnum.f32(float %917, float %855), !dbg !34
  %919 = tail call float @llvm.maxnum.f32(float %916, float %857), !dbg !34
  %920 = tail call float @llvm.maxnum.f32(float %919, float %858), !dbg !34
  %921 = tail call float @llvm.maxnum.f32(float %918, float %859), !dbg !34
  %922 = tail call float @llvm.maxnum.f32(float %921, float %860), !dbg !34
  %923 = tail call float @llvm.maxnum.f32(float %920, float %862), !dbg !34
  %924 = tail call float @llvm.maxnum.f32(float %923, float %863), !dbg !34
  %925 = tail call float @llvm.maxnum.f32(float %922, float %864), !dbg !34
  %926 = tail call float @llvm.maxnum.f32(float %925, float %865), !dbg !34
  %927 = tail call float @llvm.maxnum.f32(float %924, float %867), !dbg !34
  %928 = tail call float @llvm.maxnum.f32(float %927, float %868), !dbg !34
  %929 = tail call float @llvm.maxnum.f32(float %926, float %869), !dbg !34
  %930 = tail call float @llvm.maxnum.f32(float %929, float %870), !dbg !34
  %931 = bitcast float %898 to i32, !dbg !37
  %932 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %931, i32 2, i32 31), !dbg !37
  %933 = bitcast i32 %932 to float, !dbg !37
  %934 = bitcast float %900 to i32, !dbg !37
  %935 = bitcast float %928 to i32, !dbg !37
  %936 = bitcast float %930 to i32, !dbg !37
  %937 = tail call float @llvm.maxnum.f32(float %898, float %933), !dbg !34
  %938 = bitcast float %937 to i32, !dbg !37
  %939 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %938, i32 1, i32 31), !dbg !37
  %940 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %934, i32 2, i32 31), !dbg !37
  %941 = bitcast i32 %940 to float, !dbg !37
  %942 = tail call float @llvm.maxnum.f32(float %900, float %941), !dbg !34
  %943 = bitcast float %942 to i32, !dbg !37
  %944 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %943, i32 1, i32 31), !dbg !37
  %945 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %935, i32 2, i32 31), !dbg !37
  %946 = bitcast i32 %945 to float, !dbg !37
  %947 = tail call float @llvm.maxnum.f32(float %928, float %946), !dbg !34
  %948 = bitcast float %947 to i32, !dbg !37
  %949 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %948, i32 1, i32 31), !dbg !37
  %950 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %936, i32 2, i32 31), !dbg !37
  %951 = bitcast i32 %950 to float, !dbg !37
  %952 = tail call float @llvm.maxnum.f32(float %930, float %951), !dbg !34
  %953 = bitcast float %952 to i32, !dbg !37
  %954 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %953, i32 1, i32 31), !dbg !37
  %955 = insertelement <4 x i32> poison, i32 %939, i64 0, !dbg !37
  %956 = insertelement <4 x i32> %955, i32 %944, i64 1, !dbg !37
  %957 = insertelement <4 x i32> %956, i32 %949, i64 2, !dbg !37
  %958 = insertelement <4 x i32> %957, i32 %954, i64 3, !dbg !37
  %959 = bitcast <4 x i32> %958 to <4 x float>, !dbg !37
  %960 = insertelement <4 x float> poison, float %937, i64 0, !dbg !34
  %961 = insertelement <4 x float> %960, float %942, i64 1, !dbg !34
  %962 = insertelement <4 x float> %961, float %947, i64 2, !dbg !34
  %963 = insertelement <4 x float> %962, float %952, i64 3, !dbg !34
  %964 = tail call <4 x float> @llvm.maxnum.v4f32(<4 x float> %963, <4 x float> %959), !dbg !34
  %965 = fmul <4 x float> %321, %964, !dbg !32
  %966 = tail call <4 x float> @llvm.maxnum.v4f32(<4 x float> %391, <4 x float> %965), !dbg !38
  %967 = fmul float %52, %792, !dbg !39
  %968 = fmul float %52, %793, !dbg !39
  %969 = fmul float %52, %794, !dbg !39
  %970 = fmul float %52, %795, !dbg !39
  %971 = fmul float %52, %797, !dbg !39
  %972 = fmul float %52, %798, !dbg !39
  %973 = fmul float %52, %799, !dbg !39
  %974 = fmul float %52, %800, !dbg !39
  %975 = fmul float %52, %802, !dbg !39
  %976 = fmul float %52, %803, !dbg !39
  %977 = fmul float %52, %804, !dbg !39
  %978 = fmul float %52, %805, !dbg !39
  %979 = fmul float %52, %807, !dbg !39
  %980 = fmul float %52, %808, !dbg !39
  %981 = fmul float %52, %809, !dbg !39
  %982 = fmul float %52, %810, !dbg !39
  %983 = fmul float %52, %812, !dbg !39
  %984 = fmul float %52, %813, !dbg !39
  %985 = fmul float %52, %814, !dbg !39
  %986 = fmul float %52, %815, !dbg !39
  %987 = fmul float %52, %817, !dbg !39
  %988 = fmul float %52, %818, !dbg !39
  %989 = fmul float %52, %819, !dbg !39
  %990 = fmul float %52, %820, !dbg !39
  %991 = fmul float %52, %822, !dbg !39
  %992 = fmul float %52, %823, !dbg !39
  %993 = fmul float %52, %824, !dbg !39
  %994 = fmul float %52, %825, !dbg !39
  %995 = fmul float %52, %827, !dbg !39
  %996 = fmul float %52, %828, !dbg !39
  %997 = fmul float %52, %829, !dbg !39
  %998 = fmul float %52, %830, !dbg !39
  %999 = fmul float %52, %832, !dbg !39
  %1000 = fmul float %52, %833, !dbg !39
  %1001 = fmul float %52, %834, !dbg !39
  %1002 = fmul float %52, %835, !dbg !39
  %1003 = fmul float %52, %837, !dbg !39
  %1004 = fmul float %52, %838, !dbg !39
  %1005 = fmul float %52, %839, !dbg !39
  %1006 = fmul float %52, %840, !dbg !39
  %1007 = fmul float %52, %842, !dbg !39
  %1008 = fmul float %52, %843, !dbg !39
  %1009 = fmul float %52, %844, !dbg !39
  %1010 = fmul float %52, %845, !dbg !39
  %1011 = fmul float %52, %847, !dbg !39
  %1012 = fmul float %52, %848, !dbg !39
  %1013 = fmul float %52, %849, !dbg !39
  %1014 = fmul float %52, %850, !dbg !39
  %1015 = fmul float %52, %852, !dbg !39
  %1016 = fmul float %52, %853, !dbg !39
  %1017 = fmul float %52, %854, !dbg !39
  %1018 = fmul float %52, %855, !dbg !39
  %1019 = fmul float %52, %857, !dbg !39
  %1020 = fmul float %52, %858, !dbg !39
  %1021 = fmul float %52, %859, !dbg !39
  %1022 = fmul float %52, %860, !dbg !39
  %1023 = fmul float %52, %862, !dbg !39
  %1024 = fmul float %52, %863, !dbg !39
  %1025 = fmul float %52, %864, !dbg !39
  %1026 = fmul float %52, %865, !dbg !39
  %1027 = fmul float %52, %867, !dbg !39
  %1028 = fmul float %52, %868, !dbg !39
  %1029 = fmul float %52, %869, !dbg !39
  %1030 = fmul float %52, %870, !dbg !39
  %1031 = extractelement <4 x float> %966, i64 0, !dbg !40
  %1032 = fsub float %967, %1031, !dbg !40
  %1033 = fsub float %968, %1031, !dbg !40
  %1034 = extractelement <4 x float> %966, i64 1, !dbg !40
  %1035 = fsub float %969, %1034, !dbg !40
  %1036 = fsub float %970, %1034, !dbg !40
  %1037 = fsub float %971, %1031, !dbg !40
  %1038 = fsub float %972, %1031, !dbg !40
  %1039 = fsub float %973, %1034, !dbg !40
  %1040 = fsub float %974, %1034, !dbg !40
  %1041 = fsub float %975, %1031, !dbg !40
  %1042 = fsub float %976, %1031, !dbg !40
  %1043 = fsub float %977, %1034, !dbg !40
  %1044 = fsub float %978, %1034, !dbg !40
  %1045 = fsub float %979, %1031, !dbg !40
  %1046 = fsub float %980, %1031, !dbg !40
  %1047 = fsub float %981, %1034, !dbg !40
  %1048 = fsub float %982, %1034, !dbg !40
  %1049 = fsub float %983, %1031, !dbg !40
  %1050 = fsub float %984, %1031, !dbg !40
  %1051 = fsub float %985, %1034, !dbg !40
  %1052 = fsub float %986, %1034, !dbg !40
  %1053 = fsub float %987, %1031, !dbg !40
  %1054 = fsub float %988, %1031, !dbg !40
  %1055 = fsub float %989, %1034, !dbg !40
  %1056 = fsub float %990, %1034, !dbg !40
  %1057 = fsub float %991, %1031, !dbg !40
  %1058 = fsub float %992, %1031, !dbg !40
  %1059 = fsub float %993, %1034, !dbg !40
  %1060 = fsub float %994, %1034, !dbg !40
  %1061 = fsub float %995, %1031, !dbg !40
  %1062 = fsub float %996, %1031, !dbg !40
  %1063 = fsub float %997, %1034, !dbg !40
  %1064 = fsub float %998, %1034, !dbg !40
  %1065 = extractelement <4 x float> %966, i64 2, !dbg !40
  %1066 = fsub float %999, %1065, !dbg !40
  %1067 = fsub float %1000, %1065, !dbg !40
  %1068 = extractelement <4 x float> %966, i64 3, !dbg !40
  %1069 = fsub float %1001, %1068, !dbg !40
  %1070 = fsub float %1002, %1068, !dbg !40
  %1071 = fsub float %1003, %1065, !dbg !40
  %1072 = fsub float %1004, %1065, !dbg !40
  %1073 = fsub float %1005, %1068, !dbg !40
  %1074 = fsub float %1006, %1068, !dbg !40
  %1075 = fsub float %1007, %1065, !dbg !40
  %1076 = fsub float %1008, %1065, !dbg !40
  %1077 = fsub float %1009, %1068, !dbg !40
  %1078 = fsub float %1010, %1068, !dbg !40
  %1079 = fsub float %1011, %1065, !dbg !40
  %1080 = fsub float %1012, %1065, !dbg !40
  %1081 = fsub float %1013, %1068, !dbg !40
  %1082 = fsub float %1014, %1068, !dbg !40
  %1083 = fsub float %1015, %1065, !dbg !40
  %1084 = fsub float %1016, %1065, !dbg !40
  %1085 = fsub float %1017, %1068, !dbg !40
  %1086 = fsub float %1018, %1068, !dbg !40
  %1087 = fsub float %1019, %1065, !dbg !40
  %1088 = fsub float %1020, %1065, !dbg !40
  %1089 = fsub float %1021, %1068, !dbg !40
  %1090 = fsub float %1022, %1068, !dbg !40
  %1091 = fsub float %1023, %1065, !dbg !40
  %1092 = fsub float %1024, %1065, !dbg !40
  %1093 = fsub float %1025, %1068, !dbg !40
  %1094 = fsub float %1026, %1068, !dbg !40
  %1095 = fsub float %1027, %1065, !dbg !40
  %1096 = fsub float %1028, %1065, !dbg !40
  %1097 = fsub float %1029, %1068, !dbg !40
  %1098 = fsub float %1030, %1068, !dbg !40
  %1099 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i = icmp eq i32 %1099, 0, !dbg !41
  br i1 %.not.i, label %1102, label %1100, !dbg !41

1100:                                             ; preds = %322
  %1101 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1032) #2, !dbg !41
  br label %__nv_exp2f.exit, !dbg !41

1102:                                             ; preds = %322
  %1103 = tail call float @llvm.nvvm.ex2.approx.f(float %1032) #2, !dbg !41
  br label %__nv_exp2f.exit, !dbg !41

__nv_exp2f.exit:                                  ; preds = %1100, %1102
  %.0.i = phi float [ %1101, %1100 ], [ %1103, %1102 ], !dbg !41
  %1104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i104 = icmp eq i32 %1104, 0, !dbg !41
  br i1 %.not.i104, label %1107, label %1105, !dbg !41

1105:                                             ; preds = %__nv_exp2f.exit
  %1106 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1033) #2, !dbg !41
  br label %__nv_exp2f.exit106, !dbg !41

1107:                                             ; preds = %__nv_exp2f.exit
  %1108 = tail call float @llvm.nvvm.ex2.approx.f(float %1033) #2, !dbg !41
  br label %__nv_exp2f.exit106, !dbg !41

__nv_exp2f.exit106:                               ; preds = %1105, %1107
  %.0.i105 = phi float [ %1106, %1105 ], [ %1108, %1107 ], !dbg !41
  %1109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i107 = icmp eq i32 %1109, 0, !dbg !41
  br i1 %.not.i107, label %1112, label %1110, !dbg !41

1110:                                             ; preds = %__nv_exp2f.exit106
  %1111 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1035) #2, !dbg !41
  br label %__nv_exp2f.exit109, !dbg !41

1112:                                             ; preds = %__nv_exp2f.exit106
  %1113 = tail call float @llvm.nvvm.ex2.approx.f(float %1035) #2, !dbg !41
  br label %__nv_exp2f.exit109, !dbg !41

__nv_exp2f.exit109:                               ; preds = %1110, %1112
  %.0.i108 = phi float [ %1111, %1110 ], [ %1113, %1112 ], !dbg !41
  %1114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i110 = icmp eq i32 %1114, 0, !dbg !41
  br i1 %.not.i110, label %1117, label %1115, !dbg !41

1115:                                             ; preds = %__nv_exp2f.exit109
  %1116 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1036) #2, !dbg !41
  br label %__nv_exp2f.exit112, !dbg !41

1117:                                             ; preds = %__nv_exp2f.exit109
  %1118 = tail call float @llvm.nvvm.ex2.approx.f(float %1036) #2, !dbg !41
  br label %__nv_exp2f.exit112, !dbg !41

__nv_exp2f.exit112:                               ; preds = %1115, %1117
  %.0.i111 = phi float [ %1116, %1115 ], [ %1118, %1117 ], !dbg !41
  %1119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i113 = icmp eq i32 %1119, 0, !dbg !41
  br i1 %.not.i113, label %1122, label %1120, !dbg !41

1120:                                             ; preds = %__nv_exp2f.exit112
  %1121 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1037) #2, !dbg !41
  br label %__nv_exp2f.exit115, !dbg !41

1122:                                             ; preds = %__nv_exp2f.exit112
  %1123 = tail call float @llvm.nvvm.ex2.approx.f(float %1037) #2, !dbg !41
  br label %__nv_exp2f.exit115, !dbg !41

__nv_exp2f.exit115:                               ; preds = %1120, %1122
  %.0.i114 = phi float [ %1121, %1120 ], [ %1123, %1122 ], !dbg !41
  %1124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i116 = icmp eq i32 %1124, 0, !dbg !41
  br i1 %.not.i116, label %1127, label %1125, !dbg !41

1125:                                             ; preds = %__nv_exp2f.exit115
  %1126 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1038) #2, !dbg !41
  br label %__nv_exp2f.exit118, !dbg !41

1127:                                             ; preds = %__nv_exp2f.exit115
  %1128 = tail call float @llvm.nvvm.ex2.approx.f(float %1038) #2, !dbg !41
  br label %__nv_exp2f.exit118, !dbg !41

__nv_exp2f.exit118:                               ; preds = %1125, %1127
  %.0.i117 = phi float [ %1126, %1125 ], [ %1128, %1127 ], !dbg !41
  %1129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i119 = icmp eq i32 %1129, 0, !dbg !41
  br i1 %.not.i119, label %1132, label %1130, !dbg !41

1130:                                             ; preds = %__nv_exp2f.exit118
  %1131 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1039) #2, !dbg !41
  br label %__nv_exp2f.exit121, !dbg !41

1132:                                             ; preds = %__nv_exp2f.exit118
  %1133 = tail call float @llvm.nvvm.ex2.approx.f(float %1039) #2, !dbg !41
  br label %__nv_exp2f.exit121, !dbg !41

__nv_exp2f.exit121:                               ; preds = %1130, %1132
  %.0.i120 = phi float [ %1131, %1130 ], [ %1133, %1132 ], !dbg !41
  %1134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i122 = icmp eq i32 %1134, 0, !dbg !41
  br i1 %.not.i122, label %1137, label %1135, !dbg !41

1135:                                             ; preds = %__nv_exp2f.exit121
  %1136 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1040) #2, !dbg !41
  br label %__nv_exp2f.exit124, !dbg !41

1137:                                             ; preds = %__nv_exp2f.exit121
  %1138 = tail call float @llvm.nvvm.ex2.approx.f(float %1040) #2, !dbg !41
  br label %__nv_exp2f.exit124, !dbg !41

__nv_exp2f.exit124:                               ; preds = %1135, %1137
  %.0.i123 = phi float [ %1136, %1135 ], [ %1138, %1137 ], !dbg !41
  %1139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i125 = icmp eq i32 %1139, 0, !dbg !41
  br i1 %.not.i125, label %1142, label %1140, !dbg !41

1140:                                             ; preds = %__nv_exp2f.exit124
  %1141 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1041) #2, !dbg !41
  br label %__nv_exp2f.exit127, !dbg !41

1142:                                             ; preds = %__nv_exp2f.exit124
  %1143 = tail call float @llvm.nvvm.ex2.approx.f(float %1041) #2, !dbg !41
  br label %__nv_exp2f.exit127, !dbg !41

__nv_exp2f.exit127:                               ; preds = %1140, %1142
  %.0.i126 = phi float [ %1141, %1140 ], [ %1143, %1142 ], !dbg !41
  %1144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i128 = icmp eq i32 %1144, 0, !dbg !41
  br i1 %.not.i128, label %1147, label %1145, !dbg !41

1145:                                             ; preds = %__nv_exp2f.exit127
  %1146 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1042) #2, !dbg !41
  br label %__nv_exp2f.exit130, !dbg !41

1147:                                             ; preds = %__nv_exp2f.exit127
  %1148 = tail call float @llvm.nvvm.ex2.approx.f(float %1042) #2, !dbg !41
  br label %__nv_exp2f.exit130, !dbg !41

__nv_exp2f.exit130:                               ; preds = %1145, %1147
  %.0.i129 = phi float [ %1146, %1145 ], [ %1148, %1147 ], !dbg !41
  %1149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i131 = icmp eq i32 %1149, 0, !dbg !41
  br i1 %.not.i131, label %1152, label %1150, !dbg !41

1150:                                             ; preds = %__nv_exp2f.exit130
  %1151 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1043) #2, !dbg !41
  br label %__nv_exp2f.exit133, !dbg !41

1152:                                             ; preds = %__nv_exp2f.exit130
  %1153 = tail call float @llvm.nvvm.ex2.approx.f(float %1043) #2, !dbg !41
  br label %__nv_exp2f.exit133, !dbg !41

__nv_exp2f.exit133:                               ; preds = %1150, %1152
  %.0.i132 = phi float [ %1151, %1150 ], [ %1153, %1152 ], !dbg !41
  %1154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i134 = icmp eq i32 %1154, 0, !dbg !41
  br i1 %.not.i134, label %1157, label %1155, !dbg !41

1155:                                             ; preds = %__nv_exp2f.exit133
  %1156 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1044) #2, !dbg !41
  br label %__nv_exp2f.exit136, !dbg !41

1157:                                             ; preds = %__nv_exp2f.exit133
  %1158 = tail call float @llvm.nvvm.ex2.approx.f(float %1044) #2, !dbg !41
  br label %__nv_exp2f.exit136, !dbg !41

__nv_exp2f.exit136:                               ; preds = %1155, %1157
  %.0.i135 = phi float [ %1156, %1155 ], [ %1158, %1157 ], !dbg !41
  %1159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i137 = icmp eq i32 %1159, 0, !dbg !41
  br i1 %.not.i137, label %1162, label %1160, !dbg !41

1160:                                             ; preds = %__nv_exp2f.exit136
  %1161 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1045) #2, !dbg !41
  br label %__nv_exp2f.exit139, !dbg !41

1162:                                             ; preds = %__nv_exp2f.exit136
  %1163 = tail call float @llvm.nvvm.ex2.approx.f(float %1045) #2, !dbg !41
  br label %__nv_exp2f.exit139, !dbg !41

__nv_exp2f.exit139:                               ; preds = %1160, %1162
  %.0.i138 = phi float [ %1161, %1160 ], [ %1163, %1162 ], !dbg !41
  %1164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i140 = icmp eq i32 %1164, 0, !dbg !41
  br i1 %.not.i140, label %1167, label %1165, !dbg !41

1165:                                             ; preds = %__nv_exp2f.exit139
  %1166 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1046) #2, !dbg !41
  br label %__nv_exp2f.exit142, !dbg !41

1167:                                             ; preds = %__nv_exp2f.exit139
  %1168 = tail call float @llvm.nvvm.ex2.approx.f(float %1046) #2, !dbg !41
  br label %__nv_exp2f.exit142, !dbg !41

__nv_exp2f.exit142:                               ; preds = %1165, %1167
  %.0.i141 = phi float [ %1166, %1165 ], [ %1168, %1167 ], !dbg !41
  %1169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i143 = icmp eq i32 %1169, 0, !dbg !41
  br i1 %.not.i143, label %1172, label %1170, !dbg !41

1170:                                             ; preds = %__nv_exp2f.exit142
  %1171 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1047) #2, !dbg !41
  br label %__nv_exp2f.exit145, !dbg !41

1172:                                             ; preds = %__nv_exp2f.exit142
  %1173 = tail call float @llvm.nvvm.ex2.approx.f(float %1047) #2, !dbg !41
  br label %__nv_exp2f.exit145, !dbg !41

__nv_exp2f.exit145:                               ; preds = %1170, %1172
  %.0.i144 = phi float [ %1171, %1170 ], [ %1173, %1172 ], !dbg !41
  %1174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i146 = icmp eq i32 %1174, 0, !dbg !41
  br i1 %.not.i146, label %1177, label %1175, !dbg !41

1175:                                             ; preds = %__nv_exp2f.exit145
  %1176 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1048) #2, !dbg !41
  br label %__nv_exp2f.exit148, !dbg !41

1177:                                             ; preds = %__nv_exp2f.exit145
  %1178 = tail call float @llvm.nvvm.ex2.approx.f(float %1048) #2, !dbg !41
  br label %__nv_exp2f.exit148, !dbg !41

__nv_exp2f.exit148:                               ; preds = %1175, %1177
  %.0.i147 = phi float [ %1176, %1175 ], [ %1178, %1177 ], !dbg !41
  %1179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i149 = icmp eq i32 %1179, 0, !dbg !41
  br i1 %.not.i149, label %1182, label %1180, !dbg !41

1180:                                             ; preds = %__nv_exp2f.exit148
  %1181 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1049) #2, !dbg !41
  br label %__nv_exp2f.exit151, !dbg !41

1182:                                             ; preds = %__nv_exp2f.exit148
  %1183 = tail call float @llvm.nvvm.ex2.approx.f(float %1049) #2, !dbg !41
  br label %__nv_exp2f.exit151, !dbg !41

__nv_exp2f.exit151:                               ; preds = %1180, %1182
  %.0.i150 = phi float [ %1181, %1180 ], [ %1183, %1182 ], !dbg !41
  %1184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i152 = icmp eq i32 %1184, 0, !dbg !41
  br i1 %.not.i152, label %1187, label %1185, !dbg !41

1185:                                             ; preds = %__nv_exp2f.exit151
  %1186 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1050) #2, !dbg !41
  br label %__nv_exp2f.exit154, !dbg !41

1187:                                             ; preds = %__nv_exp2f.exit151
  %1188 = tail call float @llvm.nvvm.ex2.approx.f(float %1050) #2, !dbg !41
  br label %__nv_exp2f.exit154, !dbg !41

__nv_exp2f.exit154:                               ; preds = %1185, %1187
  %.0.i153 = phi float [ %1186, %1185 ], [ %1188, %1187 ], !dbg !41
  %1189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i155 = icmp eq i32 %1189, 0, !dbg !41
  br i1 %.not.i155, label %1192, label %1190, !dbg !41

1190:                                             ; preds = %__nv_exp2f.exit154
  %1191 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1051) #2, !dbg !41
  br label %__nv_exp2f.exit157, !dbg !41

1192:                                             ; preds = %__nv_exp2f.exit154
  %1193 = tail call float @llvm.nvvm.ex2.approx.f(float %1051) #2, !dbg !41
  br label %__nv_exp2f.exit157, !dbg !41

__nv_exp2f.exit157:                               ; preds = %1190, %1192
  %.0.i156 = phi float [ %1191, %1190 ], [ %1193, %1192 ], !dbg !41
  %1194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i158 = icmp eq i32 %1194, 0, !dbg !41
  br i1 %.not.i158, label %1197, label %1195, !dbg !41

1195:                                             ; preds = %__nv_exp2f.exit157
  %1196 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1052) #2, !dbg !41
  br label %__nv_exp2f.exit160, !dbg !41

1197:                                             ; preds = %__nv_exp2f.exit157
  %1198 = tail call float @llvm.nvvm.ex2.approx.f(float %1052) #2, !dbg !41
  br label %__nv_exp2f.exit160, !dbg !41

__nv_exp2f.exit160:                               ; preds = %1195, %1197
  %.0.i159 = phi float [ %1196, %1195 ], [ %1198, %1197 ], !dbg !41
  %1199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i161 = icmp eq i32 %1199, 0, !dbg !41
  br i1 %.not.i161, label %1202, label %1200, !dbg !41

1200:                                             ; preds = %__nv_exp2f.exit160
  %1201 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1053) #2, !dbg !41
  br label %__nv_exp2f.exit163, !dbg !41

1202:                                             ; preds = %__nv_exp2f.exit160
  %1203 = tail call float @llvm.nvvm.ex2.approx.f(float %1053) #2, !dbg !41
  br label %__nv_exp2f.exit163, !dbg !41

__nv_exp2f.exit163:                               ; preds = %1200, %1202
  %.0.i162 = phi float [ %1201, %1200 ], [ %1203, %1202 ], !dbg !41
  %1204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i164 = icmp eq i32 %1204, 0, !dbg !41
  br i1 %.not.i164, label %1207, label %1205, !dbg !41

1205:                                             ; preds = %__nv_exp2f.exit163
  %1206 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1054) #2, !dbg !41
  br label %__nv_exp2f.exit166, !dbg !41

1207:                                             ; preds = %__nv_exp2f.exit163
  %1208 = tail call float @llvm.nvvm.ex2.approx.f(float %1054) #2, !dbg !41
  br label %__nv_exp2f.exit166, !dbg !41

__nv_exp2f.exit166:                               ; preds = %1205, %1207
  %.0.i165 = phi float [ %1206, %1205 ], [ %1208, %1207 ], !dbg !41
  %1209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i167 = icmp eq i32 %1209, 0, !dbg !41
  br i1 %.not.i167, label %1212, label %1210, !dbg !41

1210:                                             ; preds = %__nv_exp2f.exit166
  %1211 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1055) #2, !dbg !41
  br label %__nv_exp2f.exit169, !dbg !41

1212:                                             ; preds = %__nv_exp2f.exit166
  %1213 = tail call float @llvm.nvvm.ex2.approx.f(float %1055) #2, !dbg !41
  br label %__nv_exp2f.exit169, !dbg !41

__nv_exp2f.exit169:                               ; preds = %1210, %1212
  %.0.i168 = phi float [ %1211, %1210 ], [ %1213, %1212 ], !dbg !41
  %1214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i170 = icmp eq i32 %1214, 0, !dbg !41
  br i1 %.not.i170, label %1217, label %1215, !dbg !41

1215:                                             ; preds = %__nv_exp2f.exit169
  %1216 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1056) #2, !dbg !41
  br label %__nv_exp2f.exit172, !dbg !41

1217:                                             ; preds = %__nv_exp2f.exit169
  %1218 = tail call float @llvm.nvvm.ex2.approx.f(float %1056) #2, !dbg !41
  br label %__nv_exp2f.exit172, !dbg !41

__nv_exp2f.exit172:                               ; preds = %1215, %1217
  %.0.i171 = phi float [ %1216, %1215 ], [ %1218, %1217 ], !dbg !41
  %1219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i173 = icmp eq i32 %1219, 0, !dbg !41
  br i1 %.not.i173, label %1222, label %1220, !dbg !41

1220:                                             ; preds = %__nv_exp2f.exit172
  %1221 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1057) #2, !dbg !41
  br label %__nv_exp2f.exit175, !dbg !41

1222:                                             ; preds = %__nv_exp2f.exit172
  %1223 = tail call float @llvm.nvvm.ex2.approx.f(float %1057) #2, !dbg !41
  br label %__nv_exp2f.exit175, !dbg !41

__nv_exp2f.exit175:                               ; preds = %1220, %1222
  %.0.i174 = phi float [ %1221, %1220 ], [ %1223, %1222 ], !dbg !41
  %1224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i176 = icmp eq i32 %1224, 0, !dbg !41
  br i1 %.not.i176, label %1227, label %1225, !dbg !41

1225:                                             ; preds = %__nv_exp2f.exit175
  %1226 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1058) #2, !dbg !41
  br label %__nv_exp2f.exit178, !dbg !41

1227:                                             ; preds = %__nv_exp2f.exit175
  %1228 = tail call float @llvm.nvvm.ex2.approx.f(float %1058) #2, !dbg !41
  br label %__nv_exp2f.exit178, !dbg !41

__nv_exp2f.exit178:                               ; preds = %1225, %1227
  %.0.i177 = phi float [ %1226, %1225 ], [ %1228, %1227 ], !dbg !41
  %1229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i179 = icmp eq i32 %1229, 0, !dbg !41
  br i1 %.not.i179, label %1232, label %1230, !dbg !41

1230:                                             ; preds = %__nv_exp2f.exit178
  %1231 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1059) #2, !dbg !41
  br label %__nv_exp2f.exit181, !dbg !41

1232:                                             ; preds = %__nv_exp2f.exit178
  %1233 = tail call float @llvm.nvvm.ex2.approx.f(float %1059) #2, !dbg !41
  br label %__nv_exp2f.exit181, !dbg !41

__nv_exp2f.exit181:                               ; preds = %1230, %1232
  %.0.i180 = phi float [ %1231, %1230 ], [ %1233, %1232 ], !dbg !41
  %1234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i182 = icmp eq i32 %1234, 0, !dbg !41
  br i1 %.not.i182, label %1237, label %1235, !dbg !41

1235:                                             ; preds = %__nv_exp2f.exit181
  %1236 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1060) #2, !dbg !41
  br label %__nv_exp2f.exit184, !dbg !41

1237:                                             ; preds = %__nv_exp2f.exit181
  %1238 = tail call float @llvm.nvvm.ex2.approx.f(float %1060) #2, !dbg !41
  br label %__nv_exp2f.exit184, !dbg !41

__nv_exp2f.exit184:                               ; preds = %1235, %1237
  %.0.i183 = phi float [ %1236, %1235 ], [ %1238, %1237 ], !dbg !41
  %1239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i185 = icmp eq i32 %1239, 0, !dbg !41
  br i1 %.not.i185, label %1242, label %1240, !dbg !41

1240:                                             ; preds = %__nv_exp2f.exit184
  %1241 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1061) #2, !dbg !41
  br label %__nv_exp2f.exit187, !dbg !41

1242:                                             ; preds = %__nv_exp2f.exit184
  %1243 = tail call float @llvm.nvvm.ex2.approx.f(float %1061) #2, !dbg !41
  br label %__nv_exp2f.exit187, !dbg !41

__nv_exp2f.exit187:                               ; preds = %1240, %1242
  %.0.i186 = phi float [ %1241, %1240 ], [ %1243, %1242 ], !dbg !41
  %1244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i188 = icmp eq i32 %1244, 0, !dbg !41
  br i1 %.not.i188, label %1247, label %1245, !dbg !41

1245:                                             ; preds = %__nv_exp2f.exit187
  %1246 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1062) #2, !dbg !41
  br label %__nv_exp2f.exit190, !dbg !41

1247:                                             ; preds = %__nv_exp2f.exit187
  %1248 = tail call float @llvm.nvvm.ex2.approx.f(float %1062) #2, !dbg !41
  br label %__nv_exp2f.exit190, !dbg !41

__nv_exp2f.exit190:                               ; preds = %1245, %1247
  %.0.i189 = phi float [ %1246, %1245 ], [ %1248, %1247 ], !dbg !41
  %1249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i191 = icmp eq i32 %1249, 0, !dbg !41
  br i1 %.not.i191, label %1252, label %1250, !dbg !41

1250:                                             ; preds = %__nv_exp2f.exit190
  %1251 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1063) #2, !dbg !41
  br label %__nv_exp2f.exit193, !dbg !41

1252:                                             ; preds = %__nv_exp2f.exit190
  %1253 = tail call float @llvm.nvvm.ex2.approx.f(float %1063) #2, !dbg !41
  br label %__nv_exp2f.exit193, !dbg !41

__nv_exp2f.exit193:                               ; preds = %1250, %1252
  %.0.i192 = phi float [ %1251, %1250 ], [ %1253, %1252 ], !dbg !41
  %1254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i194 = icmp eq i32 %1254, 0, !dbg !41
  br i1 %.not.i194, label %1257, label %1255, !dbg !41

1255:                                             ; preds = %__nv_exp2f.exit193
  %1256 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1064) #2, !dbg !41
  br label %__nv_exp2f.exit196, !dbg !41

1257:                                             ; preds = %__nv_exp2f.exit193
  %1258 = tail call float @llvm.nvvm.ex2.approx.f(float %1064) #2, !dbg !41
  br label %__nv_exp2f.exit196, !dbg !41

__nv_exp2f.exit196:                               ; preds = %1255, %1257
  %.0.i195 = phi float [ %1256, %1255 ], [ %1258, %1257 ], !dbg !41
  %1259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i197 = icmp eq i32 %1259, 0, !dbg !41
  br i1 %.not.i197, label %1262, label %1260, !dbg !41

1260:                                             ; preds = %__nv_exp2f.exit196
  %1261 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1066) #2, !dbg !41
  br label %__nv_exp2f.exit199, !dbg !41

1262:                                             ; preds = %__nv_exp2f.exit196
  %1263 = tail call float @llvm.nvvm.ex2.approx.f(float %1066) #2, !dbg !41
  br label %__nv_exp2f.exit199, !dbg !41

__nv_exp2f.exit199:                               ; preds = %1260, %1262
  %.0.i198 = phi float [ %1261, %1260 ], [ %1263, %1262 ], !dbg !41
  %1264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i200 = icmp eq i32 %1264, 0, !dbg !41
  br i1 %.not.i200, label %1267, label %1265, !dbg !41

1265:                                             ; preds = %__nv_exp2f.exit199
  %1266 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1067) #2, !dbg !41
  br label %__nv_exp2f.exit202, !dbg !41

1267:                                             ; preds = %__nv_exp2f.exit199
  %1268 = tail call float @llvm.nvvm.ex2.approx.f(float %1067) #2, !dbg !41
  br label %__nv_exp2f.exit202, !dbg !41

__nv_exp2f.exit202:                               ; preds = %1265, %1267
  %.0.i201 = phi float [ %1266, %1265 ], [ %1268, %1267 ], !dbg !41
  %1269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i203 = icmp eq i32 %1269, 0, !dbg !41
  br i1 %.not.i203, label %1272, label %1270, !dbg !41

1270:                                             ; preds = %__nv_exp2f.exit202
  %1271 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1069) #2, !dbg !41
  br label %__nv_exp2f.exit205, !dbg !41

1272:                                             ; preds = %__nv_exp2f.exit202
  %1273 = tail call float @llvm.nvvm.ex2.approx.f(float %1069) #2, !dbg !41
  br label %__nv_exp2f.exit205, !dbg !41

__nv_exp2f.exit205:                               ; preds = %1270, %1272
  %.0.i204 = phi float [ %1271, %1270 ], [ %1273, %1272 ], !dbg !41
  %1274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i206 = icmp eq i32 %1274, 0, !dbg !41
  br i1 %.not.i206, label %1277, label %1275, !dbg !41

1275:                                             ; preds = %__nv_exp2f.exit205
  %1276 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1070) #2, !dbg !41
  br label %__nv_exp2f.exit208, !dbg !41

1277:                                             ; preds = %__nv_exp2f.exit205
  %1278 = tail call float @llvm.nvvm.ex2.approx.f(float %1070) #2, !dbg !41
  br label %__nv_exp2f.exit208, !dbg !41

__nv_exp2f.exit208:                               ; preds = %1275, %1277
  %.0.i207 = phi float [ %1276, %1275 ], [ %1278, %1277 ], !dbg !41
  %1279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i209 = icmp eq i32 %1279, 0, !dbg !41
  br i1 %.not.i209, label %1282, label %1280, !dbg !41

1280:                                             ; preds = %__nv_exp2f.exit208
  %1281 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1071) #2, !dbg !41
  br label %__nv_exp2f.exit211, !dbg !41

1282:                                             ; preds = %__nv_exp2f.exit208
  %1283 = tail call float @llvm.nvvm.ex2.approx.f(float %1071) #2, !dbg !41
  br label %__nv_exp2f.exit211, !dbg !41

__nv_exp2f.exit211:                               ; preds = %1280, %1282
  %.0.i210 = phi float [ %1281, %1280 ], [ %1283, %1282 ], !dbg !41
  %1284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i212 = icmp eq i32 %1284, 0, !dbg !41
  br i1 %.not.i212, label %1287, label %1285, !dbg !41

1285:                                             ; preds = %__nv_exp2f.exit211
  %1286 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1072) #2, !dbg !41
  br label %__nv_exp2f.exit214, !dbg !41

1287:                                             ; preds = %__nv_exp2f.exit211
  %1288 = tail call float @llvm.nvvm.ex2.approx.f(float %1072) #2, !dbg !41
  br label %__nv_exp2f.exit214, !dbg !41

__nv_exp2f.exit214:                               ; preds = %1285, %1287
  %.0.i213 = phi float [ %1286, %1285 ], [ %1288, %1287 ], !dbg !41
  %1289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i215 = icmp eq i32 %1289, 0, !dbg !41
  br i1 %.not.i215, label %1292, label %1290, !dbg !41

1290:                                             ; preds = %__nv_exp2f.exit214
  %1291 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1073) #2, !dbg !41
  br label %__nv_exp2f.exit217, !dbg !41

1292:                                             ; preds = %__nv_exp2f.exit214
  %1293 = tail call float @llvm.nvvm.ex2.approx.f(float %1073) #2, !dbg !41
  br label %__nv_exp2f.exit217, !dbg !41

__nv_exp2f.exit217:                               ; preds = %1290, %1292
  %.0.i216 = phi float [ %1291, %1290 ], [ %1293, %1292 ], !dbg !41
  %1294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i218 = icmp eq i32 %1294, 0, !dbg !41
  br i1 %.not.i218, label %1297, label %1295, !dbg !41

1295:                                             ; preds = %__nv_exp2f.exit217
  %1296 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1074) #2, !dbg !41
  br label %__nv_exp2f.exit220, !dbg !41

1297:                                             ; preds = %__nv_exp2f.exit217
  %1298 = tail call float @llvm.nvvm.ex2.approx.f(float %1074) #2, !dbg !41
  br label %__nv_exp2f.exit220, !dbg !41

__nv_exp2f.exit220:                               ; preds = %1295, %1297
  %.0.i219 = phi float [ %1296, %1295 ], [ %1298, %1297 ], !dbg !41
  %1299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i221 = icmp eq i32 %1299, 0, !dbg !41
  br i1 %.not.i221, label %1302, label %1300, !dbg !41

1300:                                             ; preds = %__nv_exp2f.exit220
  %1301 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1075) #2, !dbg !41
  br label %__nv_exp2f.exit223, !dbg !41

1302:                                             ; preds = %__nv_exp2f.exit220
  %1303 = tail call float @llvm.nvvm.ex2.approx.f(float %1075) #2, !dbg !41
  br label %__nv_exp2f.exit223, !dbg !41

__nv_exp2f.exit223:                               ; preds = %1300, %1302
  %.0.i222 = phi float [ %1301, %1300 ], [ %1303, %1302 ], !dbg !41
  %1304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i224 = icmp eq i32 %1304, 0, !dbg !41
  br i1 %.not.i224, label %1307, label %1305, !dbg !41

1305:                                             ; preds = %__nv_exp2f.exit223
  %1306 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1076) #2, !dbg !41
  br label %__nv_exp2f.exit226, !dbg !41

1307:                                             ; preds = %__nv_exp2f.exit223
  %1308 = tail call float @llvm.nvvm.ex2.approx.f(float %1076) #2, !dbg !41
  br label %__nv_exp2f.exit226, !dbg !41

__nv_exp2f.exit226:                               ; preds = %1305, %1307
  %.0.i225 = phi float [ %1306, %1305 ], [ %1308, %1307 ], !dbg !41
  %1309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i227 = icmp eq i32 %1309, 0, !dbg !41
  br i1 %.not.i227, label %1312, label %1310, !dbg !41

1310:                                             ; preds = %__nv_exp2f.exit226
  %1311 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1077) #2, !dbg !41
  br label %__nv_exp2f.exit229, !dbg !41

1312:                                             ; preds = %__nv_exp2f.exit226
  %1313 = tail call float @llvm.nvvm.ex2.approx.f(float %1077) #2, !dbg !41
  br label %__nv_exp2f.exit229, !dbg !41

__nv_exp2f.exit229:                               ; preds = %1310, %1312
  %.0.i228 = phi float [ %1311, %1310 ], [ %1313, %1312 ], !dbg !41
  %1314 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i230 = icmp eq i32 %1314, 0, !dbg !41
  br i1 %.not.i230, label %1317, label %1315, !dbg !41

1315:                                             ; preds = %__nv_exp2f.exit229
  %1316 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1078) #2, !dbg !41
  br label %__nv_exp2f.exit232, !dbg !41

1317:                                             ; preds = %__nv_exp2f.exit229
  %1318 = tail call float @llvm.nvvm.ex2.approx.f(float %1078) #2, !dbg !41
  br label %__nv_exp2f.exit232, !dbg !41

__nv_exp2f.exit232:                               ; preds = %1315, %1317
  %.0.i231 = phi float [ %1316, %1315 ], [ %1318, %1317 ], !dbg !41
  %1319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i233 = icmp eq i32 %1319, 0, !dbg !41
  br i1 %.not.i233, label %1322, label %1320, !dbg !41

1320:                                             ; preds = %__nv_exp2f.exit232
  %1321 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1079) #2, !dbg !41
  br label %__nv_exp2f.exit235, !dbg !41

1322:                                             ; preds = %__nv_exp2f.exit232
  %1323 = tail call float @llvm.nvvm.ex2.approx.f(float %1079) #2, !dbg !41
  br label %__nv_exp2f.exit235, !dbg !41

__nv_exp2f.exit235:                               ; preds = %1320, %1322
  %.0.i234 = phi float [ %1321, %1320 ], [ %1323, %1322 ], !dbg !41
  %1324 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i236 = icmp eq i32 %1324, 0, !dbg !41
  br i1 %.not.i236, label %1327, label %1325, !dbg !41

1325:                                             ; preds = %__nv_exp2f.exit235
  %1326 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1080) #2, !dbg !41
  br label %__nv_exp2f.exit238, !dbg !41

1327:                                             ; preds = %__nv_exp2f.exit235
  %1328 = tail call float @llvm.nvvm.ex2.approx.f(float %1080) #2, !dbg !41
  br label %__nv_exp2f.exit238, !dbg !41

__nv_exp2f.exit238:                               ; preds = %1325, %1327
  %.0.i237 = phi float [ %1326, %1325 ], [ %1328, %1327 ], !dbg !41
  %1329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i239 = icmp eq i32 %1329, 0, !dbg !41
  br i1 %.not.i239, label %1332, label %1330, !dbg !41

1330:                                             ; preds = %__nv_exp2f.exit238
  %1331 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1081) #2, !dbg !41
  br label %__nv_exp2f.exit241, !dbg !41

1332:                                             ; preds = %__nv_exp2f.exit238
  %1333 = tail call float @llvm.nvvm.ex2.approx.f(float %1081) #2, !dbg !41
  br label %__nv_exp2f.exit241, !dbg !41

__nv_exp2f.exit241:                               ; preds = %1330, %1332
  %.0.i240 = phi float [ %1331, %1330 ], [ %1333, %1332 ], !dbg !41
  %1334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i242 = icmp eq i32 %1334, 0, !dbg !41
  br i1 %.not.i242, label %1337, label %1335, !dbg !41

1335:                                             ; preds = %__nv_exp2f.exit241
  %1336 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1082) #2, !dbg !41
  br label %__nv_exp2f.exit244, !dbg !41

1337:                                             ; preds = %__nv_exp2f.exit241
  %1338 = tail call float @llvm.nvvm.ex2.approx.f(float %1082) #2, !dbg !41
  br label %__nv_exp2f.exit244, !dbg !41

__nv_exp2f.exit244:                               ; preds = %1335, %1337
  %.0.i243 = phi float [ %1336, %1335 ], [ %1338, %1337 ], !dbg !41
  %1339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i245 = icmp eq i32 %1339, 0, !dbg !41
  br i1 %.not.i245, label %1342, label %1340, !dbg !41

1340:                                             ; preds = %__nv_exp2f.exit244
  %1341 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1083) #2, !dbg !41
  br label %__nv_exp2f.exit247, !dbg !41

1342:                                             ; preds = %__nv_exp2f.exit244
  %1343 = tail call float @llvm.nvvm.ex2.approx.f(float %1083) #2, !dbg !41
  br label %__nv_exp2f.exit247, !dbg !41

__nv_exp2f.exit247:                               ; preds = %1340, %1342
  %.0.i246 = phi float [ %1341, %1340 ], [ %1343, %1342 ], !dbg !41
  %1344 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i248 = icmp eq i32 %1344, 0, !dbg !41
  br i1 %.not.i248, label %1347, label %1345, !dbg !41

1345:                                             ; preds = %__nv_exp2f.exit247
  %1346 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1084) #2, !dbg !41
  br label %__nv_exp2f.exit250, !dbg !41

1347:                                             ; preds = %__nv_exp2f.exit247
  %1348 = tail call float @llvm.nvvm.ex2.approx.f(float %1084) #2, !dbg !41
  br label %__nv_exp2f.exit250, !dbg !41

__nv_exp2f.exit250:                               ; preds = %1345, %1347
  %.0.i249 = phi float [ %1346, %1345 ], [ %1348, %1347 ], !dbg !41
  %1349 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i251 = icmp eq i32 %1349, 0, !dbg !41
  br i1 %.not.i251, label %1352, label %1350, !dbg !41

1350:                                             ; preds = %__nv_exp2f.exit250
  %1351 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1085) #2, !dbg !41
  br label %__nv_exp2f.exit253, !dbg !41

1352:                                             ; preds = %__nv_exp2f.exit250
  %1353 = tail call float @llvm.nvvm.ex2.approx.f(float %1085) #2, !dbg !41
  br label %__nv_exp2f.exit253, !dbg !41

__nv_exp2f.exit253:                               ; preds = %1350, %1352
  %.0.i252 = phi float [ %1351, %1350 ], [ %1353, %1352 ], !dbg !41
  %1354 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i254 = icmp eq i32 %1354, 0, !dbg !41
  br i1 %.not.i254, label %1357, label %1355, !dbg !41

1355:                                             ; preds = %__nv_exp2f.exit253
  %1356 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1086) #2, !dbg !41
  br label %__nv_exp2f.exit256, !dbg !41

1357:                                             ; preds = %__nv_exp2f.exit253
  %1358 = tail call float @llvm.nvvm.ex2.approx.f(float %1086) #2, !dbg !41
  br label %__nv_exp2f.exit256, !dbg !41

__nv_exp2f.exit256:                               ; preds = %1355, %1357
  %.0.i255 = phi float [ %1356, %1355 ], [ %1358, %1357 ], !dbg !41
  %1359 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i257 = icmp eq i32 %1359, 0, !dbg !41
  br i1 %.not.i257, label %1362, label %1360, !dbg !41

1360:                                             ; preds = %__nv_exp2f.exit256
  %1361 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1087) #2, !dbg !41
  br label %__nv_exp2f.exit259, !dbg !41

1362:                                             ; preds = %__nv_exp2f.exit256
  %1363 = tail call float @llvm.nvvm.ex2.approx.f(float %1087) #2, !dbg !41
  br label %__nv_exp2f.exit259, !dbg !41

__nv_exp2f.exit259:                               ; preds = %1360, %1362
  %.0.i258 = phi float [ %1361, %1360 ], [ %1363, %1362 ], !dbg !41
  %1364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i260 = icmp eq i32 %1364, 0, !dbg !41
  br i1 %.not.i260, label %1367, label %1365, !dbg !41

1365:                                             ; preds = %__nv_exp2f.exit259
  %1366 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1088) #2, !dbg !41
  br label %__nv_exp2f.exit262, !dbg !41

1367:                                             ; preds = %__nv_exp2f.exit259
  %1368 = tail call float @llvm.nvvm.ex2.approx.f(float %1088) #2, !dbg !41
  br label %__nv_exp2f.exit262, !dbg !41

__nv_exp2f.exit262:                               ; preds = %1365, %1367
  %.0.i261 = phi float [ %1366, %1365 ], [ %1368, %1367 ], !dbg !41
  %1369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i263 = icmp eq i32 %1369, 0, !dbg !41
  br i1 %.not.i263, label %1372, label %1370, !dbg !41

1370:                                             ; preds = %__nv_exp2f.exit262
  %1371 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1089) #2, !dbg !41
  br label %__nv_exp2f.exit265, !dbg !41

1372:                                             ; preds = %__nv_exp2f.exit262
  %1373 = tail call float @llvm.nvvm.ex2.approx.f(float %1089) #2, !dbg !41
  br label %__nv_exp2f.exit265, !dbg !41

__nv_exp2f.exit265:                               ; preds = %1370, %1372
  %.0.i264 = phi float [ %1371, %1370 ], [ %1373, %1372 ], !dbg !41
  %1374 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i266 = icmp eq i32 %1374, 0, !dbg !41
  br i1 %.not.i266, label %1377, label %1375, !dbg !41

1375:                                             ; preds = %__nv_exp2f.exit265
  %1376 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1090) #2, !dbg !41
  br label %__nv_exp2f.exit268, !dbg !41

1377:                                             ; preds = %__nv_exp2f.exit265
  %1378 = tail call float @llvm.nvvm.ex2.approx.f(float %1090) #2, !dbg !41
  br label %__nv_exp2f.exit268, !dbg !41

__nv_exp2f.exit268:                               ; preds = %1375, %1377
  %.0.i267 = phi float [ %1376, %1375 ], [ %1378, %1377 ], !dbg !41
  %1379 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i269 = icmp eq i32 %1379, 0, !dbg !41
  br i1 %.not.i269, label %1382, label %1380, !dbg !41

1380:                                             ; preds = %__nv_exp2f.exit268
  %1381 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1091) #2, !dbg !41
  br label %__nv_exp2f.exit271, !dbg !41

1382:                                             ; preds = %__nv_exp2f.exit268
  %1383 = tail call float @llvm.nvvm.ex2.approx.f(float %1091) #2, !dbg !41
  br label %__nv_exp2f.exit271, !dbg !41

__nv_exp2f.exit271:                               ; preds = %1380, %1382
  %.0.i270 = phi float [ %1381, %1380 ], [ %1383, %1382 ], !dbg !41
  %1384 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i272 = icmp eq i32 %1384, 0, !dbg !41
  br i1 %.not.i272, label %1387, label %1385, !dbg !41

1385:                                             ; preds = %__nv_exp2f.exit271
  %1386 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1092) #2, !dbg !41
  br label %__nv_exp2f.exit274, !dbg !41

1387:                                             ; preds = %__nv_exp2f.exit271
  %1388 = tail call float @llvm.nvvm.ex2.approx.f(float %1092) #2, !dbg !41
  br label %__nv_exp2f.exit274, !dbg !41

__nv_exp2f.exit274:                               ; preds = %1385, %1387
  %.0.i273 = phi float [ %1386, %1385 ], [ %1388, %1387 ], !dbg !41
  %1389 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i275 = icmp eq i32 %1389, 0, !dbg !41
  br i1 %.not.i275, label %1392, label %1390, !dbg !41

1390:                                             ; preds = %__nv_exp2f.exit274
  %1391 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1093) #2, !dbg !41
  br label %__nv_exp2f.exit277, !dbg !41

1392:                                             ; preds = %__nv_exp2f.exit274
  %1393 = tail call float @llvm.nvvm.ex2.approx.f(float %1093) #2, !dbg !41
  br label %__nv_exp2f.exit277, !dbg !41

__nv_exp2f.exit277:                               ; preds = %1390, %1392
  %.0.i276 = phi float [ %1391, %1390 ], [ %1393, %1392 ], !dbg !41
  %1394 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i278 = icmp eq i32 %1394, 0, !dbg !41
  br i1 %.not.i278, label %1397, label %1395, !dbg !41

1395:                                             ; preds = %__nv_exp2f.exit277
  %1396 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1094) #2, !dbg !41
  br label %__nv_exp2f.exit280, !dbg !41

1397:                                             ; preds = %__nv_exp2f.exit277
  %1398 = tail call float @llvm.nvvm.ex2.approx.f(float %1094) #2, !dbg !41
  br label %__nv_exp2f.exit280, !dbg !41

__nv_exp2f.exit280:                               ; preds = %1395, %1397
  %.0.i279 = phi float [ %1396, %1395 ], [ %1398, %1397 ], !dbg !41
  %1399 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i281 = icmp eq i32 %1399, 0, !dbg !41
  br i1 %.not.i281, label %1402, label %1400, !dbg !41

1400:                                             ; preds = %__nv_exp2f.exit280
  %1401 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1095) #2, !dbg !41
  br label %__nv_exp2f.exit283, !dbg !41

1402:                                             ; preds = %__nv_exp2f.exit280
  %1403 = tail call float @llvm.nvvm.ex2.approx.f(float %1095) #2, !dbg !41
  br label %__nv_exp2f.exit283, !dbg !41

__nv_exp2f.exit283:                               ; preds = %1400, %1402
  %.0.i282 = phi float [ %1401, %1400 ], [ %1403, %1402 ], !dbg !41
  %1404 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i284 = icmp eq i32 %1404, 0, !dbg !41
  br i1 %.not.i284, label %1407, label %1405, !dbg !41

1405:                                             ; preds = %__nv_exp2f.exit283
  %1406 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1096) #2, !dbg !41
  br label %__nv_exp2f.exit286, !dbg !41

1407:                                             ; preds = %__nv_exp2f.exit283
  %1408 = tail call float @llvm.nvvm.ex2.approx.f(float %1096) #2, !dbg !41
  br label %__nv_exp2f.exit286, !dbg !41

__nv_exp2f.exit286:                               ; preds = %1405, %1407
  %.0.i285 = phi float [ %1406, %1405 ], [ %1408, %1407 ], !dbg !41
  %1409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i287 = icmp eq i32 %1409, 0, !dbg !41
  br i1 %.not.i287, label %1412, label %1410, !dbg !41

1410:                                             ; preds = %__nv_exp2f.exit286
  %1411 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1097) #2, !dbg !41
  br label %__nv_exp2f.exit289, !dbg !41

1412:                                             ; preds = %__nv_exp2f.exit286
  %1413 = tail call float @llvm.nvvm.ex2.approx.f(float %1097) #2, !dbg !41
  br label %__nv_exp2f.exit289, !dbg !41

__nv_exp2f.exit289:                               ; preds = %1410, %1412
  %.0.i288 = phi float [ %1411, %1410 ], [ %1413, %1412 ], !dbg !41
  %1414 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i290 = icmp eq i32 %1414, 0, !dbg !41
  br i1 %.not.i290, label %1417, label %1415, !dbg !41

1415:                                             ; preds = %__nv_exp2f.exit289
  %1416 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1098) #2, !dbg !41
  br label %__nv_exp2f.exit292, !dbg !41

1417:                                             ; preds = %__nv_exp2f.exit289
  %1418 = tail call float @llvm.nvvm.ex2.approx.f(float %1098) #2, !dbg !41
  br label %__nv_exp2f.exit292, !dbg !41

__nv_exp2f.exit292:                               ; preds = %1415, %1417
  %.0.i291 = phi float [ %1416, %1415 ], [ %1418, %1417 ], !dbg !41
  %1419 = fadd float %.0.i, %.0.i105, !dbg !42
  %1420 = fadd float %.0.i108, %.0.i111, !dbg !42
  %1421 = fadd float %1419, %.0.i114, !dbg !42
  %1422 = fadd float %1421, %.0.i117, !dbg !42
  %1423 = fadd float %1420, %.0.i120, !dbg !42
  %1424 = fadd float %1423, %.0.i123, !dbg !42
  %1425 = fadd float %1422, %.0.i126, !dbg !42
  %1426 = fadd float %1425, %.0.i129, !dbg !42
  %1427 = fadd float %1424, %.0.i132, !dbg !42
  %1428 = fadd float %1427, %.0.i135, !dbg !42
  %1429 = fadd float %1426, %.0.i138, !dbg !42
  %1430 = fadd float %1429, %.0.i141, !dbg !42
  %1431 = fadd float %1428, %.0.i144, !dbg !42
  %1432 = fadd float %1431, %.0.i147, !dbg !42
  %1433 = fadd float %1430, %.0.i150, !dbg !42
  %1434 = fadd float %1433, %.0.i153, !dbg !42
  %1435 = fadd float %1432, %.0.i156, !dbg !42
  %1436 = fadd float %1435, %.0.i159, !dbg !42
  %1437 = fadd float %1434, %.0.i162, !dbg !42
  %1438 = fadd float %1437, %.0.i165, !dbg !42
  %1439 = fadd float %1436, %.0.i168, !dbg !42
  %1440 = fadd float %1439, %.0.i171, !dbg !42
  %1441 = fadd float %1438, %.0.i174, !dbg !42
  %1442 = fadd float %1441, %.0.i177, !dbg !42
  %1443 = fadd float %1440, %.0.i180, !dbg !42
  %1444 = fadd float %1443, %.0.i183, !dbg !42
  %1445 = fadd float %1442, %.0.i186, !dbg !42
  %1446 = fadd float %1445, %.0.i189, !dbg !42
  %1447 = fadd float %1444, %.0.i192, !dbg !42
  %1448 = fadd float %1447, %.0.i195, !dbg !42
  %1449 = fadd float %.0.i198, %.0.i201, !dbg !42
  %1450 = fadd float %.0.i204, %.0.i207, !dbg !42
  %1451 = fadd float %1449, %.0.i210, !dbg !42
  %1452 = fadd float %1451, %.0.i213, !dbg !42
  %1453 = fadd float %1450, %.0.i216, !dbg !42
  %1454 = fadd float %1453, %.0.i219, !dbg !42
  %1455 = fadd float %1452, %.0.i222, !dbg !42
  %1456 = fadd float %1455, %.0.i225, !dbg !42
  %1457 = fadd float %1454, %.0.i228, !dbg !42
  %1458 = fadd float %1457, %.0.i231, !dbg !42
  %1459 = fadd float %1456, %.0.i234, !dbg !42
  %1460 = fadd float %1459, %.0.i237, !dbg !42
  %1461 = fadd float %1458, %.0.i240, !dbg !42
  %1462 = fadd float %1461, %.0.i243, !dbg !42
  %1463 = fadd float %1460, %.0.i246, !dbg !42
  %1464 = fadd float %1463, %.0.i249, !dbg !42
  %1465 = fadd float %1462, %.0.i252, !dbg !42
  %1466 = fadd float %1465, %.0.i255, !dbg !42
  %1467 = fadd float %1464, %.0.i258, !dbg !42
  %1468 = fadd float %1467, %.0.i261, !dbg !42
  %1469 = fadd float %1466, %.0.i264, !dbg !42
  %1470 = fadd float %1469, %.0.i267, !dbg !42
  %1471 = fadd float %1468, %.0.i270, !dbg !42
  %1472 = fadd float %1471, %.0.i273, !dbg !42
  %1473 = fadd float %1470, %.0.i276, !dbg !42
  %1474 = fadd float %1473, %.0.i279, !dbg !42
  %1475 = fadd float %1472, %.0.i282, !dbg !42
  %1476 = fadd float %1475, %.0.i285, !dbg !42
  %1477 = fadd float %1474, %.0.i288, !dbg !42
  %1478 = fadd float %1477, %.0.i291, !dbg !42
  %1479 = bitcast float %1446 to i32, !dbg !43
  %1480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1479, i32 2, i32 31), !dbg !43
  %1481 = bitcast i32 %1480 to float, !dbg !43
  %1482 = fadd float %1446, %1481, !dbg !42
  %1483 = bitcast float %1482 to i32, !dbg !43
  %1484 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1483, i32 1, i32 31), !dbg !43
  %1485 = bitcast float %1448 to i32, !dbg !43
  %1486 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1485, i32 2, i32 31), !dbg !43
  %1487 = bitcast i32 %1486 to float, !dbg !43
  %1488 = fadd float %1448, %1487, !dbg !42
  %1489 = bitcast float %1488 to i32, !dbg !43
  %1490 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1489, i32 1, i32 31), !dbg !43
  %1491 = bitcast float %1476 to i32, !dbg !43
  %1492 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1491, i32 2, i32 31), !dbg !43
  %1493 = bitcast i32 %1492 to float, !dbg !43
  %1494 = fadd float %1476, %1493, !dbg !42
  %1495 = bitcast float %1494 to i32, !dbg !43
  %1496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1495, i32 1, i32 31), !dbg !43
  %1497 = bitcast float %1478 to i32, !dbg !43
  %1498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1497, i32 2, i32 31), !dbg !43
  %1499 = bitcast i32 %1498 to float, !dbg !43
  %1500 = fadd float %1478, %1499, !dbg !42
  %1501 = bitcast float %1500 to i32, !dbg !43
  %1502 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1501, i32 1, i32 31), !dbg !43
  %1503 = insertelement <4 x i32> poison, i32 %1484, i64 0, !dbg !43
  %1504 = insertelement <4 x i32> %1503, i32 %1490, i64 1, !dbg !43
  %1505 = insertelement <4 x i32> %1504, i32 %1496, i64 2, !dbg !43
  %1506 = insertelement <4 x i32> %1505, i32 %1502, i64 3, !dbg !43
  %1507 = bitcast <4 x i32> %1506 to <4 x float>, !dbg !43
  %1508 = insertelement <4 x float> poison, float %1482, i64 0, !dbg !42
  %1509 = insertelement <4 x float> %1508, float %1488, i64 1, !dbg !42
  %1510 = insertelement <4 x float> %1509, float %1494, i64 2, !dbg !42
  %1511 = insertelement <4 x float> %1510, float %1500, i64 3, !dbg !42
  %1512 = fadd <4 x float> %1511, %1507, !dbg !42
  %1513 = fsub <4 x float> %391, %966, !dbg !44
  %1514 = extractelement <4 x float> %1513, i64 0, !dbg !44
  %1515 = fsub <4 x float> %391, %966, !dbg !44
  %1516 = extractelement <4 x float> %1515, i64 1, !dbg !44
  %1517 = fsub <4 x float> %391, %966, !dbg !44
  %1518 = extractelement <4 x float> %1517, i64 2, !dbg !44
  %1519 = fsub <4 x float> %391, %966, !dbg !44
  %1520 = extractelement <4 x float> %1519, i64 3, !dbg !44
  %1521 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !45
  %.not.i293 = icmp eq i32 %1521, 0, !dbg !45
  br i1 %.not.i293, label %1524, label %1522, !dbg !45

1522:                                             ; preds = %__nv_exp2f.exit292
  %1523 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1514) #2, !dbg !45
  br label %__nv_exp2f.exit295, !dbg !45

1524:                                             ; preds = %__nv_exp2f.exit292
  %1525 = tail call float @llvm.nvvm.ex2.approx.f(float %1514) #2, !dbg !45
  br label %__nv_exp2f.exit295, !dbg !45

__nv_exp2f.exit295:                               ; preds = %1522, %1524
  %.0.i294 = phi float [ %1523, %1522 ], [ %1525, %1524 ], !dbg !45
  %1526 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !45
  %.not.i296 = icmp eq i32 %1526, 0, !dbg !45
  br i1 %.not.i296, label %1529, label %1527, !dbg !45

1527:                                             ; preds = %__nv_exp2f.exit295
  %1528 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1516) #2, !dbg !45
  br label %__nv_exp2f.exit298, !dbg !45

1529:                                             ; preds = %__nv_exp2f.exit295
  %1530 = tail call float @llvm.nvvm.ex2.approx.f(float %1516) #2, !dbg !45
  br label %__nv_exp2f.exit298, !dbg !45

__nv_exp2f.exit298:                               ; preds = %1527, %1529
  %.0.i297 = phi float [ %1528, %1527 ], [ %1530, %1529 ], !dbg !45
  %1531 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !45
  %.not.i299 = icmp eq i32 %1531, 0, !dbg !45
  br i1 %.not.i299, label %1534, label %1532, !dbg !45

1532:                                             ; preds = %__nv_exp2f.exit298
  %1533 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1518) #2, !dbg !45
  br label %__nv_exp2f.exit301, !dbg !45

1534:                                             ; preds = %__nv_exp2f.exit298
  %1535 = tail call float @llvm.nvvm.ex2.approx.f(float %1518) #2, !dbg !45
  br label %__nv_exp2f.exit301, !dbg !45

__nv_exp2f.exit301:                               ; preds = %1532, %1534
  %.0.i300 = phi float [ %1533, %1532 ], [ %1535, %1534 ], !dbg !45
  %1536 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !45
  %.not.i302 = icmp eq i32 %1536, 0, !dbg !45
  br i1 %.not.i302, label %1539, label %1537, !dbg !45

1537:                                             ; preds = %__nv_exp2f.exit301
  %1538 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1520) #2, !dbg !45
  br label %__nv_exp2f.exit304, !dbg !45

1539:                                             ; preds = %__nv_exp2f.exit301
  %1540 = tail call float @llvm.nvvm.ex2.approx.f(float %1520) #2, !dbg !45
  br label %__nv_exp2f.exit304, !dbg !45

__nv_exp2f.exit304:                               ; preds = %1537, %1539
  %.0.i303 = phi float [ %1538, %1537 ], [ %1540, %1539 ], !dbg !45
  %1541 = insertelement <4 x float> poison, float %.0.i294, i64 0, !dbg !46
  %1542 = insertelement <4 x float> %1541, float %.0.i297, i64 1, !dbg !46
  %1543 = insertelement <4 x float> %1542, float %.0.i300, i64 2, !dbg !46
  %1544 = insertelement <4 x float> %1543, float %.0.i303, i64 3, !dbg !46
  %1545 = fmul <4 x float> %392, %1544, !dbg !46
  %1546 = fadd <4 x float> %1512, %1545, !dbg !47
  %1547 = fmul float %326, %.0.i294, !dbg !48
  %1548 = fmul float %327, %.0.i294, !dbg !48
  %1549 = fmul float %328, %.0.i297, !dbg !48
  %1550 = fmul float %329, %.0.i297, !dbg !48
  %1551 = fmul float %330, %.0.i294, !dbg !48
  %1552 = fmul float %331, %.0.i294, !dbg !48
  %1553 = fmul float %332, %.0.i297, !dbg !48
  %1554 = fmul float %333, %.0.i297, !dbg !48
  %1555 = fmul float %334, %.0.i294, !dbg !48
  %1556 = fmul float %335, %.0.i294, !dbg !48
  %1557 = fmul float %336, %.0.i297, !dbg !48
  %1558 = fmul float %337, %.0.i297, !dbg !48
  %1559 = fmul float %338, %.0.i294, !dbg !48
  %1560 = fmul float %339, %.0.i294, !dbg !48
  %1561 = fmul float %340, %.0.i297, !dbg !48
  %1562 = fmul float %341, %.0.i297, !dbg !48
  %1563 = fmul float %342, %.0.i294, !dbg !48
  %1564 = fmul float %343, %.0.i294, !dbg !48
  %1565 = fmul float %344, %.0.i297, !dbg !48
  %1566 = fmul float %345, %.0.i297, !dbg !48
  %1567 = fmul float %346, %.0.i294, !dbg !48
  %1568 = fmul float %347, %.0.i294, !dbg !48
  %1569 = fmul float %348, %.0.i297, !dbg !48
  %1570 = fmul float %349, %.0.i297, !dbg !48
  %1571 = fmul float %350, %.0.i294, !dbg !48
  %1572 = fmul float %351, %.0.i294, !dbg !48
  %1573 = fmul float %352, %.0.i297, !dbg !48
  %1574 = fmul float %353, %.0.i297, !dbg !48
  %1575 = fmul float %354, %.0.i294, !dbg !48
  %1576 = fmul float %355, %.0.i294, !dbg !48
  %1577 = fmul float %356, %.0.i297, !dbg !48
  %1578 = fmul float %357, %.0.i297, !dbg !48
  %1579 = fmul float %358, %.0.i300, !dbg !48
  %1580 = fmul float %359, %.0.i300, !dbg !48
  %1581 = fmul float %360, %.0.i303, !dbg !48
  %1582 = fmul float %361, %.0.i303, !dbg !48
  %1583 = fmul float %362, %.0.i300, !dbg !48
  %1584 = fmul float %363, %.0.i300, !dbg !48
  %1585 = fmul float %364, %.0.i303, !dbg !48
  %1586 = fmul float %365, %.0.i303, !dbg !48
  %1587 = fmul float %366, %.0.i300, !dbg !48
  %1588 = fmul float %367, %.0.i300, !dbg !48
  %1589 = fmul float %368, %.0.i303, !dbg !48
  %1590 = fmul float %369, %.0.i303, !dbg !48
  %1591 = fmul float %370, %.0.i300, !dbg !48
  %1592 = fmul float %371, %.0.i300, !dbg !48
  %1593 = fmul float %372, %.0.i303, !dbg !48
  %1594 = fmul float %373, %.0.i303, !dbg !48
  %1595 = fmul float %374, %.0.i300, !dbg !48
  %1596 = fmul float %375, %.0.i300, !dbg !48
  %1597 = fmul float %376, %.0.i303, !dbg !48
  %1598 = fmul float %377, %.0.i303, !dbg !48
  %1599 = fmul float %378, %.0.i300, !dbg !48
  %1600 = fmul float %379, %.0.i300, !dbg !48
  %1601 = fmul float %380, %.0.i303, !dbg !48
  %1602 = fmul float %381, %.0.i303, !dbg !48
  %1603 = fmul float %382, %.0.i300, !dbg !48
  %1604 = fmul float %383, %.0.i300, !dbg !48
  %1605 = fmul float %384, %.0.i303, !dbg !48
  %1606 = fmul float %385, %.0.i303, !dbg !48
  %1607 = fmul float %386, %.0.i300, !dbg !48
  %1608 = fmul float %387, %.0.i300, !dbg !48
  %1609 = fmul float %388, %.0.i303, !dbg !48
  %1610 = fmul float %389, %.0.i303, !dbg !48
  %1611 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %397, !dbg !30
  %1612 = getelementptr inbounds nuw half, ptr addrspace(3) %1611, i32 %305, !dbg !30
  %1613 = ptrtoint ptr addrspace(3) %1612 to i32, !dbg !30
  %1614 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1613) #2, !dbg !30
  %1615 = extractvalue { i32, i32, i32, i32 } %1614, 0, !dbg !30
  %1616 = extractvalue { i32, i32, i32, i32 } %1614, 1, !dbg !30
  %1617 = extractvalue { i32, i32, i32, i32 } %1614, 2, !dbg !30
  %1618 = extractvalue { i32, i32, i32, i32 } %1614, 3, !dbg !30
  %1619 = getelementptr inbounds nuw i8, ptr addrspace(3) %1612, i32 4096, !dbg !30
  %1620 = ptrtoint ptr addrspace(3) %1619 to i32, !dbg !30
  %1621 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1620) #2, !dbg !30
  %1622 = extractvalue { i32, i32, i32, i32 } %1621, 0, !dbg !30
  %1623 = extractvalue { i32, i32, i32, i32 } %1621, 1, !dbg !30
  %1624 = extractvalue { i32, i32, i32, i32 } %1621, 2, !dbg !30
  %1625 = extractvalue { i32, i32, i32, i32 } %1621, 3, !dbg !30
  %1626 = getelementptr inbounds nuw half, ptr addrspace(3) %1611, i32 %306, !dbg !30
  %1627 = ptrtoint ptr addrspace(3) %1626 to i32, !dbg !30
  %1628 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1627) #2, !dbg !30
  %1629 = extractvalue { i32, i32, i32, i32 } %1628, 0, !dbg !30
  %1630 = extractvalue { i32, i32, i32, i32 } %1628, 1, !dbg !30
  %1631 = extractvalue { i32, i32, i32, i32 } %1628, 2, !dbg !30
  %1632 = extractvalue { i32, i32, i32, i32 } %1628, 3, !dbg !30
  %1633 = getelementptr inbounds nuw half, ptr addrspace(3) %1611, i32 %307, !dbg !30
  %1634 = ptrtoint ptr addrspace(3) %1633 to i32, !dbg !30
  %1635 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1634) #2, !dbg !30
  %1636 = extractvalue { i32, i32, i32, i32 } %1635, 0, !dbg !30
  %1637 = extractvalue { i32, i32, i32, i32 } %1635, 1, !dbg !30
  %1638 = extractvalue { i32, i32, i32, i32 } %1635, 2, !dbg !30
  %1639 = extractvalue { i32, i32, i32, i32 } %1635, 3, !dbg !30
  %1640 = getelementptr inbounds nuw half, ptr addrspace(3) %1611, i32 %308, !dbg !30
  %1641 = ptrtoint ptr addrspace(3) %1640 to i32, !dbg !30
  %1642 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1641) #2, !dbg !30
  %1643 = extractvalue { i32, i32, i32, i32 } %1642, 0, !dbg !30
  %1644 = extractvalue { i32, i32, i32, i32 } %1642, 1, !dbg !30
  %1645 = extractvalue { i32, i32, i32, i32 } %1642, 2, !dbg !30
  %1646 = extractvalue { i32, i32, i32, i32 } %1642, 3, !dbg !30
  %1647 = getelementptr inbounds nuw half, ptr addrspace(3) %1611, i32 %309, !dbg !30
  %1648 = ptrtoint ptr addrspace(3) %1647 to i32, !dbg !30
  %1649 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1648) #2, !dbg !30
  %1650 = extractvalue { i32, i32, i32, i32 } %1649, 0, !dbg !30
  %1651 = extractvalue { i32, i32, i32, i32 } %1649, 1, !dbg !30
  %1652 = extractvalue { i32, i32, i32, i32 } %1649, 2, !dbg !30
  %1653 = extractvalue { i32, i32, i32, i32 } %1649, 3, !dbg !30
  %1654 = getelementptr inbounds nuw half, ptr addrspace(3) %1611, i32 %310, !dbg !30
  %1655 = ptrtoint ptr addrspace(3) %1654 to i32, !dbg !30
  %1656 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1655) #2, !dbg !30
  %1657 = extractvalue { i32, i32, i32, i32 } %1656, 0, !dbg !30
  %1658 = extractvalue { i32, i32, i32, i32 } %1656, 1, !dbg !30
  %1659 = extractvalue { i32, i32, i32, i32 } %1656, 2, !dbg !30
  %1660 = extractvalue { i32, i32, i32, i32 } %1656, 3, !dbg !30
  %1661 = getelementptr inbounds nuw half, ptr addrspace(3) %1611, i32 %311, !dbg !30
  %1662 = ptrtoint ptr addrspace(3) %1661 to i32, !dbg !30
  %1663 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1662) #2, !dbg !30
  %1664 = extractvalue { i32, i32, i32, i32 } %1663, 0, !dbg !30
  %1665 = extractvalue { i32, i32, i32, i32 } %1663, 1, !dbg !30
  %1666 = extractvalue { i32, i32, i32, i32 } %1663, 2, !dbg !30
  %1667 = extractvalue { i32, i32, i32, i32 } %1663, 3, !dbg !30
  %1668 = getelementptr inbounds nuw half, ptr addrspace(3) %1611, i32 %312, !dbg !30
  %1669 = ptrtoint ptr addrspace(3) %1668 to i32, !dbg !30
  %1670 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1669) #2, !dbg !30
  %1671 = extractvalue { i32, i32, i32, i32 } %1670, 0, !dbg !30
  %1672 = extractvalue { i32, i32, i32, i32 } %1670, 1, !dbg !30
  %1673 = extractvalue { i32, i32, i32, i32 } %1670, 2, !dbg !30
  %1674 = extractvalue { i32, i32, i32, i32 } %1670, 3, !dbg !30
  %1675 = getelementptr inbounds nuw half, ptr addrspace(3) %1611, i32 %313, !dbg !30
  %1676 = ptrtoint ptr addrspace(3) %1675 to i32, !dbg !30
  %1677 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1676) #2, !dbg !30
  %1678 = extractvalue { i32, i32, i32, i32 } %1677, 0, !dbg !30
  %1679 = extractvalue { i32, i32, i32, i32 } %1677, 1, !dbg !30
  %1680 = extractvalue { i32, i32, i32, i32 } %1677, 2, !dbg !30
  %1681 = extractvalue { i32, i32, i32, i32 } %1677, 3, !dbg !30
  %1682 = getelementptr inbounds nuw half, ptr addrspace(3) %1611, i32 %314, !dbg !30
  %1683 = ptrtoint ptr addrspace(3) %1682 to i32, !dbg !30
  %1684 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1683) #2, !dbg !30
  %1685 = extractvalue { i32, i32, i32, i32 } %1684, 0, !dbg !30
  %1686 = extractvalue { i32, i32, i32, i32 } %1684, 1, !dbg !30
  %1687 = extractvalue { i32, i32, i32, i32 } %1684, 2, !dbg !30
  %1688 = extractvalue { i32, i32, i32, i32 } %1684, 3, !dbg !30
  %1689 = getelementptr inbounds nuw half, ptr addrspace(3) %1611, i32 %315, !dbg !30
  %1690 = ptrtoint ptr addrspace(3) %1689 to i32, !dbg !30
  %1691 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1690) #2, !dbg !30
  %1692 = extractvalue { i32, i32, i32, i32 } %1691, 0, !dbg !30
  %1693 = extractvalue { i32, i32, i32, i32 } %1691, 1, !dbg !30
  %1694 = extractvalue { i32, i32, i32, i32 } %1691, 2, !dbg !30
  %1695 = extractvalue { i32, i32, i32, i32 } %1691, 3, !dbg !30
  %1696 = getelementptr inbounds nuw half, ptr addrspace(3) %1611, i32 %316, !dbg !30
  %1697 = ptrtoint ptr addrspace(3) %1696 to i32, !dbg !30
  %1698 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1697) #2, !dbg !30
  %1699 = extractvalue { i32, i32, i32, i32 } %1698, 0, !dbg !30
  %1700 = extractvalue { i32, i32, i32, i32 } %1698, 1, !dbg !30
  %1701 = extractvalue { i32, i32, i32, i32 } %1698, 2, !dbg !30
  %1702 = extractvalue { i32, i32, i32, i32 } %1698, 3, !dbg !30
  %1703 = getelementptr inbounds nuw half, ptr addrspace(3) %1611, i32 %317, !dbg !30
  %1704 = ptrtoint ptr addrspace(3) %1703 to i32, !dbg !30
  %1705 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1704) #2, !dbg !30
  %1706 = extractvalue { i32, i32, i32, i32 } %1705, 0, !dbg !30
  %1707 = extractvalue { i32, i32, i32, i32 } %1705, 1, !dbg !30
  %1708 = extractvalue { i32, i32, i32, i32 } %1705, 2, !dbg !30
  %1709 = extractvalue { i32, i32, i32, i32 } %1705, 3, !dbg !30
  %1710 = getelementptr inbounds nuw half, ptr addrspace(3) %1611, i32 %318, !dbg !30
  %1711 = ptrtoint ptr addrspace(3) %1710 to i32, !dbg !30
  %1712 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1711) #2, !dbg !30
  %1713 = extractvalue { i32, i32, i32, i32 } %1712, 0, !dbg !30
  %1714 = extractvalue { i32, i32, i32, i32 } %1712, 1, !dbg !30
  %1715 = extractvalue { i32, i32, i32, i32 } %1712, 2, !dbg !30
  %1716 = extractvalue { i32, i32, i32, i32 } %1712, 3, !dbg !30
  %1717 = getelementptr inbounds nuw half, ptr addrspace(3) %1611, i32 %319, !dbg !30
  %1718 = ptrtoint ptr addrspace(3) %1717 to i32, !dbg !30
  %1719 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1718) #2, !dbg !30
  %1720 = extractvalue { i32, i32, i32, i32 } %1719, 0, !dbg !30
  %1721 = extractvalue { i32, i32, i32, i32 } %1719, 1, !dbg !30
  %1722 = extractvalue { i32, i32, i32, i32 } %1719, 2, !dbg !30
  %1723 = extractvalue { i32, i32, i32, i32 } %1719, 3, !dbg !30
  %1724 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !49
  %1725 = insertelement <2 x float> %1724, float %.0.i105, i64 1, !dbg !49
  %1726 = fptrunc <2 x float> %1725 to <2 x half>, !dbg !49
  %1727 = insertelement <2 x float> poison, float %.0.i108, i64 0, !dbg !49
  %1728 = insertelement <2 x float> %1727, float %.0.i111, i64 1, !dbg !49
  %1729 = fptrunc <2 x float> %1728 to <2 x half>, !dbg !49
  %1730 = insertelement <2 x float> poison, float %.0.i114, i64 0, !dbg !49
  %1731 = insertelement <2 x float> %1730, float %.0.i117, i64 1, !dbg !49
  %1732 = fptrunc <2 x float> %1731 to <2 x half>, !dbg !49
  %1733 = insertelement <2 x float> poison, float %.0.i120, i64 0, !dbg !49
  %1734 = insertelement <2 x float> %1733, float %.0.i123, i64 1, !dbg !49
  %1735 = fptrunc <2 x float> %1734 to <2 x half>, !dbg !49
  %1736 = insertelement <2 x float> poison, float %.0.i126, i64 0, !dbg !49
  %1737 = insertelement <2 x float> %1736, float %.0.i129, i64 1, !dbg !49
  %1738 = fptrunc <2 x float> %1737 to <2 x half>, !dbg !49
  %1739 = insertelement <2 x float> poison, float %.0.i132, i64 0, !dbg !49
  %1740 = insertelement <2 x float> %1739, float %.0.i135, i64 1, !dbg !49
  %1741 = fptrunc <2 x float> %1740 to <2 x half>, !dbg !49
  %1742 = insertelement <2 x float> poison, float %.0.i138, i64 0, !dbg !49
  %1743 = insertelement <2 x float> %1742, float %.0.i141, i64 1, !dbg !49
  %1744 = fptrunc <2 x float> %1743 to <2 x half>, !dbg !49
  %1745 = insertelement <2 x float> poison, float %.0.i144, i64 0, !dbg !49
  %1746 = insertelement <2 x float> %1745, float %.0.i147, i64 1, !dbg !49
  %1747 = fptrunc <2 x float> %1746 to <2 x half>, !dbg !49
  %1748 = insertelement <2 x float> poison, float %.0.i150, i64 0, !dbg !49
  %1749 = insertelement <2 x float> %1748, float %.0.i153, i64 1, !dbg !49
  %1750 = fptrunc <2 x float> %1749 to <2 x half>, !dbg !49
  %1751 = insertelement <2 x float> poison, float %.0.i156, i64 0, !dbg !49
  %1752 = insertelement <2 x float> %1751, float %.0.i159, i64 1, !dbg !49
  %1753 = fptrunc <2 x float> %1752 to <2 x half>, !dbg !49
  %1754 = insertelement <2 x float> poison, float %.0.i162, i64 0, !dbg !49
  %1755 = insertelement <2 x float> %1754, float %.0.i165, i64 1, !dbg !49
  %1756 = fptrunc <2 x float> %1755 to <2 x half>, !dbg !49
  %1757 = insertelement <2 x float> poison, float %.0.i168, i64 0, !dbg !49
  %1758 = insertelement <2 x float> %1757, float %.0.i171, i64 1, !dbg !49
  %1759 = fptrunc <2 x float> %1758 to <2 x half>, !dbg !49
  %1760 = insertelement <2 x float> poison, float %.0.i174, i64 0, !dbg !49
  %1761 = insertelement <2 x float> %1760, float %.0.i177, i64 1, !dbg !49
  %1762 = fptrunc <2 x float> %1761 to <2 x half>, !dbg !49
  %1763 = insertelement <2 x float> poison, float %.0.i180, i64 0, !dbg !49
  %1764 = insertelement <2 x float> %1763, float %.0.i183, i64 1, !dbg !49
  %1765 = fptrunc <2 x float> %1764 to <2 x half>, !dbg !49
  %1766 = insertelement <2 x float> poison, float %.0.i186, i64 0, !dbg !49
  %1767 = insertelement <2 x float> %1766, float %.0.i189, i64 1, !dbg !49
  %1768 = fptrunc <2 x float> %1767 to <2 x half>, !dbg !49
  %1769 = insertelement <2 x float> poison, float %.0.i192, i64 0, !dbg !49
  %1770 = insertelement <2 x float> %1769, float %.0.i195, i64 1, !dbg !49
  %1771 = fptrunc <2 x float> %1770 to <2 x half>, !dbg !49
  %1772 = insertelement <2 x float> poison, float %.0.i198, i64 0, !dbg !49
  %1773 = insertelement <2 x float> %1772, float %.0.i201, i64 1, !dbg !49
  %1774 = fptrunc <2 x float> %1773 to <2 x half>, !dbg !49
  %1775 = insertelement <2 x float> poison, float %.0.i204, i64 0, !dbg !49
  %1776 = insertelement <2 x float> %1775, float %.0.i207, i64 1, !dbg !49
  %1777 = fptrunc <2 x float> %1776 to <2 x half>, !dbg !49
  %1778 = insertelement <2 x float> poison, float %.0.i210, i64 0, !dbg !49
  %1779 = insertelement <2 x float> %1778, float %.0.i213, i64 1, !dbg !49
  %1780 = fptrunc <2 x float> %1779 to <2 x half>, !dbg !49
  %1781 = insertelement <2 x float> poison, float %.0.i216, i64 0, !dbg !49
  %1782 = insertelement <2 x float> %1781, float %.0.i219, i64 1, !dbg !49
  %1783 = fptrunc <2 x float> %1782 to <2 x half>, !dbg !49
  %1784 = insertelement <2 x float> poison, float %.0.i222, i64 0, !dbg !49
  %1785 = insertelement <2 x float> %1784, float %.0.i225, i64 1, !dbg !49
  %1786 = fptrunc <2 x float> %1785 to <2 x half>, !dbg !49
  %1787 = insertelement <2 x float> poison, float %.0.i228, i64 0, !dbg !49
  %1788 = insertelement <2 x float> %1787, float %.0.i231, i64 1, !dbg !49
  %1789 = fptrunc <2 x float> %1788 to <2 x half>, !dbg !49
  %1790 = insertelement <2 x float> poison, float %.0.i234, i64 0, !dbg !49
  %1791 = insertelement <2 x float> %1790, float %.0.i237, i64 1, !dbg !49
  %1792 = fptrunc <2 x float> %1791 to <2 x half>, !dbg !49
  %1793 = insertelement <2 x float> poison, float %.0.i240, i64 0, !dbg !49
  %1794 = insertelement <2 x float> %1793, float %.0.i243, i64 1, !dbg !49
  %1795 = fptrunc <2 x float> %1794 to <2 x half>, !dbg !49
  %1796 = insertelement <2 x float> poison, float %.0.i246, i64 0, !dbg !49
  %1797 = insertelement <2 x float> %1796, float %.0.i249, i64 1, !dbg !49
  %1798 = fptrunc <2 x float> %1797 to <2 x half>, !dbg !49
  %1799 = insertelement <2 x float> poison, float %.0.i252, i64 0, !dbg !49
  %1800 = insertelement <2 x float> %1799, float %.0.i255, i64 1, !dbg !49
  %1801 = fptrunc <2 x float> %1800 to <2 x half>, !dbg !49
  %1802 = insertelement <2 x float> poison, float %.0.i258, i64 0, !dbg !49
  %1803 = insertelement <2 x float> %1802, float %.0.i261, i64 1, !dbg !49
  %1804 = fptrunc <2 x float> %1803 to <2 x half>, !dbg !49
  %1805 = insertelement <2 x float> poison, float %.0.i264, i64 0, !dbg !49
  %1806 = insertelement <2 x float> %1805, float %.0.i267, i64 1, !dbg !49
  %1807 = fptrunc <2 x float> %1806 to <2 x half>, !dbg !49
  %1808 = insertelement <2 x float> poison, float %.0.i270, i64 0, !dbg !49
  %1809 = insertelement <2 x float> %1808, float %.0.i273, i64 1, !dbg !49
  %1810 = fptrunc <2 x float> %1809 to <2 x half>, !dbg !49
  %1811 = insertelement <2 x float> poison, float %.0.i276, i64 0, !dbg !49
  %1812 = insertelement <2 x float> %1811, float %.0.i279, i64 1, !dbg !49
  %1813 = fptrunc <2 x float> %1812 to <2 x half>, !dbg !49
  %1814 = insertelement <2 x float> poison, float %.0.i282, i64 0, !dbg !49
  %1815 = insertelement <2 x float> %1814, float %.0.i285, i64 1, !dbg !49
  %1816 = fptrunc <2 x float> %1815 to <2 x half>, !dbg !49
  %1817 = insertelement <2 x float> poison, float %.0.i288, i64 0, !dbg !49
  %1818 = insertelement <2 x float> %1817, float %.0.i291, i64 1, !dbg !49
  %1819 = fptrunc <2 x float> %1818 to <2 x half>, !dbg !49
  %1820 = bitcast <2 x half> %1726 to i32, !dbg !50
  %1821 = bitcast <2 x half> %1729 to i32, !dbg !50
  %1822 = bitcast <2 x half> %1732 to i32, !dbg !50
  %1823 = bitcast <2 x half> %1735 to i32, !dbg !50
  %1824 = bitcast <2 x half> %1738 to i32, !dbg !50
  %1825 = bitcast <2 x half> %1741 to i32, !dbg !50
  %1826 = bitcast <2 x half> %1744 to i32, !dbg !50
  %1827 = bitcast <2 x half> %1747 to i32, !dbg !50
  %1828 = bitcast <2 x half> %1750 to i32, !dbg !50
  %1829 = bitcast <2 x half> %1753 to i32, !dbg !50
  %1830 = bitcast <2 x half> %1756 to i32, !dbg !50
  %1831 = bitcast <2 x half> %1759 to i32, !dbg !50
  %1832 = bitcast <2 x half> %1762 to i32, !dbg !50
  %1833 = bitcast <2 x half> %1765 to i32, !dbg !50
  %1834 = bitcast <2 x half> %1768 to i32, !dbg !50
  %1835 = bitcast <2 x half> %1771 to i32, !dbg !50
  %1836 = bitcast <2 x half> %1774 to i32, !dbg !50
  %1837 = bitcast <2 x half> %1777 to i32, !dbg !50
  %1838 = bitcast <2 x half> %1780 to i32, !dbg !50
  %1839 = bitcast <2 x half> %1783 to i32, !dbg !50
  %1840 = bitcast <2 x half> %1786 to i32, !dbg !50
  %1841 = bitcast <2 x half> %1789 to i32, !dbg !50
  %1842 = bitcast <2 x half> %1792 to i32, !dbg !50
  %1843 = bitcast <2 x half> %1795 to i32, !dbg !50
  %1844 = bitcast <2 x half> %1798 to i32, !dbg !50
  %1845 = bitcast <2 x half> %1801 to i32, !dbg !50
  %1846 = bitcast <2 x half> %1804 to i32, !dbg !50
  %1847 = bitcast <2 x half> %1807 to i32, !dbg !50
  %1848 = bitcast <2 x half> %1810 to i32, !dbg !50
  %1849 = bitcast <2 x half> %1813 to i32, !dbg !50
  %1850 = bitcast <2 x half> %1816 to i32, !dbg !50
  %1851 = bitcast <2 x half> %1819 to i32, !dbg !50
  %1852 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1547, float %1548, float %1549, float %1550, i32 %1820, i32 %1821, i32 %1822, i32 %1823, i32 %1615, i32 %1616) #2, !dbg !50
  %1853 = extractvalue { float, float, float, float } %1852, 0, !dbg !50
  %1854 = extractvalue { float, float, float, float } %1852, 1, !dbg !50
  %1855 = extractvalue { float, float, float, float } %1852, 2, !dbg !50
  %1856 = extractvalue { float, float, float, float } %1852, 3, !dbg !50
  %1857 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1551, float %1552, float %1553, float %1554, i32 %1820, i32 %1821, i32 %1822, i32 %1823, i32 %1629, i32 %1630) #2, !dbg !50
  %1858 = extractvalue { float, float, float, float } %1857, 0, !dbg !50
  %1859 = extractvalue { float, float, float, float } %1857, 1, !dbg !50
  %1860 = extractvalue { float, float, float, float } %1857, 2, !dbg !50
  %1861 = extractvalue { float, float, float, float } %1857, 3, !dbg !50
  %1862 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1555, float %1556, float %1557, float %1558, i32 %1820, i32 %1821, i32 %1822, i32 %1823, i32 %1643, i32 %1644) #2, !dbg !50
  %1863 = extractvalue { float, float, float, float } %1862, 0, !dbg !50
  %1864 = extractvalue { float, float, float, float } %1862, 1, !dbg !50
  %1865 = extractvalue { float, float, float, float } %1862, 2, !dbg !50
  %1866 = extractvalue { float, float, float, float } %1862, 3, !dbg !50
  %1867 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1559, float %1560, float %1561, float %1562, i32 %1820, i32 %1821, i32 %1822, i32 %1823, i32 %1657, i32 %1658) #2, !dbg !50
  %1868 = extractvalue { float, float, float, float } %1867, 0, !dbg !50
  %1869 = extractvalue { float, float, float, float } %1867, 1, !dbg !50
  %1870 = extractvalue { float, float, float, float } %1867, 2, !dbg !50
  %1871 = extractvalue { float, float, float, float } %1867, 3, !dbg !50
  %1872 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1563, float %1564, float %1565, float %1566, i32 %1820, i32 %1821, i32 %1822, i32 %1823, i32 %1671, i32 %1672) #2, !dbg !50
  %1873 = extractvalue { float, float, float, float } %1872, 0, !dbg !50
  %1874 = extractvalue { float, float, float, float } %1872, 1, !dbg !50
  %1875 = extractvalue { float, float, float, float } %1872, 2, !dbg !50
  %1876 = extractvalue { float, float, float, float } %1872, 3, !dbg !50
  %1877 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1567, float %1568, float %1569, float %1570, i32 %1820, i32 %1821, i32 %1822, i32 %1823, i32 %1685, i32 %1686) #2, !dbg !50
  %1878 = extractvalue { float, float, float, float } %1877, 0, !dbg !50
  %1879 = extractvalue { float, float, float, float } %1877, 1, !dbg !50
  %1880 = extractvalue { float, float, float, float } %1877, 2, !dbg !50
  %1881 = extractvalue { float, float, float, float } %1877, 3, !dbg !50
  %1882 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1571, float %1572, float %1573, float %1574, i32 %1820, i32 %1821, i32 %1822, i32 %1823, i32 %1699, i32 %1700) #2, !dbg !50
  %1883 = extractvalue { float, float, float, float } %1882, 0, !dbg !50
  %1884 = extractvalue { float, float, float, float } %1882, 1, !dbg !50
  %1885 = extractvalue { float, float, float, float } %1882, 2, !dbg !50
  %1886 = extractvalue { float, float, float, float } %1882, 3, !dbg !50
  %1887 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1575, float %1576, float %1577, float %1578, i32 %1820, i32 %1821, i32 %1822, i32 %1823, i32 %1713, i32 %1714) #2, !dbg !50
  %1888 = extractvalue { float, float, float, float } %1887, 0, !dbg !50
  %1889 = extractvalue { float, float, float, float } %1887, 1, !dbg !50
  %1890 = extractvalue { float, float, float, float } %1887, 2, !dbg !50
  %1891 = extractvalue { float, float, float, float } %1887, 3, !dbg !50
  %1892 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1579, float %1580, float %1581, float %1582, i32 %1836, i32 %1837, i32 %1838, i32 %1839, i32 %1615, i32 %1616) #2, !dbg !50
  %1893 = extractvalue { float, float, float, float } %1892, 0, !dbg !50
  %1894 = extractvalue { float, float, float, float } %1892, 1, !dbg !50
  %1895 = extractvalue { float, float, float, float } %1892, 2, !dbg !50
  %1896 = extractvalue { float, float, float, float } %1892, 3, !dbg !50
  %1897 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1583, float %1584, float %1585, float %1586, i32 %1836, i32 %1837, i32 %1838, i32 %1839, i32 %1629, i32 %1630) #2, !dbg !50
  %1898 = extractvalue { float, float, float, float } %1897, 0, !dbg !50
  %1899 = extractvalue { float, float, float, float } %1897, 1, !dbg !50
  %1900 = extractvalue { float, float, float, float } %1897, 2, !dbg !50
  %1901 = extractvalue { float, float, float, float } %1897, 3, !dbg !50
  %1902 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1587, float %1588, float %1589, float %1590, i32 %1836, i32 %1837, i32 %1838, i32 %1839, i32 %1643, i32 %1644) #2, !dbg !50
  %1903 = extractvalue { float, float, float, float } %1902, 0, !dbg !50
  %1904 = extractvalue { float, float, float, float } %1902, 1, !dbg !50
  %1905 = extractvalue { float, float, float, float } %1902, 2, !dbg !50
  %1906 = extractvalue { float, float, float, float } %1902, 3, !dbg !50
  %1907 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1591, float %1592, float %1593, float %1594, i32 %1836, i32 %1837, i32 %1838, i32 %1839, i32 %1657, i32 %1658) #2, !dbg !50
  %1908 = extractvalue { float, float, float, float } %1907, 0, !dbg !50
  %1909 = extractvalue { float, float, float, float } %1907, 1, !dbg !50
  %1910 = extractvalue { float, float, float, float } %1907, 2, !dbg !50
  %1911 = extractvalue { float, float, float, float } %1907, 3, !dbg !50
  %1912 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1595, float %1596, float %1597, float %1598, i32 %1836, i32 %1837, i32 %1838, i32 %1839, i32 %1671, i32 %1672) #2, !dbg !50
  %1913 = extractvalue { float, float, float, float } %1912, 0, !dbg !50
  %1914 = extractvalue { float, float, float, float } %1912, 1, !dbg !50
  %1915 = extractvalue { float, float, float, float } %1912, 2, !dbg !50
  %1916 = extractvalue { float, float, float, float } %1912, 3, !dbg !50
  %1917 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1599, float %1600, float %1601, float %1602, i32 %1836, i32 %1837, i32 %1838, i32 %1839, i32 %1685, i32 %1686) #2, !dbg !50
  %1918 = extractvalue { float, float, float, float } %1917, 0, !dbg !50
  %1919 = extractvalue { float, float, float, float } %1917, 1, !dbg !50
  %1920 = extractvalue { float, float, float, float } %1917, 2, !dbg !50
  %1921 = extractvalue { float, float, float, float } %1917, 3, !dbg !50
  %1922 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1603, float %1604, float %1605, float %1606, i32 %1836, i32 %1837, i32 %1838, i32 %1839, i32 %1699, i32 %1700) #2, !dbg !50
  %1923 = extractvalue { float, float, float, float } %1922, 0, !dbg !50
  %1924 = extractvalue { float, float, float, float } %1922, 1, !dbg !50
  %1925 = extractvalue { float, float, float, float } %1922, 2, !dbg !50
  %1926 = extractvalue { float, float, float, float } %1922, 3, !dbg !50
  %1927 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1607, float %1608, float %1609, float %1610, i32 %1836, i32 %1837, i32 %1838, i32 %1839, i32 %1713, i32 %1714) #2, !dbg !50
  %1928 = extractvalue { float, float, float, float } %1927, 0, !dbg !50
  %1929 = extractvalue { float, float, float, float } %1927, 1, !dbg !50
  %1930 = extractvalue { float, float, float, float } %1927, 2, !dbg !50
  %1931 = extractvalue { float, float, float, float } %1927, 3, !dbg !50
  %1932 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1853, float %1854, float %1855, float %1856, i32 %1824, i32 %1825, i32 %1826, i32 %1827, i32 %1617, i32 %1618) #2, !dbg !50
  %1933 = extractvalue { float, float, float, float } %1932, 0, !dbg !50
  %1934 = extractvalue { float, float, float, float } %1932, 1, !dbg !50
  %1935 = extractvalue { float, float, float, float } %1932, 2, !dbg !50
  %1936 = extractvalue { float, float, float, float } %1932, 3, !dbg !50
  %1937 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1858, float %1859, float %1860, float %1861, i32 %1824, i32 %1825, i32 %1826, i32 %1827, i32 %1631, i32 %1632) #2, !dbg !50
  %1938 = extractvalue { float, float, float, float } %1937, 0, !dbg !50
  %1939 = extractvalue { float, float, float, float } %1937, 1, !dbg !50
  %1940 = extractvalue { float, float, float, float } %1937, 2, !dbg !50
  %1941 = extractvalue { float, float, float, float } %1937, 3, !dbg !50
  %1942 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1863, float %1864, float %1865, float %1866, i32 %1824, i32 %1825, i32 %1826, i32 %1827, i32 %1645, i32 %1646) #2, !dbg !50
  %1943 = extractvalue { float, float, float, float } %1942, 0, !dbg !50
  %1944 = extractvalue { float, float, float, float } %1942, 1, !dbg !50
  %1945 = extractvalue { float, float, float, float } %1942, 2, !dbg !50
  %1946 = extractvalue { float, float, float, float } %1942, 3, !dbg !50
  %1947 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1868, float %1869, float %1870, float %1871, i32 %1824, i32 %1825, i32 %1826, i32 %1827, i32 %1659, i32 %1660) #2, !dbg !50
  %1948 = extractvalue { float, float, float, float } %1947, 0, !dbg !50
  %1949 = extractvalue { float, float, float, float } %1947, 1, !dbg !50
  %1950 = extractvalue { float, float, float, float } %1947, 2, !dbg !50
  %1951 = extractvalue { float, float, float, float } %1947, 3, !dbg !50
  %1952 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1873, float %1874, float %1875, float %1876, i32 %1824, i32 %1825, i32 %1826, i32 %1827, i32 %1673, i32 %1674) #2, !dbg !50
  %1953 = extractvalue { float, float, float, float } %1952, 0, !dbg !50
  %1954 = extractvalue { float, float, float, float } %1952, 1, !dbg !50
  %1955 = extractvalue { float, float, float, float } %1952, 2, !dbg !50
  %1956 = extractvalue { float, float, float, float } %1952, 3, !dbg !50
  %1957 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1878, float %1879, float %1880, float %1881, i32 %1824, i32 %1825, i32 %1826, i32 %1827, i32 %1687, i32 %1688) #2, !dbg !50
  %1958 = extractvalue { float, float, float, float } %1957, 0, !dbg !50
  %1959 = extractvalue { float, float, float, float } %1957, 1, !dbg !50
  %1960 = extractvalue { float, float, float, float } %1957, 2, !dbg !50
  %1961 = extractvalue { float, float, float, float } %1957, 3, !dbg !50
  %1962 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1883, float %1884, float %1885, float %1886, i32 %1824, i32 %1825, i32 %1826, i32 %1827, i32 %1701, i32 %1702) #2, !dbg !50
  %1963 = extractvalue { float, float, float, float } %1962, 0, !dbg !50
  %1964 = extractvalue { float, float, float, float } %1962, 1, !dbg !50
  %1965 = extractvalue { float, float, float, float } %1962, 2, !dbg !50
  %1966 = extractvalue { float, float, float, float } %1962, 3, !dbg !50
  %1967 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1888, float %1889, float %1890, float %1891, i32 %1824, i32 %1825, i32 %1826, i32 %1827, i32 %1715, i32 %1716) #2, !dbg !50
  %1968 = extractvalue { float, float, float, float } %1967, 0, !dbg !50
  %1969 = extractvalue { float, float, float, float } %1967, 1, !dbg !50
  %1970 = extractvalue { float, float, float, float } %1967, 2, !dbg !50
  %1971 = extractvalue { float, float, float, float } %1967, 3, !dbg !50
  %1972 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1893, float %1894, float %1895, float %1896, i32 %1840, i32 %1841, i32 %1842, i32 %1843, i32 %1617, i32 %1618) #2, !dbg !50
  %1973 = extractvalue { float, float, float, float } %1972, 0, !dbg !50
  %1974 = extractvalue { float, float, float, float } %1972, 1, !dbg !50
  %1975 = extractvalue { float, float, float, float } %1972, 2, !dbg !50
  %1976 = extractvalue { float, float, float, float } %1972, 3, !dbg !50
  %1977 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1898, float %1899, float %1900, float %1901, i32 %1840, i32 %1841, i32 %1842, i32 %1843, i32 %1631, i32 %1632) #2, !dbg !50
  %1978 = extractvalue { float, float, float, float } %1977, 0, !dbg !50
  %1979 = extractvalue { float, float, float, float } %1977, 1, !dbg !50
  %1980 = extractvalue { float, float, float, float } %1977, 2, !dbg !50
  %1981 = extractvalue { float, float, float, float } %1977, 3, !dbg !50
  %1982 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1903, float %1904, float %1905, float %1906, i32 %1840, i32 %1841, i32 %1842, i32 %1843, i32 %1645, i32 %1646) #2, !dbg !50
  %1983 = extractvalue { float, float, float, float } %1982, 0, !dbg !50
  %1984 = extractvalue { float, float, float, float } %1982, 1, !dbg !50
  %1985 = extractvalue { float, float, float, float } %1982, 2, !dbg !50
  %1986 = extractvalue { float, float, float, float } %1982, 3, !dbg !50
  %1987 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1908, float %1909, float %1910, float %1911, i32 %1840, i32 %1841, i32 %1842, i32 %1843, i32 %1659, i32 %1660) #2, !dbg !50
  %1988 = extractvalue { float, float, float, float } %1987, 0, !dbg !50
  %1989 = extractvalue { float, float, float, float } %1987, 1, !dbg !50
  %1990 = extractvalue { float, float, float, float } %1987, 2, !dbg !50
  %1991 = extractvalue { float, float, float, float } %1987, 3, !dbg !50
  %1992 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1913, float %1914, float %1915, float %1916, i32 %1840, i32 %1841, i32 %1842, i32 %1843, i32 %1673, i32 %1674) #2, !dbg !50
  %1993 = extractvalue { float, float, float, float } %1992, 0, !dbg !50
  %1994 = extractvalue { float, float, float, float } %1992, 1, !dbg !50
  %1995 = extractvalue { float, float, float, float } %1992, 2, !dbg !50
  %1996 = extractvalue { float, float, float, float } %1992, 3, !dbg !50
  %1997 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1918, float %1919, float %1920, float %1921, i32 %1840, i32 %1841, i32 %1842, i32 %1843, i32 %1687, i32 %1688) #2, !dbg !50
  %1998 = extractvalue { float, float, float, float } %1997, 0, !dbg !50
  %1999 = extractvalue { float, float, float, float } %1997, 1, !dbg !50
  %2000 = extractvalue { float, float, float, float } %1997, 2, !dbg !50
  %2001 = extractvalue { float, float, float, float } %1997, 3, !dbg !50
  %2002 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1923, float %1924, float %1925, float %1926, i32 %1840, i32 %1841, i32 %1842, i32 %1843, i32 %1701, i32 %1702) #2, !dbg !50
  %2003 = extractvalue { float, float, float, float } %2002, 0, !dbg !50
  %2004 = extractvalue { float, float, float, float } %2002, 1, !dbg !50
  %2005 = extractvalue { float, float, float, float } %2002, 2, !dbg !50
  %2006 = extractvalue { float, float, float, float } %2002, 3, !dbg !50
  %2007 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1928, float %1929, float %1930, float %1931, i32 %1840, i32 %1841, i32 %1842, i32 %1843, i32 %1715, i32 %1716) #2, !dbg !50
  %2008 = extractvalue { float, float, float, float } %2007, 0, !dbg !50
  %2009 = extractvalue { float, float, float, float } %2007, 1, !dbg !50
  %2010 = extractvalue { float, float, float, float } %2007, 2, !dbg !50
  %2011 = extractvalue { float, float, float, float } %2007, 3, !dbg !50
  %2012 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1933, float %1934, float %1935, float %1936, i32 %1828, i32 %1829, i32 %1830, i32 %1831, i32 %1622, i32 %1623) #2, !dbg !50
  %2013 = extractvalue { float, float, float, float } %2012, 0, !dbg !50
  %2014 = extractvalue { float, float, float, float } %2012, 1, !dbg !50
  %2015 = extractvalue { float, float, float, float } %2012, 2, !dbg !50
  %2016 = extractvalue { float, float, float, float } %2012, 3, !dbg !50
  %2017 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1938, float %1939, float %1940, float %1941, i32 %1828, i32 %1829, i32 %1830, i32 %1831, i32 %1636, i32 %1637) #2, !dbg !50
  %2018 = extractvalue { float, float, float, float } %2017, 0, !dbg !50
  %2019 = extractvalue { float, float, float, float } %2017, 1, !dbg !50
  %2020 = extractvalue { float, float, float, float } %2017, 2, !dbg !50
  %2021 = extractvalue { float, float, float, float } %2017, 3, !dbg !50
  %2022 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1943, float %1944, float %1945, float %1946, i32 %1828, i32 %1829, i32 %1830, i32 %1831, i32 %1650, i32 %1651) #2, !dbg !50
  %2023 = extractvalue { float, float, float, float } %2022, 0, !dbg !50
  %2024 = extractvalue { float, float, float, float } %2022, 1, !dbg !50
  %2025 = extractvalue { float, float, float, float } %2022, 2, !dbg !50
  %2026 = extractvalue { float, float, float, float } %2022, 3, !dbg !50
  %2027 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1948, float %1949, float %1950, float %1951, i32 %1828, i32 %1829, i32 %1830, i32 %1831, i32 %1664, i32 %1665) #2, !dbg !50
  %2028 = extractvalue { float, float, float, float } %2027, 0, !dbg !50
  %2029 = extractvalue { float, float, float, float } %2027, 1, !dbg !50
  %2030 = extractvalue { float, float, float, float } %2027, 2, !dbg !50
  %2031 = extractvalue { float, float, float, float } %2027, 3, !dbg !50
  %2032 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1953, float %1954, float %1955, float %1956, i32 %1828, i32 %1829, i32 %1830, i32 %1831, i32 %1678, i32 %1679) #2, !dbg !50
  %2033 = extractvalue { float, float, float, float } %2032, 0, !dbg !50
  %2034 = extractvalue { float, float, float, float } %2032, 1, !dbg !50
  %2035 = extractvalue { float, float, float, float } %2032, 2, !dbg !50
  %2036 = extractvalue { float, float, float, float } %2032, 3, !dbg !50
  %2037 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1958, float %1959, float %1960, float %1961, i32 %1828, i32 %1829, i32 %1830, i32 %1831, i32 %1692, i32 %1693) #2, !dbg !50
  %2038 = extractvalue { float, float, float, float } %2037, 0, !dbg !50
  %2039 = extractvalue { float, float, float, float } %2037, 1, !dbg !50
  %2040 = extractvalue { float, float, float, float } %2037, 2, !dbg !50
  %2041 = extractvalue { float, float, float, float } %2037, 3, !dbg !50
  %2042 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1963, float %1964, float %1965, float %1966, i32 %1828, i32 %1829, i32 %1830, i32 %1831, i32 %1706, i32 %1707) #2, !dbg !50
  %2043 = extractvalue { float, float, float, float } %2042, 0, !dbg !50
  %2044 = extractvalue { float, float, float, float } %2042, 1, !dbg !50
  %2045 = extractvalue { float, float, float, float } %2042, 2, !dbg !50
  %2046 = extractvalue { float, float, float, float } %2042, 3, !dbg !50
  %2047 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1968, float %1969, float %1970, float %1971, i32 %1828, i32 %1829, i32 %1830, i32 %1831, i32 %1720, i32 %1721) #2, !dbg !50
  %2048 = extractvalue { float, float, float, float } %2047, 0, !dbg !50
  %2049 = extractvalue { float, float, float, float } %2047, 1, !dbg !50
  %2050 = extractvalue { float, float, float, float } %2047, 2, !dbg !50
  %2051 = extractvalue { float, float, float, float } %2047, 3, !dbg !50
  %2052 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1973, float %1974, float %1975, float %1976, i32 %1844, i32 %1845, i32 %1846, i32 %1847, i32 %1622, i32 %1623) #2, !dbg !50
  %2053 = extractvalue { float, float, float, float } %2052, 0, !dbg !50
  %2054 = extractvalue { float, float, float, float } %2052, 1, !dbg !50
  %2055 = extractvalue { float, float, float, float } %2052, 2, !dbg !50
  %2056 = extractvalue { float, float, float, float } %2052, 3, !dbg !50
  %2057 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1978, float %1979, float %1980, float %1981, i32 %1844, i32 %1845, i32 %1846, i32 %1847, i32 %1636, i32 %1637) #2, !dbg !50
  %2058 = extractvalue { float, float, float, float } %2057, 0, !dbg !50
  %2059 = extractvalue { float, float, float, float } %2057, 1, !dbg !50
  %2060 = extractvalue { float, float, float, float } %2057, 2, !dbg !50
  %2061 = extractvalue { float, float, float, float } %2057, 3, !dbg !50
  %2062 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1983, float %1984, float %1985, float %1986, i32 %1844, i32 %1845, i32 %1846, i32 %1847, i32 %1650, i32 %1651) #2, !dbg !50
  %2063 = extractvalue { float, float, float, float } %2062, 0, !dbg !50
  %2064 = extractvalue { float, float, float, float } %2062, 1, !dbg !50
  %2065 = extractvalue { float, float, float, float } %2062, 2, !dbg !50
  %2066 = extractvalue { float, float, float, float } %2062, 3, !dbg !50
  %2067 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1988, float %1989, float %1990, float %1991, i32 %1844, i32 %1845, i32 %1846, i32 %1847, i32 %1664, i32 %1665) #2, !dbg !50
  %2068 = extractvalue { float, float, float, float } %2067, 0, !dbg !50
  %2069 = extractvalue { float, float, float, float } %2067, 1, !dbg !50
  %2070 = extractvalue { float, float, float, float } %2067, 2, !dbg !50
  %2071 = extractvalue { float, float, float, float } %2067, 3, !dbg !50
  %2072 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1993, float %1994, float %1995, float %1996, i32 %1844, i32 %1845, i32 %1846, i32 %1847, i32 %1678, i32 %1679) #2, !dbg !50
  %2073 = extractvalue { float, float, float, float } %2072, 0, !dbg !50
  %2074 = extractvalue { float, float, float, float } %2072, 1, !dbg !50
  %2075 = extractvalue { float, float, float, float } %2072, 2, !dbg !50
  %2076 = extractvalue { float, float, float, float } %2072, 3, !dbg !50
  %2077 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1998, float %1999, float %2000, float %2001, i32 %1844, i32 %1845, i32 %1846, i32 %1847, i32 %1692, i32 %1693) #2, !dbg !50
  %2078 = extractvalue { float, float, float, float } %2077, 0, !dbg !50
  %2079 = extractvalue { float, float, float, float } %2077, 1, !dbg !50
  %2080 = extractvalue { float, float, float, float } %2077, 2, !dbg !50
  %2081 = extractvalue { float, float, float, float } %2077, 3, !dbg !50
  %2082 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2003, float %2004, float %2005, float %2006, i32 %1844, i32 %1845, i32 %1846, i32 %1847, i32 %1706, i32 %1707) #2, !dbg !50
  %2083 = extractvalue { float, float, float, float } %2082, 0, !dbg !50
  %2084 = extractvalue { float, float, float, float } %2082, 1, !dbg !50
  %2085 = extractvalue { float, float, float, float } %2082, 2, !dbg !50
  %2086 = extractvalue { float, float, float, float } %2082, 3, !dbg !50
  %2087 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2008, float %2009, float %2010, float %2011, i32 %1844, i32 %1845, i32 %1846, i32 %1847, i32 %1720, i32 %1721) #2, !dbg !50
  %2088 = extractvalue { float, float, float, float } %2087, 0, !dbg !50
  %2089 = extractvalue { float, float, float, float } %2087, 1, !dbg !50
  %2090 = extractvalue { float, float, float, float } %2087, 2, !dbg !50
  %2091 = extractvalue { float, float, float, float } %2087, 3, !dbg !50
  %2092 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2013, float %2014, float %2015, float %2016, i32 %1832, i32 %1833, i32 %1834, i32 %1835, i32 %1624, i32 %1625) #2, !dbg !50
  %2093 = extractvalue { float, float, float, float } %2092, 0, !dbg !50
  %2094 = extractvalue { float, float, float, float } %2092, 1, !dbg !50
  %2095 = extractvalue { float, float, float, float } %2092, 2, !dbg !50
  %2096 = extractvalue { float, float, float, float } %2092, 3, !dbg !50
  %2097 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2018, float %2019, float %2020, float %2021, i32 %1832, i32 %1833, i32 %1834, i32 %1835, i32 %1638, i32 %1639) #2, !dbg !50
  %2098 = extractvalue { float, float, float, float } %2097, 0, !dbg !50
  %2099 = extractvalue { float, float, float, float } %2097, 1, !dbg !50
  %2100 = extractvalue { float, float, float, float } %2097, 2, !dbg !50
  %2101 = extractvalue { float, float, float, float } %2097, 3, !dbg !50
  %2102 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2023, float %2024, float %2025, float %2026, i32 %1832, i32 %1833, i32 %1834, i32 %1835, i32 %1652, i32 %1653) #2, !dbg !50
  %2103 = extractvalue { float, float, float, float } %2102, 0, !dbg !50
  %2104 = extractvalue { float, float, float, float } %2102, 1, !dbg !50
  %2105 = extractvalue { float, float, float, float } %2102, 2, !dbg !50
  %2106 = extractvalue { float, float, float, float } %2102, 3, !dbg !50
  %2107 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2028, float %2029, float %2030, float %2031, i32 %1832, i32 %1833, i32 %1834, i32 %1835, i32 %1666, i32 %1667) #2, !dbg !50
  %2108 = extractvalue { float, float, float, float } %2107, 0, !dbg !50
  %2109 = extractvalue { float, float, float, float } %2107, 1, !dbg !50
  %2110 = extractvalue { float, float, float, float } %2107, 2, !dbg !50
  %2111 = extractvalue { float, float, float, float } %2107, 3, !dbg !50
  %2112 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2033, float %2034, float %2035, float %2036, i32 %1832, i32 %1833, i32 %1834, i32 %1835, i32 %1680, i32 %1681) #2, !dbg !50
  %2113 = extractvalue { float, float, float, float } %2112, 0, !dbg !50
  %2114 = extractvalue { float, float, float, float } %2112, 1, !dbg !50
  %2115 = extractvalue { float, float, float, float } %2112, 2, !dbg !50
  %2116 = extractvalue { float, float, float, float } %2112, 3, !dbg !50
  %2117 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2038, float %2039, float %2040, float %2041, i32 %1832, i32 %1833, i32 %1834, i32 %1835, i32 %1694, i32 %1695) #2, !dbg !50
  %2118 = extractvalue { float, float, float, float } %2117, 0, !dbg !50
  %2119 = extractvalue { float, float, float, float } %2117, 1, !dbg !50
  %2120 = extractvalue { float, float, float, float } %2117, 2, !dbg !50
  %2121 = extractvalue { float, float, float, float } %2117, 3, !dbg !50
  %2122 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2043, float %2044, float %2045, float %2046, i32 %1832, i32 %1833, i32 %1834, i32 %1835, i32 %1708, i32 %1709) #2, !dbg !50
  %2123 = extractvalue { float, float, float, float } %2122, 0, !dbg !50
  %2124 = extractvalue { float, float, float, float } %2122, 1, !dbg !50
  %2125 = extractvalue { float, float, float, float } %2122, 2, !dbg !50
  %2126 = extractvalue { float, float, float, float } %2122, 3, !dbg !50
  %2127 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2048, float %2049, float %2050, float %2051, i32 %1832, i32 %1833, i32 %1834, i32 %1835, i32 %1722, i32 %1723) #2, !dbg !50
  %2128 = extractvalue { float, float, float, float } %2127, 0, !dbg !50
  %2129 = extractvalue { float, float, float, float } %2127, 1, !dbg !50
  %2130 = extractvalue { float, float, float, float } %2127, 2, !dbg !50
  %2131 = extractvalue { float, float, float, float } %2127, 3, !dbg !50
  %2132 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2053, float %2054, float %2055, float %2056, i32 %1848, i32 %1849, i32 %1850, i32 %1851, i32 %1624, i32 %1625) #2, !dbg !50
  %2133 = extractvalue { float, float, float, float } %2132, 0, !dbg !50
  %2134 = extractvalue { float, float, float, float } %2132, 1, !dbg !50
  %2135 = extractvalue { float, float, float, float } %2132, 2, !dbg !50
  %2136 = extractvalue { float, float, float, float } %2132, 3, !dbg !50
  %2137 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2058, float %2059, float %2060, float %2061, i32 %1848, i32 %1849, i32 %1850, i32 %1851, i32 %1638, i32 %1639) #2, !dbg !50
  %2138 = extractvalue { float, float, float, float } %2137, 0, !dbg !50
  %2139 = extractvalue { float, float, float, float } %2137, 1, !dbg !50
  %2140 = extractvalue { float, float, float, float } %2137, 2, !dbg !50
  %2141 = extractvalue { float, float, float, float } %2137, 3, !dbg !50
  %2142 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2063, float %2064, float %2065, float %2066, i32 %1848, i32 %1849, i32 %1850, i32 %1851, i32 %1652, i32 %1653) #2, !dbg !50
  %2143 = extractvalue { float, float, float, float } %2142, 0, !dbg !50
  %2144 = extractvalue { float, float, float, float } %2142, 1, !dbg !50
  %2145 = extractvalue { float, float, float, float } %2142, 2, !dbg !50
  %2146 = extractvalue { float, float, float, float } %2142, 3, !dbg !50
  %2147 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2068, float %2069, float %2070, float %2071, i32 %1848, i32 %1849, i32 %1850, i32 %1851, i32 %1666, i32 %1667) #2, !dbg !50
  %2148 = extractvalue { float, float, float, float } %2147, 0, !dbg !50
  %2149 = extractvalue { float, float, float, float } %2147, 1, !dbg !50
  %2150 = extractvalue { float, float, float, float } %2147, 2, !dbg !50
  %2151 = extractvalue { float, float, float, float } %2147, 3, !dbg !50
  %2152 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2073, float %2074, float %2075, float %2076, i32 %1848, i32 %1849, i32 %1850, i32 %1851, i32 %1680, i32 %1681) #2, !dbg !50
  %2153 = extractvalue { float, float, float, float } %2152, 0, !dbg !50
  %2154 = extractvalue { float, float, float, float } %2152, 1, !dbg !50
  %2155 = extractvalue { float, float, float, float } %2152, 2, !dbg !50
  %2156 = extractvalue { float, float, float, float } %2152, 3, !dbg !50
  %2157 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2078, float %2079, float %2080, float %2081, i32 %1848, i32 %1849, i32 %1850, i32 %1851, i32 %1694, i32 %1695) #2, !dbg !50
  %2158 = extractvalue { float, float, float, float } %2157, 0, !dbg !50
  %2159 = extractvalue { float, float, float, float } %2157, 1, !dbg !50
  %2160 = extractvalue { float, float, float, float } %2157, 2, !dbg !50
  %2161 = extractvalue { float, float, float, float } %2157, 3, !dbg !50
  %2162 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2083, float %2084, float %2085, float %2086, i32 %1848, i32 %1849, i32 %1850, i32 %1851, i32 %1708, i32 %1709) #2, !dbg !50
  %2163 = extractvalue { float, float, float, float } %2162, 0, !dbg !50
  %2164 = extractvalue { float, float, float, float } %2162, 1, !dbg !50
  %2165 = extractvalue { float, float, float, float } %2162, 2, !dbg !50
  %2166 = extractvalue { float, float, float, float } %2162, 3, !dbg !50
  %2167 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2088, float %2089, float %2090, float %2091, i32 %1848, i32 %1849, i32 %1850, i32 %1851, i32 %1722, i32 %1723) #2, !dbg !50
  %2168 = extractvalue { float, float, float, float } %2167, 0, !dbg !50
  %2169 = extractvalue { float, float, float, float } %2167, 1, !dbg !50
  %2170 = extractvalue { float, float, float, float } %2167, 2, !dbg !50
  %2171 = extractvalue { float, float, float, float } %2167, 3, !dbg !50
  %2172 = add nuw nsw i64 %325, 64, !dbg !51
  %2173 = add i32 %324, 1, !dbg !31
  %2174 = icmp sgt i32 %2173, 1, !dbg !31
  %2175 = select i1 %2174, i32 0, i32 %2173, !dbg !31
  %2176 = or disjoint i64 %2172, %53, !dbg !27
  %2177 = or disjoint i64 %2172, %54, !dbg !27
  %2178 = mul i64 %2176, %39, !dbg !27
  %2179 = mul i64 %2177, %39, !dbg !27
  %gep = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %2178, !dbg !27
  %gep464 = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %2179, !dbg !27
  %2180 = shl i32 %2175, 12, !dbg !27
  %2181 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %2180, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %2182 = getelementptr inbounds nuw half, ptr addrspace(3) %2181, i32 %187, !dbg !27
  %2183 = getelementptr inbounds nuw half, ptr addrspace(3) %2181, i32 %192, !dbg !27
  %2184 = select i1 %393, i32 16, i32 0, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %2182, ptr addrspace(1) %gep, i32 %2184) #2, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2183, ptr addrspace(1) %gep464, i32 %2184) #2, !dbg !27
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !27
  %2185 = mul i64 %2176, %37, !dbg !30
  %2186 = mul i64 %2177, %37, !dbg !30
  %gep466 = getelementptr half, ptr addrspace(1) %invariant.gep465, i64 %2185, !dbg !30
  %gep468 = getelementptr half, ptr addrspace(1) %invariant.gep465, i64 %2186, !dbg !30
  %2187 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %2180, !dbg !30
  %2188 = getelementptr inbounds nuw half, ptr addrspace(3) %2187, i32 %187, !dbg !30
  %2189 = getelementptr inbounds nuw half, ptr addrspace(3) %2187, i32 %192, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %2188, ptr addrspace(1) %gep466, i32 %2184) #2, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2189, ptr addrspace(1) %gep468, i32 %2184) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %2190 = add nuw nsw i32 %390, 64, !dbg !31
  %2191 = icmp samesign ult i32 %390, 4032, !dbg !31
  br i1 %2191, label %322, label %2192, !dbg !31

2192:                                             ; preds = %__nv_exp2f.exit304
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %2193 = extractelement <4 x float> %1546, i64 0, !dbg !52
  %2194 = fcmp olt float %2193, 0x3810000000000000, !dbg !52
  %2195 = fmul float %2193, 0x4160000000000000, !dbg !52
  %.02.i = select i1 %2194, float %2195, float %2193, !dbg !52
  %i.i.0.i = select i1 %2194, float -2.300000e+01, float 0.000000e+00, !dbg !52
  %2196 = bitcast float %.02.i to i32, !dbg !52
  %2197 = add i32 %2196, -1060439283, !dbg !52
  %2198 = and i32 %2197, -8388608, !dbg !52
  %2199 = sub i32 %2196, %2198, !dbg !52
  %2200 = bitcast i32 %2199 to float, !dbg !52
  %2201 = sitofp i32 %2198 to float, !dbg !52
  %2202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not.i305 = icmp eq i32 %2202, 0, !dbg !52
  %2203 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %2201, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !52
  %2204 = tail call float @llvm.nvvm.fma.rn.f(float %2201, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !52
  %.08.i = select i1 %.not.i305, float %2204, float %2203, !dbg !52
  %2205 = fadd float %2200, -1.000000e+00, !dbg !52
  %2206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not1.i = icmp eq i32 %2206, 0, !dbg !52
  %2207 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3FB8D64FE0000000, float %2205, float 0xBFC58FE600000000) #2, !dbg !52
  %2208 = tail call float @llvm.nvvm.fma.rn.f(float 0x3FB8D64FE0000000, float %2205, float 0xBFC58FE600000000) #2, !dbg !52
  %.010.i = select i1 %.not1.i, float %2208, float %2207, !dbg !52
  %2209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not2.i = icmp eq i32 %2209, 0, !dbg !52
  %2210 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %2205, float 0x3FC5F9E540000000) #2, !dbg !52
  %2211 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %2205, float 0x3FC5F9E540000000) #2, !dbg !52
  %.011.i = select i1 %.not2.i, float %2211, float %2210, !dbg !52
  %2212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not3.i = icmp eq i32 %2212, 0, !dbg !52
  %2213 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %2205, float 0xBFC6E9C860000000) #2, !dbg !52
  %2214 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %2205, float 0xBFC6E9C860000000) #2, !dbg !52
  %.012.i = select i1 %.not3.i, float %2214, float %2213, !dbg !52
  %2215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not4.i = icmp eq i32 %2215, 0, !dbg !52
  %2216 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %2205, float 0x3FCA417E80000000) #2, !dbg !52
  %2217 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %2205, float 0x3FCA417E80000000) #2, !dbg !52
  %.09.i = select i1 %.not4.i, float %2217, float %2216, !dbg !52
  %2218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not5.i = icmp eq i32 %2218, 0, !dbg !52
  %2219 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %2205, float 0xBFCEC79160000000) #2, !dbg !52
  %2220 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %2205, float 0xBFCEC79160000000) #2, !dbg !52
  %.05.i = select i1 %.not5.i, float %2220, float %2219, !dbg !52
  %2221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not6.i = icmp eq i32 %2221, 0, !dbg !52
  %2222 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %2205, float 0x3FD277F320000000) #2, !dbg !52
  %2223 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %2205, float 0x3FD277F320000000) #2, !dbg !52
  %.01.i = select i1 %.not6.i, float %2223, float %2222, !dbg !52
  %2224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not7.i = icmp eq i32 %2224, 0, !dbg !52
  %2225 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %2205, float 0xBFD7154920000000) #2, !dbg !52
  %2226 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %2205, float 0xBFD7154920000000) #2, !dbg !52
  %.0.i306 = select i1 %.not7.i, float %2226, float %2225, !dbg !52
  %2227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not8.i = icmp eq i32 %2227, 0, !dbg !52
  %2228 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i306, float %2205, float 0x3FDEC70940000000) #2, !dbg !52
  %2229 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i306, float %2205, float 0x3FDEC70940000000) #2, !dbg !52
  %.07.i = select i1 %.not8.i, float %2229, float %2228, !dbg !52
  %2230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not9.i = icmp eq i32 %2230, 0, !dbg !52
  %2231 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %2205, float 0xBFE7154760000000) #2, !dbg !52
  %2232 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %2205, float 0xBFE7154760000000) #2, !dbg !52
  %.06.i = select i1 %.not9.i, float %2232, float %2231, !dbg !52
  %2233 = fmul float %2205, %.06.i, !dbg !52
  %2234 = fmul float %2205, %2233, !dbg !52
  %2235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not10.i = icmp eq i32 %2235, 0, !dbg !52
  %2236 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %2205, float 0x3FF7154760000000, float %2234) #2, !dbg !52
  %2237 = tail call float @llvm.nvvm.fma.rn.f(float %2205, float 0x3FF7154760000000, float %2234) #2, !dbg !52
  %.04.i = select i1 %.not10.i, float %2237, float %2236, !dbg !52
  %2238 = fadd float %.08.i, %.04.i, !dbg !52
  %2239 = icmp ugt i32 %2196, 2139095039, !dbg !52
  br i1 %2239, label %__nv_fmaf_rn.exit.i.i, label %__nv_log2f.exit, !dbg !52

__nv_fmaf_rn.exit.i.i:                            ; preds = %2192
  %2240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not11.i = icmp eq i32 %2240, 0, !dbg !52
  %2241 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %2242 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %.03.i = select i1 %.not11.i, float %2242, float %2241, !dbg !52
  br label %__nv_log2f.exit, !dbg !52

__nv_log2f.exit:                                  ; preds = %2192, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %2238, %2192 ], !dbg !52
  %2243 = extractelement <4 x float> %1546, i64 1, !dbg !52
  %2244 = fcmp olt float %2243, 0x3810000000000000, !dbg !52
  %2245 = fmul float %2243, 0x4160000000000000, !dbg !52
  %.02.i307 = select i1 %2244, float %2245, float %2243, !dbg !52
  %i.i.0.i308 = select i1 %2244, float -2.300000e+01, float 0.000000e+00, !dbg !52
  %2246 = bitcast float %.02.i307 to i32, !dbg !52
  %2247 = add i32 %2246, -1060439283, !dbg !52
  %2248 = and i32 %2247, -8388608, !dbg !52
  %2249 = sub i32 %2246, %2248, !dbg !52
  %2250 = bitcast i32 %2249 to float, !dbg !52
  %2251 = sitofp i32 %2248 to float, !dbg !52
  %2252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not.i309 = icmp eq i32 %2252, 0, !dbg !52
  %2253 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %2251, float 0x3E80000000000000, float %i.i.0.i308) #2, !dbg !52
  %2254 = tail call float @llvm.nvvm.fma.rn.f(float %2251, float 0x3E80000000000000, float %i.i.0.i308) #2, !dbg !52
  %.08.i310 = select i1 %.not.i309, float %2254, float %2253, !dbg !52
  %2255 = fadd float %2250, -1.000000e+00, !dbg !52
  %2256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not1.i311 = icmp eq i32 %2256, 0, !dbg !52
  %2257 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3FB8D64FE0000000, float %2255, float 0xBFC58FE600000000) #2, !dbg !52
  %2258 = tail call float @llvm.nvvm.fma.rn.f(float 0x3FB8D64FE0000000, float %2255, float 0xBFC58FE600000000) #2, !dbg !52
  %.010.i312 = select i1 %.not1.i311, float %2258, float %2257, !dbg !52
  %2259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not2.i313 = icmp eq i32 %2259, 0, !dbg !52
  %2260 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i312, float %2255, float 0x3FC5F9E540000000) #2, !dbg !52
  %2261 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i312, float %2255, float 0x3FC5F9E540000000) #2, !dbg !52
  %.011.i314 = select i1 %.not2.i313, float %2261, float %2260, !dbg !52
  %2262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not3.i315 = icmp eq i32 %2262, 0, !dbg !52
  %2263 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i314, float %2255, float 0xBFC6E9C860000000) #2, !dbg !52
  %2264 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i314, float %2255, float 0xBFC6E9C860000000) #2, !dbg !52
  %.012.i316 = select i1 %.not3.i315, float %2264, float %2263, !dbg !52
  %2265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not4.i317 = icmp eq i32 %2265, 0, !dbg !52
  %2266 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i316, float %2255, float 0x3FCA417E80000000) #2, !dbg !52
  %2267 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i316, float %2255, float 0x3FCA417E80000000) #2, !dbg !52
  %.09.i318 = select i1 %.not4.i317, float %2267, float %2266, !dbg !52
  %2268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not5.i319 = icmp eq i32 %2268, 0, !dbg !52
  %2269 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i318, float %2255, float 0xBFCEC79160000000) #2, !dbg !52
  %2270 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i318, float %2255, float 0xBFCEC79160000000) #2, !dbg !52
  %.05.i320 = select i1 %.not5.i319, float %2270, float %2269, !dbg !52
  %2271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not6.i321 = icmp eq i32 %2271, 0, !dbg !52
  %2272 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i320, float %2255, float 0x3FD277F320000000) #2, !dbg !52
  %2273 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i320, float %2255, float 0x3FD277F320000000) #2, !dbg !52
  %.01.i322 = select i1 %.not6.i321, float %2273, float %2272, !dbg !52
  %2274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not7.i323 = icmp eq i32 %2274, 0, !dbg !52
  %2275 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i322, float %2255, float 0xBFD7154920000000) #2, !dbg !52
  %2276 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i322, float %2255, float 0xBFD7154920000000) #2, !dbg !52
  %.0.i324 = select i1 %.not7.i323, float %2276, float %2275, !dbg !52
  %2277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not8.i325 = icmp eq i32 %2277, 0, !dbg !52
  %2278 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i324, float %2255, float 0x3FDEC70940000000) #2, !dbg !52
  %2279 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i324, float %2255, float 0x3FDEC70940000000) #2, !dbg !52
  %.07.i326 = select i1 %.not8.i325, float %2279, float %2278, !dbg !52
  %2280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not9.i327 = icmp eq i32 %2280, 0, !dbg !52
  %2281 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i326, float %2255, float 0xBFE7154760000000) #2, !dbg !52
  %2282 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i326, float %2255, float 0xBFE7154760000000) #2, !dbg !52
  %.06.i328 = select i1 %.not9.i327, float %2282, float %2281, !dbg !52
  %2283 = fmul float %2255, %.06.i328, !dbg !52
  %2284 = fmul float %2255, %2283, !dbg !52
  %2285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not10.i329 = icmp eq i32 %2285, 0, !dbg !52
  %2286 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %2255, float 0x3FF7154760000000, float %2284) #2, !dbg !52
  %2287 = tail call float @llvm.nvvm.fma.rn.f(float %2255, float 0x3FF7154760000000, float %2284) #2, !dbg !52
  %.04.i330 = select i1 %.not10.i329, float %2287, float %2286, !dbg !52
  %2288 = fadd float %.08.i310, %.04.i330, !dbg !52
  %2289 = icmp ugt i32 %2246, 2139095039, !dbg !52
  br i1 %2289, label %__nv_fmaf_rn.exit.i.i333, label %__nv_log2f.exit336, !dbg !52

__nv_fmaf_rn.exit.i.i333:                         ; preds = %__nv_log2f.exit
  %2290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not11.i334 = icmp eq i32 %2290, 0, !dbg !52
  %2291 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i307, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %2292 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i307, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %.03.i335 = select i1 %.not11.i334, float %2292, float %2291, !dbg !52
  br label %__nv_log2f.exit336, !dbg !52

__nv_log2f.exit336:                               ; preds = %__nv_log2f.exit, %__nv_fmaf_rn.exit.i.i333
  %r.i.0.i331 = phi float [ %.03.i335, %__nv_fmaf_rn.exit.i.i333 ], [ %2288, %__nv_log2f.exit ], !dbg !52
  %2293 = extractelement <4 x float> %1546, i64 2, !dbg !52
  %2294 = fcmp olt float %2293, 0x3810000000000000, !dbg !52
  %2295 = fmul float %2293, 0x4160000000000000, !dbg !52
  %.02.i337 = select i1 %2294, float %2295, float %2293, !dbg !52
  %i.i.0.i338 = select i1 %2294, float -2.300000e+01, float 0.000000e+00, !dbg !52
  %2296 = bitcast float %.02.i337 to i32, !dbg !52
  %2297 = add i32 %2296, -1060439283, !dbg !52
  %2298 = and i32 %2297, -8388608, !dbg !52
  %2299 = sub i32 %2296, %2298, !dbg !52
  %2300 = bitcast i32 %2299 to float, !dbg !52
  %2301 = sitofp i32 %2298 to float, !dbg !52
  %2302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not.i339 = icmp eq i32 %2302, 0, !dbg !52
  %2303 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %2301, float 0x3E80000000000000, float %i.i.0.i338) #2, !dbg !52
  %2304 = tail call float @llvm.nvvm.fma.rn.f(float %2301, float 0x3E80000000000000, float %i.i.0.i338) #2, !dbg !52
  %.08.i340 = select i1 %.not.i339, float %2304, float %2303, !dbg !52
  %2305 = fadd float %2300, -1.000000e+00, !dbg !52
  %2306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not1.i341 = icmp eq i32 %2306, 0, !dbg !52
  %2307 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3FB8D64FE0000000, float %2305, float 0xBFC58FE600000000) #2, !dbg !52
  %2308 = tail call float @llvm.nvvm.fma.rn.f(float 0x3FB8D64FE0000000, float %2305, float 0xBFC58FE600000000) #2, !dbg !52
  %.010.i342 = select i1 %.not1.i341, float %2308, float %2307, !dbg !52
  %2309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not2.i343 = icmp eq i32 %2309, 0, !dbg !52
  %2310 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i342, float %2305, float 0x3FC5F9E540000000) #2, !dbg !52
  %2311 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i342, float %2305, float 0x3FC5F9E540000000) #2, !dbg !52
  %.011.i344 = select i1 %.not2.i343, float %2311, float %2310, !dbg !52
  %2312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not3.i345 = icmp eq i32 %2312, 0, !dbg !52
  %2313 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i344, float %2305, float 0xBFC6E9C860000000) #2, !dbg !52
  %2314 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i344, float %2305, float 0xBFC6E9C860000000) #2, !dbg !52
  %.012.i346 = select i1 %.not3.i345, float %2314, float %2313, !dbg !52
  %2315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not4.i347 = icmp eq i32 %2315, 0, !dbg !52
  %2316 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i346, float %2305, float 0x3FCA417E80000000) #2, !dbg !52
  %2317 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i346, float %2305, float 0x3FCA417E80000000) #2, !dbg !52
  %.09.i348 = select i1 %.not4.i347, float %2317, float %2316, !dbg !52
  %2318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not5.i349 = icmp eq i32 %2318, 0, !dbg !52
  %2319 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i348, float %2305, float 0xBFCEC79160000000) #2, !dbg !52
  %2320 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i348, float %2305, float 0xBFCEC79160000000) #2, !dbg !52
  %.05.i350 = select i1 %.not5.i349, float %2320, float %2319, !dbg !52
  %2321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not6.i351 = icmp eq i32 %2321, 0, !dbg !52
  %2322 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i350, float %2305, float 0x3FD277F320000000) #2, !dbg !52
  %2323 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i350, float %2305, float 0x3FD277F320000000) #2, !dbg !52
  %.01.i352 = select i1 %.not6.i351, float %2323, float %2322, !dbg !52
  %2324 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not7.i353 = icmp eq i32 %2324, 0, !dbg !52
  %2325 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i352, float %2305, float 0xBFD7154920000000) #2, !dbg !52
  %2326 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i352, float %2305, float 0xBFD7154920000000) #2, !dbg !52
  %.0.i354 = select i1 %.not7.i353, float %2326, float %2325, !dbg !52
  %2327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not8.i355 = icmp eq i32 %2327, 0, !dbg !52
  %2328 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i354, float %2305, float 0x3FDEC70940000000) #2, !dbg !52
  %2329 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i354, float %2305, float 0x3FDEC70940000000) #2, !dbg !52
  %.07.i356 = select i1 %.not8.i355, float %2329, float %2328, !dbg !52
  %2330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not9.i357 = icmp eq i32 %2330, 0, !dbg !52
  %2331 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i356, float %2305, float 0xBFE7154760000000) #2, !dbg !52
  %2332 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i356, float %2305, float 0xBFE7154760000000) #2, !dbg !52
  %.06.i358 = select i1 %.not9.i357, float %2332, float %2331, !dbg !52
  %2333 = fmul float %2305, %.06.i358, !dbg !52
  %2334 = fmul float %2305, %2333, !dbg !52
  %2335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not10.i359 = icmp eq i32 %2335, 0, !dbg !52
  %2336 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %2305, float 0x3FF7154760000000, float %2334) #2, !dbg !52
  %2337 = tail call float @llvm.nvvm.fma.rn.f(float %2305, float 0x3FF7154760000000, float %2334) #2, !dbg !52
  %.04.i360 = select i1 %.not10.i359, float %2337, float %2336, !dbg !52
  %2338 = fadd float %.08.i340, %.04.i360, !dbg !52
  %2339 = icmp ugt i32 %2296, 2139095039, !dbg !52
  br i1 %2339, label %__nv_fmaf_rn.exit.i.i363, label %__nv_log2f.exit366, !dbg !52

__nv_fmaf_rn.exit.i.i363:                         ; preds = %__nv_log2f.exit336
  %2340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not11.i364 = icmp eq i32 %2340, 0, !dbg !52
  %2341 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i337, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %2342 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i337, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %.03.i365 = select i1 %.not11.i364, float %2342, float %2341, !dbg !52
  br label %__nv_log2f.exit366, !dbg !52

__nv_log2f.exit366:                               ; preds = %__nv_log2f.exit336, %__nv_fmaf_rn.exit.i.i363
  %r.i.0.i361 = phi float [ %.03.i365, %__nv_fmaf_rn.exit.i.i363 ], [ %2338, %__nv_log2f.exit336 ], !dbg !52
  %2343 = extractelement <4 x float> %1546, i64 3, !dbg !52
  %2344 = fcmp olt float %2343, 0x3810000000000000, !dbg !52
  %2345 = fmul float %2343, 0x4160000000000000, !dbg !52
  %.02.i367 = select i1 %2344, float %2345, float %2343, !dbg !52
  %i.i.0.i368 = select i1 %2344, float -2.300000e+01, float 0.000000e+00, !dbg !52
  %2346 = bitcast float %.02.i367 to i32, !dbg !52
  %2347 = add i32 %2346, -1060439283, !dbg !52
  %2348 = and i32 %2347, -8388608, !dbg !52
  %2349 = sub i32 %2346, %2348, !dbg !52
  %2350 = bitcast i32 %2349 to float, !dbg !52
  %2351 = sitofp i32 %2348 to float, !dbg !52
  %2352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not.i369 = icmp eq i32 %2352, 0, !dbg !52
  %2353 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %2351, float 0x3E80000000000000, float %i.i.0.i368) #2, !dbg !52
  %2354 = tail call float @llvm.nvvm.fma.rn.f(float %2351, float 0x3E80000000000000, float %i.i.0.i368) #2, !dbg !52
  %.08.i370 = select i1 %.not.i369, float %2354, float %2353, !dbg !52
  %2355 = fadd float %2350, -1.000000e+00, !dbg !52
  %2356 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not1.i371 = icmp eq i32 %2356, 0, !dbg !52
  %2357 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3FB8D64FE0000000, float %2355, float 0xBFC58FE600000000) #2, !dbg !52
  %2358 = tail call float @llvm.nvvm.fma.rn.f(float 0x3FB8D64FE0000000, float %2355, float 0xBFC58FE600000000) #2, !dbg !52
  %.010.i372 = select i1 %.not1.i371, float %2358, float %2357, !dbg !52
  %2359 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not2.i373 = icmp eq i32 %2359, 0, !dbg !52
  %2360 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i372, float %2355, float 0x3FC5F9E540000000) #2, !dbg !52
  %2361 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i372, float %2355, float 0x3FC5F9E540000000) #2, !dbg !52
  %.011.i374 = select i1 %.not2.i373, float %2361, float %2360, !dbg !52
  %2362 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not3.i375 = icmp eq i32 %2362, 0, !dbg !52
  %2363 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i374, float %2355, float 0xBFC6E9C860000000) #2, !dbg !52
  %2364 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i374, float %2355, float 0xBFC6E9C860000000) #2, !dbg !52
  %.012.i376 = select i1 %.not3.i375, float %2364, float %2363, !dbg !52
  %2365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not4.i377 = icmp eq i32 %2365, 0, !dbg !52
  %2366 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i376, float %2355, float 0x3FCA417E80000000) #2, !dbg !52
  %2367 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i376, float %2355, float 0x3FCA417E80000000) #2, !dbg !52
  %.09.i378 = select i1 %.not4.i377, float %2367, float %2366, !dbg !52
  %2368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not5.i379 = icmp eq i32 %2368, 0, !dbg !52
  %2369 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i378, float %2355, float 0xBFCEC79160000000) #2, !dbg !52
  %2370 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i378, float %2355, float 0xBFCEC79160000000) #2, !dbg !52
  %.05.i380 = select i1 %.not5.i379, float %2370, float %2369, !dbg !52
  %2371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not6.i381 = icmp eq i32 %2371, 0, !dbg !52
  %2372 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i380, float %2355, float 0x3FD277F320000000) #2, !dbg !52
  %2373 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i380, float %2355, float 0x3FD277F320000000) #2, !dbg !52
  %.01.i382 = select i1 %.not6.i381, float %2373, float %2372, !dbg !52
  %2374 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not7.i383 = icmp eq i32 %2374, 0, !dbg !52
  %2375 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i382, float %2355, float 0xBFD7154920000000) #2, !dbg !52
  %2376 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i382, float %2355, float 0xBFD7154920000000) #2, !dbg !52
  %.0.i384 = select i1 %.not7.i383, float %2376, float %2375, !dbg !52
  %2377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not8.i385 = icmp eq i32 %2377, 0, !dbg !52
  %2378 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i384, float %2355, float 0x3FDEC70940000000) #2, !dbg !52
  %2379 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i384, float %2355, float 0x3FDEC70940000000) #2, !dbg !52
  %.07.i386 = select i1 %.not8.i385, float %2379, float %2378, !dbg !52
  %2380 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not9.i387 = icmp eq i32 %2380, 0, !dbg !52
  %2381 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i386, float %2355, float 0xBFE7154760000000) #2, !dbg !52
  %2382 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i386, float %2355, float 0xBFE7154760000000) #2, !dbg !52
  %.06.i388 = select i1 %.not9.i387, float %2382, float %2381, !dbg !52
  %2383 = fmul float %2355, %.06.i388, !dbg !52
  %2384 = fmul float %2355, %2383, !dbg !52
  %2385 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not10.i389 = icmp eq i32 %2385, 0, !dbg !52
  %2386 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %2355, float 0x3FF7154760000000, float %2384) #2, !dbg !52
  %2387 = tail call float @llvm.nvvm.fma.rn.f(float %2355, float 0x3FF7154760000000, float %2384) #2, !dbg !52
  %.04.i390 = select i1 %.not10.i389, float %2387, float %2386, !dbg !52
  %2388 = fadd float %.08.i370, %.04.i390, !dbg !52
  %2389 = icmp ugt i32 %2346, 2139095039, !dbg !52
  br i1 %2389, label %__nv_fmaf_rn.exit.i.i393, label %__nv_log2f.exit396, !dbg !52

__nv_fmaf_rn.exit.i.i393:                         ; preds = %__nv_log2f.exit366
  %2390 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not11.i394 = icmp eq i32 %2390, 0, !dbg !52
  %2391 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i367, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %2392 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i367, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %.03.i395 = select i1 %.not11.i394, float %2392, float %2391, !dbg !52
  br label %__nv_log2f.exit396, !dbg !52

__nv_log2f.exit396:                               ; preds = %__nv_log2f.exit366, %__nv_fmaf_rn.exit.i.i393
  %r.i.0.i391 = phi float [ %.03.i395, %__nv_fmaf_rn.exit.i.i393 ], [ %2388, %__nv_log2f.exit366 ], !dbg !52
  %2393 = and i32 %40, 128, !dbg !24
  %2394 = fcmp oeq float %.02.i337, 0.000000e+00, !dbg !52
  %r.i.1.i362 = select i1 %2394, float 0xFFF0000000000000, float %r.i.0.i361, !dbg !52
  %2395 = fcmp oeq float %.02.i307, 0.000000e+00, !dbg !52
  %r.i.1.i332 = select i1 %2395, float 0xFFF0000000000000, float %r.i.0.i331, !dbg !52
  %2396 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !52
  %r.i.1.i = select i1 %2396, float 0xFFF0000000000000, float %r.i.0.i, !dbg !52
  %2397 = getelementptr half, ptr addrspace(1) %5, i64 %31, !dbg !53
  %2398 = sext i32 %17 to i64, !dbg !54
  %2399 = and i32 %40, 255, !dbg !24
  %2400 = or disjoint i32 %33, %2399, !dbg !55
  %2401 = fcmp oeq float %.02.i367, 0.000000e+00, !dbg !52
  %r.i.1.i392 = select i1 %2401, float 0xFFF0000000000000, float %r.i.0.i391, !dbg !52
  %2402 = fadd float %1031, %r.i.1.i, !dbg !56
  %2403 = fadd float %1034, %r.i.1.i332, !dbg !56
  %2404 = fadd float %1065, %r.i.1.i362, !dbg !56
  %2405 = fadd float %1068, %r.i.1.i392, !dbg !56
  %2406 = tail call float @llvm.nvvm.div.full(float %2093, float %2193), !dbg !57
  %2407 = tail call float @llvm.nvvm.div.full(float %2094, float %2193), !dbg !57
  %2408 = tail call float @llvm.nvvm.div.full(float %2095, float %2243), !dbg !57
  %2409 = tail call float @llvm.nvvm.div.full(float %2096, float %2243), !dbg !57
  %2410 = tail call float @llvm.nvvm.div.full(float %2098, float %2193), !dbg !57
  %2411 = tail call float @llvm.nvvm.div.full(float %2099, float %2193), !dbg !57
  %2412 = tail call float @llvm.nvvm.div.full(float %2100, float %2243), !dbg !57
  %2413 = tail call float @llvm.nvvm.div.full(float %2101, float %2243), !dbg !57
  %2414 = tail call float @llvm.nvvm.div.full(float %2103, float %2193), !dbg !57
  %2415 = tail call float @llvm.nvvm.div.full(float %2104, float %2193), !dbg !57
  %2416 = tail call float @llvm.nvvm.div.full(float %2105, float %2243), !dbg !57
  %2417 = tail call float @llvm.nvvm.div.full(float %2106, float %2243), !dbg !57
  %2418 = tail call float @llvm.nvvm.div.full(float %2108, float %2193), !dbg !57
  %2419 = tail call float @llvm.nvvm.div.full(float %2109, float %2193), !dbg !57
  %2420 = tail call float @llvm.nvvm.div.full(float %2110, float %2243), !dbg !57
  %2421 = tail call float @llvm.nvvm.div.full(float %2111, float %2243), !dbg !57
  %2422 = tail call float @llvm.nvvm.div.full(float %2113, float %2193), !dbg !57
  %2423 = tail call float @llvm.nvvm.div.full(float %2114, float %2193), !dbg !57
  %2424 = tail call float @llvm.nvvm.div.full(float %2115, float %2243), !dbg !57
  %2425 = tail call float @llvm.nvvm.div.full(float %2116, float %2243), !dbg !57
  %2426 = tail call float @llvm.nvvm.div.full(float %2118, float %2193), !dbg !57
  %2427 = tail call float @llvm.nvvm.div.full(float %2119, float %2193), !dbg !57
  %2428 = tail call float @llvm.nvvm.div.full(float %2120, float %2243), !dbg !57
  %2429 = tail call float @llvm.nvvm.div.full(float %2121, float %2243), !dbg !57
  %2430 = tail call float @llvm.nvvm.div.full(float %2123, float %2193), !dbg !57
  %2431 = tail call float @llvm.nvvm.div.full(float %2124, float %2193), !dbg !57
  %2432 = tail call float @llvm.nvvm.div.full(float %2125, float %2243), !dbg !57
  %2433 = tail call float @llvm.nvvm.div.full(float %2126, float %2243), !dbg !57
  %2434 = tail call float @llvm.nvvm.div.full(float %2128, float %2193), !dbg !57
  %2435 = tail call float @llvm.nvvm.div.full(float %2129, float %2193), !dbg !57
  %2436 = tail call float @llvm.nvvm.div.full(float %2130, float %2243), !dbg !57
  %2437 = tail call float @llvm.nvvm.div.full(float %2131, float %2243), !dbg !57
  %2438 = tail call float @llvm.nvvm.div.full(float %2133, float %2293), !dbg !57
  %2439 = tail call float @llvm.nvvm.div.full(float %2134, float %2293), !dbg !57
  %2440 = tail call float @llvm.nvvm.div.full(float %2135, float %2343), !dbg !57
  %2441 = tail call float @llvm.nvvm.div.full(float %2136, float %2343), !dbg !57
  %2442 = tail call float @llvm.nvvm.div.full(float %2138, float %2293), !dbg !57
  %2443 = tail call float @llvm.nvvm.div.full(float %2139, float %2293), !dbg !57
  %2444 = tail call float @llvm.nvvm.div.full(float %2140, float %2343), !dbg !57
  %2445 = tail call float @llvm.nvvm.div.full(float %2141, float %2343), !dbg !57
  %2446 = tail call float @llvm.nvvm.div.full(float %2143, float %2293), !dbg !57
  %2447 = tail call float @llvm.nvvm.div.full(float %2144, float %2293), !dbg !57
  %2448 = tail call float @llvm.nvvm.div.full(float %2145, float %2343), !dbg !57
  %2449 = tail call float @llvm.nvvm.div.full(float %2146, float %2343), !dbg !57
  %2450 = tail call float @llvm.nvvm.div.full(float %2148, float %2293), !dbg !57
  %2451 = tail call float @llvm.nvvm.div.full(float %2149, float %2293), !dbg !57
  %2452 = tail call float @llvm.nvvm.div.full(float %2150, float %2343), !dbg !57
  %2453 = tail call float @llvm.nvvm.div.full(float %2151, float %2343), !dbg !57
  %2454 = tail call float @llvm.nvvm.div.full(float %2153, float %2293), !dbg !57
  %2455 = tail call float @llvm.nvvm.div.full(float %2154, float %2293), !dbg !57
  %2456 = tail call float @llvm.nvvm.div.full(float %2155, float %2343), !dbg !57
  %2457 = tail call float @llvm.nvvm.div.full(float %2156, float %2343), !dbg !57
  %2458 = tail call float @llvm.nvvm.div.full(float %2158, float %2293), !dbg !57
  %2459 = tail call float @llvm.nvvm.div.full(float %2159, float %2293), !dbg !57
  %2460 = tail call float @llvm.nvvm.div.full(float %2160, float %2343), !dbg !57
  %2461 = tail call float @llvm.nvvm.div.full(float %2161, float %2343), !dbg !57
  %2462 = tail call float @llvm.nvvm.div.full(float %2163, float %2293), !dbg !57
  %2463 = tail call float @llvm.nvvm.div.full(float %2164, float %2293), !dbg !57
  %2464 = tail call float @llvm.nvvm.div.full(float %2165, float %2343), !dbg !57
  %2465 = tail call float @llvm.nvvm.div.full(float %2166, float %2343), !dbg !57
  %2466 = tail call float @llvm.nvvm.div.full(float %2168, float %2293), !dbg !57
  %2467 = tail call float @llvm.nvvm.div.full(float %2169, float %2293), !dbg !57
  %2468 = tail call float @llvm.nvvm.div.full(float %2170, float %2343), !dbg !57
  %2469 = tail call float @llvm.nvvm.div.full(float %2171, float %2343), !dbg !57
  %2470 = shl nuw nsw i32 %22, 5, !dbg !58
  %2471 = zext nneg i32 %2470 to i64, !dbg !59
  %2472 = getelementptr float, ptr addrspace(1) %4, i64 %2471, !dbg !59
  %2473 = sext i32 %2400 to i64, !dbg !60
  %2474 = getelementptr float, ptr addrspace(1) %2472, i64 %2473, !dbg !60
  %2475 = lshr i32 %40, 2, !dbg !61
  %2476 = and i32 %2475, 7, !dbg !61
  %2477 = lshr i32 %40, 1, !dbg !61
  %2478 = and i32 %2477, 48, !dbg !61
  %2479 = lshr exact i32 %2393, 1, !dbg !61
  %2480 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2478, !dbg !61
  %2481 = getelementptr inbounds nuw float, ptr addrspace(3) %2480, i32 %2476, !dbg !61
  %2482 = getelementptr inbounds nuw float, ptr addrspace(3) %2481, i32 %2479, !dbg !61
  store float %2402, ptr addrspace(3) %2482, align 4, !dbg !61
  %2483 = getelementptr inbounds nuw i8, ptr addrspace(3) %2482, i32 32, !dbg !61
  store float %2403, ptr addrspace(3) %2483, align 4, !dbg !61
  %2484 = getelementptr inbounds nuw i8, ptr addrspace(3) %2482, i32 512, !dbg !61
  store float %2404, ptr addrspace(3) %2484, align 4, !dbg !61
  %2485 = getelementptr inbounds nuw i8, ptr addrspace(3) %2482, i32 544, !dbg !61
  store float %2405, ptr addrspace(3) %2485, align 4, !dbg !61
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !61
  %2486 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2399, !dbg !61
  %2487 = load i32, ptr addrspace(3) %2486, align 4, !dbg !61
  tail call void asm sideeffect "st.global.b32 [ $1 + 0 ], { $0 };", "r,l"(i32 %2487, ptr addrspace(1) %2474) #2, !dbg !61
  %2488 = insertelement <2 x float> poison, float %2406, i64 0, !dbg !62
  %2489 = insertelement <2 x float> %2488, float %2407, i64 1, !dbg !62
  %2490 = fptrunc <2 x float> %2489 to <2 x half>, !dbg !62
  %2491 = insertelement <2 x float> poison, float %2408, i64 0, !dbg !62
  %2492 = insertelement <2 x float> %2491, float %2409, i64 1, !dbg !62
  %2493 = fptrunc <2 x float> %2492 to <2 x half>, !dbg !62
  %2494 = insertelement <2 x float> poison, float %2410, i64 0, !dbg !62
  %2495 = insertelement <2 x float> %2494, float %2411, i64 1, !dbg !62
  %2496 = fptrunc <2 x float> %2495 to <2 x half>, !dbg !62
  %2497 = insertelement <2 x float> poison, float %2412, i64 0, !dbg !62
  %2498 = insertelement <2 x float> %2497, float %2413, i64 1, !dbg !62
  %2499 = fptrunc <2 x float> %2498 to <2 x half>, !dbg !62
  %2500 = insertelement <2 x float> poison, float %2414, i64 0, !dbg !62
  %2501 = insertelement <2 x float> %2500, float %2415, i64 1, !dbg !62
  %2502 = fptrunc <2 x float> %2501 to <2 x half>, !dbg !62
  %2503 = insertelement <2 x float> poison, float %2416, i64 0, !dbg !62
  %2504 = insertelement <2 x float> %2503, float %2417, i64 1, !dbg !62
  %2505 = fptrunc <2 x float> %2504 to <2 x half>, !dbg !62
  %2506 = insertelement <2 x float> poison, float %2418, i64 0, !dbg !62
  %2507 = insertelement <2 x float> %2506, float %2419, i64 1, !dbg !62
  %2508 = fptrunc <2 x float> %2507 to <2 x half>, !dbg !62
  %2509 = insertelement <2 x float> poison, float %2420, i64 0, !dbg !62
  %2510 = insertelement <2 x float> %2509, float %2421, i64 1, !dbg !62
  %2511 = fptrunc <2 x float> %2510 to <2 x half>, !dbg !62
  %2512 = insertelement <2 x float> poison, float %2422, i64 0, !dbg !62
  %2513 = insertelement <2 x float> %2512, float %2423, i64 1, !dbg !62
  %2514 = fptrunc <2 x float> %2513 to <2 x half>, !dbg !62
  %2515 = insertelement <2 x float> poison, float %2424, i64 0, !dbg !62
  %2516 = insertelement <2 x float> %2515, float %2425, i64 1, !dbg !62
  %2517 = fptrunc <2 x float> %2516 to <2 x half>, !dbg !62
  %2518 = insertelement <2 x float> poison, float %2426, i64 0, !dbg !62
  %2519 = insertelement <2 x float> %2518, float %2427, i64 1, !dbg !62
  %2520 = fptrunc <2 x float> %2519 to <2 x half>, !dbg !62
  %2521 = insertelement <2 x float> poison, float %2428, i64 0, !dbg !62
  %2522 = insertelement <2 x float> %2521, float %2429, i64 1, !dbg !62
  %2523 = fptrunc <2 x float> %2522 to <2 x half>, !dbg !62
  %2524 = insertelement <2 x float> poison, float %2430, i64 0, !dbg !62
  %2525 = insertelement <2 x float> %2524, float %2431, i64 1, !dbg !62
  %2526 = fptrunc <2 x float> %2525 to <2 x half>, !dbg !62
  %2527 = insertelement <2 x float> poison, float %2432, i64 0, !dbg !62
  %2528 = insertelement <2 x float> %2527, float %2433, i64 1, !dbg !62
  %2529 = fptrunc <2 x float> %2528 to <2 x half>, !dbg !62
  %2530 = insertelement <2 x float> poison, float %2434, i64 0, !dbg !62
  %2531 = insertelement <2 x float> %2530, float %2435, i64 1, !dbg !62
  %2532 = fptrunc <2 x float> %2531 to <2 x half>, !dbg !62
  %2533 = insertelement <2 x float> poison, float %2436, i64 0, !dbg !62
  %2534 = insertelement <2 x float> %2533, float %2437, i64 1, !dbg !62
  %2535 = fptrunc <2 x float> %2534 to <2 x half>, !dbg !62
  %2536 = insertelement <2 x float> poison, float %2438, i64 0, !dbg !62
  %2537 = insertelement <2 x float> %2536, float %2439, i64 1, !dbg !62
  %2538 = fptrunc <2 x float> %2537 to <2 x half>, !dbg !62
  %2539 = insertelement <2 x float> poison, float %2440, i64 0, !dbg !62
  %2540 = insertelement <2 x float> %2539, float %2441, i64 1, !dbg !62
  %2541 = fptrunc <2 x float> %2540 to <2 x half>, !dbg !62
  %2542 = insertelement <2 x float> poison, float %2442, i64 0, !dbg !62
  %2543 = insertelement <2 x float> %2542, float %2443, i64 1, !dbg !62
  %2544 = fptrunc <2 x float> %2543 to <2 x half>, !dbg !62
  %2545 = insertelement <2 x float> poison, float %2444, i64 0, !dbg !62
  %2546 = insertelement <2 x float> %2545, float %2445, i64 1, !dbg !62
  %2547 = fptrunc <2 x float> %2546 to <2 x half>, !dbg !62
  %2548 = insertelement <2 x float> poison, float %2446, i64 0, !dbg !62
  %2549 = insertelement <2 x float> %2548, float %2447, i64 1, !dbg !62
  %2550 = fptrunc <2 x float> %2549 to <2 x half>, !dbg !62
  %2551 = insertelement <2 x float> poison, float %2448, i64 0, !dbg !62
  %2552 = insertelement <2 x float> %2551, float %2449, i64 1, !dbg !62
  %2553 = fptrunc <2 x float> %2552 to <2 x half>, !dbg !62
  %2554 = insertelement <2 x float> poison, float %2450, i64 0, !dbg !62
  %2555 = insertelement <2 x float> %2554, float %2451, i64 1, !dbg !62
  %2556 = fptrunc <2 x float> %2555 to <2 x half>, !dbg !62
  %2557 = insertelement <2 x float> poison, float %2452, i64 0, !dbg !62
  %2558 = insertelement <2 x float> %2557, float %2453, i64 1, !dbg !62
  %2559 = fptrunc <2 x float> %2558 to <2 x half>, !dbg !62
  %2560 = insertelement <2 x float> poison, float %2454, i64 0, !dbg !62
  %2561 = insertelement <2 x float> %2560, float %2455, i64 1, !dbg !62
  %2562 = fptrunc <2 x float> %2561 to <2 x half>, !dbg !62
  %2563 = insertelement <2 x float> poison, float %2456, i64 0, !dbg !62
  %2564 = insertelement <2 x float> %2563, float %2457, i64 1, !dbg !62
  %2565 = fptrunc <2 x float> %2564 to <2 x half>, !dbg !62
  %2566 = insertelement <2 x float> poison, float %2458, i64 0, !dbg !62
  %2567 = insertelement <2 x float> %2566, float %2459, i64 1, !dbg !62
  %2568 = fptrunc <2 x float> %2567 to <2 x half>, !dbg !62
  %2569 = insertelement <2 x float> poison, float %2460, i64 0, !dbg !62
  %2570 = insertelement <2 x float> %2569, float %2461, i64 1, !dbg !62
  %2571 = fptrunc <2 x float> %2570 to <2 x half>, !dbg !62
  %2572 = insertelement <2 x float> poison, float %2462, i64 0, !dbg !62
  %2573 = insertelement <2 x float> %2572, float %2463, i64 1, !dbg !62
  %2574 = fptrunc <2 x float> %2573 to <2 x half>, !dbg !62
  %2575 = insertelement <2 x float> poison, float %2464, i64 0, !dbg !62
  %2576 = insertelement <2 x float> %2575, float %2465, i64 1, !dbg !62
  %2577 = fptrunc <2 x float> %2576 to <2 x half>, !dbg !62
  %2578 = insertelement <2 x float> poison, float %2466, i64 0, !dbg !62
  %2579 = insertelement <2 x float> %2578, float %2467, i64 1, !dbg !62
  %2580 = fptrunc <2 x float> %2579 to <2 x half>, !dbg !62
  %2581 = insertelement <2 x float> poison, float %2468, i64 0, !dbg !62
  %2582 = insertelement <2 x float> %2581, float %2469, i64 1, !dbg !62
  %2583 = fptrunc <2 x float> %2582 to <2 x half>, !dbg !62
  %2584 = mul nsw i64 %61, %2398, !dbg !63
  %2585 = mul nsw i64 %62, %2398, !dbg !63
  %2586 = mul nsw i64 %63, %2398, !dbg !63
  %2587 = mul nsw i64 %64, %2398, !dbg !63
  %2588 = mul nsw i64 %65, %2398, !dbg !63
  %2589 = mul nsw i64 %66, %2398, !dbg !63
  %2590 = mul nsw i64 %67, %2398, !dbg !63
  %2591 = mul nsw i64 %68, %2398, !dbg !63
  %2592 = getelementptr half, ptr addrspace(1) %2397, i64 %2584, !dbg !63
  %2593 = getelementptr half, ptr addrspace(1) %2592, i64 %79, !dbg !63
  %2594 = getelementptr half, ptr addrspace(1) %2397, i64 %2585, !dbg !63
  %2595 = getelementptr half, ptr addrspace(1) %2594, i64 %79, !dbg !63
  %2596 = getelementptr half, ptr addrspace(1) %2397, i64 %2586, !dbg !63
  %2597 = getelementptr half, ptr addrspace(1) %2596, i64 %79, !dbg !63
  %2598 = getelementptr half, ptr addrspace(1) %2397, i64 %2587, !dbg !63
  %2599 = getelementptr half, ptr addrspace(1) %2598, i64 %79, !dbg !63
  %2600 = getelementptr half, ptr addrspace(1) %2397, i64 %2588, !dbg !63
  %2601 = getelementptr half, ptr addrspace(1) %2600, i64 %79, !dbg !63
  %2602 = getelementptr half, ptr addrspace(1) %2397, i64 %2589, !dbg !63
  %2603 = getelementptr half, ptr addrspace(1) %2602, i64 %79, !dbg !63
  %2604 = getelementptr half, ptr addrspace(1) %2397, i64 %2590, !dbg !63
  %2605 = getelementptr half, ptr addrspace(1) %2604, i64 %79, !dbg !63
  %2606 = getelementptr half, ptr addrspace(1) %2397, i64 %2591, !dbg !63
  %2607 = getelementptr half, ptr addrspace(1) %2606, i64 %79, !dbg !63
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !63
  %2608 = shl nuw nsw i32 %40, 1, !dbg !63
  %2609 = and i32 %2608, 6, !dbg !63
  %2610 = shl nuw nsw i32 %40, 4, !dbg !63
  %2611 = and i32 %2610, 192, !dbg !63
  %2612 = or disjoint i32 %2611, %2609, !dbg !63
  %2613 = shl nuw nsw i32 %41, 4, !dbg !63
  %2614 = or disjoint i32 %2612, %2613, !dbg !63
  %2615 = and i32 %267, 3072, !dbg !63
  %2616 = or disjoint i32 %2614, %2615, !dbg !63
  %2617 = shl nuw nsw i32 %2393, 5, !dbg !63
  %2618 = or disjoint i32 %2616, %2617, !dbg !63
  %2619 = and i32 %77, 2040, !dbg !63
  %2620 = lshr i32 %2618, 3, !dbg !63
  %2621 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %2620, !dbg !63
  %2622 = getelementptr inbounds nuw half, ptr addrspace(3) %2621, i32 %2618, !dbg !63
  store <2 x half> %2490, ptr addrspace(3) %2622, align 4, !dbg !63
  %2623 = or disjoint i32 %2618, 512, !dbg !63
  %2624 = lshr i32 %2623, 3, !dbg !63
  %2625 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %2624, !dbg !63
  %2626 = getelementptr inbounds nuw half, ptr addrspace(3) %2625, i32 %2623, !dbg !63
  store <2 x half> %2493, ptr addrspace(3) %2626, align 4, !dbg !63
  %2627 = getelementptr inbounds nuw i8, ptr addrspace(3) %2622, i32 16, !dbg !63
  store <2 x half> %2496, ptr addrspace(3) %2627, align 4, !dbg !63
  %2628 = or disjoint i32 %2618, 520, !dbg !63
  %2629 = lshr i32 %2628, 3, !dbg !63
  %2630 = and i32 %2629, 536870904, !dbg !63
  %2631 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %2630, !dbg !63
  %2632 = getelementptr inbounds nuw half, ptr addrspace(3) %2631, i32 %2628, !dbg !63
  store <2 x half> %2499, ptr addrspace(3) %2632, align 4, !dbg !63
  %2633 = getelementptr inbounds nuw i8, ptr addrspace(3) %2622, i32 32, !dbg !63
  store <2 x half> %2502, ptr addrspace(3) %2633, align 4, !dbg !63
  %2634 = or disjoint i32 %2618, 528, !dbg !63
  %2635 = lshr i32 %2634, 3, !dbg !63
  %2636 = and i32 %2635, 536870904, !dbg !63
  %2637 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %2636, !dbg !63
  %2638 = getelementptr inbounds nuw half, ptr addrspace(3) %2637, i32 %2634, !dbg !63
  store <2 x half> %2505, ptr addrspace(3) %2638, align 4, !dbg !63
  %2639 = getelementptr inbounds nuw i8, ptr addrspace(3) %2622, i32 48, !dbg !63
  store <2 x half> %2508, ptr addrspace(3) %2639, align 4, !dbg !63
  %2640 = or disjoint i32 %2618, 536, !dbg !63
  %2641 = lshr i32 %2640, 3, !dbg !63
  %2642 = and i32 %2641, 536870904, !dbg !63
  %2643 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %2642, !dbg !63
  %2644 = getelementptr inbounds nuw half, ptr addrspace(3) %2643, i32 %2640, !dbg !63
  store <2 x half> %2511, ptr addrspace(3) %2644, align 4, !dbg !63
  %2645 = getelementptr inbounds nuw i8, ptr addrspace(3) %2622, i32 64, !dbg !63
  store <2 x half> %2514, ptr addrspace(3) %2645, align 4, !dbg !63
  %2646 = or disjoint i32 %2618, 544, !dbg !63
  %2647 = lshr i32 %2646, 3, !dbg !63
  %2648 = and i32 %2647, 536870904, !dbg !63
  %2649 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %2648, !dbg !63
  %2650 = getelementptr inbounds nuw half, ptr addrspace(3) %2649, i32 %2646, !dbg !63
  store <2 x half> %2517, ptr addrspace(3) %2650, align 4, !dbg !63
  %2651 = getelementptr inbounds nuw i8, ptr addrspace(3) %2622, i32 80, !dbg !63
  store <2 x half> %2520, ptr addrspace(3) %2651, align 4, !dbg !63
  %2652 = or disjoint i32 %2618, 552, !dbg !63
  %2653 = lshr i32 %2652, 3, !dbg !63
  %2654 = and i32 %2653, 536870904, !dbg !63
  %2655 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %2654, !dbg !63
  %2656 = getelementptr inbounds nuw half, ptr addrspace(3) %2655, i32 %2652, !dbg !63
  store <2 x half> %2523, ptr addrspace(3) %2656, align 4, !dbg !63
  %2657 = getelementptr inbounds nuw i8, ptr addrspace(3) %2622, i32 96, !dbg !63
  store <2 x half> %2526, ptr addrspace(3) %2657, align 4, !dbg !63
  %2658 = or disjoint i32 %2618, 560, !dbg !63
  %2659 = lshr i32 %2658, 3, !dbg !63
  %2660 = and i32 %2659, 536870904, !dbg !63
  %2661 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %2660, !dbg !63
  %2662 = getelementptr inbounds nuw half, ptr addrspace(3) %2661, i32 %2658, !dbg !63
  store <2 x half> %2529, ptr addrspace(3) %2662, align 4, !dbg !63
  %2663 = getelementptr inbounds nuw i8, ptr addrspace(3) %2622, i32 112, !dbg !63
  store <2 x half> %2532, ptr addrspace(3) %2663, align 4, !dbg !63
  %2664 = or disjoint i32 %2618, 568, !dbg !63
  %2665 = lshr i32 %2664, 3, !dbg !63
  %2666 = and i32 %2665, 536870904, !dbg !63
  %2667 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %2666, !dbg !63
  %2668 = getelementptr inbounds nuw half, ptr addrspace(3) %2667, i32 %2664, !dbg !63
  store <2 x half> %2535, ptr addrspace(3) %2668, align 4, !dbg !63
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !63
  %2669 = and i32 %40, 248, !dbg !63
  %2670 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %2669, !dbg !63
  %2671 = getelementptr inbounds nuw half, ptr addrspace(3) %2670, i32 %2619, !dbg !63
  %2672 = load <4 x i32>, ptr addrspace(3) %2671, align 16, !dbg !63
  %2673 = or disjoint i32 %2619, 2048, !dbg !63
  %2674 = lshr exact i32 %2673, 3, !dbg !63
  %2675 = and i32 %2674, 504, !dbg !63
  %2676 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %2675, !dbg !63
  %2677 = getelementptr inbounds nuw half, ptr addrspace(3) %2676, i32 %2673, !dbg !63
  %2678 = load <4 x i32>, ptr addrspace(3) %2677, align 16, !dbg !63
  %2679 = or disjoint i32 %2619, 4096, !dbg !63
  %2680 = lshr exact i32 %2679, 3, !dbg !63
  %2681 = and i32 %2680, 760, !dbg !63
  %2682 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %2681, !dbg !63
  %2683 = getelementptr inbounds nuw half, ptr addrspace(3) %2682, i32 %2679, !dbg !63
  %2684 = load <4 x i32>, ptr addrspace(3) %2683, align 16, !dbg !63
  %2685 = or i32 %77, 6144, !dbg !63
  %2686 = lshr exact i32 %2685, 3, !dbg !63
  %2687 = and i32 %2686, 1016, !dbg !63
  %2688 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %2687, !dbg !63
  %2689 = getelementptr inbounds nuw half, ptr addrspace(3) %2688, i32 %2685, !dbg !63
  %2690 = load <4 x i32>, ptr addrspace(3) %2689, align 16, !dbg !63
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !63
  store <2 x half> %2538, ptr addrspace(3) %2622, align 4, !dbg !63
  store <2 x half> %2541, ptr addrspace(3) %2626, align 4, !dbg !63
  store <2 x half> %2544, ptr addrspace(3) %2627, align 4, !dbg !63
  store <2 x half> %2547, ptr addrspace(3) %2632, align 4, !dbg !63
  store <2 x half> %2550, ptr addrspace(3) %2633, align 4, !dbg !63
  store <2 x half> %2553, ptr addrspace(3) %2638, align 4, !dbg !63
  store <2 x half> %2556, ptr addrspace(3) %2639, align 4, !dbg !63
  store <2 x half> %2559, ptr addrspace(3) %2644, align 4, !dbg !63
  store <2 x half> %2562, ptr addrspace(3) %2645, align 4, !dbg !63
  store <2 x half> %2565, ptr addrspace(3) %2650, align 4, !dbg !63
  store <2 x half> %2568, ptr addrspace(3) %2651, align 4, !dbg !63
  store <2 x half> %2571, ptr addrspace(3) %2656, align 4, !dbg !63
  store <2 x half> %2574, ptr addrspace(3) %2657, align 4, !dbg !63
  store <2 x half> %2577, ptr addrspace(3) %2662, align 4, !dbg !63
  store <2 x half> %2580, ptr addrspace(3) %2663, align 4, !dbg !63
  store <2 x half> %2583, ptr addrspace(3) %2668, align 4, !dbg !63
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !63
  %2691 = load <4 x i32>, ptr addrspace(3) %2671, align 16, !dbg !63
  %2692 = load <4 x i32>, ptr addrspace(3) %2677, align 16, !dbg !63
  %2693 = load <4 x i32>, ptr addrspace(3) %2683, align 16, !dbg !63
  %2694 = load <4 x i32>, ptr addrspace(3) %2689, align 16, !dbg !63
  %.extract = extractelement <4 x i32> %2672, i64 0, !dbg !63
  %.extract399 = extractelement <4 x i32> %2672, i64 1, !dbg !63
  %.extract401 = extractelement <4 x i32> %2672, i64 2, !dbg !63
  %.extract403 = extractelement <4 x i32> %2672, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract, i32 %.extract399, i32 %.extract401, i32 %.extract403, ptr addrspace(1) %2593) #2, !dbg !63
  %.extract405 = extractelement <4 x i32> %2678, i64 0, !dbg !63
  %.extract407 = extractelement <4 x i32> %2678, i64 1, !dbg !63
  %.extract409 = extractelement <4 x i32> %2678, i64 2, !dbg !63
  %.extract411 = extractelement <4 x i32> %2678, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract405, i32 %.extract407, i32 %.extract409, i32 %.extract411, ptr addrspace(1) %2595) #2, !dbg !63
  %.extract413 = extractelement <4 x i32> %2684, i64 0, !dbg !63
  %.extract415 = extractelement <4 x i32> %2684, i64 1, !dbg !63
  %.extract417 = extractelement <4 x i32> %2684, i64 2, !dbg !63
  %.extract419 = extractelement <4 x i32> %2684, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract413, i32 %.extract415, i32 %.extract417, i32 %.extract419, ptr addrspace(1) %2597) #2, !dbg !63
  %.extract421 = extractelement <4 x i32> %2690, i64 0, !dbg !63
  %.extract423 = extractelement <4 x i32> %2690, i64 1, !dbg !63
  %.extract425 = extractelement <4 x i32> %2690, i64 2, !dbg !63
  %.extract427 = extractelement <4 x i32> %2690, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract421, i32 %.extract423, i32 %.extract425, i32 %.extract427, ptr addrspace(1) %2599) #2, !dbg !63
  %.extract429 = extractelement <4 x i32> %2691, i64 0, !dbg !63
  %.extract431 = extractelement <4 x i32> %2691, i64 1, !dbg !63
  %.extract433 = extractelement <4 x i32> %2691, i64 2, !dbg !63
  %.extract435 = extractelement <4 x i32> %2691, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract429, i32 %.extract431, i32 %.extract433, i32 %.extract435, ptr addrspace(1) %2601) #2, !dbg !63
  %.extract437 = extractelement <4 x i32> %2692, i64 0, !dbg !63
  %.extract439 = extractelement <4 x i32> %2692, i64 1, !dbg !63
  %.extract441 = extractelement <4 x i32> %2692, i64 2, !dbg !63
  %.extract443 = extractelement <4 x i32> %2692, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract437, i32 %.extract439, i32 %.extract441, i32 %.extract443, ptr addrspace(1) %2603) #2, !dbg !63
  %.extract445 = extractelement <4 x i32> %2693, i64 0, !dbg !63
  %.extract447 = extractelement <4 x i32> %2693, i64 1, !dbg !63
  %.extract449 = extractelement <4 x i32> %2693, i64 2, !dbg !63
  %.extract451 = extractelement <4 x i32> %2693, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract445, i32 %.extract447, i32 %.extract449, i32 %.extract451, ptr addrspace(1) %2605) #2, !dbg !63
  %.extract453 = extractelement <4 x i32> %2694, i64 0, !dbg !63
  %.extract455 = extractelement <4 x i32> %2694, i64 1, !dbg !63
  %.extract457 = extractelement <4 x i32> %2694, i64 2, !dbg !63
  %.extract459 = extractelement <4 x i32> %2694, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract453, i32 %.extract455, i32 %.extract457, i32 %.extract459, ptr addrspace(1) %2607) #2, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x float> @llvm.maxnum.v4f32(<4 x float>, <4 x float>) #7

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "gqa.py", directory: "/home/ubuntu/anjiang/PTX_dataset/triton_ptx")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "_attn_fwd", linkageName: "_attn_fwd", scope: !1, file: !1, line: 114, type: !6, scopeLine: 114, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 127, column: 28, scope: !5)
!9 = !DILocation(line: 128, column: 27, scope: !5)
!10 = !DILocation(line: 129, column: 22, scope: !5)
!11 = !DILocation(line: 130, column: 21, scope: !5)
!12 = !DILocation(line: 131, column: 26, scope: !5)
!13 = !DILocation(line: 131, column: 38, scope: !5)
!14 = !DILocation(line: 131, column: 59, scope: !5)
!15 = !DILocation(line: 131, column: 71, scope: !5)
!16 = !DILocation(line: 131, column: 50, scope: !5)
!17 = !DILocation(line: 135, column: 17, scope: !5)
!18 = !DILocation(line: 138, column: 27, scope: !5)
!19 = !DILocation(line: 140, column: 8, scope: !5)
!20 = !DILocation(line: 143, column: 17, scope: !5)
!21 = !DILocation(line: 148, column: 8, scope: !5)
!22 = !DILocation(line: 151, column: 17, scope: !5)
!23 = !DILocation(line: 156, column: 8, scope: !5)
!24 = !DILocation(line: 167, column: 46, scope: !5)
!25 = !DILocation(line: 175, column: 16, scope: !5)
!26 = !DILocation(line: 177, column: 16, scope: !5)
!27 = !DILocation(line: 47, column: 20, scope: !28, inlinedAt: !29)
!28 = distinct !DILexicalBlockFile(scope: !5, file: !1, discriminator: 0)
!29 = !DILocation(line: 185, column: 82, scope: !5)
!30 = !DILocation(line: 65, column: 20, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 44, column: 33, scope: !28, inlinedAt: !29)
!32 = !DILocation(line: 55, column: 51, scope: !28, inlinedAt: !29)
!33 = !DILocation(line: 48, column: 23, scope: !28, inlinedAt: !29)
!34 = !DILocation(line: 167, column: 27, scope: !35, inlinedAt: !29)
!35 = distinct !DILexicalBlockFile(scope: !5, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language")
!37 = !DILocation(line: 188, column: 40, scope: !35, inlinedAt: !29)
!38 = !DILocation(line: 55, column: 35, scope: !28, inlinedAt: !29)
!39 = !DILocation(line: 56, column: 22, scope: !28, inlinedAt: !29)
!40 = !DILocation(line: 56, column: 33, scope: !28, inlinedAt: !29)
!41 = !DILocation(line: 57, column: 25, scope: !28, inlinedAt: !29)
!42 = !DILocation(line: 260, column: 15, scope: !35, inlinedAt: !29)
!43 = !DILocation(line: 290, column: 36, scope: !35, inlinedAt: !29)
!44 = !DILocation(line: 60, column: 35, scope: !28, inlinedAt: !29)
!45 = !DILocation(line: 60, column: 29, scope: !28, inlinedAt: !29)
!46 = !DILocation(line: 61, column: 20, scope: !28, inlinedAt: !29)
!47 = !DILocation(line: 61, column: 28, scope: !28, inlinedAt: !29)
!48 = !DILocation(line: 63, column: 20, scope: !28, inlinedAt: !29)
!49 = !DILocation(line: 69, column: 21, scope: !28, inlinedAt: !29)
!50 = !DILocation(line: 70, column: 27, scope: !28, inlinedAt: !29)
!51 = !DILocation(line: 73, column: 46, scope: !28, inlinedAt: !29)
!52 = !DILocation(line: 198, column: 24, scope: !5)
!53 = !DILocation(line: 159, column: 19, scope: !5)
!54 = !DILocation(line: 164, column: 8, scope: !5)
!55 = !DILocation(line: 167, column: 33, scope: !5)
!56 = !DILocation(line: 198, column: 11, scope: !5)
!57 = !DILocation(line: 199, column: 16, scope: !5)
!58 = !DILocation(line: 200, column: 26, scope: !5)
!59 = !DILocation(line: 200, column: 17, scope: !5)
!60 = !DILocation(line: 200, column: 34, scope: !5)
!61 = !DILocation(line: 201, column: 21, scope: !5)
!62 = !DILocation(line: 202, column: 33, scope: !5)
!63 = !DILocation(line: 202, column: 26, scope: !5)
!64 = !DILocation(line: 202, column: 4, scope: !5)
