; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @_attn_fwd(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, float %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, ptr addrspace(1) readnone captures(none) %19) local_unnamed_addr #0 !dbg !5 {
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %.frozen = freeze i32 %18, !dbg !10
  %23 = sdiv i32 %22, %.frozen, !dbg !10
  %24 = mul i32 %23, %.frozen, !dbg !11
  %.decomposed = sub i32 %22, %24, !dbg !11
  %25 = sext i32 %23 to i64, !dbg !12
  %26 = sext i32 %6 to i64, !dbg !13
  %27 = mul nsw i64 %25, %26, !dbg !13
  %28 = zext nneg i32 %.decomposed to i64, !dbg !14
  %29 = sext i32 %7 to i64, !dbg !15
  %30 = mul nsw i64 %28, %29, !dbg !15
  %31 = add nsw i64 %30, %27, !dbg !16
  %32 = getelementptr half, ptr addrspace(1) %0, i64 %31, !dbg !17
  %33 = shl i32 %21, 7, !dbg !18
  %34 = sext i32 %8 to i64, !dbg !19
  %35 = sext i32 %33 to i64, !dbg !19
  %36 = getelementptr half, ptr addrspace(1) %2, i64 %31, !dbg !20
  %37 = sext i32 %14 to i64, !dbg !21
  %38 = getelementptr half, ptr addrspace(1) %1, i64 %31, !dbg !22
  %39 = sext i32 %11 to i64, !dbg !23
  %40 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %41 = and i32 %40, 16, !dbg !24
  %42 = lshr i32 %40, 3, !dbg !24
  %43 = and i32 %42, 15, !dbg !24
  %44 = or disjoint i32 %43, 16, !dbg !24
  %45 = or disjoint i32 %43, 32, !dbg !24
  %46 = or disjoint i32 %43, 48, !dbg !24
  %47 = or disjoint i32 %43, 64, !dbg !24
  %48 = or disjoint i32 %43, 80, !dbg !24
  %49 = or disjoint i32 %43, 96, !dbg !24
  %50 = or i32 %42, 112, !dbg !24
  %51 = and i32 %40, 4, !dbg !24
  %.not3 = icmp eq i32 %51, 0, !dbg !24
  %52 = fmul float %3, 0x3FF7154760000000, !dbg !25
  %53 = zext nneg i32 %43 to i64, !dbg !26
  %54 = zext nneg i32 %44 to i64, !dbg !26
  %55 = zext nneg i32 %45 to i64, !dbg !26
  %56 = zext nneg i32 %46 to i64, !dbg !26
  %57 = zext nneg i32 %47 to i64, !dbg !26
  %58 = zext nneg i32 %48 to i64, !dbg !26
  %59 = zext nneg i32 %49 to i64, !dbg !26
  %60 = zext nneg i32 %50 to i64, !dbg !26
  %61 = or disjoint i64 %53, %35, !dbg !26
  %62 = or disjoint i64 %54, %35, !dbg !26
  %63 = or disjoint i64 %55, %35, !dbg !26
  %64 = or disjoint i64 %56, %35, !dbg !26
  %65 = or disjoint i64 %57, %35, !dbg !26
  %66 = or disjoint i64 %58, %35, !dbg !26
  %67 = or disjoint i64 %59, %35, !dbg !26
  %68 = or disjoint i64 %60, %35, !dbg !26
  %69 = mul nsw i64 %61, %34, !dbg !26
  %70 = mul nsw i64 %62, %34, !dbg !26
  %71 = mul nsw i64 %63, %34, !dbg !26
  %72 = mul nsw i64 %64, %34, !dbg !26
  %73 = mul nsw i64 %65, %34, !dbg !26
  %74 = mul nsw i64 %66, %34, !dbg !26
  %75 = mul nsw i64 %67, %34, !dbg !26
  %76 = mul nsw i64 %68, %34, !dbg !26
  %77 = shl nuw nsw i32 %40, 3, !dbg !26
  %78 = and i32 %77, 56, !dbg !26
  %79 = zext nneg i32 %78 to i64, !dbg !26
  %80 = getelementptr half, ptr addrspace(1) %32, i64 %69, !dbg !26
  %81 = getelementptr half, ptr addrspace(1) %80, i64 %79, !dbg !26
  %82 = getelementptr half, ptr addrspace(1) %32, i64 %70, !dbg !26
  %83 = getelementptr half, ptr addrspace(1) %82, i64 %79, !dbg !26
  %84 = getelementptr half, ptr addrspace(1) %32, i64 %71, !dbg !26
  %85 = getelementptr half, ptr addrspace(1) %84, i64 %79, !dbg !26
  %86 = getelementptr half, ptr addrspace(1) %32, i64 %72, !dbg !26
  %87 = getelementptr half, ptr addrspace(1) %86, i64 %79, !dbg !26
  %88 = getelementptr half, ptr addrspace(1) %32, i64 %73, !dbg !26
  %89 = getelementptr half, ptr addrspace(1) %88, i64 %79, !dbg !26
  %90 = getelementptr half, ptr addrspace(1) %32, i64 %74, !dbg !26
  %91 = getelementptr half, ptr addrspace(1) %90, i64 %79, !dbg !26
  %92 = getelementptr half, ptr addrspace(1) %32, i64 %75, !dbg !26
  %93 = getelementptr half, ptr addrspace(1) %92, i64 %79, !dbg !26
  %94 = getelementptr half, ptr addrspace(1) %32, i64 %76, !dbg !26
  %95 = getelementptr half, ptr addrspace(1) %94, i64 %79, !dbg !26
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %81) #2, !dbg !26
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !26
  %98 = bitcast i32 %97 to <2 x half>, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !26
  %100 = bitcast i32 %99 to <2 x half>, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !26
  %102 = bitcast i32 %101 to <2 x half>, !dbg !26
  %103 = shufflevector <2 x half> %102, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %104 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !26
  %105 = bitcast i32 %104 to <2 x half>, !dbg !26
  %106 = shufflevector <2 x half> %105, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %83) #2, !dbg !26
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !26
  %109 = bitcast i32 %108 to <2 x half>, !dbg !26
  %110 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !26
  %111 = bitcast i32 %110 to <2 x half>, !dbg !26
  %112 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !26
  %113 = bitcast i32 %112 to <2 x half>, !dbg !26
  %114 = shufflevector <2 x half> %113, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %115 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !26
  %116 = bitcast i32 %115 to <2 x half>, !dbg !26
  %117 = shufflevector <2 x half> %116, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %85) #2, !dbg !26
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !26
  %120 = bitcast i32 %119 to <2 x half>, !dbg !26
  %121 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !26
  %122 = bitcast i32 %121 to <2 x half>, !dbg !26
  %123 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !26
  %124 = bitcast i32 %123 to <2 x half>, !dbg !26
  %125 = shufflevector <2 x half> %124, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %126 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !26
  %127 = bitcast i32 %126 to <2 x half>, !dbg !26
  %128 = shufflevector <2 x half> %127, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %87) #2, !dbg !26
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !26
  %131 = bitcast i32 %130 to <2 x half>, !dbg !26
  %132 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !26
  %133 = bitcast i32 %132 to <2 x half>, !dbg !26
  %134 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !26
  %135 = bitcast i32 %134 to <2 x half>, !dbg !26
  %136 = shufflevector <2 x half> %135, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %137 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !26
  %138 = bitcast i32 %137 to <2 x half>, !dbg !26
  %139 = shufflevector <2 x half> %138, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %89) #2, !dbg !26
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !26
  %142 = bitcast i32 %141 to <2 x half>, !dbg !26
  %143 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !26
  %144 = bitcast i32 %143 to <2 x half>, !dbg !26
  %145 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !26
  %146 = bitcast i32 %145 to <2 x half>, !dbg !26
  %147 = shufflevector <2 x half> %146, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %148 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !26
  %149 = bitcast i32 %148 to <2 x half>, !dbg !26
  %150 = shufflevector <2 x half> %149, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %91) #2, !dbg !26
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !26
  %153 = bitcast i32 %152 to <2 x half>, !dbg !26
  %154 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !26
  %155 = bitcast i32 %154 to <2 x half>, !dbg !26
  %156 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !26
  %157 = bitcast i32 %156 to <2 x half>, !dbg !26
  %158 = shufflevector <2 x half> %157, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %159 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !26
  %160 = bitcast i32 %159 to <2 x half>, !dbg !26
  %161 = shufflevector <2 x half> %160, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %93) #2, !dbg !26
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !26
  %164 = bitcast i32 %163 to <2 x half>, !dbg !26
  %165 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !26
  %166 = bitcast i32 %165 to <2 x half>, !dbg !26
  %167 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !26
  %168 = bitcast i32 %167 to <2 x half>, !dbg !26
  %169 = shufflevector <2 x half> %168, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %170 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !26
  %171 = bitcast i32 %170 to <2 x half>, !dbg !26
  %172 = shufflevector <2 x half> %171, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %95) #2, !dbg !26
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !26
  %175 = bitcast i32 %174 to <2 x half>, !dbg !26
  %176 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !26
  %177 = bitcast i32 %176 to <2 x half>, !dbg !26
  %178 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !26
  %179 = bitcast i32 %178 to <2 x half>, !dbg !26
  %180 = shufflevector <2 x half> %179, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %181 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !26
  %182 = bitcast i32 %181 to <2 x half>, !dbg !26
  %183 = shufflevector <2 x half> %182, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %184 = xor i32 %77, %40, !dbg !26
  %185 = and i32 %184, 56, !dbg !26
  %186 = shl nuw nsw i32 %43, 6, !dbg !26
  %187 = or disjoint i32 %185, %186, !dbg !26
  %188 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %187, !dbg !26
  %189 = shufflevector <2 x half> %98, <2 x half> %100, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %190 = shufflevector <8 x half> %189, <8 x half> %103, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %191 = shufflevector <8 x half> %190, <8 x half> %106, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %191, ptr addrspace(3) %188, align 16, !dbg !26
  %192 = or disjoint i32 %187, 1024, !dbg !26
  %193 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %192, !dbg !26
  %194 = shufflevector <2 x half> %109, <2 x half> %111, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %195 = shufflevector <8 x half> %194, <8 x half> %114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %196 = shufflevector <8 x half> %195, <8 x half> %117, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %196, ptr addrspace(3) %193, align 16, !dbg !26
  %197 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %185, !dbg !26
  %198 = getelementptr inbounds nuw half, ptr addrspace(3) %197, i32 %186, !dbg !26
  %199 = getelementptr inbounds nuw i8, ptr addrspace(3) %198, i32 4096, !dbg !26
  %200 = shufflevector <2 x half> %120, <2 x half> %122, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %201 = shufflevector <8 x half> %200, <8 x half> %125, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %202 = shufflevector <8 x half> %201, <8 x half> %128, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %202, ptr addrspace(3) %199, align 16, !dbg !26
  %203 = getelementptr inbounds nuw i8, ptr addrspace(3) %198, i32 6144, !dbg !26
  %204 = shufflevector <2 x half> %131, <2 x half> %133, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %205 = shufflevector <8 x half> %204, <8 x half> %136, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %206 = shufflevector <8 x half> %205, <8 x half> %139, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %206, ptr addrspace(3) %203, align 16, !dbg !26
  %207 = getelementptr inbounds nuw i8, ptr addrspace(3) %198, i32 8192, !dbg !26
  %208 = shufflevector <2 x half> %142, <2 x half> %144, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %209 = shufflevector <8 x half> %208, <8 x half> %147, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %210 = shufflevector <8 x half> %209, <8 x half> %150, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %210, ptr addrspace(3) %207, align 16, !dbg !26
  %211 = getelementptr inbounds nuw i8, ptr addrspace(3) %198, i32 10240, !dbg !26
  %212 = shufflevector <2 x half> %153, <2 x half> %155, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %213 = shufflevector <8 x half> %212, <8 x half> %158, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %214 = shufflevector <8 x half> %213, <8 x half> %161, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %214, ptr addrspace(3) %211, align 16, !dbg !26
  %215 = getelementptr inbounds nuw i8, ptr addrspace(3) %198, i32 12288, !dbg !26
  %216 = shufflevector <2 x half> %164, <2 x half> %166, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %217 = shufflevector <8 x half> %216, <8 x half> %169, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %218 = shufflevector <8 x half> %217, <8 x half> %172, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %218, ptr addrspace(3) %215, align 16, !dbg !26
  %219 = getelementptr inbounds nuw i8, ptr addrspace(3) %198, i32 14336, !dbg !26
  %220 = shufflevector <2 x half> %175, <2 x half> %177, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %221 = shufflevector <8 x half> %220, <8 x half> %180, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %222 = shufflevector <8 x half> %221, <8 x half> %183, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %222, ptr addrspace(3) %219, align 16, !dbg !26
  %223 = mul nsw i64 %39, %53, !dbg !27
  %224 = mul nsw i64 %39, %54, !dbg !27
  %225 = getelementptr half, ptr addrspace(1) %38, i64 %223, !dbg !27
  %226 = getelementptr half, ptr addrspace(1) %225, i64 %79, !dbg !27
  %227 = getelementptr half, ptr addrspace(1) %38, i64 %224, !dbg !27
  %228 = getelementptr half, ptr addrspace(1) %227, i64 %79, !dbg !27
  %229 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %187, !dbg !27
  %230 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %192, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %229, ptr addrspace(1) %226, i32 16) #2, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %230, ptr addrspace(1) %228, i32 16) #2, !dbg !27
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !27
  %231 = mul nsw i64 %37, %53, !dbg !30
  %232 = mul nsw i64 %37, %54, !dbg !30
  %233 = getelementptr half, ptr addrspace(1) %36, i64 %231, !dbg !30
  %234 = getelementptr half, ptr addrspace(1) %233, i64 %79, !dbg !30
  %235 = getelementptr half, ptr addrspace(1) %36, i64 %232, !dbg !30
  %236 = getelementptr half, ptr addrspace(1) %235, i64 %79, !dbg !30
  %237 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 28672), i32 %187, !dbg !30
  %238 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 28672), i32 %192, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %237, ptr addrspace(1) %234, i32 16) #2, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %238, ptr addrspace(1) %236, i32 16) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %239 = or disjoint i64 %53, 32, !dbg !27
  %240 = or disjoint i64 %54, 32, !dbg !27
  %241 = mul nsw i64 %239, %39, !dbg !27
  %242 = mul nsw i64 %240, %39, !dbg !27
  %243 = getelementptr half, ptr addrspace(1) %38, i64 %241, !dbg !27
  %244 = getelementptr half, ptr addrspace(1) %243, i64 %79, !dbg !27
  %245 = getelementptr half, ptr addrspace(1) %38, i64 %242, !dbg !27
  %246 = getelementptr half, ptr addrspace(1) %245, i64 %79, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %247 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 20480), i32 %187, !dbg !27
  %248 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 20480), i32 %192, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %247, ptr addrspace(1) %244, i32 16) #2, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %248, ptr addrspace(1) %246, i32 16) #2, !dbg !27
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !27
  %249 = mul nsw i64 %239, %37, !dbg !30
  %250 = mul nsw i64 %240, %37, !dbg !30
  %251 = getelementptr half, ptr addrspace(1) %36, i64 %249, !dbg !30
  %252 = getelementptr half, ptr addrspace(1) %251, i64 %79, !dbg !30
  %253 = getelementptr half, ptr addrspace(1) %36, i64 %250, !dbg !30
  %254 = getelementptr half, ptr addrspace(1) %253, i64 %79, !dbg !30
  %255 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %187, !dbg !30
  %256 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %192, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %255, ptr addrspace(1) %252, i32 16) #2, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %256, ptr addrspace(1) %254, i32 16) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %257 = or disjoint i64 %53, 64, !dbg !27
  %258 = or disjoint i64 %54, 64, !dbg !27
  %259 = mul nsw i64 %257, %39, !dbg !27
  %260 = mul nsw i64 %258, %39, !dbg !27
  %261 = getelementptr half, ptr addrspace(1) %38, i64 %259, !dbg !27
  %262 = getelementptr half, ptr addrspace(1) %261, i64 %79, !dbg !27
  %263 = getelementptr half, ptr addrspace(1) %38, i64 %260, !dbg !27
  %264 = getelementptr half, ptr addrspace(1) %263, i64 %79, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %265 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %187, !dbg !27
  %266 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %192, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %265, ptr addrspace(1) %262, i32 16) #2, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %266, ptr addrspace(1) %264, i32 16) #2, !dbg !27
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !27
  %267 = mul nsw i64 %257, %37, !dbg !30
  %268 = mul nsw i64 %258, %37, !dbg !30
  %269 = getelementptr half, ptr addrspace(1) %36, i64 %267, !dbg !30
  %270 = getelementptr half, ptr addrspace(1) %269, i64 %79, !dbg !30
  %271 = getelementptr half, ptr addrspace(1) %36, i64 %268, !dbg !30
  %272 = getelementptr half, ptr addrspace(1) %271, i64 %79, !dbg !30
  %273 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %187, !dbg !30
  %274 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %192, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %273, ptr addrspace(1) %270, i32 16) #2, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %274, ptr addrspace(1) %272, i32 16) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %invariant.gep = getelementptr half, ptr addrspace(1) %38, i64 %79, !dbg !31
  %invariant.gep364 = getelementptr half, ptr addrspace(1) %36, i64 %79, !dbg !31
  %275 = and i32 %40, 3
  %276 = mul nuw nsw i32 %275, 72
  %277 = select i1 %.not3, i32 0, i32 288
  %278 = xor i32 %277, %276
  %279 = shl nuw nsw i32 %40, 6
  %280 = and i32 %279, 512
  %281 = or disjoint i32 %278, %280
  %282 = lshr exact i32 %41, 1
  %283 = xor i32 %281, %282
  %284 = shl nuw nsw i32 %40, 5
  %285 = and i32 %284, 1024
  %286 = or disjoint i32 %283, %285
  %287 = and i32 %284, 2048
  %288 = xor i32 %286, %287
  %289 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %288
  %290 = ptrtoint ptr addrspace(3) %289 to i32
  %291 = xor i32 %288, 16
  %292 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %291
  %293 = ptrtoint ptr addrspace(3) %292 to i32
  %294 = xor i32 %288, 32
  %295 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %294
  %296 = ptrtoint ptr addrspace(3) %295 to i32
  %297 = xor i32 %288, 48
  %298 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %297
  %299 = ptrtoint ptr addrspace(3) %298 to i32
  %300 = xor i32 %288, 4096
  %301 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %300
  %302 = ptrtoint ptr addrspace(3) %301 to i32
  %303 = xor i32 %288, 4112
  %304 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %303
  %305 = ptrtoint ptr addrspace(3) %304 to i32
  %306 = xor i32 %288, 4128
  %307 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %306
  %308 = ptrtoint ptr addrspace(3) %307 to i32
  %309 = xor i32 %288, 4144
  %310 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %309
  %311 = ptrtoint ptr addrspace(3) %310 to i32
  %and.ra = and i32 %40, 24
  %312 = xor i32 %278, %and.ra
  %313 = xor i32 %312, 32
  %314 = xor i32 %312, 544
  %315 = xor i32 %312, 1056
  %316 = xor i32 %312, 1568
  %317 = and i32 %279, 1536
  %318 = or disjoint i32 %278, %317
  %319 = xor i32 %318, 8
  %320 = xor i32 %318, 16
  %321 = xor i32 %318, 24
  %322 = xor i32 %318, 32
  %323 = xor i32 %318, 40
  %324 = xor i32 %318, 48
  %325 = xor i32 %318, 56
  %326 = insertelement <4 x float> poison, float %52, i64 0, !dbg !32
  %327 = shufflevector <4 x float> %326, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !32
  br label %328, !dbg !31

328:                                              ; preds = %20, %__nv_exp2f.exit203
  %329 = phi i32 [ -1, %20 ], [ %402, %__nv_exp2f.exit203 ]
  %330 = phi i32 [ 2, %20 ], [ %1397, %__nv_exp2f.exit203 ]
  %331 = phi i64 [ 64, %20 ], [ %1394, %__nv_exp2f.exit203 ]
  %332 = phi float [ 0.000000e+00, %20 ], [ %1315, %__nv_exp2f.exit203 ]
  %333 = phi float [ 0.000000e+00, %20 ], [ %1316, %__nv_exp2f.exit203 ]
  %334 = phi float [ 0.000000e+00, %20 ], [ %1317, %__nv_exp2f.exit203 ]
  %335 = phi float [ 0.000000e+00, %20 ], [ %1318, %__nv_exp2f.exit203 ]
  %336 = phi float [ 0.000000e+00, %20 ], [ %1320, %__nv_exp2f.exit203 ]
  %337 = phi float [ 0.000000e+00, %20 ], [ %1321, %__nv_exp2f.exit203 ]
  %338 = phi float [ 0.000000e+00, %20 ], [ %1322, %__nv_exp2f.exit203 ]
  %339 = phi float [ 0.000000e+00, %20 ], [ %1323, %__nv_exp2f.exit203 ]
  %340 = phi float [ 0.000000e+00, %20 ], [ %1325, %__nv_exp2f.exit203 ]
  %341 = phi float [ 0.000000e+00, %20 ], [ %1326, %__nv_exp2f.exit203 ]
  %342 = phi float [ 0.000000e+00, %20 ], [ %1327, %__nv_exp2f.exit203 ]
  %343 = phi float [ 0.000000e+00, %20 ], [ %1328, %__nv_exp2f.exit203 ]
  %344 = phi float [ 0.000000e+00, %20 ], [ %1330, %__nv_exp2f.exit203 ]
  %345 = phi float [ 0.000000e+00, %20 ], [ %1331, %__nv_exp2f.exit203 ]
  %346 = phi float [ 0.000000e+00, %20 ], [ %1332, %__nv_exp2f.exit203 ]
  %347 = phi float [ 0.000000e+00, %20 ], [ %1333, %__nv_exp2f.exit203 ]
  %348 = phi float [ 0.000000e+00, %20 ], [ %1335, %__nv_exp2f.exit203 ]
  %349 = phi float [ 0.000000e+00, %20 ], [ %1336, %__nv_exp2f.exit203 ]
  %350 = phi float [ 0.000000e+00, %20 ], [ %1337, %__nv_exp2f.exit203 ]
  %351 = phi float [ 0.000000e+00, %20 ], [ %1338, %__nv_exp2f.exit203 ]
  %352 = phi float [ 0.000000e+00, %20 ], [ %1340, %__nv_exp2f.exit203 ]
  %353 = phi float [ 0.000000e+00, %20 ], [ %1341, %__nv_exp2f.exit203 ]
  %354 = phi float [ 0.000000e+00, %20 ], [ %1342, %__nv_exp2f.exit203 ]
  %355 = phi float [ 0.000000e+00, %20 ], [ %1343, %__nv_exp2f.exit203 ]
  %356 = phi float [ 0.000000e+00, %20 ], [ %1345, %__nv_exp2f.exit203 ]
  %357 = phi float [ 0.000000e+00, %20 ], [ %1346, %__nv_exp2f.exit203 ]
  %358 = phi float [ 0.000000e+00, %20 ], [ %1347, %__nv_exp2f.exit203 ]
  %359 = phi float [ 0.000000e+00, %20 ], [ %1348, %__nv_exp2f.exit203 ]
  %360 = phi float [ 0.000000e+00, %20 ], [ %1350, %__nv_exp2f.exit203 ]
  %361 = phi float [ 0.000000e+00, %20 ], [ %1351, %__nv_exp2f.exit203 ]
  %362 = phi float [ 0.000000e+00, %20 ], [ %1352, %__nv_exp2f.exit203 ]
  %363 = phi float [ 0.000000e+00, %20 ], [ %1353, %__nv_exp2f.exit203 ]
  %364 = phi float [ 0.000000e+00, %20 ], [ %1355, %__nv_exp2f.exit203 ]
  %365 = phi float [ 0.000000e+00, %20 ], [ %1356, %__nv_exp2f.exit203 ]
  %366 = phi float [ 0.000000e+00, %20 ], [ %1357, %__nv_exp2f.exit203 ]
  %367 = phi float [ 0.000000e+00, %20 ], [ %1358, %__nv_exp2f.exit203 ]
  %368 = phi float [ 0.000000e+00, %20 ], [ %1360, %__nv_exp2f.exit203 ]
  %369 = phi float [ 0.000000e+00, %20 ], [ %1361, %__nv_exp2f.exit203 ]
  %370 = phi float [ 0.000000e+00, %20 ], [ %1362, %__nv_exp2f.exit203 ]
  %371 = phi float [ 0.000000e+00, %20 ], [ %1363, %__nv_exp2f.exit203 ]
  %372 = phi float [ 0.000000e+00, %20 ], [ %1365, %__nv_exp2f.exit203 ]
  %373 = phi float [ 0.000000e+00, %20 ], [ %1366, %__nv_exp2f.exit203 ]
  %374 = phi float [ 0.000000e+00, %20 ], [ %1367, %__nv_exp2f.exit203 ]
  %375 = phi float [ 0.000000e+00, %20 ], [ %1368, %__nv_exp2f.exit203 ]
  %376 = phi float [ 0.000000e+00, %20 ], [ %1370, %__nv_exp2f.exit203 ]
  %377 = phi float [ 0.000000e+00, %20 ], [ %1371, %__nv_exp2f.exit203 ]
  %378 = phi float [ 0.000000e+00, %20 ], [ %1372, %__nv_exp2f.exit203 ]
  %379 = phi float [ 0.000000e+00, %20 ], [ %1373, %__nv_exp2f.exit203 ]
  %380 = phi float [ 0.000000e+00, %20 ], [ %1375, %__nv_exp2f.exit203 ]
  %381 = phi float [ 0.000000e+00, %20 ], [ %1376, %__nv_exp2f.exit203 ]
  %382 = phi float [ 0.000000e+00, %20 ], [ %1377, %__nv_exp2f.exit203 ]
  %383 = phi float [ 0.000000e+00, %20 ], [ %1378, %__nv_exp2f.exit203 ]
  %384 = phi float [ 0.000000e+00, %20 ], [ %1380, %__nv_exp2f.exit203 ]
  %385 = phi float [ 0.000000e+00, %20 ], [ %1381, %__nv_exp2f.exit203 ]
  %386 = phi float [ 0.000000e+00, %20 ], [ %1382, %__nv_exp2f.exit203 ]
  %387 = phi float [ 0.000000e+00, %20 ], [ %1383, %__nv_exp2f.exit203 ]
  %388 = phi float [ 0.000000e+00, %20 ], [ %1385, %__nv_exp2f.exit203 ]
  %389 = phi float [ 0.000000e+00, %20 ], [ %1386, %__nv_exp2f.exit203 ]
  %390 = phi float [ 0.000000e+00, %20 ], [ %1387, %__nv_exp2f.exit203 ]
  %391 = phi float [ 0.000000e+00, %20 ], [ %1388, %__nv_exp2f.exit203 ]
  %392 = phi float [ 0.000000e+00, %20 ], [ %1390, %__nv_exp2f.exit203 ]
  %393 = phi float [ 0.000000e+00, %20 ], [ %1391, %__nv_exp2f.exit203 ]
  %394 = phi float [ 0.000000e+00, %20 ], [ %1392, %__nv_exp2f.exit203 ]
  %395 = phi float [ 0.000000e+00, %20 ], [ %1393, %__nv_exp2f.exit203 ]
  %396 = phi i32 [ 0, %20 ], [ %1412, %__nv_exp2f.exit203 ]
  %397 = phi <4 x float> [ splat (float 0xFFF0000000000000), %20 ], [ %724, %__nv_exp2f.exit203 ]
  %398 = phi <4 x float> [ splat (float 1.000000e+00), %20 ], [ %1048, %__nv_exp2f.exit203 ]
  %399 = icmp samesign ult i32 %396, 4000, !dbg !31
  %400 = add i32 %329, 1, !dbg !31
  %401 = icmp sgt i32 %400, 2, !dbg !31
  %402 = select i1 %401, i32 0, i32 %400, !dbg !31
  tail call void @llvm.nvvm.cp.async.wait.group(i32 4), !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %403 = shl i32 %402, 11, !dbg !27
  %404 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %403, !dbg !27
  %405 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %290) #2, !dbg !26
  %406 = extractvalue { i32, i32, i32, i32 } %405, 0, !dbg !26
  %407 = extractvalue { i32, i32, i32, i32 } %405, 1, !dbg !26
  %408 = extractvalue { i32, i32, i32, i32 } %405, 2, !dbg !26
  %409 = extractvalue { i32, i32, i32, i32 } %405, 3, !dbg !26
  %410 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %293) #2, !dbg !26
  %411 = extractvalue { i32, i32, i32, i32 } %410, 0, !dbg !26
  %412 = extractvalue { i32, i32, i32, i32 } %410, 1, !dbg !26
  %413 = extractvalue { i32, i32, i32, i32 } %410, 2, !dbg !26
  %414 = extractvalue { i32, i32, i32, i32 } %410, 3, !dbg !26
  %415 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %296) #2, !dbg !26
  %416 = extractvalue { i32, i32, i32, i32 } %415, 0, !dbg !26
  %417 = extractvalue { i32, i32, i32, i32 } %415, 1, !dbg !26
  %418 = extractvalue { i32, i32, i32, i32 } %415, 2, !dbg !26
  %419 = extractvalue { i32, i32, i32, i32 } %415, 3, !dbg !26
  %420 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %299) #2, !dbg !26
  %421 = extractvalue { i32, i32, i32, i32 } %420, 0, !dbg !26
  %422 = extractvalue { i32, i32, i32, i32 } %420, 1, !dbg !26
  %423 = extractvalue { i32, i32, i32, i32 } %420, 2, !dbg !26
  %424 = extractvalue { i32, i32, i32, i32 } %420, 3, !dbg !26
  %425 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %302) #2, !dbg !26
  %426 = extractvalue { i32, i32, i32, i32 } %425, 0, !dbg !26
  %427 = extractvalue { i32, i32, i32, i32 } %425, 1, !dbg !26
  %428 = extractvalue { i32, i32, i32, i32 } %425, 2, !dbg !26
  %429 = extractvalue { i32, i32, i32, i32 } %425, 3, !dbg !26
  %430 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %305) #2, !dbg !26
  %431 = extractvalue { i32, i32, i32, i32 } %430, 0, !dbg !26
  %432 = extractvalue { i32, i32, i32, i32 } %430, 1, !dbg !26
  %433 = extractvalue { i32, i32, i32, i32 } %430, 2, !dbg !26
  %434 = extractvalue { i32, i32, i32, i32 } %430, 3, !dbg !26
  %435 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %308) #2, !dbg !26
  %436 = extractvalue { i32, i32, i32, i32 } %435, 0, !dbg !26
  %437 = extractvalue { i32, i32, i32, i32 } %435, 1, !dbg !26
  %438 = extractvalue { i32, i32, i32, i32 } %435, 2, !dbg !26
  %439 = extractvalue { i32, i32, i32, i32 } %435, 3, !dbg !26
  %440 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %311) #2, !dbg !26
  %441 = extractvalue { i32, i32, i32, i32 } %440, 0, !dbg !26
  %442 = extractvalue { i32, i32, i32, i32 } %440, 1, !dbg !26
  %443 = extractvalue { i32, i32, i32, i32 } %440, 2, !dbg !26
  %444 = extractvalue { i32, i32, i32, i32 } %440, 3, !dbg !26
  %445 = getelementptr inbounds nuw half, ptr addrspace(3) %404, i32 %312, !dbg !27
  %446 = ptrtoint ptr addrspace(3) %445 to i32, !dbg !27
  %447 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %446) #2, !dbg !27
  %448 = extractvalue { i32, i32, i32, i32 } %447, 0, !dbg !27
  %449 = extractvalue { i32, i32, i32, i32 } %447, 1, !dbg !27
  %450 = extractvalue { i32, i32, i32, i32 } %447, 2, !dbg !27
  %451 = extractvalue { i32, i32, i32, i32 } %447, 3, !dbg !27
  %452 = getelementptr inbounds nuw half, ptr addrspace(3) %404, i32 %313, !dbg !27
  %453 = ptrtoint ptr addrspace(3) %452 to i32, !dbg !27
  %454 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %453) #2, !dbg !27
  %455 = extractvalue { i32, i32, i32, i32 } %454, 0, !dbg !27
  %456 = extractvalue { i32, i32, i32, i32 } %454, 1, !dbg !27
  %457 = extractvalue { i32, i32, i32, i32 } %454, 2, !dbg !27
  %458 = extractvalue { i32, i32, i32, i32 } %454, 3, !dbg !27
  %459 = getelementptr inbounds nuw i8, ptr addrspace(3) %445, i32 1024, !dbg !27
  %460 = ptrtoint ptr addrspace(3) %459 to i32, !dbg !27
  %461 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %460) #2, !dbg !27
  %462 = extractvalue { i32, i32, i32, i32 } %461, 0, !dbg !27
  %463 = extractvalue { i32, i32, i32, i32 } %461, 1, !dbg !27
  %464 = extractvalue { i32, i32, i32, i32 } %461, 2, !dbg !27
  %465 = extractvalue { i32, i32, i32, i32 } %461, 3, !dbg !27
  %466 = getelementptr inbounds nuw half, ptr addrspace(3) %404, i32 %314, !dbg !27
  %467 = ptrtoint ptr addrspace(3) %466 to i32, !dbg !27
  %468 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %467) #2, !dbg !27
  %469 = extractvalue { i32, i32, i32, i32 } %468, 0, !dbg !27
  %470 = extractvalue { i32, i32, i32, i32 } %468, 1, !dbg !27
  %471 = extractvalue { i32, i32, i32, i32 } %468, 2, !dbg !27
  %472 = extractvalue { i32, i32, i32, i32 } %468, 3, !dbg !27
  %473 = getelementptr inbounds nuw i8, ptr addrspace(3) %445, i32 2048, !dbg !27
  %474 = ptrtoint ptr addrspace(3) %473 to i32, !dbg !27
  %475 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %474) #2, !dbg !27
  %476 = extractvalue { i32, i32, i32, i32 } %475, 0, !dbg !27
  %477 = extractvalue { i32, i32, i32, i32 } %475, 1, !dbg !27
  %478 = extractvalue { i32, i32, i32, i32 } %475, 2, !dbg !27
  %479 = extractvalue { i32, i32, i32, i32 } %475, 3, !dbg !27
  %480 = getelementptr inbounds nuw half, ptr addrspace(3) %404, i32 %315, !dbg !27
  %481 = ptrtoint ptr addrspace(3) %480 to i32, !dbg !27
  %482 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %481) #2, !dbg !27
  %483 = extractvalue { i32, i32, i32, i32 } %482, 0, !dbg !27
  %484 = extractvalue { i32, i32, i32, i32 } %482, 1, !dbg !27
  %485 = extractvalue { i32, i32, i32, i32 } %482, 2, !dbg !27
  %486 = extractvalue { i32, i32, i32, i32 } %482, 3, !dbg !27
  %487 = getelementptr inbounds nuw i8, ptr addrspace(3) %445, i32 3072, !dbg !27
  %488 = ptrtoint ptr addrspace(3) %487 to i32, !dbg !27
  %489 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %488) #2, !dbg !27
  %490 = extractvalue { i32, i32, i32, i32 } %489, 0, !dbg !27
  %491 = extractvalue { i32, i32, i32, i32 } %489, 1, !dbg !27
  %492 = extractvalue { i32, i32, i32, i32 } %489, 2, !dbg !27
  %493 = extractvalue { i32, i32, i32, i32 } %489, 3, !dbg !27
  %494 = getelementptr inbounds nuw half, ptr addrspace(3) %404, i32 %316, !dbg !27
  %495 = ptrtoint ptr addrspace(3) %494 to i32, !dbg !27
  %496 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %495) #2, !dbg !27
  %497 = extractvalue { i32, i32, i32, i32 } %496, 0, !dbg !27
  %498 = extractvalue { i32, i32, i32, i32 } %496, 1, !dbg !27
  %499 = extractvalue { i32, i32, i32, i32 } %496, 2, !dbg !27
  %500 = extractvalue { i32, i32, i32, i32 } %496, 3, !dbg !27
  %501 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %406, i32 %407, i32 %408, i32 %409, i32 %448, i32 %449) #2, !dbg !33
  %502 = extractvalue { float, float, float, float } %501, 0, !dbg !33
  %503 = extractvalue { float, float, float, float } %501, 1, !dbg !33
  %504 = extractvalue { float, float, float, float } %501, 2, !dbg !33
  %505 = extractvalue { float, float, float, float } %501, 3, !dbg !33
  %506 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %406, i32 %407, i32 %408, i32 %409, i32 %462, i32 %463) #2, !dbg !33
  %507 = extractvalue { float, float, float, float } %506, 0, !dbg !33
  %508 = extractvalue { float, float, float, float } %506, 1, !dbg !33
  %509 = extractvalue { float, float, float, float } %506, 2, !dbg !33
  %510 = extractvalue { float, float, float, float } %506, 3, !dbg !33
  %511 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %406, i32 %407, i32 %408, i32 %409, i32 %476, i32 %477) #2, !dbg !33
  %512 = extractvalue { float, float, float, float } %511, 0, !dbg !33
  %513 = extractvalue { float, float, float, float } %511, 1, !dbg !33
  %514 = extractvalue { float, float, float, float } %511, 2, !dbg !33
  %515 = extractvalue { float, float, float, float } %511, 3, !dbg !33
  %516 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %406, i32 %407, i32 %408, i32 %409, i32 %490, i32 %491) #2, !dbg !33
  %517 = extractvalue { float, float, float, float } %516, 0, !dbg !33
  %518 = extractvalue { float, float, float, float } %516, 1, !dbg !33
  %519 = extractvalue { float, float, float, float } %516, 2, !dbg !33
  %520 = extractvalue { float, float, float, float } %516, 3, !dbg !33
  %521 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %426, i32 %427, i32 %428, i32 %429, i32 %448, i32 %449) #2, !dbg !33
  %522 = extractvalue { float, float, float, float } %521, 0, !dbg !33
  %523 = extractvalue { float, float, float, float } %521, 1, !dbg !33
  %524 = extractvalue { float, float, float, float } %521, 2, !dbg !33
  %525 = extractvalue { float, float, float, float } %521, 3, !dbg !33
  %526 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %426, i32 %427, i32 %428, i32 %429, i32 %462, i32 %463) #2, !dbg !33
  %527 = extractvalue { float, float, float, float } %526, 0, !dbg !33
  %528 = extractvalue { float, float, float, float } %526, 1, !dbg !33
  %529 = extractvalue { float, float, float, float } %526, 2, !dbg !33
  %530 = extractvalue { float, float, float, float } %526, 3, !dbg !33
  %531 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %426, i32 %427, i32 %428, i32 %429, i32 %476, i32 %477) #2, !dbg !33
  %532 = extractvalue { float, float, float, float } %531, 0, !dbg !33
  %533 = extractvalue { float, float, float, float } %531, 1, !dbg !33
  %534 = extractvalue { float, float, float, float } %531, 2, !dbg !33
  %535 = extractvalue { float, float, float, float } %531, 3, !dbg !33
  %536 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %426, i32 %427, i32 %428, i32 %429, i32 %490, i32 %491) #2, !dbg !33
  %537 = extractvalue { float, float, float, float } %536, 0, !dbg !33
  %538 = extractvalue { float, float, float, float } %536, 1, !dbg !33
  %539 = extractvalue { float, float, float, float } %536, 2, !dbg !33
  %540 = extractvalue { float, float, float, float } %536, 3, !dbg !33
  %541 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %502, float %503, float %504, float %505, i32 %411, i32 %412, i32 %413, i32 %414, i32 %450, i32 %451) #2, !dbg !33
  %542 = extractvalue { float, float, float, float } %541, 0, !dbg !33
  %543 = extractvalue { float, float, float, float } %541, 1, !dbg !33
  %544 = extractvalue { float, float, float, float } %541, 2, !dbg !33
  %545 = extractvalue { float, float, float, float } %541, 3, !dbg !33
  %546 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %507, float %508, float %509, float %510, i32 %411, i32 %412, i32 %413, i32 %414, i32 %464, i32 %465) #2, !dbg !33
  %547 = extractvalue { float, float, float, float } %546, 0, !dbg !33
  %548 = extractvalue { float, float, float, float } %546, 1, !dbg !33
  %549 = extractvalue { float, float, float, float } %546, 2, !dbg !33
  %550 = extractvalue { float, float, float, float } %546, 3, !dbg !33
  %551 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %512, float %513, float %514, float %515, i32 %411, i32 %412, i32 %413, i32 %414, i32 %478, i32 %479) #2, !dbg !33
  %552 = extractvalue { float, float, float, float } %551, 0, !dbg !33
  %553 = extractvalue { float, float, float, float } %551, 1, !dbg !33
  %554 = extractvalue { float, float, float, float } %551, 2, !dbg !33
  %555 = extractvalue { float, float, float, float } %551, 3, !dbg !33
  %556 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %517, float %518, float %519, float %520, i32 %411, i32 %412, i32 %413, i32 %414, i32 %492, i32 %493) #2, !dbg !33
  %557 = extractvalue { float, float, float, float } %556, 0, !dbg !33
  %558 = extractvalue { float, float, float, float } %556, 1, !dbg !33
  %559 = extractvalue { float, float, float, float } %556, 2, !dbg !33
  %560 = extractvalue { float, float, float, float } %556, 3, !dbg !33
  %561 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %522, float %523, float %524, float %525, i32 %431, i32 %432, i32 %433, i32 %434, i32 %450, i32 %451) #2, !dbg !33
  %562 = extractvalue { float, float, float, float } %561, 0, !dbg !33
  %563 = extractvalue { float, float, float, float } %561, 1, !dbg !33
  %564 = extractvalue { float, float, float, float } %561, 2, !dbg !33
  %565 = extractvalue { float, float, float, float } %561, 3, !dbg !33
  %566 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %527, float %528, float %529, float %530, i32 %431, i32 %432, i32 %433, i32 %434, i32 %464, i32 %465) #2, !dbg !33
  %567 = extractvalue { float, float, float, float } %566, 0, !dbg !33
  %568 = extractvalue { float, float, float, float } %566, 1, !dbg !33
  %569 = extractvalue { float, float, float, float } %566, 2, !dbg !33
  %570 = extractvalue { float, float, float, float } %566, 3, !dbg !33
  %571 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %532, float %533, float %534, float %535, i32 %431, i32 %432, i32 %433, i32 %434, i32 %478, i32 %479) #2, !dbg !33
  %572 = extractvalue { float, float, float, float } %571, 0, !dbg !33
  %573 = extractvalue { float, float, float, float } %571, 1, !dbg !33
  %574 = extractvalue { float, float, float, float } %571, 2, !dbg !33
  %575 = extractvalue { float, float, float, float } %571, 3, !dbg !33
  %576 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %537, float %538, float %539, float %540, i32 %431, i32 %432, i32 %433, i32 %434, i32 %492, i32 %493) #2, !dbg !33
  %577 = extractvalue { float, float, float, float } %576, 0, !dbg !33
  %578 = extractvalue { float, float, float, float } %576, 1, !dbg !33
  %579 = extractvalue { float, float, float, float } %576, 2, !dbg !33
  %580 = extractvalue { float, float, float, float } %576, 3, !dbg !33
  %581 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %542, float %543, float %544, float %545, i32 %416, i32 %417, i32 %418, i32 %419, i32 %455, i32 %456) #2, !dbg !33
  %582 = extractvalue { float, float, float, float } %581, 0, !dbg !33
  %583 = extractvalue { float, float, float, float } %581, 1, !dbg !33
  %584 = extractvalue { float, float, float, float } %581, 2, !dbg !33
  %585 = extractvalue { float, float, float, float } %581, 3, !dbg !33
  %586 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %547, float %548, float %549, float %550, i32 %416, i32 %417, i32 %418, i32 %419, i32 %469, i32 %470) #2, !dbg !33
  %587 = extractvalue { float, float, float, float } %586, 0, !dbg !33
  %588 = extractvalue { float, float, float, float } %586, 1, !dbg !33
  %589 = extractvalue { float, float, float, float } %586, 2, !dbg !33
  %590 = extractvalue { float, float, float, float } %586, 3, !dbg !33
  %591 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %552, float %553, float %554, float %555, i32 %416, i32 %417, i32 %418, i32 %419, i32 %483, i32 %484) #2, !dbg !33
  %592 = extractvalue { float, float, float, float } %591, 0, !dbg !33
  %593 = extractvalue { float, float, float, float } %591, 1, !dbg !33
  %594 = extractvalue { float, float, float, float } %591, 2, !dbg !33
  %595 = extractvalue { float, float, float, float } %591, 3, !dbg !33
  %596 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %557, float %558, float %559, float %560, i32 %416, i32 %417, i32 %418, i32 %419, i32 %497, i32 %498) #2, !dbg !33
  %597 = extractvalue { float, float, float, float } %596, 0, !dbg !33
  %598 = extractvalue { float, float, float, float } %596, 1, !dbg !33
  %599 = extractvalue { float, float, float, float } %596, 2, !dbg !33
  %600 = extractvalue { float, float, float, float } %596, 3, !dbg !33
  %601 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %562, float %563, float %564, float %565, i32 %436, i32 %437, i32 %438, i32 %439, i32 %455, i32 %456) #2, !dbg !33
  %602 = extractvalue { float, float, float, float } %601, 0, !dbg !33
  %603 = extractvalue { float, float, float, float } %601, 1, !dbg !33
  %604 = extractvalue { float, float, float, float } %601, 2, !dbg !33
  %605 = extractvalue { float, float, float, float } %601, 3, !dbg !33
  %606 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %567, float %568, float %569, float %570, i32 %436, i32 %437, i32 %438, i32 %439, i32 %469, i32 %470) #2, !dbg !33
  %607 = extractvalue { float, float, float, float } %606, 0, !dbg !33
  %608 = extractvalue { float, float, float, float } %606, 1, !dbg !33
  %609 = extractvalue { float, float, float, float } %606, 2, !dbg !33
  %610 = extractvalue { float, float, float, float } %606, 3, !dbg !33
  %611 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %572, float %573, float %574, float %575, i32 %436, i32 %437, i32 %438, i32 %439, i32 %483, i32 %484) #2, !dbg !33
  %612 = extractvalue { float, float, float, float } %611, 0, !dbg !33
  %613 = extractvalue { float, float, float, float } %611, 1, !dbg !33
  %614 = extractvalue { float, float, float, float } %611, 2, !dbg !33
  %615 = extractvalue { float, float, float, float } %611, 3, !dbg !33
  %616 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %577, float %578, float %579, float %580, i32 %436, i32 %437, i32 %438, i32 %439, i32 %497, i32 %498) #2, !dbg !33
  %617 = extractvalue { float, float, float, float } %616, 0, !dbg !33
  %618 = extractvalue { float, float, float, float } %616, 1, !dbg !33
  %619 = extractvalue { float, float, float, float } %616, 2, !dbg !33
  %620 = extractvalue { float, float, float, float } %616, 3, !dbg !33
  %621 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %582, float %583, float %584, float %585, i32 %421, i32 %422, i32 %423, i32 %424, i32 %457, i32 %458) #2, !dbg !33
  %622 = extractvalue { float, float, float, float } %621, 0, !dbg !33
  %623 = extractvalue { float, float, float, float } %621, 1, !dbg !33
  %624 = extractvalue { float, float, float, float } %621, 2, !dbg !33
  %625 = extractvalue { float, float, float, float } %621, 3, !dbg !33
  %626 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %587, float %588, float %589, float %590, i32 %421, i32 %422, i32 %423, i32 %424, i32 %471, i32 %472) #2, !dbg !33
  %627 = extractvalue { float, float, float, float } %626, 0, !dbg !33
  %628 = extractvalue { float, float, float, float } %626, 1, !dbg !33
  %629 = extractvalue { float, float, float, float } %626, 2, !dbg !33
  %630 = extractvalue { float, float, float, float } %626, 3, !dbg !33
  %631 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %592, float %593, float %594, float %595, i32 %421, i32 %422, i32 %423, i32 %424, i32 %485, i32 %486) #2, !dbg !33
  %632 = extractvalue { float, float, float, float } %631, 0, !dbg !33
  %633 = extractvalue { float, float, float, float } %631, 1, !dbg !33
  %634 = extractvalue { float, float, float, float } %631, 2, !dbg !33
  %635 = extractvalue { float, float, float, float } %631, 3, !dbg !33
  %636 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %597, float %598, float %599, float %600, i32 %421, i32 %422, i32 %423, i32 %424, i32 %499, i32 %500) #2, !dbg !33
  %637 = extractvalue { float, float, float, float } %636, 0, !dbg !33
  %638 = extractvalue { float, float, float, float } %636, 1, !dbg !33
  %639 = extractvalue { float, float, float, float } %636, 2, !dbg !33
  %640 = extractvalue { float, float, float, float } %636, 3, !dbg !33
  %641 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %602, float %603, float %604, float %605, i32 %441, i32 %442, i32 %443, i32 %444, i32 %457, i32 %458) #2, !dbg !33
  %642 = extractvalue { float, float, float, float } %641, 0, !dbg !33
  %643 = extractvalue { float, float, float, float } %641, 1, !dbg !33
  %644 = extractvalue { float, float, float, float } %641, 2, !dbg !33
  %645 = extractvalue { float, float, float, float } %641, 3, !dbg !33
  %646 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %607, float %608, float %609, float %610, i32 %441, i32 %442, i32 %443, i32 %444, i32 %471, i32 %472) #2, !dbg !33
  %647 = extractvalue { float, float, float, float } %646, 0, !dbg !33
  %648 = extractvalue { float, float, float, float } %646, 1, !dbg !33
  %649 = extractvalue { float, float, float, float } %646, 2, !dbg !33
  %650 = extractvalue { float, float, float, float } %646, 3, !dbg !33
  %651 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %612, float %613, float %614, float %615, i32 %441, i32 %442, i32 %443, i32 %444, i32 %485, i32 %486) #2, !dbg !33
  %652 = extractvalue { float, float, float, float } %651, 0, !dbg !33
  %653 = extractvalue { float, float, float, float } %651, 1, !dbg !33
  %654 = extractvalue { float, float, float, float } %651, 2, !dbg !33
  %655 = extractvalue { float, float, float, float } %651, 3, !dbg !33
  %656 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %617, float %618, float %619, float %620, i32 %441, i32 %442, i32 %443, i32 %444, i32 %499, i32 %500) #2, !dbg !33
  %657 = extractvalue { float, float, float, float } %656, 0, !dbg !33
  %658 = extractvalue { float, float, float, float } %656, 1, !dbg !33
  %659 = extractvalue { float, float, float, float } %656, 2, !dbg !33
  %660 = extractvalue { float, float, float, float } %656, 3, !dbg !33
  %661 = tail call float @llvm.maxnum.f32(float %622, float %623), !dbg !34
  %662 = tail call float @llvm.maxnum.f32(float %624, float %625), !dbg !34
  %663 = tail call float @llvm.maxnum.f32(float %661, float %627), !dbg !34
  %664 = tail call float @llvm.maxnum.f32(float %663, float %628), !dbg !34
  %665 = tail call float @llvm.maxnum.f32(float %662, float %629), !dbg !34
  %666 = tail call float @llvm.maxnum.f32(float %665, float %630), !dbg !34
  %667 = tail call float @llvm.maxnum.f32(float %664, float %632), !dbg !34
  %668 = tail call float @llvm.maxnum.f32(float %667, float %633), !dbg !34
  %669 = tail call float @llvm.maxnum.f32(float %666, float %634), !dbg !34
  %670 = tail call float @llvm.maxnum.f32(float %669, float %635), !dbg !34
  %671 = tail call float @llvm.maxnum.f32(float %668, float %637), !dbg !34
  %672 = tail call float @llvm.maxnum.f32(float %671, float %638), !dbg !34
  %673 = tail call float @llvm.maxnum.f32(float %670, float %639), !dbg !34
  %674 = tail call float @llvm.maxnum.f32(float %673, float %640), !dbg !34
  %675 = tail call float @llvm.maxnum.f32(float %642, float %643), !dbg !34
  %676 = tail call float @llvm.maxnum.f32(float %644, float %645), !dbg !34
  %677 = tail call float @llvm.maxnum.f32(float %675, float %647), !dbg !34
  %678 = tail call float @llvm.maxnum.f32(float %677, float %648), !dbg !34
  %679 = tail call float @llvm.maxnum.f32(float %676, float %649), !dbg !34
  %680 = tail call float @llvm.maxnum.f32(float %679, float %650), !dbg !34
  %681 = tail call float @llvm.maxnum.f32(float %678, float %652), !dbg !34
  %682 = tail call float @llvm.maxnum.f32(float %681, float %653), !dbg !34
  %683 = tail call float @llvm.maxnum.f32(float %680, float %654), !dbg !34
  %684 = tail call float @llvm.maxnum.f32(float %683, float %655), !dbg !34
  %685 = tail call float @llvm.maxnum.f32(float %682, float %657), !dbg !34
  %686 = tail call float @llvm.maxnum.f32(float %685, float %658), !dbg !34
  %687 = tail call float @llvm.maxnum.f32(float %684, float %659), !dbg !34
  %688 = tail call float @llvm.maxnum.f32(float %687, float %660), !dbg !34
  %689 = bitcast float %672 to i32, !dbg !37
  %690 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %689, i32 2, i32 31), !dbg !37
  %691 = bitcast i32 %690 to float, !dbg !37
  %692 = bitcast float %674 to i32, !dbg !37
  %693 = bitcast float %686 to i32, !dbg !37
  %694 = bitcast float %688 to i32, !dbg !37
  %695 = tail call float @llvm.maxnum.f32(float %672, float %691), !dbg !34
  %696 = bitcast float %695 to i32, !dbg !37
  %697 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %696, i32 1, i32 31), !dbg !37
  %698 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %692, i32 2, i32 31), !dbg !37
  %699 = bitcast i32 %698 to float, !dbg !37
  %700 = tail call float @llvm.maxnum.f32(float %674, float %699), !dbg !34
  %701 = bitcast float %700 to i32, !dbg !37
  %702 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %701, i32 1, i32 31), !dbg !37
  %703 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %693, i32 2, i32 31), !dbg !37
  %704 = bitcast i32 %703 to float, !dbg !37
  %705 = tail call float @llvm.maxnum.f32(float %686, float %704), !dbg !34
  %706 = bitcast float %705 to i32, !dbg !37
  %707 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %706, i32 1, i32 31), !dbg !37
  %708 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %694, i32 2, i32 31), !dbg !37
  %709 = bitcast i32 %708 to float, !dbg !37
  %710 = tail call float @llvm.maxnum.f32(float %688, float %709), !dbg !34
  %711 = bitcast float %710 to i32, !dbg !37
  %712 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %711, i32 1, i32 31), !dbg !37
  %713 = insertelement <4 x i32> poison, i32 %697, i64 0, !dbg !37
  %714 = insertelement <4 x i32> %713, i32 %702, i64 1, !dbg !37
  %715 = insertelement <4 x i32> %714, i32 %707, i64 2, !dbg !37
  %716 = insertelement <4 x i32> %715, i32 %712, i64 3, !dbg !37
  %717 = bitcast <4 x i32> %716 to <4 x float>, !dbg !37
  %718 = insertelement <4 x float> poison, float %695, i64 0, !dbg !34
  %719 = insertelement <4 x float> %718, float %700, i64 1, !dbg !34
  %720 = insertelement <4 x float> %719, float %705, i64 2, !dbg !34
  %721 = insertelement <4 x float> %720, float %710, i64 3, !dbg !34
  %722 = tail call <4 x float> @llvm.maxnum.v4f32(<4 x float> %721, <4 x float> %717), !dbg !34
  %723 = fmul <4 x float> %327, %722, !dbg !32
  %724 = tail call <4 x float> @llvm.maxnum.v4f32(<4 x float> %397, <4 x float> %723), !dbg !38
  %725 = fmul float %52, %622, !dbg !39
  %726 = fmul float %52, %623, !dbg !39
  %727 = fmul float %52, %624, !dbg !39
  %728 = fmul float %52, %625, !dbg !39
  %729 = fmul float %52, %627, !dbg !39
  %730 = fmul float %52, %628, !dbg !39
  %731 = fmul float %52, %629, !dbg !39
  %732 = fmul float %52, %630, !dbg !39
  %733 = fmul float %52, %632, !dbg !39
  %734 = fmul float %52, %633, !dbg !39
  %735 = fmul float %52, %634, !dbg !39
  %736 = fmul float %52, %635, !dbg !39
  %737 = fmul float %52, %637, !dbg !39
  %738 = fmul float %52, %638, !dbg !39
  %739 = fmul float %52, %639, !dbg !39
  %740 = fmul float %52, %640, !dbg !39
  %741 = fmul float %52, %642, !dbg !39
  %742 = fmul float %52, %643, !dbg !39
  %743 = fmul float %52, %644, !dbg !39
  %744 = fmul float %52, %645, !dbg !39
  %745 = fmul float %52, %647, !dbg !39
  %746 = fmul float %52, %648, !dbg !39
  %747 = fmul float %52, %649, !dbg !39
  %748 = fmul float %52, %650, !dbg !39
  %749 = fmul float %52, %652, !dbg !39
  %750 = fmul float %52, %653, !dbg !39
  %751 = fmul float %52, %654, !dbg !39
  %752 = fmul float %52, %655, !dbg !39
  %753 = fmul float %52, %657, !dbg !39
  %754 = fmul float %52, %658, !dbg !39
  %755 = fmul float %52, %659, !dbg !39
  %756 = fmul float %52, %660, !dbg !39
  %757 = extractelement <4 x float> %724, i64 0, !dbg !40
  %758 = fsub float %725, %757, !dbg !40
  %759 = fsub float %726, %757, !dbg !40
  %760 = extractelement <4 x float> %724, i64 1, !dbg !40
  %761 = fsub float %727, %760, !dbg !40
  %762 = fsub float %728, %760, !dbg !40
  %763 = fsub float %729, %757, !dbg !40
  %764 = fsub float %730, %757, !dbg !40
  %765 = fsub float %731, %760, !dbg !40
  %766 = fsub float %732, %760, !dbg !40
  %767 = fsub float %733, %757, !dbg !40
  %768 = fsub float %734, %757, !dbg !40
  %769 = fsub float %735, %760, !dbg !40
  %770 = fsub float %736, %760, !dbg !40
  %771 = fsub float %737, %757, !dbg !40
  %772 = fsub float %738, %757, !dbg !40
  %773 = fsub float %739, %760, !dbg !40
  %774 = fsub float %740, %760, !dbg !40
  %775 = extractelement <4 x float> %724, i64 2, !dbg !40
  %776 = fsub float %741, %775, !dbg !40
  %777 = fsub float %742, %775, !dbg !40
  %778 = extractelement <4 x float> %724, i64 3, !dbg !40
  %779 = fsub float %743, %778, !dbg !40
  %780 = fsub float %744, %778, !dbg !40
  %781 = fsub float %745, %775, !dbg !40
  %782 = fsub float %746, %775, !dbg !40
  %783 = fsub float %747, %778, !dbg !40
  %784 = fsub float %748, %778, !dbg !40
  %785 = fsub float %749, %775, !dbg !40
  %786 = fsub float %750, %775, !dbg !40
  %787 = fsub float %751, %778, !dbg !40
  %788 = fsub float %752, %778, !dbg !40
  %789 = fsub float %753, %775, !dbg !40
  %790 = fsub float %754, %775, !dbg !40
  %791 = fsub float %755, %778, !dbg !40
  %792 = fsub float %756, %778, !dbg !40
  %793 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i = icmp eq i32 %793, 0, !dbg !41
  br i1 %.not.i, label %796, label %794, !dbg !41

794:                                              ; preds = %328
  %795 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %758) #2, !dbg !41
  br label %__nv_exp2f.exit, !dbg !41

796:                                              ; preds = %328
  %797 = tail call float @llvm.nvvm.ex2.approx.f(float %758) #2, !dbg !41
  br label %__nv_exp2f.exit, !dbg !41

__nv_exp2f.exit:                                  ; preds = %794, %796
  %.0.i = phi float [ %795, %794 ], [ %797, %796 ], !dbg !41
  %798 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i99 = icmp eq i32 %798, 0, !dbg !41
  br i1 %.not.i99, label %801, label %799, !dbg !41

799:                                              ; preds = %__nv_exp2f.exit
  %800 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %759) #2, !dbg !41
  br label %__nv_exp2f.exit101, !dbg !41

801:                                              ; preds = %__nv_exp2f.exit
  %802 = tail call float @llvm.nvvm.ex2.approx.f(float %759) #2, !dbg !41
  br label %__nv_exp2f.exit101, !dbg !41

__nv_exp2f.exit101:                               ; preds = %799, %801
  %.0.i100 = phi float [ %800, %799 ], [ %802, %801 ], !dbg !41
  %803 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i102 = icmp eq i32 %803, 0, !dbg !41
  br i1 %.not.i102, label %806, label %804, !dbg !41

804:                                              ; preds = %__nv_exp2f.exit101
  %805 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %761) #2, !dbg !41
  br label %__nv_exp2f.exit104, !dbg !41

806:                                              ; preds = %__nv_exp2f.exit101
  %807 = tail call float @llvm.nvvm.ex2.approx.f(float %761) #2, !dbg !41
  br label %__nv_exp2f.exit104, !dbg !41

__nv_exp2f.exit104:                               ; preds = %804, %806
  %.0.i103 = phi float [ %805, %804 ], [ %807, %806 ], !dbg !41
  %808 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i105 = icmp eq i32 %808, 0, !dbg !41
  br i1 %.not.i105, label %811, label %809, !dbg !41

809:                                              ; preds = %__nv_exp2f.exit104
  %810 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %762) #2, !dbg !41
  br label %__nv_exp2f.exit107, !dbg !41

811:                                              ; preds = %__nv_exp2f.exit104
  %812 = tail call float @llvm.nvvm.ex2.approx.f(float %762) #2, !dbg !41
  br label %__nv_exp2f.exit107, !dbg !41

__nv_exp2f.exit107:                               ; preds = %809, %811
  %.0.i106 = phi float [ %810, %809 ], [ %812, %811 ], !dbg !41
  %813 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i108 = icmp eq i32 %813, 0, !dbg !41
  br i1 %.not.i108, label %816, label %814, !dbg !41

814:                                              ; preds = %__nv_exp2f.exit107
  %815 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %763) #2, !dbg !41
  br label %__nv_exp2f.exit110, !dbg !41

816:                                              ; preds = %__nv_exp2f.exit107
  %817 = tail call float @llvm.nvvm.ex2.approx.f(float %763) #2, !dbg !41
  br label %__nv_exp2f.exit110, !dbg !41

__nv_exp2f.exit110:                               ; preds = %814, %816
  %.0.i109 = phi float [ %815, %814 ], [ %817, %816 ], !dbg !41
  %818 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i111 = icmp eq i32 %818, 0, !dbg !41
  br i1 %.not.i111, label %821, label %819, !dbg !41

819:                                              ; preds = %__nv_exp2f.exit110
  %820 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %764) #2, !dbg !41
  br label %__nv_exp2f.exit113, !dbg !41

821:                                              ; preds = %__nv_exp2f.exit110
  %822 = tail call float @llvm.nvvm.ex2.approx.f(float %764) #2, !dbg !41
  br label %__nv_exp2f.exit113, !dbg !41

__nv_exp2f.exit113:                               ; preds = %819, %821
  %.0.i112 = phi float [ %820, %819 ], [ %822, %821 ], !dbg !41
  %823 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i114 = icmp eq i32 %823, 0, !dbg !41
  br i1 %.not.i114, label %826, label %824, !dbg !41

824:                                              ; preds = %__nv_exp2f.exit113
  %825 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %765) #2, !dbg !41
  br label %__nv_exp2f.exit116, !dbg !41

826:                                              ; preds = %__nv_exp2f.exit113
  %827 = tail call float @llvm.nvvm.ex2.approx.f(float %765) #2, !dbg !41
  br label %__nv_exp2f.exit116, !dbg !41

__nv_exp2f.exit116:                               ; preds = %824, %826
  %.0.i115 = phi float [ %825, %824 ], [ %827, %826 ], !dbg !41
  %828 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i117 = icmp eq i32 %828, 0, !dbg !41
  br i1 %.not.i117, label %831, label %829, !dbg !41

829:                                              ; preds = %__nv_exp2f.exit116
  %830 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %766) #2, !dbg !41
  br label %__nv_exp2f.exit119, !dbg !41

831:                                              ; preds = %__nv_exp2f.exit116
  %832 = tail call float @llvm.nvvm.ex2.approx.f(float %766) #2, !dbg !41
  br label %__nv_exp2f.exit119, !dbg !41

__nv_exp2f.exit119:                               ; preds = %829, %831
  %.0.i118 = phi float [ %830, %829 ], [ %832, %831 ], !dbg !41
  %833 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i120 = icmp eq i32 %833, 0, !dbg !41
  br i1 %.not.i120, label %836, label %834, !dbg !41

834:                                              ; preds = %__nv_exp2f.exit119
  %835 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %767) #2, !dbg !41
  br label %__nv_exp2f.exit122, !dbg !41

836:                                              ; preds = %__nv_exp2f.exit119
  %837 = tail call float @llvm.nvvm.ex2.approx.f(float %767) #2, !dbg !41
  br label %__nv_exp2f.exit122, !dbg !41

__nv_exp2f.exit122:                               ; preds = %834, %836
  %.0.i121 = phi float [ %835, %834 ], [ %837, %836 ], !dbg !41
  %838 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i123 = icmp eq i32 %838, 0, !dbg !41
  br i1 %.not.i123, label %841, label %839, !dbg !41

839:                                              ; preds = %__nv_exp2f.exit122
  %840 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %768) #2, !dbg !41
  br label %__nv_exp2f.exit125, !dbg !41

841:                                              ; preds = %__nv_exp2f.exit122
  %842 = tail call float @llvm.nvvm.ex2.approx.f(float %768) #2, !dbg !41
  br label %__nv_exp2f.exit125, !dbg !41

__nv_exp2f.exit125:                               ; preds = %839, %841
  %.0.i124 = phi float [ %840, %839 ], [ %842, %841 ], !dbg !41
  %843 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i126 = icmp eq i32 %843, 0, !dbg !41
  br i1 %.not.i126, label %846, label %844, !dbg !41

844:                                              ; preds = %__nv_exp2f.exit125
  %845 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %769) #2, !dbg !41
  br label %__nv_exp2f.exit128, !dbg !41

846:                                              ; preds = %__nv_exp2f.exit125
  %847 = tail call float @llvm.nvvm.ex2.approx.f(float %769) #2, !dbg !41
  br label %__nv_exp2f.exit128, !dbg !41

__nv_exp2f.exit128:                               ; preds = %844, %846
  %.0.i127 = phi float [ %845, %844 ], [ %847, %846 ], !dbg !41
  %848 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i129 = icmp eq i32 %848, 0, !dbg !41
  br i1 %.not.i129, label %851, label %849, !dbg !41

849:                                              ; preds = %__nv_exp2f.exit128
  %850 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %770) #2, !dbg !41
  br label %__nv_exp2f.exit131, !dbg !41

851:                                              ; preds = %__nv_exp2f.exit128
  %852 = tail call float @llvm.nvvm.ex2.approx.f(float %770) #2, !dbg !41
  br label %__nv_exp2f.exit131, !dbg !41

__nv_exp2f.exit131:                               ; preds = %849, %851
  %.0.i130 = phi float [ %850, %849 ], [ %852, %851 ], !dbg !41
  %853 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i132 = icmp eq i32 %853, 0, !dbg !41
  br i1 %.not.i132, label %856, label %854, !dbg !41

854:                                              ; preds = %__nv_exp2f.exit131
  %855 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %771) #2, !dbg !41
  br label %__nv_exp2f.exit134, !dbg !41

856:                                              ; preds = %__nv_exp2f.exit131
  %857 = tail call float @llvm.nvvm.ex2.approx.f(float %771) #2, !dbg !41
  br label %__nv_exp2f.exit134, !dbg !41

__nv_exp2f.exit134:                               ; preds = %854, %856
  %.0.i133 = phi float [ %855, %854 ], [ %857, %856 ], !dbg !41
  %858 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i135 = icmp eq i32 %858, 0, !dbg !41
  br i1 %.not.i135, label %861, label %859, !dbg !41

859:                                              ; preds = %__nv_exp2f.exit134
  %860 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %772) #2, !dbg !41
  br label %__nv_exp2f.exit137, !dbg !41

861:                                              ; preds = %__nv_exp2f.exit134
  %862 = tail call float @llvm.nvvm.ex2.approx.f(float %772) #2, !dbg !41
  br label %__nv_exp2f.exit137, !dbg !41

__nv_exp2f.exit137:                               ; preds = %859, %861
  %.0.i136 = phi float [ %860, %859 ], [ %862, %861 ], !dbg !41
  %863 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i138 = icmp eq i32 %863, 0, !dbg !41
  br i1 %.not.i138, label %866, label %864, !dbg !41

864:                                              ; preds = %__nv_exp2f.exit137
  %865 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %773) #2, !dbg !41
  br label %__nv_exp2f.exit140, !dbg !41

866:                                              ; preds = %__nv_exp2f.exit137
  %867 = tail call float @llvm.nvvm.ex2.approx.f(float %773) #2, !dbg !41
  br label %__nv_exp2f.exit140, !dbg !41

__nv_exp2f.exit140:                               ; preds = %864, %866
  %.0.i139 = phi float [ %865, %864 ], [ %867, %866 ], !dbg !41
  %868 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i141 = icmp eq i32 %868, 0, !dbg !41
  br i1 %.not.i141, label %871, label %869, !dbg !41

869:                                              ; preds = %__nv_exp2f.exit140
  %870 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %774) #2, !dbg !41
  br label %__nv_exp2f.exit143, !dbg !41

871:                                              ; preds = %__nv_exp2f.exit140
  %872 = tail call float @llvm.nvvm.ex2.approx.f(float %774) #2, !dbg !41
  br label %__nv_exp2f.exit143, !dbg !41

__nv_exp2f.exit143:                               ; preds = %869, %871
  %.0.i142 = phi float [ %870, %869 ], [ %872, %871 ], !dbg !41
  %873 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i144 = icmp eq i32 %873, 0, !dbg !41
  br i1 %.not.i144, label %876, label %874, !dbg !41

874:                                              ; preds = %__nv_exp2f.exit143
  %875 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %776) #2, !dbg !41
  br label %__nv_exp2f.exit146, !dbg !41

876:                                              ; preds = %__nv_exp2f.exit143
  %877 = tail call float @llvm.nvvm.ex2.approx.f(float %776) #2, !dbg !41
  br label %__nv_exp2f.exit146, !dbg !41

__nv_exp2f.exit146:                               ; preds = %874, %876
  %.0.i145 = phi float [ %875, %874 ], [ %877, %876 ], !dbg !41
  %878 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i147 = icmp eq i32 %878, 0, !dbg !41
  br i1 %.not.i147, label %881, label %879, !dbg !41

879:                                              ; preds = %__nv_exp2f.exit146
  %880 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %777) #2, !dbg !41
  br label %__nv_exp2f.exit149, !dbg !41

881:                                              ; preds = %__nv_exp2f.exit146
  %882 = tail call float @llvm.nvvm.ex2.approx.f(float %777) #2, !dbg !41
  br label %__nv_exp2f.exit149, !dbg !41

__nv_exp2f.exit149:                               ; preds = %879, %881
  %.0.i148 = phi float [ %880, %879 ], [ %882, %881 ], !dbg !41
  %883 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i150 = icmp eq i32 %883, 0, !dbg !41
  br i1 %.not.i150, label %886, label %884, !dbg !41

884:                                              ; preds = %__nv_exp2f.exit149
  %885 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %779) #2, !dbg !41
  br label %__nv_exp2f.exit152, !dbg !41

886:                                              ; preds = %__nv_exp2f.exit149
  %887 = tail call float @llvm.nvvm.ex2.approx.f(float %779) #2, !dbg !41
  br label %__nv_exp2f.exit152, !dbg !41

__nv_exp2f.exit152:                               ; preds = %884, %886
  %.0.i151 = phi float [ %885, %884 ], [ %887, %886 ], !dbg !41
  %888 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i153 = icmp eq i32 %888, 0, !dbg !41
  br i1 %.not.i153, label %891, label %889, !dbg !41

889:                                              ; preds = %__nv_exp2f.exit152
  %890 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %780) #2, !dbg !41
  br label %__nv_exp2f.exit155, !dbg !41

891:                                              ; preds = %__nv_exp2f.exit152
  %892 = tail call float @llvm.nvvm.ex2.approx.f(float %780) #2, !dbg !41
  br label %__nv_exp2f.exit155, !dbg !41

__nv_exp2f.exit155:                               ; preds = %889, %891
  %.0.i154 = phi float [ %890, %889 ], [ %892, %891 ], !dbg !41
  %893 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i156 = icmp eq i32 %893, 0, !dbg !41
  br i1 %.not.i156, label %896, label %894, !dbg !41

894:                                              ; preds = %__nv_exp2f.exit155
  %895 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %781) #2, !dbg !41
  br label %__nv_exp2f.exit158, !dbg !41

896:                                              ; preds = %__nv_exp2f.exit155
  %897 = tail call float @llvm.nvvm.ex2.approx.f(float %781) #2, !dbg !41
  br label %__nv_exp2f.exit158, !dbg !41

__nv_exp2f.exit158:                               ; preds = %894, %896
  %.0.i157 = phi float [ %895, %894 ], [ %897, %896 ], !dbg !41
  %898 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i159 = icmp eq i32 %898, 0, !dbg !41
  br i1 %.not.i159, label %901, label %899, !dbg !41

899:                                              ; preds = %__nv_exp2f.exit158
  %900 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %782) #2, !dbg !41
  br label %__nv_exp2f.exit161, !dbg !41

901:                                              ; preds = %__nv_exp2f.exit158
  %902 = tail call float @llvm.nvvm.ex2.approx.f(float %782) #2, !dbg !41
  br label %__nv_exp2f.exit161, !dbg !41

__nv_exp2f.exit161:                               ; preds = %899, %901
  %.0.i160 = phi float [ %900, %899 ], [ %902, %901 ], !dbg !41
  %903 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i162 = icmp eq i32 %903, 0, !dbg !41
  br i1 %.not.i162, label %906, label %904, !dbg !41

904:                                              ; preds = %__nv_exp2f.exit161
  %905 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %783) #2, !dbg !41
  br label %__nv_exp2f.exit164, !dbg !41

906:                                              ; preds = %__nv_exp2f.exit161
  %907 = tail call float @llvm.nvvm.ex2.approx.f(float %783) #2, !dbg !41
  br label %__nv_exp2f.exit164, !dbg !41

__nv_exp2f.exit164:                               ; preds = %904, %906
  %.0.i163 = phi float [ %905, %904 ], [ %907, %906 ], !dbg !41
  %908 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i165 = icmp eq i32 %908, 0, !dbg !41
  br i1 %.not.i165, label %911, label %909, !dbg !41

909:                                              ; preds = %__nv_exp2f.exit164
  %910 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %784) #2, !dbg !41
  br label %__nv_exp2f.exit167, !dbg !41

911:                                              ; preds = %__nv_exp2f.exit164
  %912 = tail call float @llvm.nvvm.ex2.approx.f(float %784) #2, !dbg !41
  br label %__nv_exp2f.exit167, !dbg !41

__nv_exp2f.exit167:                               ; preds = %909, %911
  %.0.i166 = phi float [ %910, %909 ], [ %912, %911 ], !dbg !41
  %913 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i168 = icmp eq i32 %913, 0, !dbg !41
  br i1 %.not.i168, label %916, label %914, !dbg !41

914:                                              ; preds = %__nv_exp2f.exit167
  %915 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %785) #2, !dbg !41
  br label %__nv_exp2f.exit170, !dbg !41

916:                                              ; preds = %__nv_exp2f.exit167
  %917 = tail call float @llvm.nvvm.ex2.approx.f(float %785) #2, !dbg !41
  br label %__nv_exp2f.exit170, !dbg !41

__nv_exp2f.exit170:                               ; preds = %914, %916
  %.0.i169 = phi float [ %915, %914 ], [ %917, %916 ], !dbg !41
  %918 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i171 = icmp eq i32 %918, 0, !dbg !41
  br i1 %.not.i171, label %921, label %919, !dbg !41

919:                                              ; preds = %__nv_exp2f.exit170
  %920 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %786) #2, !dbg !41
  br label %__nv_exp2f.exit173, !dbg !41

921:                                              ; preds = %__nv_exp2f.exit170
  %922 = tail call float @llvm.nvvm.ex2.approx.f(float %786) #2, !dbg !41
  br label %__nv_exp2f.exit173, !dbg !41

__nv_exp2f.exit173:                               ; preds = %919, %921
  %.0.i172 = phi float [ %920, %919 ], [ %922, %921 ], !dbg !41
  %923 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i174 = icmp eq i32 %923, 0, !dbg !41
  br i1 %.not.i174, label %926, label %924, !dbg !41

924:                                              ; preds = %__nv_exp2f.exit173
  %925 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %787) #2, !dbg !41
  br label %__nv_exp2f.exit176, !dbg !41

926:                                              ; preds = %__nv_exp2f.exit173
  %927 = tail call float @llvm.nvvm.ex2.approx.f(float %787) #2, !dbg !41
  br label %__nv_exp2f.exit176, !dbg !41

__nv_exp2f.exit176:                               ; preds = %924, %926
  %.0.i175 = phi float [ %925, %924 ], [ %927, %926 ], !dbg !41
  %928 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i177 = icmp eq i32 %928, 0, !dbg !41
  br i1 %.not.i177, label %931, label %929, !dbg !41

929:                                              ; preds = %__nv_exp2f.exit176
  %930 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %788) #2, !dbg !41
  br label %__nv_exp2f.exit179, !dbg !41

931:                                              ; preds = %__nv_exp2f.exit176
  %932 = tail call float @llvm.nvvm.ex2.approx.f(float %788) #2, !dbg !41
  br label %__nv_exp2f.exit179, !dbg !41

__nv_exp2f.exit179:                               ; preds = %929, %931
  %.0.i178 = phi float [ %930, %929 ], [ %932, %931 ], !dbg !41
  %933 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i180 = icmp eq i32 %933, 0, !dbg !41
  br i1 %.not.i180, label %936, label %934, !dbg !41

934:                                              ; preds = %__nv_exp2f.exit179
  %935 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %789) #2, !dbg !41
  br label %__nv_exp2f.exit182, !dbg !41

936:                                              ; preds = %__nv_exp2f.exit179
  %937 = tail call float @llvm.nvvm.ex2.approx.f(float %789) #2, !dbg !41
  br label %__nv_exp2f.exit182, !dbg !41

__nv_exp2f.exit182:                               ; preds = %934, %936
  %.0.i181 = phi float [ %935, %934 ], [ %937, %936 ], !dbg !41
  %938 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i183 = icmp eq i32 %938, 0, !dbg !41
  br i1 %.not.i183, label %941, label %939, !dbg !41

939:                                              ; preds = %__nv_exp2f.exit182
  %940 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %790) #2, !dbg !41
  br label %__nv_exp2f.exit185, !dbg !41

941:                                              ; preds = %__nv_exp2f.exit182
  %942 = tail call float @llvm.nvvm.ex2.approx.f(float %790) #2, !dbg !41
  br label %__nv_exp2f.exit185, !dbg !41

__nv_exp2f.exit185:                               ; preds = %939, %941
  %.0.i184 = phi float [ %940, %939 ], [ %942, %941 ], !dbg !41
  %943 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i186 = icmp eq i32 %943, 0, !dbg !41
  br i1 %.not.i186, label %946, label %944, !dbg !41

944:                                              ; preds = %__nv_exp2f.exit185
  %945 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %791) #2, !dbg !41
  br label %__nv_exp2f.exit188, !dbg !41

946:                                              ; preds = %__nv_exp2f.exit185
  %947 = tail call float @llvm.nvvm.ex2.approx.f(float %791) #2, !dbg !41
  br label %__nv_exp2f.exit188, !dbg !41

__nv_exp2f.exit188:                               ; preds = %944, %946
  %.0.i187 = phi float [ %945, %944 ], [ %947, %946 ], !dbg !41
  %948 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i189 = icmp eq i32 %948, 0, !dbg !41
  br i1 %.not.i189, label %951, label %949, !dbg !41

949:                                              ; preds = %__nv_exp2f.exit188
  %950 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %792) #2, !dbg !41
  br label %__nv_exp2f.exit191, !dbg !41

951:                                              ; preds = %__nv_exp2f.exit188
  %952 = tail call float @llvm.nvvm.ex2.approx.f(float %792) #2, !dbg !41
  br label %__nv_exp2f.exit191, !dbg !41

__nv_exp2f.exit191:                               ; preds = %949, %951
  %.0.i190 = phi float [ %950, %949 ], [ %952, %951 ], !dbg !41
  %953 = fadd float %.0.i, %.0.i100, !dbg !42
  %954 = fadd float %.0.i103, %.0.i106, !dbg !42
  %955 = fadd float %953, %.0.i109, !dbg !42
  %956 = fadd float %955, %.0.i112, !dbg !42
  %957 = fadd float %954, %.0.i115, !dbg !42
  %958 = fadd float %957, %.0.i118, !dbg !42
  %959 = fadd float %956, %.0.i121, !dbg !42
  %960 = fadd float %959, %.0.i124, !dbg !42
  %961 = fadd float %958, %.0.i127, !dbg !42
  %962 = fadd float %961, %.0.i130, !dbg !42
  %963 = fadd float %960, %.0.i133, !dbg !42
  %964 = fadd float %963, %.0.i136, !dbg !42
  %965 = fadd float %962, %.0.i139, !dbg !42
  %966 = fadd float %965, %.0.i142, !dbg !42
  %967 = fadd float %.0.i145, %.0.i148, !dbg !42
  %968 = fadd float %.0.i151, %.0.i154, !dbg !42
  %969 = fadd float %967, %.0.i157, !dbg !42
  %970 = fadd float %969, %.0.i160, !dbg !42
  %971 = fadd float %968, %.0.i163, !dbg !42
  %972 = fadd float %971, %.0.i166, !dbg !42
  %973 = fadd float %970, %.0.i169, !dbg !42
  %974 = fadd float %973, %.0.i172, !dbg !42
  %975 = fadd float %972, %.0.i175, !dbg !42
  %976 = fadd float %975, %.0.i178, !dbg !42
  %977 = fadd float %974, %.0.i181, !dbg !42
  %978 = fadd float %977, %.0.i184, !dbg !42
  %979 = fadd float %976, %.0.i187, !dbg !42
  %980 = fadd float %979, %.0.i190, !dbg !42
  %981 = bitcast float %964 to i32, !dbg !43
  %982 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %981, i32 2, i32 31), !dbg !43
  %983 = bitcast i32 %982 to float, !dbg !43
  %984 = fadd float %964, %983, !dbg !42
  %985 = bitcast float %984 to i32, !dbg !43
  %986 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %985, i32 1, i32 31), !dbg !43
  %987 = bitcast float %966 to i32, !dbg !43
  %988 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %987, i32 2, i32 31), !dbg !43
  %989 = bitcast i32 %988 to float, !dbg !43
  %990 = fadd float %966, %989, !dbg !42
  %991 = bitcast float %990 to i32, !dbg !43
  %992 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %991, i32 1, i32 31), !dbg !43
  %993 = bitcast float %978 to i32, !dbg !43
  %994 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %993, i32 2, i32 31), !dbg !43
  %995 = bitcast i32 %994 to float, !dbg !43
  %996 = fadd float %978, %995, !dbg !42
  %997 = bitcast float %996 to i32, !dbg !43
  %998 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %997, i32 1, i32 31), !dbg !43
  %999 = bitcast float %980 to i32, !dbg !43
  %1000 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %999, i32 2, i32 31), !dbg !43
  %1001 = bitcast i32 %1000 to float, !dbg !43
  %1002 = fadd float %980, %1001, !dbg !42
  %1003 = bitcast float %1002 to i32, !dbg !43
  %1004 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1003, i32 1, i32 31), !dbg !43
  %1005 = insertelement <4 x i32> poison, i32 %986, i64 0, !dbg !43
  %1006 = insertelement <4 x i32> %1005, i32 %992, i64 1, !dbg !43
  %1007 = insertelement <4 x i32> %1006, i32 %998, i64 2, !dbg !43
  %1008 = insertelement <4 x i32> %1007, i32 %1004, i64 3, !dbg !43
  %1009 = bitcast <4 x i32> %1008 to <4 x float>, !dbg !43
  %1010 = insertelement <4 x float> poison, float %984, i64 0, !dbg !42
  %1011 = insertelement <4 x float> %1010, float %990, i64 1, !dbg !42
  %1012 = insertelement <4 x float> %1011, float %996, i64 2, !dbg !42
  %1013 = insertelement <4 x float> %1012, float %1002, i64 3, !dbg !42
  %1014 = fadd <4 x float> %1013, %1009, !dbg !42
  %1015 = fsub <4 x float> %397, %724, !dbg !44
  %1016 = extractelement <4 x float> %1015, i64 0, !dbg !44
  %1017 = fsub <4 x float> %397, %724, !dbg !44
  %1018 = extractelement <4 x float> %1017, i64 1, !dbg !44
  %1019 = fsub <4 x float> %397, %724, !dbg !44
  %1020 = extractelement <4 x float> %1019, i64 2, !dbg !44
  %1021 = fsub <4 x float> %397, %724, !dbg !44
  %1022 = extractelement <4 x float> %1021, i64 3, !dbg !44
  %1023 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !45
  %.not.i192 = icmp eq i32 %1023, 0, !dbg !45
  br i1 %.not.i192, label %1026, label %1024, !dbg !45

1024:                                             ; preds = %__nv_exp2f.exit191
  %1025 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1016) #2, !dbg !45
  br label %__nv_exp2f.exit194, !dbg !45

1026:                                             ; preds = %__nv_exp2f.exit191
  %1027 = tail call float @llvm.nvvm.ex2.approx.f(float %1016) #2, !dbg !45
  br label %__nv_exp2f.exit194, !dbg !45

__nv_exp2f.exit194:                               ; preds = %1024, %1026
  %.0.i193 = phi float [ %1025, %1024 ], [ %1027, %1026 ], !dbg !45
  %1028 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !45
  %.not.i195 = icmp eq i32 %1028, 0, !dbg !45
  br i1 %.not.i195, label %1031, label %1029, !dbg !45

1029:                                             ; preds = %__nv_exp2f.exit194
  %1030 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1018) #2, !dbg !45
  br label %__nv_exp2f.exit197, !dbg !45

1031:                                             ; preds = %__nv_exp2f.exit194
  %1032 = tail call float @llvm.nvvm.ex2.approx.f(float %1018) #2, !dbg !45
  br label %__nv_exp2f.exit197, !dbg !45

__nv_exp2f.exit197:                               ; preds = %1029, %1031
  %.0.i196 = phi float [ %1030, %1029 ], [ %1032, %1031 ], !dbg !45
  %1033 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !45
  %.not.i198 = icmp eq i32 %1033, 0, !dbg !45
  br i1 %.not.i198, label %1036, label %1034, !dbg !45

1034:                                             ; preds = %__nv_exp2f.exit197
  %1035 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1020) #2, !dbg !45
  br label %__nv_exp2f.exit200, !dbg !45

1036:                                             ; preds = %__nv_exp2f.exit197
  %1037 = tail call float @llvm.nvvm.ex2.approx.f(float %1020) #2, !dbg !45
  br label %__nv_exp2f.exit200, !dbg !45

__nv_exp2f.exit200:                               ; preds = %1034, %1036
  %.0.i199 = phi float [ %1035, %1034 ], [ %1037, %1036 ], !dbg !45
  %1038 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !45
  %.not.i201 = icmp eq i32 %1038, 0, !dbg !45
  br i1 %.not.i201, label %1041, label %1039, !dbg !45

1039:                                             ; preds = %__nv_exp2f.exit200
  %1040 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1022) #2, !dbg !45
  br label %__nv_exp2f.exit203, !dbg !45

1041:                                             ; preds = %__nv_exp2f.exit200
  %1042 = tail call float @llvm.nvvm.ex2.approx.f(float %1022) #2, !dbg !45
  br label %__nv_exp2f.exit203, !dbg !45

__nv_exp2f.exit203:                               ; preds = %1039, %1041
  %.0.i202 = phi float [ %1040, %1039 ], [ %1042, %1041 ], !dbg !45
  %1043 = insertelement <4 x float> poison, float %.0.i193, i64 0, !dbg !46
  %1044 = insertelement <4 x float> %1043, float %.0.i196, i64 1, !dbg !46
  %1045 = insertelement <4 x float> %1044, float %.0.i199, i64 2, !dbg !46
  %1046 = insertelement <4 x float> %1045, float %.0.i202, i64 3, !dbg !46
  %1047 = fmul <4 x float> %398, %1046, !dbg !46
  %1048 = fadd <4 x float> %1014, %1047, !dbg !47
  %1049 = fmul float %332, %.0.i193, !dbg !48
  %1050 = fmul float %333, %.0.i193, !dbg !48
  %1051 = fmul float %334, %.0.i196, !dbg !48
  %1052 = fmul float %335, %.0.i196, !dbg !48
  %1053 = fmul float %336, %.0.i193, !dbg !48
  %1054 = fmul float %337, %.0.i193, !dbg !48
  %1055 = fmul float %338, %.0.i196, !dbg !48
  %1056 = fmul float %339, %.0.i196, !dbg !48
  %1057 = fmul float %340, %.0.i193, !dbg !48
  %1058 = fmul float %341, %.0.i193, !dbg !48
  %1059 = fmul float %342, %.0.i196, !dbg !48
  %1060 = fmul float %343, %.0.i196, !dbg !48
  %1061 = fmul float %344, %.0.i193, !dbg !48
  %1062 = fmul float %345, %.0.i193, !dbg !48
  %1063 = fmul float %346, %.0.i196, !dbg !48
  %1064 = fmul float %347, %.0.i196, !dbg !48
  %1065 = fmul float %348, %.0.i193, !dbg !48
  %1066 = fmul float %349, %.0.i193, !dbg !48
  %1067 = fmul float %350, %.0.i196, !dbg !48
  %1068 = fmul float %351, %.0.i196, !dbg !48
  %1069 = fmul float %352, %.0.i193, !dbg !48
  %1070 = fmul float %353, %.0.i193, !dbg !48
  %1071 = fmul float %354, %.0.i196, !dbg !48
  %1072 = fmul float %355, %.0.i196, !dbg !48
  %1073 = fmul float %356, %.0.i193, !dbg !48
  %1074 = fmul float %357, %.0.i193, !dbg !48
  %1075 = fmul float %358, %.0.i196, !dbg !48
  %1076 = fmul float %359, %.0.i196, !dbg !48
  %1077 = fmul float %360, %.0.i193, !dbg !48
  %1078 = fmul float %361, %.0.i193, !dbg !48
  %1079 = fmul float %362, %.0.i196, !dbg !48
  %1080 = fmul float %363, %.0.i196, !dbg !48
  %1081 = fmul float %364, %.0.i199, !dbg !48
  %1082 = fmul float %365, %.0.i199, !dbg !48
  %1083 = fmul float %366, %.0.i202, !dbg !48
  %1084 = fmul float %367, %.0.i202, !dbg !48
  %1085 = fmul float %368, %.0.i199, !dbg !48
  %1086 = fmul float %369, %.0.i199, !dbg !48
  %1087 = fmul float %370, %.0.i202, !dbg !48
  %1088 = fmul float %371, %.0.i202, !dbg !48
  %1089 = fmul float %372, %.0.i199, !dbg !48
  %1090 = fmul float %373, %.0.i199, !dbg !48
  %1091 = fmul float %374, %.0.i202, !dbg !48
  %1092 = fmul float %375, %.0.i202, !dbg !48
  %1093 = fmul float %376, %.0.i199, !dbg !48
  %1094 = fmul float %377, %.0.i199, !dbg !48
  %1095 = fmul float %378, %.0.i202, !dbg !48
  %1096 = fmul float %379, %.0.i202, !dbg !48
  %1097 = fmul float %380, %.0.i199, !dbg !48
  %1098 = fmul float %381, %.0.i199, !dbg !48
  %1099 = fmul float %382, %.0.i202, !dbg !48
  %1100 = fmul float %383, %.0.i202, !dbg !48
  %1101 = fmul float %384, %.0.i199, !dbg !48
  %1102 = fmul float %385, %.0.i199, !dbg !48
  %1103 = fmul float %386, %.0.i202, !dbg !48
  %1104 = fmul float %387, %.0.i202, !dbg !48
  %1105 = fmul float %388, %.0.i199, !dbg !48
  %1106 = fmul float %389, %.0.i199, !dbg !48
  %1107 = fmul float %390, %.0.i202, !dbg !48
  %1108 = fmul float %391, %.0.i202, !dbg !48
  %1109 = fmul float %392, %.0.i199, !dbg !48
  %1110 = fmul float %393, %.0.i199, !dbg !48
  %1111 = fmul float %394, %.0.i202, !dbg !48
  %1112 = fmul float %395, %.0.i202, !dbg !48
  %1113 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 28672), i32 %403, !dbg !30
  %1114 = getelementptr inbounds nuw half, ptr addrspace(3) %1113, i32 %318, !dbg !30
  %1115 = ptrtoint ptr addrspace(3) %1114 to i32, !dbg !30
  %1116 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1115) #2, !dbg !30
  %1117 = extractvalue { i32, i32, i32, i32 } %1116, 0, !dbg !30
  %1118 = extractvalue { i32, i32, i32, i32 } %1116, 1, !dbg !30
  %1119 = extractvalue { i32, i32, i32, i32 } %1116, 2, !dbg !30
  %1120 = extractvalue { i32, i32, i32, i32 } %1116, 3, !dbg !30
  %1121 = getelementptr inbounds nuw half, ptr addrspace(3) %1113, i32 %319, !dbg !30
  %1122 = ptrtoint ptr addrspace(3) %1121 to i32, !dbg !30
  %1123 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1122) #2, !dbg !30
  %1124 = extractvalue { i32, i32, i32, i32 } %1123, 0, !dbg !30
  %1125 = extractvalue { i32, i32, i32, i32 } %1123, 1, !dbg !30
  %1126 = extractvalue { i32, i32, i32, i32 } %1123, 2, !dbg !30
  %1127 = extractvalue { i32, i32, i32, i32 } %1123, 3, !dbg !30
  %1128 = getelementptr inbounds nuw half, ptr addrspace(3) %1113, i32 %320, !dbg !30
  %1129 = ptrtoint ptr addrspace(3) %1128 to i32, !dbg !30
  %1130 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1129) #2, !dbg !30
  %1131 = extractvalue { i32, i32, i32, i32 } %1130, 0, !dbg !30
  %1132 = extractvalue { i32, i32, i32, i32 } %1130, 1, !dbg !30
  %1133 = extractvalue { i32, i32, i32, i32 } %1130, 2, !dbg !30
  %1134 = extractvalue { i32, i32, i32, i32 } %1130, 3, !dbg !30
  %1135 = getelementptr inbounds nuw half, ptr addrspace(3) %1113, i32 %321, !dbg !30
  %1136 = ptrtoint ptr addrspace(3) %1135 to i32, !dbg !30
  %1137 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1136) #2, !dbg !30
  %1138 = extractvalue { i32, i32, i32, i32 } %1137, 0, !dbg !30
  %1139 = extractvalue { i32, i32, i32, i32 } %1137, 1, !dbg !30
  %1140 = extractvalue { i32, i32, i32, i32 } %1137, 2, !dbg !30
  %1141 = extractvalue { i32, i32, i32, i32 } %1137, 3, !dbg !30
  %1142 = getelementptr inbounds nuw half, ptr addrspace(3) %1113, i32 %322, !dbg !30
  %1143 = ptrtoint ptr addrspace(3) %1142 to i32, !dbg !30
  %1144 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1143) #2, !dbg !30
  %1145 = extractvalue { i32, i32, i32, i32 } %1144, 0, !dbg !30
  %1146 = extractvalue { i32, i32, i32, i32 } %1144, 1, !dbg !30
  %1147 = extractvalue { i32, i32, i32, i32 } %1144, 2, !dbg !30
  %1148 = extractvalue { i32, i32, i32, i32 } %1144, 3, !dbg !30
  %1149 = getelementptr inbounds nuw half, ptr addrspace(3) %1113, i32 %323, !dbg !30
  %1150 = ptrtoint ptr addrspace(3) %1149 to i32, !dbg !30
  %1151 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1150) #2, !dbg !30
  %1152 = extractvalue { i32, i32, i32, i32 } %1151, 0, !dbg !30
  %1153 = extractvalue { i32, i32, i32, i32 } %1151, 1, !dbg !30
  %1154 = extractvalue { i32, i32, i32, i32 } %1151, 2, !dbg !30
  %1155 = extractvalue { i32, i32, i32, i32 } %1151, 3, !dbg !30
  %1156 = getelementptr inbounds nuw half, ptr addrspace(3) %1113, i32 %324, !dbg !30
  %1157 = ptrtoint ptr addrspace(3) %1156 to i32, !dbg !30
  %1158 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1157) #2, !dbg !30
  %1159 = extractvalue { i32, i32, i32, i32 } %1158, 0, !dbg !30
  %1160 = extractvalue { i32, i32, i32, i32 } %1158, 1, !dbg !30
  %1161 = extractvalue { i32, i32, i32, i32 } %1158, 2, !dbg !30
  %1162 = extractvalue { i32, i32, i32, i32 } %1158, 3, !dbg !30
  %1163 = getelementptr inbounds nuw half, ptr addrspace(3) %1113, i32 %325, !dbg !30
  %1164 = ptrtoint ptr addrspace(3) %1163 to i32, !dbg !30
  %1165 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1164) #2, !dbg !30
  %1166 = extractvalue { i32, i32, i32, i32 } %1165, 0, !dbg !30
  %1167 = extractvalue { i32, i32, i32, i32 } %1165, 1, !dbg !30
  %1168 = extractvalue { i32, i32, i32, i32 } %1165, 2, !dbg !30
  %1169 = extractvalue { i32, i32, i32, i32 } %1165, 3, !dbg !30
  %1170 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !49
  %1171 = insertelement <2 x float> %1170, float %.0.i100, i64 1, !dbg !49
  %1172 = fptrunc <2 x float> %1171 to <2 x half>, !dbg !49
  %1173 = insertelement <2 x float> poison, float %.0.i103, i64 0, !dbg !49
  %1174 = insertelement <2 x float> %1173, float %.0.i106, i64 1, !dbg !49
  %1175 = fptrunc <2 x float> %1174 to <2 x half>, !dbg !49
  %1176 = insertelement <2 x float> poison, float %.0.i109, i64 0, !dbg !49
  %1177 = insertelement <2 x float> %1176, float %.0.i112, i64 1, !dbg !49
  %1178 = fptrunc <2 x float> %1177 to <2 x half>, !dbg !49
  %1179 = insertelement <2 x float> poison, float %.0.i115, i64 0, !dbg !49
  %1180 = insertelement <2 x float> %1179, float %.0.i118, i64 1, !dbg !49
  %1181 = fptrunc <2 x float> %1180 to <2 x half>, !dbg !49
  %1182 = insertelement <2 x float> poison, float %.0.i121, i64 0, !dbg !49
  %1183 = insertelement <2 x float> %1182, float %.0.i124, i64 1, !dbg !49
  %1184 = fptrunc <2 x float> %1183 to <2 x half>, !dbg !49
  %1185 = insertelement <2 x float> poison, float %.0.i127, i64 0, !dbg !49
  %1186 = insertelement <2 x float> %1185, float %.0.i130, i64 1, !dbg !49
  %1187 = fptrunc <2 x float> %1186 to <2 x half>, !dbg !49
  %1188 = insertelement <2 x float> poison, float %.0.i133, i64 0, !dbg !49
  %1189 = insertelement <2 x float> %1188, float %.0.i136, i64 1, !dbg !49
  %1190 = fptrunc <2 x float> %1189 to <2 x half>, !dbg !49
  %1191 = insertelement <2 x float> poison, float %.0.i139, i64 0, !dbg !49
  %1192 = insertelement <2 x float> %1191, float %.0.i142, i64 1, !dbg !49
  %1193 = fptrunc <2 x float> %1192 to <2 x half>, !dbg !49
  %1194 = insertelement <2 x float> poison, float %.0.i145, i64 0, !dbg !49
  %1195 = insertelement <2 x float> %1194, float %.0.i148, i64 1, !dbg !49
  %1196 = fptrunc <2 x float> %1195 to <2 x half>, !dbg !49
  %1197 = insertelement <2 x float> poison, float %.0.i151, i64 0, !dbg !49
  %1198 = insertelement <2 x float> %1197, float %.0.i154, i64 1, !dbg !49
  %1199 = fptrunc <2 x float> %1198 to <2 x half>, !dbg !49
  %1200 = insertelement <2 x float> poison, float %.0.i157, i64 0, !dbg !49
  %1201 = insertelement <2 x float> %1200, float %.0.i160, i64 1, !dbg !49
  %1202 = fptrunc <2 x float> %1201 to <2 x half>, !dbg !49
  %1203 = insertelement <2 x float> poison, float %.0.i163, i64 0, !dbg !49
  %1204 = insertelement <2 x float> %1203, float %.0.i166, i64 1, !dbg !49
  %1205 = fptrunc <2 x float> %1204 to <2 x half>, !dbg !49
  %1206 = insertelement <2 x float> poison, float %.0.i169, i64 0, !dbg !49
  %1207 = insertelement <2 x float> %1206, float %.0.i172, i64 1, !dbg !49
  %1208 = fptrunc <2 x float> %1207 to <2 x half>, !dbg !49
  %1209 = insertelement <2 x float> poison, float %.0.i175, i64 0, !dbg !49
  %1210 = insertelement <2 x float> %1209, float %.0.i178, i64 1, !dbg !49
  %1211 = fptrunc <2 x float> %1210 to <2 x half>, !dbg !49
  %1212 = insertelement <2 x float> poison, float %.0.i181, i64 0, !dbg !49
  %1213 = insertelement <2 x float> %1212, float %.0.i184, i64 1, !dbg !49
  %1214 = fptrunc <2 x float> %1213 to <2 x half>, !dbg !49
  %1215 = insertelement <2 x float> poison, float %.0.i187, i64 0, !dbg !49
  %1216 = insertelement <2 x float> %1215, float %.0.i190, i64 1, !dbg !49
  %1217 = fptrunc <2 x float> %1216 to <2 x half>, !dbg !49
  %1218 = bitcast <2 x half> %1172 to i32, !dbg !50
  %1219 = bitcast <2 x half> %1175 to i32, !dbg !50
  %1220 = bitcast <2 x half> %1178 to i32, !dbg !50
  %1221 = bitcast <2 x half> %1181 to i32, !dbg !50
  %1222 = bitcast <2 x half> %1184 to i32, !dbg !50
  %1223 = bitcast <2 x half> %1187 to i32, !dbg !50
  %1224 = bitcast <2 x half> %1190 to i32, !dbg !50
  %1225 = bitcast <2 x half> %1193 to i32, !dbg !50
  %1226 = bitcast <2 x half> %1196 to i32, !dbg !50
  %1227 = bitcast <2 x half> %1199 to i32, !dbg !50
  %1228 = bitcast <2 x half> %1202 to i32, !dbg !50
  %1229 = bitcast <2 x half> %1205 to i32, !dbg !50
  %1230 = bitcast <2 x half> %1208 to i32, !dbg !50
  %1231 = bitcast <2 x half> %1211 to i32, !dbg !50
  %1232 = bitcast <2 x half> %1214 to i32, !dbg !50
  %1233 = bitcast <2 x half> %1217 to i32, !dbg !50
  %1234 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1049, float %1050, float %1051, float %1052, i32 %1218, i32 %1219, i32 %1220, i32 %1221, i32 %1117, i32 %1118) #2, !dbg !50
  %1235 = extractvalue { float, float, float, float } %1234, 0, !dbg !50
  %1236 = extractvalue { float, float, float, float } %1234, 1, !dbg !50
  %1237 = extractvalue { float, float, float, float } %1234, 2, !dbg !50
  %1238 = extractvalue { float, float, float, float } %1234, 3, !dbg !50
  %1239 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1053, float %1054, float %1055, float %1056, i32 %1218, i32 %1219, i32 %1220, i32 %1221, i32 %1124, i32 %1125) #2, !dbg !50
  %1240 = extractvalue { float, float, float, float } %1239, 0, !dbg !50
  %1241 = extractvalue { float, float, float, float } %1239, 1, !dbg !50
  %1242 = extractvalue { float, float, float, float } %1239, 2, !dbg !50
  %1243 = extractvalue { float, float, float, float } %1239, 3, !dbg !50
  %1244 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1057, float %1058, float %1059, float %1060, i32 %1218, i32 %1219, i32 %1220, i32 %1221, i32 %1131, i32 %1132) #2, !dbg !50
  %1245 = extractvalue { float, float, float, float } %1244, 0, !dbg !50
  %1246 = extractvalue { float, float, float, float } %1244, 1, !dbg !50
  %1247 = extractvalue { float, float, float, float } %1244, 2, !dbg !50
  %1248 = extractvalue { float, float, float, float } %1244, 3, !dbg !50
  %1249 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1061, float %1062, float %1063, float %1064, i32 %1218, i32 %1219, i32 %1220, i32 %1221, i32 %1138, i32 %1139) #2, !dbg !50
  %1250 = extractvalue { float, float, float, float } %1249, 0, !dbg !50
  %1251 = extractvalue { float, float, float, float } %1249, 1, !dbg !50
  %1252 = extractvalue { float, float, float, float } %1249, 2, !dbg !50
  %1253 = extractvalue { float, float, float, float } %1249, 3, !dbg !50
  %1254 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1065, float %1066, float %1067, float %1068, i32 %1218, i32 %1219, i32 %1220, i32 %1221, i32 %1145, i32 %1146) #2, !dbg !50
  %1255 = extractvalue { float, float, float, float } %1254, 0, !dbg !50
  %1256 = extractvalue { float, float, float, float } %1254, 1, !dbg !50
  %1257 = extractvalue { float, float, float, float } %1254, 2, !dbg !50
  %1258 = extractvalue { float, float, float, float } %1254, 3, !dbg !50
  %1259 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1069, float %1070, float %1071, float %1072, i32 %1218, i32 %1219, i32 %1220, i32 %1221, i32 %1152, i32 %1153) #2, !dbg !50
  %1260 = extractvalue { float, float, float, float } %1259, 0, !dbg !50
  %1261 = extractvalue { float, float, float, float } %1259, 1, !dbg !50
  %1262 = extractvalue { float, float, float, float } %1259, 2, !dbg !50
  %1263 = extractvalue { float, float, float, float } %1259, 3, !dbg !50
  %1264 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1073, float %1074, float %1075, float %1076, i32 %1218, i32 %1219, i32 %1220, i32 %1221, i32 %1159, i32 %1160) #2, !dbg !50
  %1265 = extractvalue { float, float, float, float } %1264, 0, !dbg !50
  %1266 = extractvalue { float, float, float, float } %1264, 1, !dbg !50
  %1267 = extractvalue { float, float, float, float } %1264, 2, !dbg !50
  %1268 = extractvalue { float, float, float, float } %1264, 3, !dbg !50
  %1269 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1077, float %1078, float %1079, float %1080, i32 %1218, i32 %1219, i32 %1220, i32 %1221, i32 %1166, i32 %1167) #2, !dbg !50
  %1270 = extractvalue { float, float, float, float } %1269, 0, !dbg !50
  %1271 = extractvalue { float, float, float, float } %1269, 1, !dbg !50
  %1272 = extractvalue { float, float, float, float } %1269, 2, !dbg !50
  %1273 = extractvalue { float, float, float, float } %1269, 3, !dbg !50
  %1274 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1081, float %1082, float %1083, float %1084, i32 %1226, i32 %1227, i32 %1228, i32 %1229, i32 %1117, i32 %1118) #2, !dbg !50
  %1275 = extractvalue { float, float, float, float } %1274, 0, !dbg !50
  %1276 = extractvalue { float, float, float, float } %1274, 1, !dbg !50
  %1277 = extractvalue { float, float, float, float } %1274, 2, !dbg !50
  %1278 = extractvalue { float, float, float, float } %1274, 3, !dbg !50
  %1279 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1085, float %1086, float %1087, float %1088, i32 %1226, i32 %1227, i32 %1228, i32 %1229, i32 %1124, i32 %1125) #2, !dbg !50
  %1280 = extractvalue { float, float, float, float } %1279, 0, !dbg !50
  %1281 = extractvalue { float, float, float, float } %1279, 1, !dbg !50
  %1282 = extractvalue { float, float, float, float } %1279, 2, !dbg !50
  %1283 = extractvalue { float, float, float, float } %1279, 3, !dbg !50
  %1284 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1089, float %1090, float %1091, float %1092, i32 %1226, i32 %1227, i32 %1228, i32 %1229, i32 %1131, i32 %1132) #2, !dbg !50
  %1285 = extractvalue { float, float, float, float } %1284, 0, !dbg !50
  %1286 = extractvalue { float, float, float, float } %1284, 1, !dbg !50
  %1287 = extractvalue { float, float, float, float } %1284, 2, !dbg !50
  %1288 = extractvalue { float, float, float, float } %1284, 3, !dbg !50
  %1289 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1093, float %1094, float %1095, float %1096, i32 %1226, i32 %1227, i32 %1228, i32 %1229, i32 %1138, i32 %1139) #2, !dbg !50
  %1290 = extractvalue { float, float, float, float } %1289, 0, !dbg !50
  %1291 = extractvalue { float, float, float, float } %1289, 1, !dbg !50
  %1292 = extractvalue { float, float, float, float } %1289, 2, !dbg !50
  %1293 = extractvalue { float, float, float, float } %1289, 3, !dbg !50
  %1294 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1097, float %1098, float %1099, float %1100, i32 %1226, i32 %1227, i32 %1228, i32 %1229, i32 %1145, i32 %1146) #2, !dbg !50
  %1295 = extractvalue { float, float, float, float } %1294, 0, !dbg !50
  %1296 = extractvalue { float, float, float, float } %1294, 1, !dbg !50
  %1297 = extractvalue { float, float, float, float } %1294, 2, !dbg !50
  %1298 = extractvalue { float, float, float, float } %1294, 3, !dbg !50
  %1299 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1101, float %1102, float %1103, float %1104, i32 %1226, i32 %1227, i32 %1228, i32 %1229, i32 %1152, i32 %1153) #2, !dbg !50
  %1300 = extractvalue { float, float, float, float } %1299, 0, !dbg !50
  %1301 = extractvalue { float, float, float, float } %1299, 1, !dbg !50
  %1302 = extractvalue { float, float, float, float } %1299, 2, !dbg !50
  %1303 = extractvalue { float, float, float, float } %1299, 3, !dbg !50
  %1304 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1105, float %1106, float %1107, float %1108, i32 %1226, i32 %1227, i32 %1228, i32 %1229, i32 %1159, i32 %1160) #2, !dbg !50
  %1305 = extractvalue { float, float, float, float } %1304, 0, !dbg !50
  %1306 = extractvalue { float, float, float, float } %1304, 1, !dbg !50
  %1307 = extractvalue { float, float, float, float } %1304, 2, !dbg !50
  %1308 = extractvalue { float, float, float, float } %1304, 3, !dbg !50
  %1309 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1109, float %1110, float %1111, float %1112, i32 %1226, i32 %1227, i32 %1228, i32 %1229, i32 %1166, i32 %1167) #2, !dbg !50
  %1310 = extractvalue { float, float, float, float } %1309, 0, !dbg !50
  %1311 = extractvalue { float, float, float, float } %1309, 1, !dbg !50
  %1312 = extractvalue { float, float, float, float } %1309, 2, !dbg !50
  %1313 = extractvalue { float, float, float, float } %1309, 3, !dbg !50
  %1314 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1235, float %1236, float %1237, float %1238, i32 %1222, i32 %1223, i32 %1224, i32 %1225, i32 %1119, i32 %1120) #2, !dbg !50
  %1315 = extractvalue { float, float, float, float } %1314, 0, !dbg !50
  %1316 = extractvalue { float, float, float, float } %1314, 1, !dbg !50
  %1317 = extractvalue { float, float, float, float } %1314, 2, !dbg !50
  %1318 = extractvalue { float, float, float, float } %1314, 3, !dbg !50
  %1319 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1240, float %1241, float %1242, float %1243, i32 %1222, i32 %1223, i32 %1224, i32 %1225, i32 %1126, i32 %1127) #2, !dbg !50
  %1320 = extractvalue { float, float, float, float } %1319, 0, !dbg !50
  %1321 = extractvalue { float, float, float, float } %1319, 1, !dbg !50
  %1322 = extractvalue { float, float, float, float } %1319, 2, !dbg !50
  %1323 = extractvalue { float, float, float, float } %1319, 3, !dbg !50
  %1324 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1245, float %1246, float %1247, float %1248, i32 %1222, i32 %1223, i32 %1224, i32 %1225, i32 %1133, i32 %1134) #2, !dbg !50
  %1325 = extractvalue { float, float, float, float } %1324, 0, !dbg !50
  %1326 = extractvalue { float, float, float, float } %1324, 1, !dbg !50
  %1327 = extractvalue { float, float, float, float } %1324, 2, !dbg !50
  %1328 = extractvalue { float, float, float, float } %1324, 3, !dbg !50
  %1329 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1250, float %1251, float %1252, float %1253, i32 %1222, i32 %1223, i32 %1224, i32 %1225, i32 %1140, i32 %1141) #2, !dbg !50
  %1330 = extractvalue { float, float, float, float } %1329, 0, !dbg !50
  %1331 = extractvalue { float, float, float, float } %1329, 1, !dbg !50
  %1332 = extractvalue { float, float, float, float } %1329, 2, !dbg !50
  %1333 = extractvalue { float, float, float, float } %1329, 3, !dbg !50
  %1334 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1255, float %1256, float %1257, float %1258, i32 %1222, i32 %1223, i32 %1224, i32 %1225, i32 %1147, i32 %1148) #2, !dbg !50
  %1335 = extractvalue { float, float, float, float } %1334, 0, !dbg !50
  %1336 = extractvalue { float, float, float, float } %1334, 1, !dbg !50
  %1337 = extractvalue { float, float, float, float } %1334, 2, !dbg !50
  %1338 = extractvalue { float, float, float, float } %1334, 3, !dbg !50
  %1339 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1260, float %1261, float %1262, float %1263, i32 %1222, i32 %1223, i32 %1224, i32 %1225, i32 %1154, i32 %1155) #2, !dbg !50
  %1340 = extractvalue { float, float, float, float } %1339, 0, !dbg !50
  %1341 = extractvalue { float, float, float, float } %1339, 1, !dbg !50
  %1342 = extractvalue { float, float, float, float } %1339, 2, !dbg !50
  %1343 = extractvalue { float, float, float, float } %1339, 3, !dbg !50
  %1344 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1265, float %1266, float %1267, float %1268, i32 %1222, i32 %1223, i32 %1224, i32 %1225, i32 %1161, i32 %1162) #2, !dbg !50
  %1345 = extractvalue { float, float, float, float } %1344, 0, !dbg !50
  %1346 = extractvalue { float, float, float, float } %1344, 1, !dbg !50
  %1347 = extractvalue { float, float, float, float } %1344, 2, !dbg !50
  %1348 = extractvalue { float, float, float, float } %1344, 3, !dbg !50
  %1349 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1270, float %1271, float %1272, float %1273, i32 %1222, i32 %1223, i32 %1224, i32 %1225, i32 %1168, i32 %1169) #2, !dbg !50
  %1350 = extractvalue { float, float, float, float } %1349, 0, !dbg !50
  %1351 = extractvalue { float, float, float, float } %1349, 1, !dbg !50
  %1352 = extractvalue { float, float, float, float } %1349, 2, !dbg !50
  %1353 = extractvalue { float, float, float, float } %1349, 3, !dbg !50
  %1354 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1275, float %1276, float %1277, float %1278, i32 %1230, i32 %1231, i32 %1232, i32 %1233, i32 %1119, i32 %1120) #2, !dbg !50
  %1355 = extractvalue { float, float, float, float } %1354, 0, !dbg !50
  %1356 = extractvalue { float, float, float, float } %1354, 1, !dbg !50
  %1357 = extractvalue { float, float, float, float } %1354, 2, !dbg !50
  %1358 = extractvalue { float, float, float, float } %1354, 3, !dbg !50
  %1359 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1280, float %1281, float %1282, float %1283, i32 %1230, i32 %1231, i32 %1232, i32 %1233, i32 %1126, i32 %1127) #2, !dbg !50
  %1360 = extractvalue { float, float, float, float } %1359, 0, !dbg !50
  %1361 = extractvalue { float, float, float, float } %1359, 1, !dbg !50
  %1362 = extractvalue { float, float, float, float } %1359, 2, !dbg !50
  %1363 = extractvalue { float, float, float, float } %1359, 3, !dbg !50
  %1364 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1285, float %1286, float %1287, float %1288, i32 %1230, i32 %1231, i32 %1232, i32 %1233, i32 %1133, i32 %1134) #2, !dbg !50
  %1365 = extractvalue { float, float, float, float } %1364, 0, !dbg !50
  %1366 = extractvalue { float, float, float, float } %1364, 1, !dbg !50
  %1367 = extractvalue { float, float, float, float } %1364, 2, !dbg !50
  %1368 = extractvalue { float, float, float, float } %1364, 3, !dbg !50
  %1369 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1290, float %1291, float %1292, float %1293, i32 %1230, i32 %1231, i32 %1232, i32 %1233, i32 %1140, i32 %1141) #2, !dbg !50
  %1370 = extractvalue { float, float, float, float } %1369, 0, !dbg !50
  %1371 = extractvalue { float, float, float, float } %1369, 1, !dbg !50
  %1372 = extractvalue { float, float, float, float } %1369, 2, !dbg !50
  %1373 = extractvalue { float, float, float, float } %1369, 3, !dbg !50
  %1374 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1295, float %1296, float %1297, float %1298, i32 %1230, i32 %1231, i32 %1232, i32 %1233, i32 %1147, i32 %1148) #2, !dbg !50
  %1375 = extractvalue { float, float, float, float } %1374, 0, !dbg !50
  %1376 = extractvalue { float, float, float, float } %1374, 1, !dbg !50
  %1377 = extractvalue { float, float, float, float } %1374, 2, !dbg !50
  %1378 = extractvalue { float, float, float, float } %1374, 3, !dbg !50
  %1379 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1300, float %1301, float %1302, float %1303, i32 %1230, i32 %1231, i32 %1232, i32 %1233, i32 %1154, i32 %1155) #2, !dbg !50
  %1380 = extractvalue { float, float, float, float } %1379, 0, !dbg !50
  %1381 = extractvalue { float, float, float, float } %1379, 1, !dbg !50
  %1382 = extractvalue { float, float, float, float } %1379, 2, !dbg !50
  %1383 = extractvalue { float, float, float, float } %1379, 3, !dbg !50
  %1384 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1305, float %1306, float %1307, float %1308, i32 %1230, i32 %1231, i32 %1232, i32 %1233, i32 %1161, i32 %1162) #2, !dbg !50
  %1385 = extractvalue { float, float, float, float } %1384, 0, !dbg !50
  %1386 = extractvalue { float, float, float, float } %1384, 1, !dbg !50
  %1387 = extractvalue { float, float, float, float } %1384, 2, !dbg !50
  %1388 = extractvalue { float, float, float, float } %1384, 3, !dbg !50
  %1389 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1310, float %1311, float %1312, float %1313, i32 %1230, i32 %1231, i32 %1232, i32 %1233, i32 %1168, i32 %1169) #2, !dbg !50
  %1390 = extractvalue { float, float, float, float } %1389, 0, !dbg !50
  %1391 = extractvalue { float, float, float, float } %1389, 1, !dbg !50
  %1392 = extractvalue { float, float, float, float } %1389, 2, !dbg !50
  %1393 = extractvalue { float, float, float, float } %1389, 3, !dbg !50
  %1394 = add nuw nsw i64 %331, 32, !dbg !51
  %1395 = add i32 %330, 1, !dbg !31
  %1396 = icmp sgt i32 %1395, 2, !dbg !31
  %1397 = select i1 %1396, i32 0, i32 %1395, !dbg !31
  %1398 = or disjoint i64 %1394, %53, !dbg !27
  %1399 = or disjoint i64 %1394, %54, !dbg !27
  %1400 = mul i64 %1398, %39, !dbg !27
  %1401 = mul i64 %1399, %39, !dbg !27
  %gep = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %1400, !dbg !27
  %gep363 = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %1401, !dbg !27
  %1402 = shl i32 %1397, 11, !dbg !27
  %1403 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %1402, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %1404 = getelementptr inbounds nuw half, ptr addrspace(3) %1403, i32 %187, !dbg !27
  %1405 = getelementptr inbounds nuw half, ptr addrspace(3) %1403, i32 %192, !dbg !27
  %1406 = select i1 %399, i32 16, i32 0, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1404, ptr addrspace(1) %gep, i32 %1406) #2, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1405, ptr addrspace(1) %gep363, i32 %1406) #2, !dbg !27
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !27
  %1407 = mul i64 %1398, %37, !dbg !30
  %1408 = mul i64 %1399, %37, !dbg !30
  %gep365 = getelementptr half, ptr addrspace(1) %invariant.gep364, i64 %1407, !dbg !30
  %gep367 = getelementptr half, ptr addrspace(1) %invariant.gep364, i64 %1408, !dbg !30
  %1409 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 28672), i32 %1402, !dbg !30
  %1410 = getelementptr inbounds nuw half, ptr addrspace(3) %1409, i32 %187, !dbg !30
  %1411 = getelementptr inbounds nuw half, ptr addrspace(3) %1409, i32 %192, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1410, ptr addrspace(1) %gep365, i32 %1406) #2, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1411, ptr addrspace(1) %gep367, i32 %1406) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %1412 = add nuw nsw i32 %396, 32, !dbg !31
  %1413 = icmp samesign ult i32 %396, 4064, !dbg !31
  br i1 %1413, label %328, label %1414, !dbg !31

1414:                                             ; preds = %__nv_exp2f.exit203
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %1415 = extractelement <4 x float> %1048, i64 0, !dbg !52
  %1416 = fcmp olt float %1415, 0x3810000000000000, !dbg !52
  %1417 = fmul float %1415, 0x4160000000000000, !dbg !52
  %.02.i = select i1 %1416, float %1417, float %1415, !dbg !52
  %i.i.0.i = select i1 %1416, float -2.300000e+01, float 0.000000e+00, !dbg !52
  %1418 = bitcast float %.02.i to i32, !dbg !52
  %1419 = add i32 %1418, -1060439283, !dbg !52
  %1420 = and i32 %1419, -8388608, !dbg !52
  %1421 = sub i32 %1418, %1420, !dbg !52
  %1422 = bitcast i32 %1421 to float, !dbg !52
  %1423 = sitofp i32 %1420 to float, !dbg !52
  %1424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not.i204 = icmp eq i32 %1424, 0, !dbg !52
  %1425 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1423, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !52
  %1426 = tail call float @llvm.nvvm.fma.rn.f(float %1423, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !52
  %.08.i = select i1 %.not.i204, float %1426, float %1425, !dbg !52
  %1427 = fadd float %1422, -1.000000e+00, !dbg !52
  %1428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not1.i = icmp eq i32 %1428, 0, !dbg !52
  %1429 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3FB8D64FE0000000, float %1427, float 0xBFC58FE600000000) #2, !dbg !52
  %1430 = tail call float @llvm.nvvm.fma.rn.f(float 0x3FB8D64FE0000000, float %1427, float 0xBFC58FE600000000) #2, !dbg !52
  %.010.i = select i1 %.not1.i, float %1430, float %1429, !dbg !52
  %1431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not2.i = icmp eq i32 %1431, 0, !dbg !52
  %1432 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %1427, float 0x3FC5F9E540000000) #2, !dbg !52
  %1433 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %1427, float 0x3FC5F9E540000000) #2, !dbg !52
  %.011.i = select i1 %.not2.i, float %1433, float %1432, !dbg !52
  %1434 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not3.i = icmp eq i32 %1434, 0, !dbg !52
  %1435 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %1427, float 0xBFC6E9C860000000) #2, !dbg !52
  %1436 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %1427, float 0xBFC6E9C860000000) #2, !dbg !52
  %.012.i = select i1 %.not3.i, float %1436, float %1435, !dbg !52
  %1437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not4.i = icmp eq i32 %1437, 0, !dbg !52
  %1438 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %1427, float 0x3FCA417E80000000) #2, !dbg !52
  %1439 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %1427, float 0x3FCA417E80000000) #2, !dbg !52
  %.09.i = select i1 %.not4.i, float %1439, float %1438, !dbg !52
  %1440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not5.i = icmp eq i32 %1440, 0, !dbg !52
  %1441 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %1427, float 0xBFCEC79160000000) #2, !dbg !52
  %1442 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %1427, float 0xBFCEC79160000000) #2, !dbg !52
  %.05.i = select i1 %.not5.i, float %1442, float %1441, !dbg !52
  %1443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not6.i = icmp eq i32 %1443, 0, !dbg !52
  %1444 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %1427, float 0x3FD277F320000000) #2, !dbg !52
  %1445 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %1427, float 0x3FD277F320000000) #2, !dbg !52
  %.01.i = select i1 %.not6.i, float %1445, float %1444, !dbg !52
  %1446 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not7.i = icmp eq i32 %1446, 0, !dbg !52
  %1447 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %1427, float 0xBFD7154920000000) #2, !dbg !52
  %1448 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %1427, float 0xBFD7154920000000) #2, !dbg !52
  %.0.i205 = select i1 %.not7.i, float %1448, float %1447, !dbg !52
  %1449 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not8.i = icmp eq i32 %1449, 0, !dbg !52
  %1450 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i205, float %1427, float 0x3FDEC70940000000) #2, !dbg !52
  %1451 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i205, float %1427, float 0x3FDEC70940000000) #2, !dbg !52
  %.07.i = select i1 %.not8.i, float %1451, float %1450, !dbg !52
  %1452 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not9.i = icmp eq i32 %1452, 0, !dbg !52
  %1453 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %1427, float 0xBFE7154760000000) #2, !dbg !52
  %1454 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %1427, float 0xBFE7154760000000) #2, !dbg !52
  %.06.i = select i1 %.not9.i, float %1454, float %1453, !dbg !52
  %1455 = fmul float %1427, %.06.i, !dbg !52
  %1456 = fmul float %1427, %1455, !dbg !52
  %1457 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not10.i = icmp eq i32 %1457, 0, !dbg !52
  %1458 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1427, float 0x3FF7154760000000, float %1456) #2, !dbg !52
  %1459 = tail call float @llvm.nvvm.fma.rn.f(float %1427, float 0x3FF7154760000000, float %1456) #2, !dbg !52
  %.04.i = select i1 %.not10.i, float %1459, float %1458, !dbg !52
  %1460 = fadd float %.08.i, %.04.i, !dbg !52
  %1461 = icmp ugt i32 %1418, 2139095039, !dbg !52
  br i1 %1461, label %__nv_fmaf_rn.exit.i.i, label %__nv_log2f.exit, !dbg !52

__nv_fmaf_rn.exit.i.i:                            ; preds = %1414
  %1462 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not11.i = icmp eq i32 %1462, 0, !dbg !52
  %1463 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %1464 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %.03.i = select i1 %.not11.i, float %1464, float %1463, !dbg !52
  br label %__nv_log2f.exit, !dbg !52

__nv_log2f.exit:                                  ; preds = %1414, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %1460, %1414 ], !dbg !52
  %1465 = extractelement <4 x float> %1048, i64 1, !dbg !52
  %1466 = fcmp olt float %1465, 0x3810000000000000, !dbg !52
  %1467 = fmul float %1465, 0x4160000000000000, !dbg !52
  %.02.i206 = select i1 %1466, float %1467, float %1465, !dbg !52
  %i.i.0.i207 = select i1 %1466, float -2.300000e+01, float 0.000000e+00, !dbg !52
  %1468 = bitcast float %.02.i206 to i32, !dbg !52
  %1469 = add i32 %1468, -1060439283, !dbg !52
  %1470 = and i32 %1469, -8388608, !dbg !52
  %1471 = sub i32 %1468, %1470, !dbg !52
  %1472 = bitcast i32 %1471 to float, !dbg !52
  %1473 = sitofp i32 %1470 to float, !dbg !52
  %1474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not.i208 = icmp eq i32 %1474, 0, !dbg !52
  %1475 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1473, float 0x3E80000000000000, float %i.i.0.i207) #2, !dbg !52
  %1476 = tail call float @llvm.nvvm.fma.rn.f(float %1473, float 0x3E80000000000000, float %i.i.0.i207) #2, !dbg !52
  %.08.i209 = select i1 %.not.i208, float %1476, float %1475, !dbg !52
  %1477 = fadd float %1472, -1.000000e+00, !dbg !52
  %1478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not1.i210 = icmp eq i32 %1478, 0, !dbg !52
  %1479 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3FB8D64FE0000000, float %1477, float 0xBFC58FE600000000) #2, !dbg !52
  %1480 = tail call float @llvm.nvvm.fma.rn.f(float 0x3FB8D64FE0000000, float %1477, float 0xBFC58FE600000000) #2, !dbg !52
  %.010.i211 = select i1 %.not1.i210, float %1480, float %1479, !dbg !52
  %1481 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not2.i212 = icmp eq i32 %1481, 0, !dbg !52
  %1482 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i211, float %1477, float 0x3FC5F9E540000000) #2, !dbg !52
  %1483 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i211, float %1477, float 0x3FC5F9E540000000) #2, !dbg !52
  %.011.i213 = select i1 %.not2.i212, float %1483, float %1482, !dbg !52
  %1484 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not3.i214 = icmp eq i32 %1484, 0, !dbg !52
  %1485 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i213, float %1477, float 0xBFC6E9C860000000) #2, !dbg !52
  %1486 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i213, float %1477, float 0xBFC6E9C860000000) #2, !dbg !52
  %.012.i215 = select i1 %.not3.i214, float %1486, float %1485, !dbg !52
  %1487 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not4.i216 = icmp eq i32 %1487, 0, !dbg !52
  %1488 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i215, float %1477, float 0x3FCA417E80000000) #2, !dbg !52
  %1489 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i215, float %1477, float 0x3FCA417E80000000) #2, !dbg !52
  %.09.i217 = select i1 %.not4.i216, float %1489, float %1488, !dbg !52
  %1490 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not5.i218 = icmp eq i32 %1490, 0, !dbg !52
  %1491 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i217, float %1477, float 0xBFCEC79160000000) #2, !dbg !52
  %1492 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i217, float %1477, float 0xBFCEC79160000000) #2, !dbg !52
  %.05.i219 = select i1 %.not5.i218, float %1492, float %1491, !dbg !52
  %1493 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not6.i220 = icmp eq i32 %1493, 0, !dbg !52
  %1494 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i219, float %1477, float 0x3FD277F320000000) #2, !dbg !52
  %1495 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i219, float %1477, float 0x3FD277F320000000) #2, !dbg !52
  %.01.i221 = select i1 %.not6.i220, float %1495, float %1494, !dbg !52
  %1496 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not7.i222 = icmp eq i32 %1496, 0, !dbg !52
  %1497 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i221, float %1477, float 0xBFD7154920000000) #2, !dbg !52
  %1498 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i221, float %1477, float 0xBFD7154920000000) #2, !dbg !52
  %.0.i223 = select i1 %.not7.i222, float %1498, float %1497, !dbg !52
  %1499 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not8.i224 = icmp eq i32 %1499, 0, !dbg !52
  %1500 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i223, float %1477, float 0x3FDEC70940000000) #2, !dbg !52
  %1501 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i223, float %1477, float 0x3FDEC70940000000) #2, !dbg !52
  %.07.i225 = select i1 %.not8.i224, float %1501, float %1500, !dbg !52
  %1502 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not9.i226 = icmp eq i32 %1502, 0, !dbg !52
  %1503 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i225, float %1477, float 0xBFE7154760000000) #2, !dbg !52
  %1504 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i225, float %1477, float 0xBFE7154760000000) #2, !dbg !52
  %.06.i227 = select i1 %.not9.i226, float %1504, float %1503, !dbg !52
  %1505 = fmul float %1477, %.06.i227, !dbg !52
  %1506 = fmul float %1477, %1505, !dbg !52
  %1507 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not10.i228 = icmp eq i32 %1507, 0, !dbg !52
  %1508 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1477, float 0x3FF7154760000000, float %1506) #2, !dbg !52
  %1509 = tail call float @llvm.nvvm.fma.rn.f(float %1477, float 0x3FF7154760000000, float %1506) #2, !dbg !52
  %.04.i229 = select i1 %.not10.i228, float %1509, float %1508, !dbg !52
  %1510 = fadd float %.08.i209, %.04.i229, !dbg !52
  %1511 = icmp ugt i32 %1468, 2139095039, !dbg !52
  br i1 %1511, label %__nv_fmaf_rn.exit.i.i232, label %__nv_log2f.exit235, !dbg !52

__nv_fmaf_rn.exit.i.i232:                         ; preds = %__nv_log2f.exit
  %1512 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not11.i233 = icmp eq i32 %1512, 0, !dbg !52
  %1513 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i206, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %1514 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i206, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %.03.i234 = select i1 %.not11.i233, float %1514, float %1513, !dbg !52
  br label %__nv_log2f.exit235, !dbg !52

__nv_log2f.exit235:                               ; preds = %__nv_log2f.exit, %__nv_fmaf_rn.exit.i.i232
  %r.i.0.i230 = phi float [ %.03.i234, %__nv_fmaf_rn.exit.i.i232 ], [ %1510, %__nv_log2f.exit ], !dbg !52
  %1515 = extractelement <4 x float> %1048, i64 2, !dbg !52
  %1516 = fcmp olt float %1515, 0x3810000000000000, !dbg !52
  %1517 = fmul float %1515, 0x4160000000000000, !dbg !52
  %.02.i236 = select i1 %1516, float %1517, float %1515, !dbg !52
  %i.i.0.i237 = select i1 %1516, float -2.300000e+01, float 0.000000e+00, !dbg !52
  %1518 = bitcast float %.02.i236 to i32, !dbg !52
  %1519 = add i32 %1518, -1060439283, !dbg !52
  %1520 = and i32 %1519, -8388608, !dbg !52
  %1521 = sub i32 %1518, %1520, !dbg !52
  %1522 = bitcast i32 %1521 to float, !dbg !52
  %1523 = sitofp i32 %1520 to float, !dbg !52
  %1524 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not.i238 = icmp eq i32 %1524, 0, !dbg !52
  %1525 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1523, float 0x3E80000000000000, float %i.i.0.i237) #2, !dbg !52
  %1526 = tail call float @llvm.nvvm.fma.rn.f(float %1523, float 0x3E80000000000000, float %i.i.0.i237) #2, !dbg !52
  %.08.i239 = select i1 %.not.i238, float %1526, float %1525, !dbg !52
  %1527 = fadd float %1522, -1.000000e+00, !dbg !52
  %1528 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not1.i240 = icmp eq i32 %1528, 0, !dbg !52
  %1529 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3FB8D64FE0000000, float %1527, float 0xBFC58FE600000000) #2, !dbg !52
  %1530 = tail call float @llvm.nvvm.fma.rn.f(float 0x3FB8D64FE0000000, float %1527, float 0xBFC58FE600000000) #2, !dbg !52
  %.010.i241 = select i1 %.not1.i240, float %1530, float %1529, !dbg !52
  %1531 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not2.i242 = icmp eq i32 %1531, 0, !dbg !52
  %1532 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i241, float %1527, float 0x3FC5F9E540000000) #2, !dbg !52
  %1533 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i241, float %1527, float 0x3FC5F9E540000000) #2, !dbg !52
  %.011.i243 = select i1 %.not2.i242, float %1533, float %1532, !dbg !52
  %1534 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not3.i244 = icmp eq i32 %1534, 0, !dbg !52
  %1535 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i243, float %1527, float 0xBFC6E9C860000000) #2, !dbg !52
  %1536 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i243, float %1527, float 0xBFC6E9C860000000) #2, !dbg !52
  %.012.i245 = select i1 %.not3.i244, float %1536, float %1535, !dbg !52
  %1537 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not4.i246 = icmp eq i32 %1537, 0, !dbg !52
  %1538 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i245, float %1527, float 0x3FCA417E80000000) #2, !dbg !52
  %1539 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i245, float %1527, float 0x3FCA417E80000000) #2, !dbg !52
  %.09.i247 = select i1 %.not4.i246, float %1539, float %1538, !dbg !52
  %1540 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not5.i248 = icmp eq i32 %1540, 0, !dbg !52
  %1541 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i247, float %1527, float 0xBFCEC79160000000) #2, !dbg !52
  %1542 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i247, float %1527, float 0xBFCEC79160000000) #2, !dbg !52
  %.05.i249 = select i1 %.not5.i248, float %1542, float %1541, !dbg !52
  %1543 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not6.i250 = icmp eq i32 %1543, 0, !dbg !52
  %1544 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i249, float %1527, float 0x3FD277F320000000) #2, !dbg !52
  %1545 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i249, float %1527, float 0x3FD277F320000000) #2, !dbg !52
  %.01.i251 = select i1 %.not6.i250, float %1545, float %1544, !dbg !52
  %1546 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not7.i252 = icmp eq i32 %1546, 0, !dbg !52
  %1547 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i251, float %1527, float 0xBFD7154920000000) #2, !dbg !52
  %1548 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i251, float %1527, float 0xBFD7154920000000) #2, !dbg !52
  %.0.i253 = select i1 %.not7.i252, float %1548, float %1547, !dbg !52
  %1549 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not8.i254 = icmp eq i32 %1549, 0, !dbg !52
  %1550 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i253, float %1527, float 0x3FDEC70940000000) #2, !dbg !52
  %1551 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i253, float %1527, float 0x3FDEC70940000000) #2, !dbg !52
  %.07.i255 = select i1 %.not8.i254, float %1551, float %1550, !dbg !52
  %1552 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not9.i256 = icmp eq i32 %1552, 0, !dbg !52
  %1553 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i255, float %1527, float 0xBFE7154760000000) #2, !dbg !52
  %1554 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i255, float %1527, float 0xBFE7154760000000) #2, !dbg !52
  %.06.i257 = select i1 %.not9.i256, float %1554, float %1553, !dbg !52
  %1555 = fmul float %1527, %.06.i257, !dbg !52
  %1556 = fmul float %1527, %1555, !dbg !52
  %1557 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not10.i258 = icmp eq i32 %1557, 0, !dbg !52
  %1558 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1527, float 0x3FF7154760000000, float %1556) #2, !dbg !52
  %1559 = tail call float @llvm.nvvm.fma.rn.f(float %1527, float 0x3FF7154760000000, float %1556) #2, !dbg !52
  %.04.i259 = select i1 %.not10.i258, float %1559, float %1558, !dbg !52
  %1560 = fadd float %.08.i239, %.04.i259, !dbg !52
  %1561 = icmp ugt i32 %1518, 2139095039, !dbg !52
  br i1 %1561, label %__nv_fmaf_rn.exit.i.i262, label %__nv_log2f.exit265, !dbg !52

__nv_fmaf_rn.exit.i.i262:                         ; preds = %__nv_log2f.exit235
  %1562 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not11.i263 = icmp eq i32 %1562, 0, !dbg !52
  %1563 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i236, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %1564 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i236, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %.03.i264 = select i1 %.not11.i263, float %1564, float %1563, !dbg !52
  br label %__nv_log2f.exit265, !dbg !52

__nv_log2f.exit265:                               ; preds = %__nv_log2f.exit235, %__nv_fmaf_rn.exit.i.i262
  %r.i.0.i260 = phi float [ %.03.i264, %__nv_fmaf_rn.exit.i.i262 ], [ %1560, %__nv_log2f.exit235 ], !dbg !52
  %1565 = extractelement <4 x float> %1048, i64 3, !dbg !52
  %1566 = fcmp olt float %1565, 0x3810000000000000, !dbg !52
  %1567 = fmul float %1565, 0x4160000000000000, !dbg !52
  %.02.i266 = select i1 %1566, float %1567, float %1565, !dbg !52
  %i.i.0.i267 = select i1 %1566, float -2.300000e+01, float 0.000000e+00, !dbg !52
  %1568 = bitcast float %.02.i266 to i32, !dbg !52
  %1569 = add i32 %1568, -1060439283, !dbg !52
  %1570 = and i32 %1569, -8388608, !dbg !52
  %1571 = sub i32 %1568, %1570, !dbg !52
  %1572 = bitcast i32 %1571 to float, !dbg !52
  %1573 = sitofp i32 %1570 to float, !dbg !52
  %1574 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not.i268 = icmp eq i32 %1574, 0, !dbg !52
  %1575 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1573, float 0x3E80000000000000, float %i.i.0.i267) #2, !dbg !52
  %1576 = tail call float @llvm.nvvm.fma.rn.f(float %1573, float 0x3E80000000000000, float %i.i.0.i267) #2, !dbg !52
  %.08.i269 = select i1 %.not.i268, float %1576, float %1575, !dbg !52
  %1577 = fadd float %1572, -1.000000e+00, !dbg !52
  %1578 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not1.i270 = icmp eq i32 %1578, 0, !dbg !52
  %1579 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3FB8D64FE0000000, float %1577, float 0xBFC58FE600000000) #2, !dbg !52
  %1580 = tail call float @llvm.nvvm.fma.rn.f(float 0x3FB8D64FE0000000, float %1577, float 0xBFC58FE600000000) #2, !dbg !52
  %.010.i271 = select i1 %.not1.i270, float %1580, float %1579, !dbg !52
  %1581 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not2.i272 = icmp eq i32 %1581, 0, !dbg !52
  %1582 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i271, float %1577, float 0x3FC5F9E540000000) #2, !dbg !52
  %1583 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i271, float %1577, float 0x3FC5F9E540000000) #2, !dbg !52
  %.011.i273 = select i1 %.not2.i272, float %1583, float %1582, !dbg !52
  %1584 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not3.i274 = icmp eq i32 %1584, 0, !dbg !52
  %1585 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i273, float %1577, float 0xBFC6E9C860000000) #2, !dbg !52
  %1586 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i273, float %1577, float 0xBFC6E9C860000000) #2, !dbg !52
  %.012.i275 = select i1 %.not3.i274, float %1586, float %1585, !dbg !52
  %1587 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not4.i276 = icmp eq i32 %1587, 0, !dbg !52
  %1588 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i275, float %1577, float 0x3FCA417E80000000) #2, !dbg !52
  %1589 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i275, float %1577, float 0x3FCA417E80000000) #2, !dbg !52
  %.09.i277 = select i1 %.not4.i276, float %1589, float %1588, !dbg !52
  %1590 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not5.i278 = icmp eq i32 %1590, 0, !dbg !52
  %1591 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i277, float %1577, float 0xBFCEC79160000000) #2, !dbg !52
  %1592 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i277, float %1577, float 0xBFCEC79160000000) #2, !dbg !52
  %.05.i279 = select i1 %.not5.i278, float %1592, float %1591, !dbg !52
  %1593 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not6.i280 = icmp eq i32 %1593, 0, !dbg !52
  %1594 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i279, float %1577, float 0x3FD277F320000000) #2, !dbg !52
  %1595 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i279, float %1577, float 0x3FD277F320000000) #2, !dbg !52
  %.01.i281 = select i1 %.not6.i280, float %1595, float %1594, !dbg !52
  %1596 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not7.i282 = icmp eq i32 %1596, 0, !dbg !52
  %1597 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i281, float %1577, float 0xBFD7154920000000) #2, !dbg !52
  %1598 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i281, float %1577, float 0xBFD7154920000000) #2, !dbg !52
  %.0.i283 = select i1 %.not7.i282, float %1598, float %1597, !dbg !52
  %1599 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not8.i284 = icmp eq i32 %1599, 0, !dbg !52
  %1600 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i283, float %1577, float 0x3FDEC70940000000) #2, !dbg !52
  %1601 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i283, float %1577, float 0x3FDEC70940000000) #2, !dbg !52
  %.07.i285 = select i1 %.not8.i284, float %1601, float %1600, !dbg !52
  %1602 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not9.i286 = icmp eq i32 %1602, 0, !dbg !52
  %1603 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i285, float %1577, float 0xBFE7154760000000) #2, !dbg !52
  %1604 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i285, float %1577, float 0xBFE7154760000000) #2, !dbg !52
  %.06.i287 = select i1 %.not9.i286, float %1604, float %1603, !dbg !52
  %1605 = fmul float %1577, %.06.i287, !dbg !52
  %1606 = fmul float %1577, %1605, !dbg !52
  %1607 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not10.i288 = icmp eq i32 %1607, 0, !dbg !52
  %1608 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1577, float 0x3FF7154760000000, float %1606) #2, !dbg !52
  %1609 = tail call float @llvm.nvvm.fma.rn.f(float %1577, float 0x3FF7154760000000, float %1606) #2, !dbg !52
  %.04.i289 = select i1 %.not10.i288, float %1609, float %1608, !dbg !52
  %1610 = fadd float %.08.i269, %.04.i289, !dbg !52
  %1611 = icmp ugt i32 %1568, 2139095039, !dbg !52
  br i1 %1611, label %__nv_fmaf_rn.exit.i.i292, label %__nv_log2f.exit295, !dbg !52

__nv_fmaf_rn.exit.i.i292:                         ; preds = %__nv_log2f.exit265
  %1612 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not11.i293 = icmp eq i32 %1612, 0, !dbg !52
  %1613 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i266, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %1614 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i266, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %.03.i294 = select i1 %.not11.i293, float %1614, float %1613, !dbg !52
  br label %__nv_log2f.exit295, !dbg !52

__nv_log2f.exit295:                               ; preds = %__nv_log2f.exit265, %__nv_fmaf_rn.exit.i.i292
  %r.i.0.i290 = phi float [ %.03.i294, %__nv_fmaf_rn.exit.i.i292 ], [ %1610, %__nv_log2f.exit265 ], !dbg !52
  %1615 = fcmp oeq float %.02.i236, 0.000000e+00, !dbg !52
  %r.i.1.i261 = select i1 %1615, float 0xFFF0000000000000, float %r.i.0.i260, !dbg !52
  %1616 = fcmp oeq float %.02.i206, 0.000000e+00, !dbg !52
  %r.i.1.i231 = select i1 %1616, float 0xFFF0000000000000, float %r.i.0.i230, !dbg !52
  %1617 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !52
  %r.i.1.i = select i1 %1617, float 0xFFF0000000000000, float %r.i.0.i, !dbg !52
  %1618 = getelementptr half, ptr addrspace(1) %5, i64 %31, !dbg !53
  %1619 = sext i32 %17 to i64, !dbg !54
  %1620 = and i32 %40, 127, !dbg !24
  %1621 = or disjoint i32 %33, %1620, !dbg !55
  %1622 = fcmp oeq float %.02.i266, 0.000000e+00, !dbg !52
  %r.i.1.i291 = select i1 %1622, float 0xFFF0000000000000, float %r.i.0.i290, !dbg !52
  %1623 = fadd float %757, %r.i.1.i, !dbg !56
  %1624 = fadd float %760, %r.i.1.i231, !dbg !56
  %1625 = fadd float %775, %r.i.1.i261, !dbg !56
  %1626 = fadd float %778, %r.i.1.i291, !dbg !56
  %1627 = tail call float @llvm.nvvm.div.full(float %1315, float %1415), !dbg !57
  %1628 = tail call float @llvm.nvvm.div.full(float %1316, float %1415), !dbg !57
  %1629 = tail call float @llvm.nvvm.div.full(float %1317, float %1465), !dbg !57
  %1630 = tail call float @llvm.nvvm.div.full(float %1318, float %1465), !dbg !57
  %1631 = tail call float @llvm.nvvm.div.full(float %1320, float %1415), !dbg !57
  %1632 = tail call float @llvm.nvvm.div.full(float %1321, float %1415), !dbg !57
  %1633 = tail call float @llvm.nvvm.div.full(float %1322, float %1465), !dbg !57
  %1634 = tail call float @llvm.nvvm.div.full(float %1323, float %1465), !dbg !57
  %1635 = tail call float @llvm.nvvm.div.full(float %1325, float %1415), !dbg !57
  %1636 = tail call float @llvm.nvvm.div.full(float %1326, float %1415), !dbg !57
  %1637 = tail call float @llvm.nvvm.div.full(float %1327, float %1465), !dbg !57
  %1638 = tail call float @llvm.nvvm.div.full(float %1328, float %1465), !dbg !57
  %1639 = tail call float @llvm.nvvm.div.full(float %1330, float %1415), !dbg !57
  %1640 = tail call float @llvm.nvvm.div.full(float %1331, float %1415), !dbg !57
  %1641 = tail call float @llvm.nvvm.div.full(float %1332, float %1465), !dbg !57
  %1642 = tail call float @llvm.nvvm.div.full(float %1333, float %1465), !dbg !57
  %1643 = tail call float @llvm.nvvm.div.full(float %1335, float %1415), !dbg !57
  %1644 = tail call float @llvm.nvvm.div.full(float %1336, float %1415), !dbg !57
  %1645 = tail call float @llvm.nvvm.div.full(float %1337, float %1465), !dbg !57
  %1646 = tail call float @llvm.nvvm.div.full(float %1338, float %1465), !dbg !57
  %1647 = tail call float @llvm.nvvm.div.full(float %1340, float %1415), !dbg !57
  %1648 = tail call float @llvm.nvvm.div.full(float %1341, float %1415), !dbg !57
  %1649 = tail call float @llvm.nvvm.div.full(float %1342, float %1465), !dbg !57
  %1650 = tail call float @llvm.nvvm.div.full(float %1343, float %1465), !dbg !57
  %1651 = tail call float @llvm.nvvm.div.full(float %1345, float %1415), !dbg !57
  %1652 = tail call float @llvm.nvvm.div.full(float %1346, float %1415), !dbg !57
  %1653 = tail call float @llvm.nvvm.div.full(float %1347, float %1465), !dbg !57
  %1654 = tail call float @llvm.nvvm.div.full(float %1348, float %1465), !dbg !57
  %1655 = tail call float @llvm.nvvm.div.full(float %1350, float %1415), !dbg !57
  %1656 = tail call float @llvm.nvvm.div.full(float %1351, float %1415), !dbg !57
  %1657 = tail call float @llvm.nvvm.div.full(float %1352, float %1465), !dbg !57
  %1658 = tail call float @llvm.nvvm.div.full(float %1353, float %1465), !dbg !57
  %1659 = tail call float @llvm.nvvm.div.full(float %1355, float %1515), !dbg !57
  %1660 = tail call float @llvm.nvvm.div.full(float %1356, float %1515), !dbg !57
  %1661 = tail call float @llvm.nvvm.div.full(float %1357, float %1565), !dbg !57
  %1662 = tail call float @llvm.nvvm.div.full(float %1358, float %1565), !dbg !57
  %1663 = tail call float @llvm.nvvm.div.full(float %1360, float %1515), !dbg !57
  %1664 = tail call float @llvm.nvvm.div.full(float %1361, float %1515), !dbg !57
  %1665 = tail call float @llvm.nvvm.div.full(float %1362, float %1565), !dbg !57
  %1666 = tail call float @llvm.nvvm.div.full(float %1363, float %1565), !dbg !57
  %1667 = tail call float @llvm.nvvm.div.full(float %1365, float %1515), !dbg !57
  %1668 = tail call float @llvm.nvvm.div.full(float %1366, float %1515), !dbg !57
  %1669 = tail call float @llvm.nvvm.div.full(float %1367, float %1565), !dbg !57
  %1670 = tail call float @llvm.nvvm.div.full(float %1368, float %1565), !dbg !57
  %1671 = tail call float @llvm.nvvm.div.full(float %1370, float %1515), !dbg !57
  %1672 = tail call float @llvm.nvvm.div.full(float %1371, float %1515), !dbg !57
  %1673 = tail call float @llvm.nvvm.div.full(float %1372, float %1565), !dbg !57
  %1674 = tail call float @llvm.nvvm.div.full(float %1373, float %1565), !dbg !57
  %1675 = tail call float @llvm.nvvm.div.full(float %1375, float %1515), !dbg !57
  %1676 = tail call float @llvm.nvvm.div.full(float %1376, float %1515), !dbg !57
  %1677 = tail call float @llvm.nvvm.div.full(float %1377, float %1565), !dbg !57
  %1678 = tail call float @llvm.nvvm.div.full(float %1378, float %1565), !dbg !57
  %1679 = tail call float @llvm.nvvm.div.full(float %1380, float %1515), !dbg !57
  %1680 = tail call float @llvm.nvvm.div.full(float %1381, float %1515), !dbg !57
  %1681 = tail call float @llvm.nvvm.div.full(float %1382, float %1565), !dbg !57
  %1682 = tail call float @llvm.nvvm.div.full(float %1383, float %1565), !dbg !57
  %1683 = tail call float @llvm.nvvm.div.full(float %1385, float %1515), !dbg !57
  %1684 = tail call float @llvm.nvvm.div.full(float %1386, float %1515), !dbg !57
  %1685 = tail call float @llvm.nvvm.div.full(float %1387, float %1565), !dbg !57
  %1686 = tail call float @llvm.nvvm.div.full(float %1388, float %1565), !dbg !57
  %1687 = tail call float @llvm.nvvm.div.full(float %1390, float %1515), !dbg !57
  %1688 = tail call float @llvm.nvvm.div.full(float %1391, float %1515), !dbg !57
  %1689 = tail call float @llvm.nvvm.div.full(float %1392, float %1565), !dbg !57
  %1690 = tail call float @llvm.nvvm.div.full(float %1393, float %1565), !dbg !57
  %1691 = shl nuw nsw i32 %22, 5, !dbg !58
  %1692 = zext nneg i32 %1691 to i64, !dbg !59
  %1693 = getelementptr float, ptr addrspace(1) %4, i64 %1692, !dbg !59
  %1694 = sext i32 %1621 to i64, !dbg !60
  %1695 = getelementptr float, ptr addrspace(1) %1693, i64 %1694, !dbg !60
  %1696 = lshr i32 %40, 2, !dbg !61
  %1697 = and i32 %1696, 7, !dbg !61
  %1698 = lshr i32 %40, 1, !dbg !61
  %1699 = and i32 %1698, 48, !dbg !61
  %1700 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1699, !dbg !61
  %1701 = getelementptr inbounds nuw float, ptr addrspace(3) %1700, i32 %1697, !dbg !61
  store float %1623, ptr addrspace(3) %1701, align 4, !dbg !61
  %1702 = getelementptr inbounds nuw i8, ptr addrspace(3) %1701, i32 32, !dbg !61
  store float %1624, ptr addrspace(3) %1702, align 4, !dbg !61
  %1703 = getelementptr inbounds nuw i8, ptr addrspace(3) %1701, i32 256, !dbg !61
  store float %1625, ptr addrspace(3) %1703, align 4, !dbg !61
  %1704 = getelementptr inbounds nuw i8, ptr addrspace(3) %1701, i32 288, !dbg !61
  store float %1626, ptr addrspace(3) %1704, align 4, !dbg !61
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !61
  %1705 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1620, !dbg !61
  %1706 = load i32, ptr addrspace(3) %1705, align 4, !dbg !61
  tail call void asm sideeffect "st.global.b32 [ $1 + 0 ], { $0 };", "r,l"(i32 %1706, ptr addrspace(1) %1695) #2, !dbg !61
  %1707 = insertelement <2 x float> poison, float %1627, i64 0, !dbg !62
  %1708 = insertelement <2 x float> %1707, float %1628, i64 1, !dbg !62
  %1709 = fptrunc <2 x float> %1708 to <2 x half>, !dbg !62
  %1710 = insertelement <2 x float> poison, float %1629, i64 0, !dbg !62
  %1711 = insertelement <2 x float> %1710, float %1630, i64 1, !dbg !62
  %1712 = fptrunc <2 x float> %1711 to <2 x half>, !dbg !62
  %1713 = insertelement <2 x float> poison, float %1631, i64 0, !dbg !62
  %1714 = insertelement <2 x float> %1713, float %1632, i64 1, !dbg !62
  %1715 = fptrunc <2 x float> %1714 to <2 x half>, !dbg !62
  %1716 = insertelement <2 x float> poison, float %1633, i64 0, !dbg !62
  %1717 = insertelement <2 x float> %1716, float %1634, i64 1, !dbg !62
  %1718 = fptrunc <2 x float> %1717 to <2 x half>, !dbg !62
  %1719 = insertelement <2 x float> poison, float %1635, i64 0, !dbg !62
  %1720 = insertelement <2 x float> %1719, float %1636, i64 1, !dbg !62
  %1721 = fptrunc <2 x float> %1720 to <2 x half>, !dbg !62
  %1722 = insertelement <2 x float> poison, float %1637, i64 0, !dbg !62
  %1723 = insertelement <2 x float> %1722, float %1638, i64 1, !dbg !62
  %1724 = fptrunc <2 x float> %1723 to <2 x half>, !dbg !62
  %1725 = insertelement <2 x float> poison, float %1639, i64 0, !dbg !62
  %1726 = insertelement <2 x float> %1725, float %1640, i64 1, !dbg !62
  %1727 = fptrunc <2 x float> %1726 to <2 x half>, !dbg !62
  %1728 = insertelement <2 x float> poison, float %1641, i64 0, !dbg !62
  %1729 = insertelement <2 x float> %1728, float %1642, i64 1, !dbg !62
  %1730 = fptrunc <2 x float> %1729 to <2 x half>, !dbg !62
  %1731 = insertelement <2 x float> poison, float %1643, i64 0, !dbg !62
  %1732 = insertelement <2 x float> %1731, float %1644, i64 1, !dbg !62
  %1733 = fptrunc <2 x float> %1732 to <2 x half>, !dbg !62
  %1734 = insertelement <2 x float> poison, float %1645, i64 0, !dbg !62
  %1735 = insertelement <2 x float> %1734, float %1646, i64 1, !dbg !62
  %1736 = fptrunc <2 x float> %1735 to <2 x half>, !dbg !62
  %1737 = insertelement <2 x float> poison, float %1647, i64 0, !dbg !62
  %1738 = insertelement <2 x float> %1737, float %1648, i64 1, !dbg !62
  %1739 = fptrunc <2 x float> %1738 to <2 x half>, !dbg !62
  %1740 = insertelement <2 x float> poison, float %1649, i64 0, !dbg !62
  %1741 = insertelement <2 x float> %1740, float %1650, i64 1, !dbg !62
  %1742 = fptrunc <2 x float> %1741 to <2 x half>, !dbg !62
  %1743 = insertelement <2 x float> poison, float %1651, i64 0, !dbg !62
  %1744 = insertelement <2 x float> %1743, float %1652, i64 1, !dbg !62
  %1745 = fptrunc <2 x float> %1744 to <2 x half>, !dbg !62
  %1746 = insertelement <2 x float> poison, float %1653, i64 0, !dbg !62
  %1747 = insertelement <2 x float> %1746, float %1654, i64 1, !dbg !62
  %1748 = fptrunc <2 x float> %1747 to <2 x half>, !dbg !62
  %1749 = insertelement <2 x float> poison, float %1655, i64 0, !dbg !62
  %1750 = insertelement <2 x float> %1749, float %1656, i64 1, !dbg !62
  %1751 = fptrunc <2 x float> %1750 to <2 x half>, !dbg !62
  %1752 = insertelement <2 x float> poison, float %1657, i64 0, !dbg !62
  %1753 = insertelement <2 x float> %1752, float %1658, i64 1, !dbg !62
  %1754 = fptrunc <2 x float> %1753 to <2 x half>, !dbg !62
  %1755 = insertelement <2 x float> poison, float %1659, i64 0, !dbg !62
  %1756 = insertelement <2 x float> %1755, float %1660, i64 1, !dbg !62
  %1757 = fptrunc <2 x float> %1756 to <2 x half>, !dbg !62
  %1758 = insertelement <2 x float> poison, float %1661, i64 0, !dbg !62
  %1759 = insertelement <2 x float> %1758, float %1662, i64 1, !dbg !62
  %1760 = fptrunc <2 x float> %1759 to <2 x half>, !dbg !62
  %1761 = insertelement <2 x float> poison, float %1663, i64 0, !dbg !62
  %1762 = insertelement <2 x float> %1761, float %1664, i64 1, !dbg !62
  %1763 = fptrunc <2 x float> %1762 to <2 x half>, !dbg !62
  %1764 = insertelement <2 x float> poison, float %1665, i64 0, !dbg !62
  %1765 = insertelement <2 x float> %1764, float %1666, i64 1, !dbg !62
  %1766 = fptrunc <2 x float> %1765 to <2 x half>, !dbg !62
  %1767 = insertelement <2 x float> poison, float %1667, i64 0, !dbg !62
  %1768 = insertelement <2 x float> %1767, float %1668, i64 1, !dbg !62
  %1769 = fptrunc <2 x float> %1768 to <2 x half>, !dbg !62
  %1770 = insertelement <2 x float> poison, float %1669, i64 0, !dbg !62
  %1771 = insertelement <2 x float> %1770, float %1670, i64 1, !dbg !62
  %1772 = fptrunc <2 x float> %1771 to <2 x half>, !dbg !62
  %1773 = insertelement <2 x float> poison, float %1671, i64 0, !dbg !62
  %1774 = insertelement <2 x float> %1773, float %1672, i64 1, !dbg !62
  %1775 = fptrunc <2 x float> %1774 to <2 x half>, !dbg !62
  %1776 = insertelement <2 x float> poison, float %1673, i64 0, !dbg !62
  %1777 = insertelement <2 x float> %1776, float %1674, i64 1, !dbg !62
  %1778 = fptrunc <2 x float> %1777 to <2 x half>, !dbg !62
  %1779 = insertelement <2 x float> poison, float %1675, i64 0, !dbg !62
  %1780 = insertelement <2 x float> %1779, float %1676, i64 1, !dbg !62
  %1781 = fptrunc <2 x float> %1780 to <2 x half>, !dbg !62
  %1782 = insertelement <2 x float> poison, float %1677, i64 0, !dbg !62
  %1783 = insertelement <2 x float> %1782, float %1678, i64 1, !dbg !62
  %1784 = fptrunc <2 x float> %1783 to <2 x half>, !dbg !62
  %1785 = insertelement <2 x float> poison, float %1679, i64 0, !dbg !62
  %1786 = insertelement <2 x float> %1785, float %1680, i64 1, !dbg !62
  %1787 = fptrunc <2 x float> %1786 to <2 x half>, !dbg !62
  %1788 = insertelement <2 x float> poison, float %1681, i64 0, !dbg !62
  %1789 = insertelement <2 x float> %1788, float %1682, i64 1, !dbg !62
  %1790 = fptrunc <2 x float> %1789 to <2 x half>, !dbg !62
  %1791 = insertelement <2 x float> poison, float %1683, i64 0, !dbg !62
  %1792 = insertelement <2 x float> %1791, float %1684, i64 1, !dbg !62
  %1793 = fptrunc <2 x float> %1792 to <2 x half>, !dbg !62
  %1794 = insertelement <2 x float> poison, float %1685, i64 0, !dbg !62
  %1795 = insertelement <2 x float> %1794, float %1686, i64 1, !dbg !62
  %1796 = fptrunc <2 x float> %1795 to <2 x half>, !dbg !62
  %1797 = insertelement <2 x float> poison, float %1687, i64 0, !dbg !62
  %1798 = insertelement <2 x float> %1797, float %1688, i64 1, !dbg !62
  %1799 = fptrunc <2 x float> %1798 to <2 x half>, !dbg !62
  %1800 = insertelement <2 x float> poison, float %1689, i64 0, !dbg !62
  %1801 = insertelement <2 x float> %1800, float %1690, i64 1, !dbg !62
  %1802 = fptrunc <2 x float> %1801 to <2 x half>, !dbg !62
  %1803 = mul nsw i64 %61, %1619, !dbg !63
  %1804 = mul nsw i64 %62, %1619, !dbg !63
  %1805 = mul nsw i64 %63, %1619, !dbg !63
  %1806 = mul nsw i64 %64, %1619, !dbg !63
  %1807 = mul nsw i64 %65, %1619, !dbg !63
  %1808 = mul nsw i64 %66, %1619, !dbg !63
  %1809 = mul nsw i64 %67, %1619, !dbg !63
  %1810 = mul nsw i64 %68, %1619, !dbg !63
  %1811 = getelementptr half, ptr addrspace(1) %1618, i64 %1803, !dbg !63
  %1812 = getelementptr half, ptr addrspace(1) %1811, i64 %79, !dbg !63
  %1813 = getelementptr half, ptr addrspace(1) %1618, i64 %1804, !dbg !63
  %1814 = getelementptr half, ptr addrspace(1) %1813, i64 %79, !dbg !63
  %1815 = getelementptr half, ptr addrspace(1) %1618, i64 %1805, !dbg !63
  %1816 = getelementptr half, ptr addrspace(1) %1815, i64 %79, !dbg !63
  %1817 = getelementptr half, ptr addrspace(1) %1618, i64 %1806, !dbg !63
  %1818 = getelementptr half, ptr addrspace(1) %1817, i64 %79, !dbg !63
  %1819 = getelementptr half, ptr addrspace(1) %1618, i64 %1807, !dbg !63
  %1820 = getelementptr half, ptr addrspace(1) %1819, i64 %79, !dbg !63
  %1821 = getelementptr half, ptr addrspace(1) %1618, i64 %1808, !dbg !63
  %1822 = getelementptr half, ptr addrspace(1) %1821, i64 %79, !dbg !63
  %1823 = getelementptr half, ptr addrspace(1) %1618, i64 %1809, !dbg !63
  %1824 = getelementptr half, ptr addrspace(1) %1823, i64 %79, !dbg !63
  %1825 = getelementptr half, ptr addrspace(1) %1618, i64 %1810, !dbg !63
  %1826 = getelementptr half, ptr addrspace(1) %1825, i64 %79, !dbg !63
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !63
  %1827 = shl nuw nsw i32 %40, 1, !dbg !63
  %1828 = and i32 %1827, 6, !dbg !63
  %1829 = shl nuw nsw i32 %40, 4, !dbg !63
  %1830 = and i32 %1829, 192, !dbg !63
  %1831 = or disjoint i32 %1830, %1828, !dbg !63
  %1832 = shl nuw nsw i32 %41, 4, !dbg !63
  %1833 = or disjoint i32 %1831, %1832, !dbg !63
  %1834 = and i32 %284, 3072, !dbg !63
  %1835 = or disjoint i32 %1833, %1834, !dbg !63
  %1836 = and i32 %77, 1016, !dbg !63
  %1837 = lshr i32 %1835, 3, !dbg !63
  %1838 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1837, !dbg !63
  %1839 = getelementptr inbounds nuw half, ptr addrspace(3) %1838, i32 %1835, !dbg !63
  store <2 x half> %1709, ptr addrspace(3) %1839, align 4, !dbg !63
  %1840 = or disjoint i32 %1835, 512, !dbg !63
  %1841 = lshr i32 %1840, 3, !dbg !63
  %1842 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1841, !dbg !63
  %1843 = getelementptr inbounds nuw half, ptr addrspace(3) %1842, i32 %1840, !dbg !63
  store <2 x half> %1712, ptr addrspace(3) %1843, align 4, !dbg !63
  %1844 = getelementptr inbounds nuw i8, ptr addrspace(3) %1839, i32 16, !dbg !63
  store <2 x half> %1715, ptr addrspace(3) %1844, align 4, !dbg !63
  %1845 = or disjoint i32 %1835, 520, !dbg !63
  %1846 = lshr i32 %1845, 3, !dbg !63
  %1847 = and i32 %1846, 536870904, !dbg !63
  %1848 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1847, !dbg !63
  %1849 = getelementptr inbounds nuw half, ptr addrspace(3) %1848, i32 %1845, !dbg !63
  store <2 x half> %1718, ptr addrspace(3) %1849, align 4, !dbg !63
  %1850 = getelementptr inbounds nuw i8, ptr addrspace(3) %1839, i32 32, !dbg !63
  store <2 x half> %1721, ptr addrspace(3) %1850, align 4, !dbg !63
  %1851 = or disjoint i32 %1835, 528, !dbg !63
  %1852 = lshr i32 %1851, 3, !dbg !63
  %1853 = and i32 %1852, 536870904, !dbg !63
  %1854 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1853, !dbg !63
  %1855 = getelementptr inbounds nuw half, ptr addrspace(3) %1854, i32 %1851, !dbg !63
  store <2 x half> %1724, ptr addrspace(3) %1855, align 4, !dbg !63
  %1856 = getelementptr inbounds nuw i8, ptr addrspace(3) %1839, i32 48, !dbg !63
  store <2 x half> %1727, ptr addrspace(3) %1856, align 4, !dbg !63
  %1857 = or disjoint i32 %1835, 536, !dbg !63
  %1858 = lshr i32 %1857, 3, !dbg !63
  %1859 = and i32 %1858, 536870904, !dbg !63
  %1860 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1859, !dbg !63
  %1861 = getelementptr inbounds nuw half, ptr addrspace(3) %1860, i32 %1857, !dbg !63
  store <2 x half> %1730, ptr addrspace(3) %1861, align 4, !dbg !63
  %1862 = getelementptr inbounds nuw i8, ptr addrspace(3) %1839, i32 64, !dbg !63
  store <2 x half> %1733, ptr addrspace(3) %1862, align 4, !dbg !63
  %1863 = or disjoint i32 %1835, 544, !dbg !63
  %1864 = lshr i32 %1863, 3, !dbg !63
  %1865 = and i32 %1864, 536870904, !dbg !63
  %1866 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1865, !dbg !63
  %1867 = getelementptr inbounds nuw half, ptr addrspace(3) %1866, i32 %1863, !dbg !63
  store <2 x half> %1736, ptr addrspace(3) %1867, align 4, !dbg !63
  %1868 = getelementptr inbounds nuw i8, ptr addrspace(3) %1839, i32 80, !dbg !63
  store <2 x half> %1739, ptr addrspace(3) %1868, align 4, !dbg !63
  %1869 = or disjoint i32 %1835, 552, !dbg !63
  %1870 = lshr i32 %1869, 3, !dbg !63
  %1871 = and i32 %1870, 536870904, !dbg !63
  %1872 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1871, !dbg !63
  %1873 = getelementptr inbounds nuw half, ptr addrspace(3) %1872, i32 %1869, !dbg !63
  store <2 x half> %1742, ptr addrspace(3) %1873, align 4, !dbg !63
  %1874 = getelementptr inbounds nuw i8, ptr addrspace(3) %1839, i32 96, !dbg !63
  store <2 x half> %1745, ptr addrspace(3) %1874, align 4, !dbg !63
  %1875 = or disjoint i32 %1835, 560, !dbg !63
  %1876 = lshr i32 %1875, 3, !dbg !63
  %1877 = and i32 %1876, 536870904, !dbg !63
  %1878 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1877, !dbg !63
  %1879 = getelementptr inbounds nuw half, ptr addrspace(3) %1878, i32 %1875, !dbg !63
  store <2 x half> %1748, ptr addrspace(3) %1879, align 4, !dbg !63
  %1880 = getelementptr inbounds nuw i8, ptr addrspace(3) %1839, i32 112, !dbg !63
  store <2 x half> %1751, ptr addrspace(3) %1880, align 4, !dbg !63
  %1881 = or disjoint i32 %1835, 568, !dbg !63
  %1882 = lshr i32 %1881, 3, !dbg !63
  %1883 = and i32 %1882, 536870904, !dbg !63
  %1884 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1883, !dbg !63
  %1885 = getelementptr inbounds nuw half, ptr addrspace(3) %1884, i32 %1881, !dbg !63
  store <2 x half> %1754, ptr addrspace(3) %1885, align 4, !dbg !63
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !63
  %1886 = and i32 %40, 120, !dbg !63
  %1887 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1886, !dbg !63
  %1888 = getelementptr inbounds nuw half, ptr addrspace(3) %1887, i32 %1836, !dbg !63
  %1889 = load <4 x i32>, ptr addrspace(3) %1888, align 16, !dbg !63
  %1890 = or disjoint i32 %1836, 1024, !dbg !63
  %1891 = lshr exact i32 %1890, 3, !dbg !63
  %1892 = and i32 %1891, 248, !dbg !63
  %1893 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1892, !dbg !63
  %1894 = getelementptr inbounds nuw half, ptr addrspace(3) %1893, i32 %1890, !dbg !63
  %1895 = load <4 x i32>, ptr addrspace(3) %1894, align 16, !dbg !63
  %1896 = or disjoint i32 %1836, 2048, !dbg !63
  %1897 = lshr exact i32 %1896, 3, !dbg !63
  %1898 = and i32 %1897, 376, !dbg !63
  %1899 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1898, !dbg !63
  %1900 = getelementptr inbounds nuw half, ptr addrspace(3) %1899, i32 %1896, !dbg !63
  %1901 = load <4 x i32>, ptr addrspace(3) %1900, align 16, !dbg !63
  %1902 = or disjoint i32 %1836, 3072, !dbg !63
  %1903 = lshr exact i32 %1902, 3, !dbg !63
  %1904 = and i32 %1903, 504, !dbg !63
  %1905 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1904, !dbg !63
  %1906 = getelementptr inbounds nuw half, ptr addrspace(3) %1905, i32 %1902, !dbg !63
  %1907 = load <4 x i32>, ptr addrspace(3) %1906, align 16, !dbg !63
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !63
  store <2 x half> %1757, ptr addrspace(3) %1839, align 4, !dbg !63
  store <2 x half> %1760, ptr addrspace(3) %1843, align 4, !dbg !63
  store <2 x half> %1763, ptr addrspace(3) %1844, align 4, !dbg !63
  store <2 x half> %1766, ptr addrspace(3) %1849, align 4, !dbg !63
  store <2 x half> %1769, ptr addrspace(3) %1850, align 4, !dbg !63
  store <2 x half> %1772, ptr addrspace(3) %1855, align 4, !dbg !63
  store <2 x half> %1775, ptr addrspace(3) %1856, align 4, !dbg !63
  store <2 x half> %1778, ptr addrspace(3) %1861, align 4, !dbg !63
  store <2 x half> %1781, ptr addrspace(3) %1862, align 4, !dbg !63
  store <2 x half> %1784, ptr addrspace(3) %1867, align 4, !dbg !63
  store <2 x half> %1787, ptr addrspace(3) %1868, align 4, !dbg !63
  store <2 x half> %1790, ptr addrspace(3) %1873, align 4, !dbg !63
  store <2 x half> %1793, ptr addrspace(3) %1874, align 4, !dbg !63
  store <2 x half> %1796, ptr addrspace(3) %1879, align 4, !dbg !63
  store <2 x half> %1799, ptr addrspace(3) %1880, align 4, !dbg !63
  store <2 x half> %1802, ptr addrspace(3) %1885, align 4, !dbg !63
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !63
  %1908 = load <4 x i32>, ptr addrspace(3) %1888, align 16, !dbg !63
  %1909 = load <4 x i32>, ptr addrspace(3) %1894, align 16, !dbg !63
  %1910 = load <4 x i32>, ptr addrspace(3) %1900, align 16, !dbg !63
  %1911 = load <4 x i32>, ptr addrspace(3) %1906, align 16, !dbg !63
  %.extract = extractelement <4 x i32> %1889, i64 0, !dbg !63
  %.extract298 = extractelement <4 x i32> %1889, i64 1, !dbg !63
  %.extract300 = extractelement <4 x i32> %1889, i64 2, !dbg !63
  %.extract302 = extractelement <4 x i32> %1889, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract, i32 %.extract298, i32 %.extract300, i32 %.extract302, ptr addrspace(1) %1812) #2, !dbg !63
  %.extract304 = extractelement <4 x i32> %1895, i64 0, !dbg !63
  %.extract306 = extractelement <4 x i32> %1895, i64 1, !dbg !63
  %.extract308 = extractelement <4 x i32> %1895, i64 2, !dbg !63
  %.extract310 = extractelement <4 x i32> %1895, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract304, i32 %.extract306, i32 %.extract308, i32 %.extract310, ptr addrspace(1) %1814) #2, !dbg !63
  %.extract312 = extractelement <4 x i32> %1901, i64 0, !dbg !63
  %.extract314 = extractelement <4 x i32> %1901, i64 1, !dbg !63
  %.extract316 = extractelement <4 x i32> %1901, i64 2, !dbg !63
  %.extract318 = extractelement <4 x i32> %1901, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract312, i32 %.extract314, i32 %.extract316, i32 %.extract318, ptr addrspace(1) %1816) #2, !dbg !63
  %.extract320 = extractelement <4 x i32> %1907, i64 0, !dbg !63
  %.extract322 = extractelement <4 x i32> %1907, i64 1, !dbg !63
  %.extract324 = extractelement <4 x i32> %1907, i64 2, !dbg !63
  %.extract326 = extractelement <4 x i32> %1907, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract320, i32 %.extract322, i32 %.extract324, i32 %.extract326, ptr addrspace(1) %1818) #2, !dbg !63
  %.extract328 = extractelement <4 x i32> %1908, i64 0, !dbg !63
  %.extract330 = extractelement <4 x i32> %1908, i64 1, !dbg !63
  %.extract332 = extractelement <4 x i32> %1908, i64 2, !dbg !63
  %.extract334 = extractelement <4 x i32> %1908, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract328, i32 %.extract330, i32 %.extract332, i32 %.extract334, ptr addrspace(1) %1820) #2, !dbg !63
  %.extract336 = extractelement <4 x i32> %1909, i64 0, !dbg !63
  %.extract338 = extractelement <4 x i32> %1909, i64 1, !dbg !63
  %.extract340 = extractelement <4 x i32> %1909, i64 2, !dbg !63
  %.extract342 = extractelement <4 x i32> %1909, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract336, i32 %.extract338, i32 %.extract340, i32 %.extract342, ptr addrspace(1) %1822) #2, !dbg !63
  %.extract344 = extractelement <4 x i32> %1910, i64 0, !dbg !63
  %.extract346 = extractelement <4 x i32> %1910, i64 1, !dbg !63
  %.extract348 = extractelement <4 x i32> %1910, i64 2, !dbg !63
  %.extract350 = extractelement <4 x i32> %1910, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract344, i32 %.extract346, i32 %.extract348, i32 %.extract350, ptr addrspace(1) %1824) #2, !dbg !63
  %.extract352 = extractelement <4 x i32> %1911, i64 0, !dbg !63
  %.extract354 = extractelement <4 x i32> %1911, i64 1, !dbg !63
  %.extract356 = extractelement <4 x i32> %1911, i64 2, !dbg !63
  %.extract358 = extractelement <4 x i32> %1911, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract352, i32 %.extract354, i32 %.extract356, i32 %.extract358, ptr addrspace(1) %1826) #2, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x float> @llvm.maxnum.v4f32(<4 x float>, <4 x float>) #7

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "gqa.py", directory: "/home/ubuntu/anjiang/PTX_dataset/triton_ptx")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "_attn_fwd", linkageName: "_attn_fwd", scope: !1, file: !1, line: 114, type: !6, scopeLine: 114, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 127, column: 28, scope: !5)
!9 = !DILocation(line: 128, column: 27, scope: !5)
!10 = !DILocation(line: 129, column: 22, scope: !5)
!11 = !DILocation(line: 130, column: 21, scope: !5)
!12 = !DILocation(line: 131, column: 26, scope: !5)
!13 = !DILocation(line: 131, column: 38, scope: !5)
!14 = !DILocation(line: 131, column: 59, scope: !5)
!15 = !DILocation(line: 131, column: 71, scope: !5)
!16 = !DILocation(line: 131, column: 50, scope: !5)
!17 = !DILocation(line: 135, column: 17, scope: !5)
!18 = !DILocation(line: 138, column: 27, scope: !5)
!19 = !DILocation(line: 140, column: 8, scope: !5)
!20 = !DILocation(line: 143, column: 17, scope: !5)
!21 = !DILocation(line: 148, column: 8, scope: !5)
!22 = !DILocation(line: 151, column: 17, scope: !5)
!23 = !DILocation(line: 156, column: 8, scope: !5)
!24 = !DILocation(line: 167, column: 46, scope: !5)
!25 = !DILocation(line: 175, column: 16, scope: !5)
!26 = !DILocation(line: 177, column: 16, scope: !5)
!27 = !DILocation(line: 47, column: 20, scope: !28, inlinedAt: !29)
!28 = distinct !DILexicalBlockFile(scope: !5, file: !1, discriminator: 0)
!29 = !DILocation(line: 185, column: 82, scope: !5)
!30 = !DILocation(line: 65, column: 20, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 44, column: 33, scope: !28, inlinedAt: !29)
!32 = !DILocation(line: 55, column: 51, scope: !28, inlinedAt: !29)
!33 = !DILocation(line: 48, column: 23, scope: !28, inlinedAt: !29)
!34 = !DILocation(line: 167, column: 27, scope: !35, inlinedAt: !29)
!35 = distinct !DILexicalBlockFile(scope: !5, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language")
!37 = !DILocation(line: 188, column: 40, scope: !35, inlinedAt: !29)
!38 = !DILocation(line: 55, column: 35, scope: !28, inlinedAt: !29)
!39 = !DILocation(line: 56, column: 22, scope: !28, inlinedAt: !29)
!40 = !DILocation(line: 56, column: 33, scope: !28, inlinedAt: !29)
!41 = !DILocation(line: 57, column: 25, scope: !28, inlinedAt: !29)
!42 = !DILocation(line: 260, column: 15, scope: !35, inlinedAt: !29)
!43 = !DILocation(line: 290, column: 36, scope: !35, inlinedAt: !29)
!44 = !DILocation(line: 60, column: 35, scope: !28, inlinedAt: !29)
!45 = !DILocation(line: 60, column: 29, scope: !28, inlinedAt: !29)
!46 = !DILocation(line: 61, column: 20, scope: !28, inlinedAt: !29)
!47 = !DILocation(line: 61, column: 28, scope: !28, inlinedAt: !29)
!48 = !DILocation(line: 63, column: 20, scope: !28, inlinedAt: !29)
!49 = !DILocation(line: 69, column: 21, scope: !28, inlinedAt: !29)
!50 = !DILocation(line: 70, column: 27, scope: !28, inlinedAt: !29)
!51 = !DILocation(line: 73, column: 46, scope: !28, inlinedAt: !29)
!52 = !DILocation(line: 198, column: 24, scope: !5)
!53 = !DILocation(line: 159, column: 19, scope: !5)
!54 = !DILocation(line: 164, column: 8, scope: !5)
!55 = !DILocation(line: 167, column: 33, scope: !5)
!56 = !DILocation(line: 198, column: 11, scope: !5)
!57 = !DILocation(line: 199, column: 16, scope: !5)
!58 = !DILocation(line: 200, column: 26, scope: !5)
!59 = !DILocation(line: 200, column: 17, scope: !5)
!60 = !DILocation(line: 200, column: 34, scope: !5)
!61 = !DILocation(line: 201, column: 21, scope: !5)
!62 = !DILocation(line: 202, column: 33, scope: !5)
!63 = !DILocation(line: 202, column: 26, scope: !5)
!64 = !DILocation(line: 202, column: 4, scope: !5)
