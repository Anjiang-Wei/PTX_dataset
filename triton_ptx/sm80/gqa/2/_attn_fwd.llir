; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @_attn_fwd(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, float %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, ptr addrspace(1) readnone captures(none) %19) local_unnamed_addr #0 !dbg !5 {
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %.frozen = freeze i32 %18, !dbg !10
  %23 = sdiv i32 %22, %.frozen, !dbg !10
  %24 = mul i32 %23, %.frozen, !dbg !11
  %.decomposed = sub i32 %22, %24, !dbg !11
  %25 = sext i32 %23 to i64, !dbg !12
  %26 = sext i32 %6 to i64, !dbg !13
  %27 = mul nsw i64 %25, %26, !dbg !13
  %28 = zext nneg i32 %.decomposed to i64, !dbg !14
  %29 = sext i32 %7 to i64, !dbg !15
  %30 = mul nsw i64 %28, %29, !dbg !15
  %31 = add nsw i64 %30, %27, !dbg !16
  %32 = getelementptr half, ptr addrspace(1) %0, i64 %31, !dbg !17
  %33 = shl i32 %21, 8, !dbg !18
  %34 = sext i32 %8 to i64, !dbg !19
  %35 = sext i32 %33 to i64, !dbg !19
  %36 = getelementptr half, ptr addrspace(1) %2, i64 %31, !dbg !20
  %37 = sext i32 %14 to i64, !dbg !21
  %38 = getelementptr half, ptr addrspace(1) %1, i64 %31, !dbg !22
  %39 = sext i32 %11 to i64, !dbg !23
  %40 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %41 = and i32 %40, 16, !dbg !24
  %42 = lshr i32 %40, 3, !dbg !24
  %43 = and i32 %42, 31, !dbg !24
  %44 = or disjoint i32 %43, 32, !dbg !24
  %45 = or disjoint i32 %43, 64, !dbg !24
  %46 = or i32 %42, 96, !dbg !24
  %47 = or disjoint i32 %43, 128, !dbg !24
  %48 = or disjoint i32 %43, 160, !dbg !24
  %49 = or disjoint i32 %43, 192, !dbg !24
  %50 = or i32 %42, 224, !dbg !24
  %51 = and i32 %40, 4, !dbg !24
  %.not9 = icmp eq i32 %51, 0, !dbg !24
  %52 = fmul float %3, 0x3FF7154760000000, !dbg !25
  %53 = zext nneg i32 %43 to i64, !dbg !26
  %54 = zext nneg i32 %44 to i64, !dbg !26
  %55 = zext nneg i32 %45 to i64, !dbg !26
  %56 = zext nneg i32 %46 to i64, !dbg !26
  %57 = zext nneg i32 %47 to i64, !dbg !26
  %58 = zext nneg i32 %48 to i64, !dbg !26
  %59 = zext nneg i32 %49 to i64, !dbg !26
  %60 = zext nneg i32 %50 to i64, !dbg !26
  %61 = or disjoint i64 %53, %35, !dbg !26
  %62 = or disjoint i64 %54, %35, !dbg !26
  %63 = or disjoint i64 %55, %35, !dbg !26
  %64 = or disjoint i64 %56, %35, !dbg !26
  %65 = or disjoint i64 %57, %35, !dbg !26
  %66 = or disjoint i64 %58, %35, !dbg !26
  %67 = or disjoint i64 %59, %35, !dbg !26
  %68 = or disjoint i64 %60, %35, !dbg !26
  %69 = mul nsw i64 %61, %34, !dbg !26
  %70 = mul nsw i64 %62, %34, !dbg !26
  %71 = mul nsw i64 %63, %34, !dbg !26
  %72 = mul nsw i64 %64, %34, !dbg !26
  %73 = mul nsw i64 %65, %34, !dbg !26
  %74 = mul nsw i64 %66, %34, !dbg !26
  %75 = mul nsw i64 %67, %34, !dbg !26
  %76 = mul nsw i64 %68, %34, !dbg !26
  %77 = shl nuw nsw i32 %40, 3, !dbg !26
  %78 = and i32 %77, 56, !dbg !26
  %79 = zext nneg i32 %78 to i64, !dbg !26
  %80 = getelementptr half, ptr addrspace(1) %32, i64 %69, !dbg !26
  %81 = getelementptr half, ptr addrspace(1) %80, i64 %79, !dbg !26
  %82 = getelementptr half, ptr addrspace(1) %32, i64 %70, !dbg !26
  %83 = getelementptr half, ptr addrspace(1) %82, i64 %79, !dbg !26
  %84 = getelementptr half, ptr addrspace(1) %32, i64 %71, !dbg !26
  %85 = getelementptr half, ptr addrspace(1) %84, i64 %79, !dbg !26
  %86 = getelementptr half, ptr addrspace(1) %32, i64 %72, !dbg !26
  %87 = getelementptr half, ptr addrspace(1) %86, i64 %79, !dbg !26
  %88 = getelementptr half, ptr addrspace(1) %32, i64 %73, !dbg !26
  %89 = getelementptr half, ptr addrspace(1) %88, i64 %79, !dbg !26
  %90 = getelementptr half, ptr addrspace(1) %32, i64 %74, !dbg !26
  %91 = getelementptr half, ptr addrspace(1) %90, i64 %79, !dbg !26
  %92 = getelementptr half, ptr addrspace(1) %32, i64 %75, !dbg !26
  %93 = getelementptr half, ptr addrspace(1) %92, i64 %79, !dbg !26
  %94 = getelementptr half, ptr addrspace(1) %32, i64 %76, !dbg !26
  %95 = getelementptr half, ptr addrspace(1) %94, i64 %79, !dbg !26
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %81) #2, !dbg !26
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !26
  %98 = bitcast i32 %97 to <2 x half>, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !26
  %100 = bitcast i32 %99 to <2 x half>, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !26
  %102 = bitcast i32 %101 to <2 x half>, !dbg !26
  %103 = shufflevector <2 x half> %102, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %104 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !26
  %105 = bitcast i32 %104 to <2 x half>, !dbg !26
  %106 = shufflevector <2 x half> %105, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %83) #2, !dbg !26
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !26
  %109 = bitcast i32 %108 to <2 x half>, !dbg !26
  %110 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !26
  %111 = bitcast i32 %110 to <2 x half>, !dbg !26
  %112 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !26
  %113 = bitcast i32 %112 to <2 x half>, !dbg !26
  %114 = shufflevector <2 x half> %113, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %115 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !26
  %116 = bitcast i32 %115 to <2 x half>, !dbg !26
  %117 = shufflevector <2 x half> %116, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %85) #2, !dbg !26
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !26
  %120 = bitcast i32 %119 to <2 x half>, !dbg !26
  %121 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !26
  %122 = bitcast i32 %121 to <2 x half>, !dbg !26
  %123 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !26
  %124 = bitcast i32 %123 to <2 x half>, !dbg !26
  %125 = shufflevector <2 x half> %124, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %126 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !26
  %127 = bitcast i32 %126 to <2 x half>, !dbg !26
  %128 = shufflevector <2 x half> %127, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %87) #2, !dbg !26
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !26
  %131 = bitcast i32 %130 to <2 x half>, !dbg !26
  %132 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !26
  %133 = bitcast i32 %132 to <2 x half>, !dbg !26
  %134 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !26
  %135 = bitcast i32 %134 to <2 x half>, !dbg !26
  %136 = shufflevector <2 x half> %135, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %137 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !26
  %138 = bitcast i32 %137 to <2 x half>, !dbg !26
  %139 = shufflevector <2 x half> %138, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %89) #2, !dbg !26
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !26
  %142 = bitcast i32 %141 to <2 x half>, !dbg !26
  %143 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !26
  %144 = bitcast i32 %143 to <2 x half>, !dbg !26
  %145 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !26
  %146 = bitcast i32 %145 to <2 x half>, !dbg !26
  %147 = shufflevector <2 x half> %146, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %148 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !26
  %149 = bitcast i32 %148 to <2 x half>, !dbg !26
  %150 = shufflevector <2 x half> %149, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %91) #2, !dbg !26
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !26
  %153 = bitcast i32 %152 to <2 x half>, !dbg !26
  %154 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !26
  %155 = bitcast i32 %154 to <2 x half>, !dbg !26
  %156 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !26
  %157 = bitcast i32 %156 to <2 x half>, !dbg !26
  %158 = shufflevector <2 x half> %157, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %159 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !26
  %160 = bitcast i32 %159 to <2 x half>, !dbg !26
  %161 = shufflevector <2 x half> %160, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %93) #2, !dbg !26
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !26
  %164 = bitcast i32 %163 to <2 x half>, !dbg !26
  %165 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !26
  %166 = bitcast i32 %165 to <2 x half>, !dbg !26
  %167 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !26
  %168 = bitcast i32 %167 to <2 x half>, !dbg !26
  %169 = shufflevector <2 x half> %168, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %170 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !26
  %171 = bitcast i32 %170 to <2 x half>, !dbg !26
  %172 = shufflevector <2 x half> %171, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %95) #2, !dbg !26
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !26
  %175 = bitcast i32 %174 to <2 x half>, !dbg !26
  %176 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !26
  %177 = bitcast i32 %176 to <2 x half>, !dbg !26
  %178 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !26
  %179 = bitcast i32 %178 to <2 x half>, !dbg !26
  %180 = shufflevector <2 x half> %179, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %181 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !26
  %182 = bitcast i32 %181 to <2 x half>, !dbg !26
  %183 = shufflevector <2 x half> %182, <2 x half> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %184 = xor i32 %77, %40, !dbg !26
  %185 = and i32 %184, 56, !dbg !26
  %186 = shl nuw nsw i32 %43, 6, !dbg !26
  %187 = or disjoint i32 %186, %185, !dbg !26
  %188 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %187, !dbg !26
  %189 = shufflevector <2 x half> %98, <2 x half> %100, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %190 = shufflevector <8 x half> %189, <8 x half> %103, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %191 = shufflevector <8 x half> %190, <8 x half> %106, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %191, ptr addrspace(3) %188, align 16, !dbg !26
  %192 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %185, !dbg !26
  %193 = shl nuw nsw i32 %43, 7, !dbg !26
  %194 = getelementptr inbounds nuw i8, ptr addrspace(3) %192, i32 %193, !dbg !26
  %195 = getelementptr inbounds nuw i8, ptr addrspace(3) %194, i32 4096, !dbg !26
  %196 = shufflevector <2 x half> %109, <2 x half> %111, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %197 = shufflevector <8 x half> %196, <8 x half> %114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %198 = shufflevector <8 x half> %197, <8 x half> %117, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %198, ptr addrspace(3) %195, align 16, !dbg !26
  %199 = getelementptr inbounds nuw i8, ptr addrspace(3) %194, i32 8192, !dbg !26
  %200 = shufflevector <2 x half> %120, <2 x half> %122, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %201 = shufflevector <8 x half> %200, <8 x half> %125, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %202 = shufflevector <8 x half> %201, <8 x half> %128, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %202, ptr addrspace(3) %199, align 16, !dbg !26
  %203 = getelementptr inbounds nuw i8, ptr addrspace(3) %194, i32 12288, !dbg !26
  %204 = shufflevector <2 x half> %131, <2 x half> %133, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %205 = shufflevector <8 x half> %204, <8 x half> %136, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %206 = shufflevector <8 x half> %205, <8 x half> %139, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %206, ptr addrspace(3) %203, align 16, !dbg !26
  %207 = getelementptr inbounds nuw i8, ptr addrspace(3) %194, i32 16384, !dbg !26
  %208 = shufflevector <2 x half> %142, <2 x half> %144, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %209 = shufflevector <8 x half> %208, <8 x half> %147, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %210 = shufflevector <8 x half> %209, <8 x half> %150, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %210, ptr addrspace(3) %207, align 16, !dbg !26
  %211 = getelementptr inbounds nuw i8, ptr addrspace(3) %194, i32 20480, !dbg !26
  %212 = shufflevector <2 x half> %153, <2 x half> %155, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %213 = shufflevector <8 x half> %212, <8 x half> %158, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %214 = shufflevector <8 x half> %213, <8 x half> %161, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %214, ptr addrspace(3) %211, align 16, !dbg !26
  %215 = getelementptr inbounds nuw i8, ptr addrspace(3) %194, i32 24576, !dbg !26
  %216 = shufflevector <2 x half> %164, <2 x half> %166, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %217 = shufflevector <8 x half> %216, <8 x half> %169, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %218 = shufflevector <8 x half> %217, <8 x half> %172, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %218, ptr addrspace(3) %215, align 16, !dbg !26
  %219 = getelementptr inbounds nuw i8, ptr addrspace(3) %194, i32 28672, !dbg !26
  %220 = shufflevector <2 x half> %175, <2 x half> %177, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %221 = shufflevector <8 x half> %220, <8 x half> %180, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !26
  %222 = shufflevector <8 x half> %221, <8 x half> %183, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !26
  store <8 x half> %222, ptr addrspace(3) %219, align 16, !dbg !26
  %223 = mul nsw i64 %39, %53, !dbg !27
  %224 = getelementptr half, ptr addrspace(1) %38, i64 %223, !dbg !27
  %225 = getelementptr half, ptr addrspace(1) %224, i64 %79, !dbg !27
  %226 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %187, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %226, ptr addrspace(1) %225, i32 16) #2, !dbg !27
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !27
  %227 = mul nsw i64 %37, %53, !dbg !30
  %228 = getelementptr half, ptr addrspace(1) %36, i64 %227, !dbg !30
  %229 = getelementptr half, ptr addrspace(1) %228, i64 %79, !dbg !30
  %230 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %187, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %230, ptr addrspace(1) %229, i32 16) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %231 = or disjoint i64 %53, 32, !dbg !27
  %232 = mul nsw i64 %231, %39, !dbg !27
  %233 = getelementptr half, ptr addrspace(1) %38, i64 %232, !dbg !27
  %234 = getelementptr half, ptr addrspace(1) %233, i64 %79, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %235 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %187, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %235, ptr addrspace(1) %234, i32 16) #2, !dbg !27
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !27
  %236 = mul nsw i64 %231, %37, !dbg !30
  %237 = getelementptr half, ptr addrspace(1) %36, i64 %236, !dbg !30
  %238 = getelementptr half, ptr addrspace(1) %237, i64 %79, !dbg !30
  %239 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 45056), i32 %187, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %239, ptr addrspace(1) %238, i32 16) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %invariant.gep = getelementptr half, ptr addrspace(1) %38, i64 %79, !dbg !31
  %invariant.gep370 = getelementptr half, ptr addrspace(1) %36, i64 %79, !dbg !31
  %240 = and i32 %40, 3
  %241 = mul nuw nsw i32 %240, 72
  %242 = select i1 %.not9, i32 0, i32 288
  %243 = xor i32 %242, %241
  %244 = shl nuw nsw i32 %40, 6
  %245 = and i32 %244, 512
  %246 = or disjoint i32 %243, %245
  %247 = lshr exact i32 %41, 1
  %248 = xor i32 %246, %247
  %249 = shl nuw nsw i32 %40, 5
  %250 = and i32 %249, 1024
  %251 = or disjoint i32 %248, %250
  %252 = and i32 %249, 6144
  %253 = xor i32 %251, %252
  %254 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %253
  %255 = ptrtoint ptr addrspace(3) %254 to i32
  %256 = xor i32 %253, 16
  %257 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %256
  %258 = ptrtoint ptr addrspace(3) %257 to i32
  %259 = xor i32 %253, 32
  %260 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %259
  %261 = ptrtoint ptr addrspace(3) %260 to i32
  %262 = xor i32 %253, 48
  %263 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %262
  %264 = ptrtoint ptr addrspace(3) %263 to i32
  %265 = xor i32 %253, 8192
  %266 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %265
  %267 = ptrtoint ptr addrspace(3) %266 to i32
  %268 = xor i32 %253, 8208
  %269 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %268
  %270 = ptrtoint ptr addrspace(3) %269 to i32
  %271 = xor i32 %253, 8224
  %272 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %271
  %273 = ptrtoint ptr addrspace(3) %272 to i32
  %274 = xor i32 %253, 8240
  %275 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %274
  %276 = ptrtoint ptr addrspace(3) %275 to i32
  %and.ra = and i32 %40, 24
  %277 = xor i32 %243, %and.ra
  %278 = xor i32 %277, 32
  %279 = xor i32 %277, 544
  %280 = xor i32 %277, 1056
  %281 = xor i32 %277, 1568
  %282 = and i32 %244, 1536
  %283 = or disjoint i32 %243, %282
  %284 = xor i32 %283, 8
  %285 = xor i32 %283, 16
  %286 = xor i32 %283, 24
  %287 = xor i32 %283, 32
  %288 = xor i32 %283, 40
  %289 = xor i32 %283, 48
  %290 = xor i32 %283, 56
  %291 = insertelement <4 x float> poison, float %52, i64 0, !dbg !32
  %292 = shufflevector <4 x float> %291, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !32
  br label %293, !dbg !31

293:                                              ; preds = %20, %__nv_exp2f.exit209
  %294 = phi i32 [ -1, %20 ], [ %367, %__nv_exp2f.exit209 ]
  %295 = phi i32 [ 1, %20 ], [ %1362, %__nv_exp2f.exit209 ]
  %296 = phi i64 [ 32, %20 ], [ %1359, %__nv_exp2f.exit209 ]
  %297 = phi float [ 0.000000e+00, %20 ], [ %1280, %__nv_exp2f.exit209 ]
  %298 = phi float [ 0.000000e+00, %20 ], [ %1281, %__nv_exp2f.exit209 ]
  %299 = phi float [ 0.000000e+00, %20 ], [ %1282, %__nv_exp2f.exit209 ]
  %300 = phi float [ 0.000000e+00, %20 ], [ %1283, %__nv_exp2f.exit209 ]
  %301 = phi float [ 0.000000e+00, %20 ], [ %1285, %__nv_exp2f.exit209 ]
  %302 = phi float [ 0.000000e+00, %20 ], [ %1286, %__nv_exp2f.exit209 ]
  %303 = phi float [ 0.000000e+00, %20 ], [ %1287, %__nv_exp2f.exit209 ]
  %304 = phi float [ 0.000000e+00, %20 ], [ %1288, %__nv_exp2f.exit209 ]
  %305 = phi float [ 0.000000e+00, %20 ], [ %1290, %__nv_exp2f.exit209 ]
  %306 = phi float [ 0.000000e+00, %20 ], [ %1291, %__nv_exp2f.exit209 ]
  %307 = phi float [ 0.000000e+00, %20 ], [ %1292, %__nv_exp2f.exit209 ]
  %308 = phi float [ 0.000000e+00, %20 ], [ %1293, %__nv_exp2f.exit209 ]
  %309 = phi float [ 0.000000e+00, %20 ], [ %1295, %__nv_exp2f.exit209 ]
  %310 = phi float [ 0.000000e+00, %20 ], [ %1296, %__nv_exp2f.exit209 ]
  %311 = phi float [ 0.000000e+00, %20 ], [ %1297, %__nv_exp2f.exit209 ]
  %312 = phi float [ 0.000000e+00, %20 ], [ %1298, %__nv_exp2f.exit209 ]
  %313 = phi float [ 0.000000e+00, %20 ], [ %1300, %__nv_exp2f.exit209 ]
  %314 = phi float [ 0.000000e+00, %20 ], [ %1301, %__nv_exp2f.exit209 ]
  %315 = phi float [ 0.000000e+00, %20 ], [ %1302, %__nv_exp2f.exit209 ]
  %316 = phi float [ 0.000000e+00, %20 ], [ %1303, %__nv_exp2f.exit209 ]
  %317 = phi float [ 0.000000e+00, %20 ], [ %1305, %__nv_exp2f.exit209 ]
  %318 = phi float [ 0.000000e+00, %20 ], [ %1306, %__nv_exp2f.exit209 ]
  %319 = phi float [ 0.000000e+00, %20 ], [ %1307, %__nv_exp2f.exit209 ]
  %320 = phi float [ 0.000000e+00, %20 ], [ %1308, %__nv_exp2f.exit209 ]
  %321 = phi float [ 0.000000e+00, %20 ], [ %1310, %__nv_exp2f.exit209 ]
  %322 = phi float [ 0.000000e+00, %20 ], [ %1311, %__nv_exp2f.exit209 ]
  %323 = phi float [ 0.000000e+00, %20 ], [ %1312, %__nv_exp2f.exit209 ]
  %324 = phi float [ 0.000000e+00, %20 ], [ %1313, %__nv_exp2f.exit209 ]
  %325 = phi float [ 0.000000e+00, %20 ], [ %1315, %__nv_exp2f.exit209 ]
  %326 = phi float [ 0.000000e+00, %20 ], [ %1316, %__nv_exp2f.exit209 ]
  %327 = phi float [ 0.000000e+00, %20 ], [ %1317, %__nv_exp2f.exit209 ]
  %328 = phi float [ 0.000000e+00, %20 ], [ %1318, %__nv_exp2f.exit209 ]
  %329 = phi float [ 0.000000e+00, %20 ], [ %1320, %__nv_exp2f.exit209 ]
  %330 = phi float [ 0.000000e+00, %20 ], [ %1321, %__nv_exp2f.exit209 ]
  %331 = phi float [ 0.000000e+00, %20 ], [ %1322, %__nv_exp2f.exit209 ]
  %332 = phi float [ 0.000000e+00, %20 ], [ %1323, %__nv_exp2f.exit209 ]
  %333 = phi float [ 0.000000e+00, %20 ], [ %1325, %__nv_exp2f.exit209 ]
  %334 = phi float [ 0.000000e+00, %20 ], [ %1326, %__nv_exp2f.exit209 ]
  %335 = phi float [ 0.000000e+00, %20 ], [ %1327, %__nv_exp2f.exit209 ]
  %336 = phi float [ 0.000000e+00, %20 ], [ %1328, %__nv_exp2f.exit209 ]
  %337 = phi float [ 0.000000e+00, %20 ], [ %1330, %__nv_exp2f.exit209 ]
  %338 = phi float [ 0.000000e+00, %20 ], [ %1331, %__nv_exp2f.exit209 ]
  %339 = phi float [ 0.000000e+00, %20 ], [ %1332, %__nv_exp2f.exit209 ]
  %340 = phi float [ 0.000000e+00, %20 ], [ %1333, %__nv_exp2f.exit209 ]
  %341 = phi float [ 0.000000e+00, %20 ], [ %1335, %__nv_exp2f.exit209 ]
  %342 = phi float [ 0.000000e+00, %20 ], [ %1336, %__nv_exp2f.exit209 ]
  %343 = phi float [ 0.000000e+00, %20 ], [ %1337, %__nv_exp2f.exit209 ]
  %344 = phi float [ 0.000000e+00, %20 ], [ %1338, %__nv_exp2f.exit209 ]
  %345 = phi float [ 0.000000e+00, %20 ], [ %1340, %__nv_exp2f.exit209 ]
  %346 = phi float [ 0.000000e+00, %20 ], [ %1341, %__nv_exp2f.exit209 ]
  %347 = phi float [ 0.000000e+00, %20 ], [ %1342, %__nv_exp2f.exit209 ]
  %348 = phi float [ 0.000000e+00, %20 ], [ %1343, %__nv_exp2f.exit209 ]
  %349 = phi float [ 0.000000e+00, %20 ], [ %1345, %__nv_exp2f.exit209 ]
  %350 = phi float [ 0.000000e+00, %20 ], [ %1346, %__nv_exp2f.exit209 ]
  %351 = phi float [ 0.000000e+00, %20 ], [ %1347, %__nv_exp2f.exit209 ]
  %352 = phi float [ 0.000000e+00, %20 ], [ %1348, %__nv_exp2f.exit209 ]
  %353 = phi float [ 0.000000e+00, %20 ], [ %1350, %__nv_exp2f.exit209 ]
  %354 = phi float [ 0.000000e+00, %20 ], [ %1351, %__nv_exp2f.exit209 ]
  %355 = phi float [ 0.000000e+00, %20 ], [ %1352, %__nv_exp2f.exit209 ]
  %356 = phi float [ 0.000000e+00, %20 ], [ %1353, %__nv_exp2f.exit209 ]
  %357 = phi float [ 0.000000e+00, %20 ], [ %1355, %__nv_exp2f.exit209 ]
  %358 = phi float [ 0.000000e+00, %20 ], [ %1356, %__nv_exp2f.exit209 ]
  %359 = phi float [ 0.000000e+00, %20 ], [ %1357, %__nv_exp2f.exit209 ]
  %360 = phi float [ 0.000000e+00, %20 ], [ %1358, %__nv_exp2f.exit209 ]
  %361 = phi i32 [ 0, %20 ], [ %1368, %__nv_exp2f.exit209 ]
  %362 = phi <4 x float> [ splat (float 0xFFF0000000000000), %20 ], [ %689, %__nv_exp2f.exit209 ]
  %363 = phi <4 x float> [ splat (float 1.000000e+00), %20 ], [ %1013, %__nv_exp2f.exit209 ]
  %364 = icmp samesign ult i32 %361, 4032, !dbg !31
  %365 = add i32 %294, 1, !dbg !31
  %366 = icmp sgt i32 %365, 1, !dbg !31
  %367 = select i1 %366, i32 0, i32 %365, !dbg !31
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %368 = shl i32 %367, 11, !dbg !27
  %369 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %368, !dbg !27
  %370 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %255) #2, !dbg !26
  %371 = extractvalue { i32, i32, i32, i32 } %370, 0, !dbg !26
  %372 = extractvalue { i32, i32, i32, i32 } %370, 1, !dbg !26
  %373 = extractvalue { i32, i32, i32, i32 } %370, 2, !dbg !26
  %374 = extractvalue { i32, i32, i32, i32 } %370, 3, !dbg !26
  %375 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %258) #2, !dbg !26
  %376 = extractvalue { i32, i32, i32, i32 } %375, 0, !dbg !26
  %377 = extractvalue { i32, i32, i32, i32 } %375, 1, !dbg !26
  %378 = extractvalue { i32, i32, i32, i32 } %375, 2, !dbg !26
  %379 = extractvalue { i32, i32, i32, i32 } %375, 3, !dbg !26
  %380 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %261) #2, !dbg !26
  %381 = extractvalue { i32, i32, i32, i32 } %380, 0, !dbg !26
  %382 = extractvalue { i32, i32, i32, i32 } %380, 1, !dbg !26
  %383 = extractvalue { i32, i32, i32, i32 } %380, 2, !dbg !26
  %384 = extractvalue { i32, i32, i32, i32 } %380, 3, !dbg !26
  %385 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %264) #2, !dbg !26
  %386 = extractvalue { i32, i32, i32, i32 } %385, 0, !dbg !26
  %387 = extractvalue { i32, i32, i32, i32 } %385, 1, !dbg !26
  %388 = extractvalue { i32, i32, i32, i32 } %385, 2, !dbg !26
  %389 = extractvalue { i32, i32, i32, i32 } %385, 3, !dbg !26
  %390 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %267) #2, !dbg !26
  %391 = extractvalue { i32, i32, i32, i32 } %390, 0, !dbg !26
  %392 = extractvalue { i32, i32, i32, i32 } %390, 1, !dbg !26
  %393 = extractvalue { i32, i32, i32, i32 } %390, 2, !dbg !26
  %394 = extractvalue { i32, i32, i32, i32 } %390, 3, !dbg !26
  %395 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %270) #2, !dbg !26
  %396 = extractvalue { i32, i32, i32, i32 } %395, 0, !dbg !26
  %397 = extractvalue { i32, i32, i32, i32 } %395, 1, !dbg !26
  %398 = extractvalue { i32, i32, i32, i32 } %395, 2, !dbg !26
  %399 = extractvalue { i32, i32, i32, i32 } %395, 3, !dbg !26
  %400 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %273) #2, !dbg !26
  %401 = extractvalue { i32, i32, i32, i32 } %400, 0, !dbg !26
  %402 = extractvalue { i32, i32, i32, i32 } %400, 1, !dbg !26
  %403 = extractvalue { i32, i32, i32, i32 } %400, 2, !dbg !26
  %404 = extractvalue { i32, i32, i32, i32 } %400, 3, !dbg !26
  %405 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %276) #2, !dbg !26
  %406 = extractvalue { i32, i32, i32, i32 } %405, 0, !dbg !26
  %407 = extractvalue { i32, i32, i32, i32 } %405, 1, !dbg !26
  %408 = extractvalue { i32, i32, i32, i32 } %405, 2, !dbg !26
  %409 = extractvalue { i32, i32, i32, i32 } %405, 3, !dbg !26
  %410 = getelementptr inbounds nuw half, ptr addrspace(3) %369, i32 %277, !dbg !27
  %411 = ptrtoint ptr addrspace(3) %410 to i32, !dbg !27
  %412 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %411) #2, !dbg !27
  %413 = extractvalue { i32, i32, i32, i32 } %412, 0, !dbg !27
  %414 = extractvalue { i32, i32, i32, i32 } %412, 1, !dbg !27
  %415 = extractvalue { i32, i32, i32, i32 } %412, 2, !dbg !27
  %416 = extractvalue { i32, i32, i32, i32 } %412, 3, !dbg !27
  %417 = getelementptr inbounds nuw half, ptr addrspace(3) %369, i32 %278, !dbg !27
  %418 = ptrtoint ptr addrspace(3) %417 to i32, !dbg !27
  %419 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %418) #2, !dbg !27
  %420 = extractvalue { i32, i32, i32, i32 } %419, 0, !dbg !27
  %421 = extractvalue { i32, i32, i32, i32 } %419, 1, !dbg !27
  %422 = extractvalue { i32, i32, i32, i32 } %419, 2, !dbg !27
  %423 = extractvalue { i32, i32, i32, i32 } %419, 3, !dbg !27
  %424 = getelementptr inbounds nuw i8, ptr addrspace(3) %410, i32 1024, !dbg !27
  %425 = ptrtoint ptr addrspace(3) %424 to i32, !dbg !27
  %426 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %425) #2, !dbg !27
  %427 = extractvalue { i32, i32, i32, i32 } %426, 0, !dbg !27
  %428 = extractvalue { i32, i32, i32, i32 } %426, 1, !dbg !27
  %429 = extractvalue { i32, i32, i32, i32 } %426, 2, !dbg !27
  %430 = extractvalue { i32, i32, i32, i32 } %426, 3, !dbg !27
  %431 = getelementptr inbounds nuw half, ptr addrspace(3) %369, i32 %279, !dbg !27
  %432 = ptrtoint ptr addrspace(3) %431 to i32, !dbg !27
  %433 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %432) #2, !dbg !27
  %434 = extractvalue { i32, i32, i32, i32 } %433, 0, !dbg !27
  %435 = extractvalue { i32, i32, i32, i32 } %433, 1, !dbg !27
  %436 = extractvalue { i32, i32, i32, i32 } %433, 2, !dbg !27
  %437 = extractvalue { i32, i32, i32, i32 } %433, 3, !dbg !27
  %438 = getelementptr inbounds nuw i8, ptr addrspace(3) %410, i32 2048, !dbg !27
  %439 = ptrtoint ptr addrspace(3) %438 to i32, !dbg !27
  %440 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %439) #2, !dbg !27
  %441 = extractvalue { i32, i32, i32, i32 } %440, 0, !dbg !27
  %442 = extractvalue { i32, i32, i32, i32 } %440, 1, !dbg !27
  %443 = extractvalue { i32, i32, i32, i32 } %440, 2, !dbg !27
  %444 = extractvalue { i32, i32, i32, i32 } %440, 3, !dbg !27
  %445 = getelementptr inbounds nuw half, ptr addrspace(3) %369, i32 %280, !dbg !27
  %446 = ptrtoint ptr addrspace(3) %445 to i32, !dbg !27
  %447 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %446) #2, !dbg !27
  %448 = extractvalue { i32, i32, i32, i32 } %447, 0, !dbg !27
  %449 = extractvalue { i32, i32, i32, i32 } %447, 1, !dbg !27
  %450 = extractvalue { i32, i32, i32, i32 } %447, 2, !dbg !27
  %451 = extractvalue { i32, i32, i32, i32 } %447, 3, !dbg !27
  %452 = getelementptr inbounds nuw i8, ptr addrspace(3) %410, i32 3072, !dbg !27
  %453 = ptrtoint ptr addrspace(3) %452 to i32, !dbg !27
  %454 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %453) #2, !dbg !27
  %455 = extractvalue { i32, i32, i32, i32 } %454, 0, !dbg !27
  %456 = extractvalue { i32, i32, i32, i32 } %454, 1, !dbg !27
  %457 = extractvalue { i32, i32, i32, i32 } %454, 2, !dbg !27
  %458 = extractvalue { i32, i32, i32, i32 } %454, 3, !dbg !27
  %459 = getelementptr inbounds nuw half, ptr addrspace(3) %369, i32 %281, !dbg !27
  %460 = ptrtoint ptr addrspace(3) %459 to i32, !dbg !27
  %461 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %460) #2, !dbg !27
  %462 = extractvalue { i32, i32, i32, i32 } %461, 0, !dbg !27
  %463 = extractvalue { i32, i32, i32, i32 } %461, 1, !dbg !27
  %464 = extractvalue { i32, i32, i32, i32 } %461, 2, !dbg !27
  %465 = extractvalue { i32, i32, i32, i32 } %461, 3, !dbg !27
  %466 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %371, i32 %372, i32 %373, i32 %374, i32 %413, i32 %414) #2, !dbg !33
  %467 = extractvalue { float, float, float, float } %466, 0, !dbg !33
  %468 = extractvalue { float, float, float, float } %466, 1, !dbg !33
  %469 = extractvalue { float, float, float, float } %466, 2, !dbg !33
  %470 = extractvalue { float, float, float, float } %466, 3, !dbg !33
  %471 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %371, i32 %372, i32 %373, i32 %374, i32 %427, i32 %428) #2, !dbg !33
  %472 = extractvalue { float, float, float, float } %471, 0, !dbg !33
  %473 = extractvalue { float, float, float, float } %471, 1, !dbg !33
  %474 = extractvalue { float, float, float, float } %471, 2, !dbg !33
  %475 = extractvalue { float, float, float, float } %471, 3, !dbg !33
  %476 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %371, i32 %372, i32 %373, i32 %374, i32 %441, i32 %442) #2, !dbg !33
  %477 = extractvalue { float, float, float, float } %476, 0, !dbg !33
  %478 = extractvalue { float, float, float, float } %476, 1, !dbg !33
  %479 = extractvalue { float, float, float, float } %476, 2, !dbg !33
  %480 = extractvalue { float, float, float, float } %476, 3, !dbg !33
  %481 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %371, i32 %372, i32 %373, i32 %374, i32 %455, i32 %456) #2, !dbg !33
  %482 = extractvalue { float, float, float, float } %481, 0, !dbg !33
  %483 = extractvalue { float, float, float, float } %481, 1, !dbg !33
  %484 = extractvalue { float, float, float, float } %481, 2, !dbg !33
  %485 = extractvalue { float, float, float, float } %481, 3, !dbg !33
  %486 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %391, i32 %392, i32 %393, i32 %394, i32 %413, i32 %414) #2, !dbg !33
  %487 = extractvalue { float, float, float, float } %486, 0, !dbg !33
  %488 = extractvalue { float, float, float, float } %486, 1, !dbg !33
  %489 = extractvalue { float, float, float, float } %486, 2, !dbg !33
  %490 = extractvalue { float, float, float, float } %486, 3, !dbg !33
  %491 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %391, i32 %392, i32 %393, i32 %394, i32 %427, i32 %428) #2, !dbg !33
  %492 = extractvalue { float, float, float, float } %491, 0, !dbg !33
  %493 = extractvalue { float, float, float, float } %491, 1, !dbg !33
  %494 = extractvalue { float, float, float, float } %491, 2, !dbg !33
  %495 = extractvalue { float, float, float, float } %491, 3, !dbg !33
  %496 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %391, i32 %392, i32 %393, i32 %394, i32 %441, i32 %442) #2, !dbg !33
  %497 = extractvalue { float, float, float, float } %496, 0, !dbg !33
  %498 = extractvalue { float, float, float, float } %496, 1, !dbg !33
  %499 = extractvalue { float, float, float, float } %496, 2, !dbg !33
  %500 = extractvalue { float, float, float, float } %496, 3, !dbg !33
  %501 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %391, i32 %392, i32 %393, i32 %394, i32 %455, i32 %456) #2, !dbg !33
  %502 = extractvalue { float, float, float, float } %501, 0, !dbg !33
  %503 = extractvalue { float, float, float, float } %501, 1, !dbg !33
  %504 = extractvalue { float, float, float, float } %501, 2, !dbg !33
  %505 = extractvalue { float, float, float, float } %501, 3, !dbg !33
  %506 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %467, float %468, float %469, float %470, i32 %376, i32 %377, i32 %378, i32 %379, i32 %415, i32 %416) #2, !dbg !33
  %507 = extractvalue { float, float, float, float } %506, 0, !dbg !33
  %508 = extractvalue { float, float, float, float } %506, 1, !dbg !33
  %509 = extractvalue { float, float, float, float } %506, 2, !dbg !33
  %510 = extractvalue { float, float, float, float } %506, 3, !dbg !33
  %511 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %472, float %473, float %474, float %475, i32 %376, i32 %377, i32 %378, i32 %379, i32 %429, i32 %430) #2, !dbg !33
  %512 = extractvalue { float, float, float, float } %511, 0, !dbg !33
  %513 = extractvalue { float, float, float, float } %511, 1, !dbg !33
  %514 = extractvalue { float, float, float, float } %511, 2, !dbg !33
  %515 = extractvalue { float, float, float, float } %511, 3, !dbg !33
  %516 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %477, float %478, float %479, float %480, i32 %376, i32 %377, i32 %378, i32 %379, i32 %443, i32 %444) #2, !dbg !33
  %517 = extractvalue { float, float, float, float } %516, 0, !dbg !33
  %518 = extractvalue { float, float, float, float } %516, 1, !dbg !33
  %519 = extractvalue { float, float, float, float } %516, 2, !dbg !33
  %520 = extractvalue { float, float, float, float } %516, 3, !dbg !33
  %521 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %482, float %483, float %484, float %485, i32 %376, i32 %377, i32 %378, i32 %379, i32 %457, i32 %458) #2, !dbg !33
  %522 = extractvalue { float, float, float, float } %521, 0, !dbg !33
  %523 = extractvalue { float, float, float, float } %521, 1, !dbg !33
  %524 = extractvalue { float, float, float, float } %521, 2, !dbg !33
  %525 = extractvalue { float, float, float, float } %521, 3, !dbg !33
  %526 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %487, float %488, float %489, float %490, i32 %396, i32 %397, i32 %398, i32 %399, i32 %415, i32 %416) #2, !dbg !33
  %527 = extractvalue { float, float, float, float } %526, 0, !dbg !33
  %528 = extractvalue { float, float, float, float } %526, 1, !dbg !33
  %529 = extractvalue { float, float, float, float } %526, 2, !dbg !33
  %530 = extractvalue { float, float, float, float } %526, 3, !dbg !33
  %531 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %492, float %493, float %494, float %495, i32 %396, i32 %397, i32 %398, i32 %399, i32 %429, i32 %430) #2, !dbg !33
  %532 = extractvalue { float, float, float, float } %531, 0, !dbg !33
  %533 = extractvalue { float, float, float, float } %531, 1, !dbg !33
  %534 = extractvalue { float, float, float, float } %531, 2, !dbg !33
  %535 = extractvalue { float, float, float, float } %531, 3, !dbg !33
  %536 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %497, float %498, float %499, float %500, i32 %396, i32 %397, i32 %398, i32 %399, i32 %443, i32 %444) #2, !dbg !33
  %537 = extractvalue { float, float, float, float } %536, 0, !dbg !33
  %538 = extractvalue { float, float, float, float } %536, 1, !dbg !33
  %539 = extractvalue { float, float, float, float } %536, 2, !dbg !33
  %540 = extractvalue { float, float, float, float } %536, 3, !dbg !33
  %541 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %502, float %503, float %504, float %505, i32 %396, i32 %397, i32 %398, i32 %399, i32 %457, i32 %458) #2, !dbg !33
  %542 = extractvalue { float, float, float, float } %541, 0, !dbg !33
  %543 = extractvalue { float, float, float, float } %541, 1, !dbg !33
  %544 = extractvalue { float, float, float, float } %541, 2, !dbg !33
  %545 = extractvalue { float, float, float, float } %541, 3, !dbg !33
  %546 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %507, float %508, float %509, float %510, i32 %381, i32 %382, i32 %383, i32 %384, i32 %420, i32 %421) #2, !dbg !33
  %547 = extractvalue { float, float, float, float } %546, 0, !dbg !33
  %548 = extractvalue { float, float, float, float } %546, 1, !dbg !33
  %549 = extractvalue { float, float, float, float } %546, 2, !dbg !33
  %550 = extractvalue { float, float, float, float } %546, 3, !dbg !33
  %551 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %512, float %513, float %514, float %515, i32 %381, i32 %382, i32 %383, i32 %384, i32 %434, i32 %435) #2, !dbg !33
  %552 = extractvalue { float, float, float, float } %551, 0, !dbg !33
  %553 = extractvalue { float, float, float, float } %551, 1, !dbg !33
  %554 = extractvalue { float, float, float, float } %551, 2, !dbg !33
  %555 = extractvalue { float, float, float, float } %551, 3, !dbg !33
  %556 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %517, float %518, float %519, float %520, i32 %381, i32 %382, i32 %383, i32 %384, i32 %448, i32 %449) #2, !dbg !33
  %557 = extractvalue { float, float, float, float } %556, 0, !dbg !33
  %558 = extractvalue { float, float, float, float } %556, 1, !dbg !33
  %559 = extractvalue { float, float, float, float } %556, 2, !dbg !33
  %560 = extractvalue { float, float, float, float } %556, 3, !dbg !33
  %561 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %522, float %523, float %524, float %525, i32 %381, i32 %382, i32 %383, i32 %384, i32 %462, i32 %463) #2, !dbg !33
  %562 = extractvalue { float, float, float, float } %561, 0, !dbg !33
  %563 = extractvalue { float, float, float, float } %561, 1, !dbg !33
  %564 = extractvalue { float, float, float, float } %561, 2, !dbg !33
  %565 = extractvalue { float, float, float, float } %561, 3, !dbg !33
  %566 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %527, float %528, float %529, float %530, i32 %401, i32 %402, i32 %403, i32 %404, i32 %420, i32 %421) #2, !dbg !33
  %567 = extractvalue { float, float, float, float } %566, 0, !dbg !33
  %568 = extractvalue { float, float, float, float } %566, 1, !dbg !33
  %569 = extractvalue { float, float, float, float } %566, 2, !dbg !33
  %570 = extractvalue { float, float, float, float } %566, 3, !dbg !33
  %571 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %532, float %533, float %534, float %535, i32 %401, i32 %402, i32 %403, i32 %404, i32 %434, i32 %435) #2, !dbg !33
  %572 = extractvalue { float, float, float, float } %571, 0, !dbg !33
  %573 = extractvalue { float, float, float, float } %571, 1, !dbg !33
  %574 = extractvalue { float, float, float, float } %571, 2, !dbg !33
  %575 = extractvalue { float, float, float, float } %571, 3, !dbg !33
  %576 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %537, float %538, float %539, float %540, i32 %401, i32 %402, i32 %403, i32 %404, i32 %448, i32 %449) #2, !dbg !33
  %577 = extractvalue { float, float, float, float } %576, 0, !dbg !33
  %578 = extractvalue { float, float, float, float } %576, 1, !dbg !33
  %579 = extractvalue { float, float, float, float } %576, 2, !dbg !33
  %580 = extractvalue { float, float, float, float } %576, 3, !dbg !33
  %581 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %542, float %543, float %544, float %545, i32 %401, i32 %402, i32 %403, i32 %404, i32 %462, i32 %463) #2, !dbg !33
  %582 = extractvalue { float, float, float, float } %581, 0, !dbg !33
  %583 = extractvalue { float, float, float, float } %581, 1, !dbg !33
  %584 = extractvalue { float, float, float, float } %581, 2, !dbg !33
  %585 = extractvalue { float, float, float, float } %581, 3, !dbg !33
  %586 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %547, float %548, float %549, float %550, i32 %386, i32 %387, i32 %388, i32 %389, i32 %422, i32 %423) #2, !dbg !33
  %587 = extractvalue { float, float, float, float } %586, 0, !dbg !33
  %588 = extractvalue { float, float, float, float } %586, 1, !dbg !33
  %589 = extractvalue { float, float, float, float } %586, 2, !dbg !33
  %590 = extractvalue { float, float, float, float } %586, 3, !dbg !33
  %591 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %552, float %553, float %554, float %555, i32 %386, i32 %387, i32 %388, i32 %389, i32 %436, i32 %437) #2, !dbg !33
  %592 = extractvalue { float, float, float, float } %591, 0, !dbg !33
  %593 = extractvalue { float, float, float, float } %591, 1, !dbg !33
  %594 = extractvalue { float, float, float, float } %591, 2, !dbg !33
  %595 = extractvalue { float, float, float, float } %591, 3, !dbg !33
  %596 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %557, float %558, float %559, float %560, i32 %386, i32 %387, i32 %388, i32 %389, i32 %450, i32 %451) #2, !dbg !33
  %597 = extractvalue { float, float, float, float } %596, 0, !dbg !33
  %598 = extractvalue { float, float, float, float } %596, 1, !dbg !33
  %599 = extractvalue { float, float, float, float } %596, 2, !dbg !33
  %600 = extractvalue { float, float, float, float } %596, 3, !dbg !33
  %601 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %562, float %563, float %564, float %565, i32 %386, i32 %387, i32 %388, i32 %389, i32 %464, i32 %465) #2, !dbg !33
  %602 = extractvalue { float, float, float, float } %601, 0, !dbg !33
  %603 = extractvalue { float, float, float, float } %601, 1, !dbg !33
  %604 = extractvalue { float, float, float, float } %601, 2, !dbg !33
  %605 = extractvalue { float, float, float, float } %601, 3, !dbg !33
  %606 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %567, float %568, float %569, float %570, i32 %406, i32 %407, i32 %408, i32 %409, i32 %422, i32 %423) #2, !dbg !33
  %607 = extractvalue { float, float, float, float } %606, 0, !dbg !33
  %608 = extractvalue { float, float, float, float } %606, 1, !dbg !33
  %609 = extractvalue { float, float, float, float } %606, 2, !dbg !33
  %610 = extractvalue { float, float, float, float } %606, 3, !dbg !33
  %611 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %572, float %573, float %574, float %575, i32 %406, i32 %407, i32 %408, i32 %409, i32 %436, i32 %437) #2, !dbg !33
  %612 = extractvalue { float, float, float, float } %611, 0, !dbg !33
  %613 = extractvalue { float, float, float, float } %611, 1, !dbg !33
  %614 = extractvalue { float, float, float, float } %611, 2, !dbg !33
  %615 = extractvalue { float, float, float, float } %611, 3, !dbg !33
  %616 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %577, float %578, float %579, float %580, i32 %406, i32 %407, i32 %408, i32 %409, i32 %450, i32 %451) #2, !dbg !33
  %617 = extractvalue { float, float, float, float } %616, 0, !dbg !33
  %618 = extractvalue { float, float, float, float } %616, 1, !dbg !33
  %619 = extractvalue { float, float, float, float } %616, 2, !dbg !33
  %620 = extractvalue { float, float, float, float } %616, 3, !dbg !33
  %621 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %582, float %583, float %584, float %585, i32 %406, i32 %407, i32 %408, i32 %409, i32 %464, i32 %465) #2, !dbg !33
  %622 = extractvalue { float, float, float, float } %621, 0, !dbg !33
  %623 = extractvalue { float, float, float, float } %621, 1, !dbg !33
  %624 = extractvalue { float, float, float, float } %621, 2, !dbg !33
  %625 = extractvalue { float, float, float, float } %621, 3, !dbg !33
  %626 = tail call float @llvm.maxnum.f32(float %587, float %588), !dbg !34
  %627 = tail call float @llvm.maxnum.f32(float %589, float %590), !dbg !34
  %628 = tail call float @llvm.maxnum.f32(float %626, float %592), !dbg !34
  %629 = tail call float @llvm.maxnum.f32(float %628, float %593), !dbg !34
  %630 = tail call float @llvm.maxnum.f32(float %627, float %594), !dbg !34
  %631 = tail call float @llvm.maxnum.f32(float %630, float %595), !dbg !34
  %632 = tail call float @llvm.maxnum.f32(float %629, float %597), !dbg !34
  %633 = tail call float @llvm.maxnum.f32(float %632, float %598), !dbg !34
  %634 = tail call float @llvm.maxnum.f32(float %631, float %599), !dbg !34
  %635 = tail call float @llvm.maxnum.f32(float %634, float %600), !dbg !34
  %636 = tail call float @llvm.maxnum.f32(float %633, float %602), !dbg !34
  %637 = tail call float @llvm.maxnum.f32(float %636, float %603), !dbg !34
  %638 = tail call float @llvm.maxnum.f32(float %635, float %604), !dbg !34
  %639 = tail call float @llvm.maxnum.f32(float %638, float %605), !dbg !34
  %640 = tail call float @llvm.maxnum.f32(float %607, float %608), !dbg !34
  %641 = tail call float @llvm.maxnum.f32(float %609, float %610), !dbg !34
  %642 = tail call float @llvm.maxnum.f32(float %640, float %612), !dbg !34
  %643 = tail call float @llvm.maxnum.f32(float %642, float %613), !dbg !34
  %644 = tail call float @llvm.maxnum.f32(float %641, float %614), !dbg !34
  %645 = tail call float @llvm.maxnum.f32(float %644, float %615), !dbg !34
  %646 = tail call float @llvm.maxnum.f32(float %643, float %617), !dbg !34
  %647 = tail call float @llvm.maxnum.f32(float %646, float %618), !dbg !34
  %648 = tail call float @llvm.maxnum.f32(float %645, float %619), !dbg !34
  %649 = tail call float @llvm.maxnum.f32(float %648, float %620), !dbg !34
  %650 = tail call float @llvm.maxnum.f32(float %647, float %622), !dbg !34
  %651 = tail call float @llvm.maxnum.f32(float %650, float %623), !dbg !34
  %652 = tail call float @llvm.maxnum.f32(float %649, float %624), !dbg !34
  %653 = tail call float @llvm.maxnum.f32(float %652, float %625), !dbg !34
  %654 = bitcast float %637 to i32, !dbg !37
  %655 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %654, i32 2, i32 31), !dbg !37
  %656 = bitcast i32 %655 to float, !dbg !37
  %657 = bitcast float %639 to i32, !dbg !37
  %658 = bitcast float %651 to i32, !dbg !37
  %659 = bitcast float %653 to i32, !dbg !37
  %660 = tail call float @llvm.maxnum.f32(float %637, float %656), !dbg !34
  %661 = bitcast float %660 to i32, !dbg !37
  %662 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %661, i32 1, i32 31), !dbg !37
  %663 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %657, i32 2, i32 31), !dbg !37
  %664 = bitcast i32 %663 to float, !dbg !37
  %665 = tail call float @llvm.maxnum.f32(float %639, float %664), !dbg !34
  %666 = bitcast float %665 to i32, !dbg !37
  %667 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %666, i32 1, i32 31), !dbg !37
  %668 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %658, i32 2, i32 31), !dbg !37
  %669 = bitcast i32 %668 to float, !dbg !37
  %670 = tail call float @llvm.maxnum.f32(float %651, float %669), !dbg !34
  %671 = bitcast float %670 to i32, !dbg !37
  %672 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %671, i32 1, i32 31), !dbg !37
  %673 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %659, i32 2, i32 31), !dbg !37
  %674 = bitcast i32 %673 to float, !dbg !37
  %675 = tail call float @llvm.maxnum.f32(float %653, float %674), !dbg !34
  %676 = bitcast float %675 to i32, !dbg !37
  %677 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %676, i32 1, i32 31), !dbg !37
  %678 = insertelement <4 x i32> poison, i32 %662, i64 0, !dbg !37
  %679 = insertelement <4 x i32> %678, i32 %667, i64 1, !dbg !37
  %680 = insertelement <4 x i32> %679, i32 %672, i64 2, !dbg !37
  %681 = insertelement <4 x i32> %680, i32 %677, i64 3, !dbg !37
  %682 = bitcast <4 x i32> %681 to <4 x float>, !dbg !37
  %683 = insertelement <4 x float> poison, float %660, i64 0, !dbg !34
  %684 = insertelement <4 x float> %683, float %665, i64 1, !dbg !34
  %685 = insertelement <4 x float> %684, float %670, i64 2, !dbg !34
  %686 = insertelement <4 x float> %685, float %675, i64 3, !dbg !34
  %687 = tail call <4 x float> @llvm.maxnum.v4f32(<4 x float> %686, <4 x float> %682), !dbg !34
  %688 = fmul <4 x float> %292, %687, !dbg !32
  %689 = tail call <4 x float> @llvm.maxnum.v4f32(<4 x float> %362, <4 x float> %688), !dbg !38
  %690 = fmul float %52, %587, !dbg !39
  %691 = fmul float %52, %588, !dbg !39
  %692 = fmul float %52, %589, !dbg !39
  %693 = fmul float %52, %590, !dbg !39
  %694 = fmul float %52, %592, !dbg !39
  %695 = fmul float %52, %593, !dbg !39
  %696 = fmul float %52, %594, !dbg !39
  %697 = fmul float %52, %595, !dbg !39
  %698 = fmul float %52, %597, !dbg !39
  %699 = fmul float %52, %598, !dbg !39
  %700 = fmul float %52, %599, !dbg !39
  %701 = fmul float %52, %600, !dbg !39
  %702 = fmul float %52, %602, !dbg !39
  %703 = fmul float %52, %603, !dbg !39
  %704 = fmul float %52, %604, !dbg !39
  %705 = fmul float %52, %605, !dbg !39
  %706 = fmul float %52, %607, !dbg !39
  %707 = fmul float %52, %608, !dbg !39
  %708 = fmul float %52, %609, !dbg !39
  %709 = fmul float %52, %610, !dbg !39
  %710 = fmul float %52, %612, !dbg !39
  %711 = fmul float %52, %613, !dbg !39
  %712 = fmul float %52, %614, !dbg !39
  %713 = fmul float %52, %615, !dbg !39
  %714 = fmul float %52, %617, !dbg !39
  %715 = fmul float %52, %618, !dbg !39
  %716 = fmul float %52, %619, !dbg !39
  %717 = fmul float %52, %620, !dbg !39
  %718 = fmul float %52, %622, !dbg !39
  %719 = fmul float %52, %623, !dbg !39
  %720 = fmul float %52, %624, !dbg !39
  %721 = fmul float %52, %625, !dbg !39
  %722 = extractelement <4 x float> %689, i64 0, !dbg !40
  %723 = fsub float %690, %722, !dbg !40
  %724 = fsub float %691, %722, !dbg !40
  %725 = extractelement <4 x float> %689, i64 1, !dbg !40
  %726 = fsub float %692, %725, !dbg !40
  %727 = fsub float %693, %725, !dbg !40
  %728 = fsub float %694, %722, !dbg !40
  %729 = fsub float %695, %722, !dbg !40
  %730 = fsub float %696, %725, !dbg !40
  %731 = fsub float %697, %725, !dbg !40
  %732 = fsub float %698, %722, !dbg !40
  %733 = fsub float %699, %722, !dbg !40
  %734 = fsub float %700, %725, !dbg !40
  %735 = fsub float %701, %725, !dbg !40
  %736 = fsub float %702, %722, !dbg !40
  %737 = fsub float %703, %722, !dbg !40
  %738 = fsub float %704, %725, !dbg !40
  %739 = fsub float %705, %725, !dbg !40
  %740 = extractelement <4 x float> %689, i64 2, !dbg !40
  %741 = fsub float %706, %740, !dbg !40
  %742 = fsub float %707, %740, !dbg !40
  %743 = extractelement <4 x float> %689, i64 3, !dbg !40
  %744 = fsub float %708, %743, !dbg !40
  %745 = fsub float %709, %743, !dbg !40
  %746 = fsub float %710, %740, !dbg !40
  %747 = fsub float %711, %740, !dbg !40
  %748 = fsub float %712, %743, !dbg !40
  %749 = fsub float %713, %743, !dbg !40
  %750 = fsub float %714, %740, !dbg !40
  %751 = fsub float %715, %740, !dbg !40
  %752 = fsub float %716, %743, !dbg !40
  %753 = fsub float %717, %743, !dbg !40
  %754 = fsub float %718, %740, !dbg !40
  %755 = fsub float %719, %740, !dbg !40
  %756 = fsub float %720, %743, !dbg !40
  %757 = fsub float %721, %743, !dbg !40
  %758 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i = icmp eq i32 %758, 0, !dbg !41
  br i1 %.not.i, label %761, label %759, !dbg !41

759:                                              ; preds = %293
  %760 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %723) #2, !dbg !41
  br label %__nv_exp2f.exit, !dbg !41

761:                                              ; preds = %293
  %762 = tail call float @llvm.nvvm.ex2.approx.f(float %723) #2, !dbg !41
  br label %__nv_exp2f.exit, !dbg !41

__nv_exp2f.exit:                                  ; preds = %759, %761
  %.0.i = phi float [ %760, %759 ], [ %762, %761 ], !dbg !41
  %763 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i105 = icmp eq i32 %763, 0, !dbg !41
  br i1 %.not.i105, label %766, label %764, !dbg !41

764:                                              ; preds = %__nv_exp2f.exit
  %765 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %724) #2, !dbg !41
  br label %__nv_exp2f.exit107, !dbg !41

766:                                              ; preds = %__nv_exp2f.exit
  %767 = tail call float @llvm.nvvm.ex2.approx.f(float %724) #2, !dbg !41
  br label %__nv_exp2f.exit107, !dbg !41

__nv_exp2f.exit107:                               ; preds = %764, %766
  %.0.i106 = phi float [ %765, %764 ], [ %767, %766 ], !dbg !41
  %768 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i108 = icmp eq i32 %768, 0, !dbg !41
  br i1 %.not.i108, label %771, label %769, !dbg !41

769:                                              ; preds = %__nv_exp2f.exit107
  %770 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %726) #2, !dbg !41
  br label %__nv_exp2f.exit110, !dbg !41

771:                                              ; preds = %__nv_exp2f.exit107
  %772 = tail call float @llvm.nvvm.ex2.approx.f(float %726) #2, !dbg !41
  br label %__nv_exp2f.exit110, !dbg !41

__nv_exp2f.exit110:                               ; preds = %769, %771
  %.0.i109 = phi float [ %770, %769 ], [ %772, %771 ], !dbg !41
  %773 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i111 = icmp eq i32 %773, 0, !dbg !41
  br i1 %.not.i111, label %776, label %774, !dbg !41

774:                                              ; preds = %__nv_exp2f.exit110
  %775 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %727) #2, !dbg !41
  br label %__nv_exp2f.exit113, !dbg !41

776:                                              ; preds = %__nv_exp2f.exit110
  %777 = tail call float @llvm.nvvm.ex2.approx.f(float %727) #2, !dbg !41
  br label %__nv_exp2f.exit113, !dbg !41

__nv_exp2f.exit113:                               ; preds = %774, %776
  %.0.i112 = phi float [ %775, %774 ], [ %777, %776 ], !dbg !41
  %778 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i114 = icmp eq i32 %778, 0, !dbg !41
  br i1 %.not.i114, label %781, label %779, !dbg !41

779:                                              ; preds = %__nv_exp2f.exit113
  %780 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %728) #2, !dbg !41
  br label %__nv_exp2f.exit116, !dbg !41

781:                                              ; preds = %__nv_exp2f.exit113
  %782 = tail call float @llvm.nvvm.ex2.approx.f(float %728) #2, !dbg !41
  br label %__nv_exp2f.exit116, !dbg !41

__nv_exp2f.exit116:                               ; preds = %779, %781
  %.0.i115 = phi float [ %780, %779 ], [ %782, %781 ], !dbg !41
  %783 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i117 = icmp eq i32 %783, 0, !dbg !41
  br i1 %.not.i117, label %786, label %784, !dbg !41

784:                                              ; preds = %__nv_exp2f.exit116
  %785 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %729) #2, !dbg !41
  br label %__nv_exp2f.exit119, !dbg !41

786:                                              ; preds = %__nv_exp2f.exit116
  %787 = tail call float @llvm.nvvm.ex2.approx.f(float %729) #2, !dbg !41
  br label %__nv_exp2f.exit119, !dbg !41

__nv_exp2f.exit119:                               ; preds = %784, %786
  %.0.i118 = phi float [ %785, %784 ], [ %787, %786 ], !dbg !41
  %788 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i120 = icmp eq i32 %788, 0, !dbg !41
  br i1 %.not.i120, label %791, label %789, !dbg !41

789:                                              ; preds = %__nv_exp2f.exit119
  %790 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %730) #2, !dbg !41
  br label %__nv_exp2f.exit122, !dbg !41

791:                                              ; preds = %__nv_exp2f.exit119
  %792 = tail call float @llvm.nvvm.ex2.approx.f(float %730) #2, !dbg !41
  br label %__nv_exp2f.exit122, !dbg !41

__nv_exp2f.exit122:                               ; preds = %789, %791
  %.0.i121 = phi float [ %790, %789 ], [ %792, %791 ], !dbg !41
  %793 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i123 = icmp eq i32 %793, 0, !dbg !41
  br i1 %.not.i123, label %796, label %794, !dbg !41

794:                                              ; preds = %__nv_exp2f.exit122
  %795 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %731) #2, !dbg !41
  br label %__nv_exp2f.exit125, !dbg !41

796:                                              ; preds = %__nv_exp2f.exit122
  %797 = tail call float @llvm.nvvm.ex2.approx.f(float %731) #2, !dbg !41
  br label %__nv_exp2f.exit125, !dbg !41

__nv_exp2f.exit125:                               ; preds = %794, %796
  %.0.i124 = phi float [ %795, %794 ], [ %797, %796 ], !dbg !41
  %798 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i126 = icmp eq i32 %798, 0, !dbg !41
  br i1 %.not.i126, label %801, label %799, !dbg !41

799:                                              ; preds = %__nv_exp2f.exit125
  %800 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %732) #2, !dbg !41
  br label %__nv_exp2f.exit128, !dbg !41

801:                                              ; preds = %__nv_exp2f.exit125
  %802 = tail call float @llvm.nvvm.ex2.approx.f(float %732) #2, !dbg !41
  br label %__nv_exp2f.exit128, !dbg !41

__nv_exp2f.exit128:                               ; preds = %799, %801
  %.0.i127 = phi float [ %800, %799 ], [ %802, %801 ], !dbg !41
  %803 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i129 = icmp eq i32 %803, 0, !dbg !41
  br i1 %.not.i129, label %806, label %804, !dbg !41

804:                                              ; preds = %__nv_exp2f.exit128
  %805 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %733) #2, !dbg !41
  br label %__nv_exp2f.exit131, !dbg !41

806:                                              ; preds = %__nv_exp2f.exit128
  %807 = tail call float @llvm.nvvm.ex2.approx.f(float %733) #2, !dbg !41
  br label %__nv_exp2f.exit131, !dbg !41

__nv_exp2f.exit131:                               ; preds = %804, %806
  %.0.i130 = phi float [ %805, %804 ], [ %807, %806 ], !dbg !41
  %808 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i132 = icmp eq i32 %808, 0, !dbg !41
  br i1 %.not.i132, label %811, label %809, !dbg !41

809:                                              ; preds = %__nv_exp2f.exit131
  %810 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %734) #2, !dbg !41
  br label %__nv_exp2f.exit134, !dbg !41

811:                                              ; preds = %__nv_exp2f.exit131
  %812 = tail call float @llvm.nvvm.ex2.approx.f(float %734) #2, !dbg !41
  br label %__nv_exp2f.exit134, !dbg !41

__nv_exp2f.exit134:                               ; preds = %809, %811
  %.0.i133 = phi float [ %810, %809 ], [ %812, %811 ], !dbg !41
  %813 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i135 = icmp eq i32 %813, 0, !dbg !41
  br i1 %.not.i135, label %816, label %814, !dbg !41

814:                                              ; preds = %__nv_exp2f.exit134
  %815 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %735) #2, !dbg !41
  br label %__nv_exp2f.exit137, !dbg !41

816:                                              ; preds = %__nv_exp2f.exit134
  %817 = tail call float @llvm.nvvm.ex2.approx.f(float %735) #2, !dbg !41
  br label %__nv_exp2f.exit137, !dbg !41

__nv_exp2f.exit137:                               ; preds = %814, %816
  %.0.i136 = phi float [ %815, %814 ], [ %817, %816 ], !dbg !41
  %818 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i138 = icmp eq i32 %818, 0, !dbg !41
  br i1 %.not.i138, label %821, label %819, !dbg !41

819:                                              ; preds = %__nv_exp2f.exit137
  %820 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %736) #2, !dbg !41
  br label %__nv_exp2f.exit140, !dbg !41

821:                                              ; preds = %__nv_exp2f.exit137
  %822 = tail call float @llvm.nvvm.ex2.approx.f(float %736) #2, !dbg !41
  br label %__nv_exp2f.exit140, !dbg !41

__nv_exp2f.exit140:                               ; preds = %819, %821
  %.0.i139 = phi float [ %820, %819 ], [ %822, %821 ], !dbg !41
  %823 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i141 = icmp eq i32 %823, 0, !dbg !41
  br i1 %.not.i141, label %826, label %824, !dbg !41

824:                                              ; preds = %__nv_exp2f.exit140
  %825 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %737) #2, !dbg !41
  br label %__nv_exp2f.exit143, !dbg !41

826:                                              ; preds = %__nv_exp2f.exit140
  %827 = tail call float @llvm.nvvm.ex2.approx.f(float %737) #2, !dbg !41
  br label %__nv_exp2f.exit143, !dbg !41

__nv_exp2f.exit143:                               ; preds = %824, %826
  %.0.i142 = phi float [ %825, %824 ], [ %827, %826 ], !dbg !41
  %828 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i144 = icmp eq i32 %828, 0, !dbg !41
  br i1 %.not.i144, label %831, label %829, !dbg !41

829:                                              ; preds = %__nv_exp2f.exit143
  %830 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %738) #2, !dbg !41
  br label %__nv_exp2f.exit146, !dbg !41

831:                                              ; preds = %__nv_exp2f.exit143
  %832 = tail call float @llvm.nvvm.ex2.approx.f(float %738) #2, !dbg !41
  br label %__nv_exp2f.exit146, !dbg !41

__nv_exp2f.exit146:                               ; preds = %829, %831
  %.0.i145 = phi float [ %830, %829 ], [ %832, %831 ], !dbg !41
  %833 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i147 = icmp eq i32 %833, 0, !dbg !41
  br i1 %.not.i147, label %836, label %834, !dbg !41

834:                                              ; preds = %__nv_exp2f.exit146
  %835 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %739) #2, !dbg !41
  br label %__nv_exp2f.exit149, !dbg !41

836:                                              ; preds = %__nv_exp2f.exit146
  %837 = tail call float @llvm.nvvm.ex2.approx.f(float %739) #2, !dbg !41
  br label %__nv_exp2f.exit149, !dbg !41

__nv_exp2f.exit149:                               ; preds = %834, %836
  %.0.i148 = phi float [ %835, %834 ], [ %837, %836 ], !dbg !41
  %838 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i150 = icmp eq i32 %838, 0, !dbg !41
  br i1 %.not.i150, label %841, label %839, !dbg !41

839:                                              ; preds = %__nv_exp2f.exit149
  %840 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %741) #2, !dbg !41
  br label %__nv_exp2f.exit152, !dbg !41

841:                                              ; preds = %__nv_exp2f.exit149
  %842 = tail call float @llvm.nvvm.ex2.approx.f(float %741) #2, !dbg !41
  br label %__nv_exp2f.exit152, !dbg !41

__nv_exp2f.exit152:                               ; preds = %839, %841
  %.0.i151 = phi float [ %840, %839 ], [ %842, %841 ], !dbg !41
  %843 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i153 = icmp eq i32 %843, 0, !dbg !41
  br i1 %.not.i153, label %846, label %844, !dbg !41

844:                                              ; preds = %__nv_exp2f.exit152
  %845 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %742) #2, !dbg !41
  br label %__nv_exp2f.exit155, !dbg !41

846:                                              ; preds = %__nv_exp2f.exit152
  %847 = tail call float @llvm.nvvm.ex2.approx.f(float %742) #2, !dbg !41
  br label %__nv_exp2f.exit155, !dbg !41

__nv_exp2f.exit155:                               ; preds = %844, %846
  %.0.i154 = phi float [ %845, %844 ], [ %847, %846 ], !dbg !41
  %848 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i156 = icmp eq i32 %848, 0, !dbg !41
  br i1 %.not.i156, label %851, label %849, !dbg !41

849:                                              ; preds = %__nv_exp2f.exit155
  %850 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %744) #2, !dbg !41
  br label %__nv_exp2f.exit158, !dbg !41

851:                                              ; preds = %__nv_exp2f.exit155
  %852 = tail call float @llvm.nvvm.ex2.approx.f(float %744) #2, !dbg !41
  br label %__nv_exp2f.exit158, !dbg !41

__nv_exp2f.exit158:                               ; preds = %849, %851
  %.0.i157 = phi float [ %850, %849 ], [ %852, %851 ], !dbg !41
  %853 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i159 = icmp eq i32 %853, 0, !dbg !41
  br i1 %.not.i159, label %856, label %854, !dbg !41

854:                                              ; preds = %__nv_exp2f.exit158
  %855 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %745) #2, !dbg !41
  br label %__nv_exp2f.exit161, !dbg !41

856:                                              ; preds = %__nv_exp2f.exit158
  %857 = tail call float @llvm.nvvm.ex2.approx.f(float %745) #2, !dbg !41
  br label %__nv_exp2f.exit161, !dbg !41

__nv_exp2f.exit161:                               ; preds = %854, %856
  %.0.i160 = phi float [ %855, %854 ], [ %857, %856 ], !dbg !41
  %858 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i162 = icmp eq i32 %858, 0, !dbg !41
  br i1 %.not.i162, label %861, label %859, !dbg !41

859:                                              ; preds = %__nv_exp2f.exit161
  %860 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %746) #2, !dbg !41
  br label %__nv_exp2f.exit164, !dbg !41

861:                                              ; preds = %__nv_exp2f.exit161
  %862 = tail call float @llvm.nvvm.ex2.approx.f(float %746) #2, !dbg !41
  br label %__nv_exp2f.exit164, !dbg !41

__nv_exp2f.exit164:                               ; preds = %859, %861
  %.0.i163 = phi float [ %860, %859 ], [ %862, %861 ], !dbg !41
  %863 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i165 = icmp eq i32 %863, 0, !dbg !41
  br i1 %.not.i165, label %866, label %864, !dbg !41

864:                                              ; preds = %__nv_exp2f.exit164
  %865 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %747) #2, !dbg !41
  br label %__nv_exp2f.exit167, !dbg !41

866:                                              ; preds = %__nv_exp2f.exit164
  %867 = tail call float @llvm.nvvm.ex2.approx.f(float %747) #2, !dbg !41
  br label %__nv_exp2f.exit167, !dbg !41

__nv_exp2f.exit167:                               ; preds = %864, %866
  %.0.i166 = phi float [ %865, %864 ], [ %867, %866 ], !dbg !41
  %868 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i168 = icmp eq i32 %868, 0, !dbg !41
  br i1 %.not.i168, label %871, label %869, !dbg !41

869:                                              ; preds = %__nv_exp2f.exit167
  %870 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %748) #2, !dbg !41
  br label %__nv_exp2f.exit170, !dbg !41

871:                                              ; preds = %__nv_exp2f.exit167
  %872 = tail call float @llvm.nvvm.ex2.approx.f(float %748) #2, !dbg !41
  br label %__nv_exp2f.exit170, !dbg !41

__nv_exp2f.exit170:                               ; preds = %869, %871
  %.0.i169 = phi float [ %870, %869 ], [ %872, %871 ], !dbg !41
  %873 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i171 = icmp eq i32 %873, 0, !dbg !41
  br i1 %.not.i171, label %876, label %874, !dbg !41

874:                                              ; preds = %__nv_exp2f.exit170
  %875 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %749) #2, !dbg !41
  br label %__nv_exp2f.exit173, !dbg !41

876:                                              ; preds = %__nv_exp2f.exit170
  %877 = tail call float @llvm.nvvm.ex2.approx.f(float %749) #2, !dbg !41
  br label %__nv_exp2f.exit173, !dbg !41

__nv_exp2f.exit173:                               ; preds = %874, %876
  %.0.i172 = phi float [ %875, %874 ], [ %877, %876 ], !dbg !41
  %878 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i174 = icmp eq i32 %878, 0, !dbg !41
  br i1 %.not.i174, label %881, label %879, !dbg !41

879:                                              ; preds = %__nv_exp2f.exit173
  %880 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %750) #2, !dbg !41
  br label %__nv_exp2f.exit176, !dbg !41

881:                                              ; preds = %__nv_exp2f.exit173
  %882 = tail call float @llvm.nvvm.ex2.approx.f(float %750) #2, !dbg !41
  br label %__nv_exp2f.exit176, !dbg !41

__nv_exp2f.exit176:                               ; preds = %879, %881
  %.0.i175 = phi float [ %880, %879 ], [ %882, %881 ], !dbg !41
  %883 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i177 = icmp eq i32 %883, 0, !dbg !41
  br i1 %.not.i177, label %886, label %884, !dbg !41

884:                                              ; preds = %__nv_exp2f.exit176
  %885 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %751) #2, !dbg !41
  br label %__nv_exp2f.exit179, !dbg !41

886:                                              ; preds = %__nv_exp2f.exit176
  %887 = tail call float @llvm.nvvm.ex2.approx.f(float %751) #2, !dbg !41
  br label %__nv_exp2f.exit179, !dbg !41

__nv_exp2f.exit179:                               ; preds = %884, %886
  %.0.i178 = phi float [ %885, %884 ], [ %887, %886 ], !dbg !41
  %888 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i180 = icmp eq i32 %888, 0, !dbg !41
  br i1 %.not.i180, label %891, label %889, !dbg !41

889:                                              ; preds = %__nv_exp2f.exit179
  %890 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %752) #2, !dbg !41
  br label %__nv_exp2f.exit182, !dbg !41

891:                                              ; preds = %__nv_exp2f.exit179
  %892 = tail call float @llvm.nvvm.ex2.approx.f(float %752) #2, !dbg !41
  br label %__nv_exp2f.exit182, !dbg !41

__nv_exp2f.exit182:                               ; preds = %889, %891
  %.0.i181 = phi float [ %890, %889 ], [ %892, %891 ], !dbg !41
  %893 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i183 = icmp eq i32 %893, 0, !dbg !41
  br i1 %.not.i183, label %896, label %894, !dbg !41

894:                                              ; preds = %__nv_exp2f.exit182
  %895 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %753) #2, !dbg !41
  br label %__nv_exp2f.exit185, !dbg !41

896:                                              ; preds = %__nv_exp2f.exit182
  %897 = tail call float @llvm.nvvm.ex2.approx.f(float %753) #2, !dbg !41
  br label %__nv_exp2f.exit185, !dbg !41

__nv_exp2f.exit185:                               ; preds = %894, %896
  %.0.i184 = phi float [ %895, %894 ], [ %897, %896 ], !dbg !41
  %898 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i186 = icmp eq i32 %898, 0, !dbg !41
  br i1 %.not.i186, label %901, label %899, !dbg !41

899:                                              ; preds = %__nv_exp2f.exit185
  %900 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %754) #2, !dbg !41
  br label %__nv_exp2f.exit188, !dbg !41

901:                                              ; preds = %__nv_exp2f.exit185
  %902 = tail call float @llvm.nvvm.ex2.approx.f(float %754) #2, !dbg !41
  br label %__nv_exp2f.exit188, !dbg !41

__nv_exp2f.exit188:                               ; preds = %899, %901
  %.0.i187 = phi float [ %900, %899 ], [ %902, %901 ], !dbg !41
  %903 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i189 = icmp eq i32 %903, 0, !dbg !41
  br i1 %.not.i189, label %906, label %904, !dbg !41

904:                                              ; preds = %__nv_exp2f.exit188
  %905 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %755) #2, !dbg !41
  br label %__nv_exp2f.exit191, !dbg !41

906:                                              ; preds = %__nv_exp2f.exit188
  %907 = tail call float @llvm.nvvm.ex2.approx.f(float %755) #2, !dbg !41
  br label %__nv_exp2f.exit191, !dbg !41

__nv_exp2f.exit191:                               ; preds = %904, %906
  %.0.i190 = phi float [ %905, %904 ], [ %907, %906 ], !dbg !41
  %908 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i192 = icmp eq i32 %908, 0, !dbg !41
  br i1 %.not.i192, label %911, label %909, !dbg !41

909:                                              ; preds = %__nv_exp2f.exit191
  %910 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %756) #2, !dbg !41
  br label %__nv_exp2f.exit194, !dbg !41

911:                                              ; preds = %__nv_exp2f.exit191
  %912 = tail call float @llvm.nvvm.ex2.approx.f(float %756) #2, !dbg !41
  br label %__nv_exp2f.exit194, !dbg !41

__nv_exp2f.exit194:                               ; preds = %909, %911
  %.0.i193 = phi float [ %910, %909 ], [ %912, %911 ], !dbg !41
  %913 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !41
  %.not.i195 = icmp eq i32 %913, 0, !dbg !41
  br i1 %.not.i195, label %916, label %914, !dbg !41

914:                                              ; preds = %__nv_exp2f.exit194
  %915 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %757) #2, !dbg !41
  br label %__nv_exp2f.exit197, !dbg !41

916:                                              ; preds = %__nv_exp2f.exit194
  %917 = tail call float @llvm.nvvm.ex2.approx.f(float %757) #2, !dbg !41
  br label %__nv_exp2f.exit197, !dbg !41

__nv_exp2f.exit197:                               ; preds = %914, %916
  %.0.i196 = phi float [ %915, %914 ], [ %917, %916 ], !dbg !41
  %918 = fadd float %.0.i, %.0.i106, !dbg !42
  %919 = fadd float %.0.i109, %.0.i112, !dbg !42
  %920 = fadd float %918, %.0.i115, !dbg !42
  %921 = fadd float %920, %.0.i118, !dbg !42
  %922 = fadd float %919, %.0.i121, !dbg !42
  %923 = fadd float %922, %.0.i124, !dbg !42
  %924 = fadd float %921, %.0.i127, !dbg !42
  %925 = fadd float %924, %.0.i130, !dbg !42
  %926 = fadd float %923, %.0.i133, !dbg !42
  %927 = fadd float %926, %.0.i136, !dbg !42
  %928 = fadd float %925, %.0.i139, !dbg !42
  %929 = fadd float %928, %.0.i142, !dbg !42
  %930 = fadd float %927, %.0.i145, !dbg !42
  %931 = fadd float %930, %.0.i148, !dbg !42
  %932 = fadd float %.0.i151, %.0.i154, !dbg !42
  %933 = fadd float %.0.i157, %.0.i160, !dbg !42
  %934 = fadd float %932, %.0.i163, !dbg !42
  %935 = fadd float %934, %.0.i166, !dbg !42
  %936 = fadd float %933, %.0.i169, !dbg !42
  %937 = fadd float %936, %.0.i172, !dbg !42
  %938 = fadd float %935, %.0.i175, !dbg !42
  %939 = fadd float %938, %.0.i178, !dbg !42
  %940 = fadd float %937, %.0.i181, !dbg !42
  %941 = fadd float %940, %.0.i184, !dbg !42
  %942 = fadd float %939, %.0.i187, !dbg !42
  %943 = fadd float %942, %.0.i190, !dbg !42
  %944 = fadd float %941, %.0.i193, !dbg !42
  %945 = fadd float %944, %.0.i196, !dbg !42
  %946 = bitcast float %929 to i32, !dbg !43
  %947 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %946, i32 2, i32 31), !dbg !43
  %948 = bitcast i32 %947 to float, !dbg !43
  %949 = fadd float %929, %948, !dbg !42
  %950 = bitcast float %949 to i32, !dbg !43
  %951 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %950, i32 1, i32 31), !dbg !43
  %952 = bitcast float %931 to i32, !dbg !43
  %953 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %952, i32 2, i32 31), !dbg !43
  %954 = bitcast i32 %953 to float, !dbg !43
  %955 = fadd float %931, %954, !dbg !42
  %956 = bitcast float %955 to i32, !dbg !43
  %957 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %956, i32 1, i32 31), !dbg !43
  %958 = bitcast float %943 to i32, !dbg !43
  %959 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %958, i32 2, i32 31), !dbg !43
  %960 = bitcast i32 %959 to float, !dbg !43
  %961 = fadd float %943, %960, !dbg !42
  %962 = bitcast float %961 to i32, !dbg !43
  %963 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %962, i32 1, i32 31), !dbg !43
  %964 = bitcast float %945 to i32, !dbg !43
  %965 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %964, i32 2, i32 31), !dbg !43
  %966 = bitcast i32 %965 to float, !dbg !43
  %967 = fadd float %945, %966, !dbg !42
  %968 = bitcast float %967 to i32, !dbg !43
  %969 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %968, i32 1, i32 31), !dbg !43
  %970 = insertelement <4 x i32> poison, i32 %951, i64 0, !dbg !43
  %971 = insertelement <4 x i32> %970, i32 %957, i64 1, !dbg !43
  %972 = insertelement <4 x i32> %971, i32 %963, i64 2, !dbg !43
  %973 = insertelement <4 x i32> %972, i32 %969, i64 3, !dbg !43
  %974 = bitcast <4 x i32> %973 to <4 x float>, !dbg !43
  %975 = insertelement <4 x float> poison, float %949, i64 0, !dbg !42
  %976 = insertelement <4 x float> %975, float %955, i64 1, !dbg !42
  %977 = insertelement <4 x float> %976, float %961, i64 2, !dbg !42
  %978 = insertelement <4 x float> %977, float %967, i64 3, !dbg !42
  %979 = fadd <4 x float> %978, %974, !dbg !42
  %980 = fsub <4 x float> %362, %689, !dbg !44
  %981 = extractelement <4 x float> %980, i64 0, !dbg !44
  %982 = fsub <4 x float> %362, %689, !dbg !44
  %983 = extractelement <4 x float> %982, i64 1, !dbg !44
  %984 = fsub <4 x float> %362, %689, !dbg !44
  %985 = extractelement <4 x float> %984, i64 2, !dbg !44
  %986 = fsub <4 x float> %362, %689, !dbg !44
  %987 = extractelement <4 x float> %986, i64 3, !dbg !44
  %988 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !45
  %.not.i198 = icmp eq i32 %988, 0, !dbg !45
  br i1 %.not.i198, label %991, label %989, !dbg !45

989:                                              ; preds = %__nv_exp2f.exit197
  %990 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %981) #2, !dbg !45
  br label %__nv_exp2f.exit200, !dbg !45

991:                                              ; preds = %__nv_exp2f.exit197
  %992 = tail call float @llvm.nvvm.ex2.approx.f(float %981) #2, !dbg !45
  br label %__nv_exp2f.exit200, !dbg !45

__nv_exp2f.exit200:                               ; preds = %989, %991
  %.0.i199 = phi float [ %990, %989 ], [ %992, %991 ], !dbg !45
  %993 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !45
  %.not.i201 = icmp eq i32 %993, 0, !dbg !45
  br i1 %.not.i201, label %996, label %994, !dbg !45

994:                                              ; preds = %__nv_exp2f.exit200
  %995 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %983) #2, !dbg !45
  br label %__nv_exp2f.exit203, !dbg !45

996:                                              ; preds = %__nv_exp2f.exit200
  %997 = tail call float @llvm.nvvm.ex2.approx.f(float %983) #2, !dbg !45
  br label %__nv_exp2f.exit203, !dbg !45

__nv_exp2f.exit203:                               ; preds = %994, %996
  %.0.i202 = phi float [ %995, %994 ], [ %997, %996 ], !dbg !45
  %998 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !45
  %.not.i204 = icmp eq i32 %998, 0, !dbg !45
  br i1 %.not.i204, label %1001, label %999, !dbg !45

999:                                              ; preds = %__nv_exp2f.exit203
  %1000 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %985) #2, !dbg !45
  br label %__nv_exp2f.exit206, !dbg !45

1001:                                             ; preds = %__nv_exp2f.exit203
  %1002 = tail call float @llvm.nvvm.ex2.approx.f(float %985) #2, !dbg !45
  br label %__nv_exp2f.exit206, !dbg !45

__nv_exp2f.exit206:                               ; preds = %999, %1001
  %.0.i205 = phi float [ %1000, %999 ], [ %1002, %1001 ], !dbg !45
  %1003 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !45
  %.not.i207 = icmp eq i32 %1003, 0, !dbg !45
  br i1 %.not.i207, label %1006, label %1004, !dbg !45

1004:                                             ; preds = %__nv_exp2f.exit206
  %1005 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %987) #2, !dbg !45
  br label %__nv_exp2f.exit209, !dbg !45

1006:                                             ; preds = %__nv_exp2f.exit206
  %1007 = tail call float @llvm.nvvm.ex2.approx.f(float %987) #2, !dbg !45
  br label %__nv_exp2f.exit209, !dbg !45

__nv_exp2f.exit209:                               ; preds = %1004, %1006
  %.0.i208 = phi float [ %1005, %1004 ], [ %1007, %1006 ], !dbg !45
  %1008 = insertelement <4 x float> poison, float %.0.i199, i64 0, !dbg !46
  %1009 = insertelement <4 x float> %1008, float %.0.i202, i64 1, !dbg !46
  %1010 = insertelement <4 x float> %1009, float %.0.i205, i64 2, !dbg !46
  %1011 = insertelement <4 x float> %1010, float %.0.i208, i64 3, !dbg !46
  %1012 = fmul <4 x float> %363, %1011, !dbg !46
  %1013 = fadd <4 x float> %979, %1012, !dbg !47
  %1014 = fmul float %297, %.0.i199, !dbg !48
  %1015 = fmul float %298, %.0.i199, !dbg !48
  %1016 = fmul float %299, %.0.i202, !dbg !48
  %1017 = fmul float %300, %.0.i202, !dbg !48
  %1018 = fmul float %301, %.0.i199, !dbg !48
  %1019 = fmul float %302, %.0.i199, !dbg !48
  %1020 = fmul float %303, %.0.i202, !dbg !48
  %1021 = fmul float %304, %.0.i202, !dbg !48
  %1022 = fmul float %305, %.0.i199, !dbg !48
  %1023 = fmul float %306, %.0.i199, !dbg !48
  %1024 = fmul float %307, %.0.i202, !dbg !48
  %1025 = fmul float %308, %.0.i202, !dbg !48
  %1026 = fmul float %309, %.0.i199, !dbg !48
  %1027 = fmul float %310, %.0.i199, !dbg !48
  %1028 = fmul float %311, %.0.i202, !dbg !48
  %1029 = fmul float %312, %.0.i202, !dbg !48
  %1030 = fmul float %313, %.0.i199, !dbg !48
  %1031 = fmul float %314, %.0.i199, !dbg !48
  %1032 = fmul float %315, %.0.i202, !dbg !48
  %1033 = fmul float %316, %.0.i202, !dbg !48
  %1034 = fmul float %317, %.0.i199, !dbg !48
  %1035 = fmul float %318, %.0.i199, !dbg !48
  %1036 = fmul float %319, %.0.i202, !dbg !48
  %1037 = fmul float %320, %.0.i202, !dbg !48
  %1038 = fmul float %321, %.0.i199, !dbg !48
  %1039 = fmul float %322, %.0.i199, !dbg !48
  %1040 = fmul float %323, %.0.i202, !dbg !48
  %1041 = fmul float %324, %.0.i202, !dbg !48
  %1042 = fmul float %325, %.0.i199, !dbg !48
  %1043 = fmul float %326, %.0.i199, !dbg !48
  %1044 = fmul float %327, %.0.i202, !dbg !48
  %1045 = fmul float %328, %.0.i202, !dbg !48
  %1046 = fmul float %329, %.0.i205, !dbg !48
  %1047 = fmul float %330, %.0.i205, !dbg !48
  %1048 = fmul float %331, %.0.i208, !dbg !48
  %1049 = fmul float %332, %.0.i208, !dbg !48
  %1050 = fmul float %333, %.0.i205, !dbg !48
  %1051 = fmul float %334, %.0.i205, !dbg !48
  %1052 = fmul float %335, %.0.i208, !dbg !48
  %1053 = fmul float %336, %.0.i208, !dbg !48
  %1054 = fmul float %337, %.0.i205, !dbg !48
  %1055 = fmul float %338, %.0.i205, !dbg !48
  %1056 = fmul float %339, %.0.i208, !dbg !48
  %1057 = fmul float %340, %.0.i208, !dbg !48
  %1058 = fmul float %341, %.0.i205, !dbg !48
  %1059 = fmul float %342, %.0.i205, !dbg !48
  %1060 = fmul float %343, %.0.i208, !dbg !48
  %1061 = fmul float %344, %.0.i208, !dbg !48
  %1062 = fmul float %345, %.0.i205, !dbg !48
  %1063 = fmul float %346, %.0.i205, !dbg !48
  %1064 = fmul float %347, %.0.i208, !dbg !48
  %1065 = fmul float %348, %.0.i208, !dbg !48
  %1066 = fmul float %349, %.0.i205, !dbg !48
  %1067 = fmul float %350, %.0.i205, !dbg !48
  %1068 = fmul float %351, %.0.i208, !dbg !48
  %1069 = fmul float %352, %.0.i208, !dbg !48
  %1070 = fmul float %353, %.0.i205, !dbg !48
  %1071 = fmul float %354, %.0.i205, !dbg !48
  %1072 = fmul float %355, %.0.i208, !dbg !48
  %1073 = fmul float %356, %.0.i208, !dbg !48
  %1074 = fmul float %357, %.0.i205, !dbg !48
  %1075 = fmul float %358, %.0.i205, !dbg !48
  %1076 = fmul float %359, %.0.i208, !dbg !48
  %1077 = fmul float %360, %.0.i208, !dbg !48
  %1078 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %368, !dbg !30
  %1079 = getelementptr inbounds nuw half, ptr addrspace(3) %1078, i32 %283, !dbg !30
  %1080 = ptrtoint ptr addrspace(3) %1079 to i32, !dbg !30
  %1081 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1080) #2, !dbg !30
  %1082 = extractvalue { i32, i32, i32, i32 } %1081, 0, !dbg !30
  %1083 = extractvalue { i32, i32, i32, i32 } %1081, 1, !dbg !30
  %1084 = extractvalue { i32, i32, i32, i32 } %1081, 2, !dbg !30
  %1085 = extractvalue { i32, i32, i32, i32 } %1081, 3, !dbg !30
  %1086 = getelementptr inbounds nuw half, ptr addrspace(3) %1078, i32 %284, !dbg !30
  %1087 = ptrtoint ptr addrspace(3) %1086 to i32, !dbg !30
  %1088 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1087) #2, !dbg !30
  %1089 = extractvalue { i32, i32, i32, i32 } %1088, 0, !dbg !30
  %1090 = extractvalue { i32, i32, i32, i32 } %1088, 1, !dbg !30
  %1091 = extractvalue { i32, i32, i32, i32 } %1088, 2, !dbg !30
  %1092 = extractvalue { i32, i32, i32, i32 } %1088, 3, !dbg !30
  %1093 = getelementptr inbounds nuw half, ptr addrspace(3) %1078, i32 %285, !dbg !30
  %1094 = ptrtoint ptr addrspace(3) %1093 to i32, !dbg !30
  %1095 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1094) #2, !dbg !30
  %1096 = extractvalue { i32, i32, i32, i32 } %1095, 0, !dbg !30
  %1097 = extractvalue { i32, i32, i32, i32 } %1095, 1, !dbg !30
  %1098 = extractvalue { i32, i32, i32, i32 } %1095, 2, !dbg !30
  %1099 = extractvalue { i32, i32, i32, i32 } %1095, 3, !dbg !30
  %1100 = getelementptr inbounds nuw half, ptr addrspace(3) %1078, i32 %286, !dbg !30
  %1101 = ptrtoint ptr addrspace(3) %1100 to i32, !dbg !30
  %1102 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1101) #2, !dbg !30
  %1103 = extractvalue { i32, i32, i32, i32 } %1102, 0, !dbg !30
  %1104 = extractvalue { i32, i32, i32, i32 } %1102, 1, !dbg !30
  %1105 = extractvalue { i32, i32, i32, i32 } %1102, 2, !dbg !30
  %1106 = extractvalue { i32, i32, i32, i32 } %1102, 3, !dbg !30
  %1107 = getelementptr inbounds nuw half, ptr addrspace(3) %1078, i32 %287, !dbg !30
  %1108 = ptrtoint ptr addrspace(3) %1107 to i32, !dbg !30
  %1109 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1108) #2, !dbg !30
  %1110 = extractvalue { i32, i32, i32, i32 } %1109, 0, !dbg !30
  %1111 = extractvalue { i32, i32, i32, i32 } %1109, 1, !dbg !30
  %1112 = extractvalue { i32, i32, i32, i32 } %1109, 2, !dbg !30
  %1113 = extractvalue { i32, i32, i32, i32 } %1109, 3, !dbg !30
  %1114 = getelementptr inbounds nuw half, ptr addrspace(3) %1078, i32 %288, !dbg !30
  %1115 = ptrtoint ptr addrspace(3) %1114 to i32, !dbg !30
  %1116 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1115) #2, !dbg !30
  %1117 = extractvalue { i32, i32, i32, i32 } %1116, 0, !dbg !30
  %1118 = extractvalue { i32, i32, i32, i32 } %1116, 1, !dbg !30
  %1119 = extractvalue { i32, i32, i32, i32 } %1116, 2, !dbg !30
  %1120 = extractvalue { i32, i32, i32, i32 } %1116, 3, !dbg !30
  %1121 = getelementptr inbounds nuw half, ptr addrspace(3) %1078, i32 %289, !dbg !30
  %1122 = ptrtoint ptr addrspace(3) %1121 to i32, !dbg !30
  %1123 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1122) #2, !dbg !30
  %1124 = extractvalue { i32, i32, i32, i32 } %1123, 0, !dbg !30
  %1125 = extractvalue { i32, i32, i32, i32 } %1123, 1, !dbg !30
  %1126 = extractvalue { i32, i32, i32, i32 } %1123, 2, !dbg !30
  %1127 = extractvalue { i32, i32, i32, i32 } %1123, 3, !dbg !30
  %1128 = getelementptr inbounds nuw half, ptr addrspace(3) %1078, i32 %290, !dbg !30
  %1129 = ptrtoint ptr addrspace(3) %1128 to i32, !dbg !30
  %1130 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1129) #2, !dbg !30
  %1131 = extractvalue { i32, i32, i32, i32 } %1130, 0, !dbg !30
  %1132 = extractvalue { i32, i32, i32, i32 } %1130, 1, !dbg !30
  %1133 = extractvalue { i32, i32, i32, i32 } %1130, 2, !dbg !30
  %1134 = extractvalue { i32, i32, i32, i32 } %1130, 3, !dbg !30
  %1135 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !49
  %1136 = insertelement <2 x float> %1135, float %.0.i106, i64 1, !dbg !49
  %1137 = fptrunc <2 x float> %1136 to <2 x half>, !dbg !49
  %1138 = insertelement <2 x float> poison, float %.0.i109, i64 0, !dbg !49
  %1139 = insertelement <2 x float> %1138, float %.0.i112, i64 1, !dbg !49
  %1140 = fptrunc <2 x float> %1139 to <2 x half>, !dbg !49
  %1141 = insertelement <2 x float> poison, float %.0.i115, i64 0, !dbg !49
  %1142 = insertelement <2 x float> %1141, float %.0.i118, i64 1, !dbg !49
  %1143 = fptrunc <2 x float> %1142 to <2 x half>, !dbg !49
  %1144 = insertelement <2 x float> poison, float %.0.i121, i64 0, !dbg !49
  %1145 = insertelement <2 x float> %1144, float %.0.i124, i64 1, !dbg !49
  %1146 = fptrunc <2 x float> %1145 to <2 x half>, !dbg !49
  %1147 = insertelement <2 x float> poison, float %.0.i127, i64 0, !dbg !49
  %1148 = insertelement <2 x float> %1147, float %.0.i130, i64 1, !dbg !49
  %1149 = fptrunc <2 x float> %1148 to <2 x half>, !dbg !49
  %1150 = insertelement <2 x float> poison, float %.0.i133, i64 0, !dbg !49
  %1151 = insertelement <2 x float> %1150, float %.0.i136, i64 1, !dbg !49
  %1152 = fptrunc <2 x float> %1151 to <2 x half>, !dbg !49
  %1153 = insertelement <2 x float> poison, float %.0.i139, i64 0, !dbg !49
  %1154 = insertelement <2 x float> %1153, float %.0.i142, i64 1, !dbg !49
  %1155 = fptrunc <2 x float> %1154 to <2 x half>, !dbg !49
  %1156 = insertelement <2 x float> poison, float %.0.i145, i64 0, !dbg !49
  %1157 = insertelement <2 x float> %1156, float %.0.i148, i64 1, !dbg !49
  %1158 = fptrunc <2 x float> %1157 to <2 x half>, !dbg !49
  %1159 = insertelement <2 x float> poison, float %.0.i151, i64 0, !dbg !49
  %1160 = insertelement <2 x float> %1159, float %.0.i154, i64 1, !dbg !49
  %1161 = fptrunc <2 x float> %1160 to <2 x half>, !dbg !49
  %1162 = insertelement <2 x float> poison, float %.0.i157, i64 0, !dbg !49
  %1163 = insertelement <2 x float> %1162, float %.0.i160, i64 1, !dbg !49
  %1164 = fptrunc <2 x float> %1163 to <2 x half>, !dbg !49
  %1165 = insertelement <2 x float> poison, float %.0.i163, i64 0, !dbg !49
  %1166 = insertelement <2 x float> %1165, float %.0.i166, i64 1, !dbg !49
  %1167 = fptrunc <2 x float> %1166 to <2 x half>, !dbg !49
  %1168 = insertelement <2 x float> poison, float %.0.i169, i64 0, !dbg !49
  %1169 = insertelement <2 x float> %1168, float %.0.i172, i64 1, !dbg !49
  %1170 = fptrunc <2 x float> %1169 to <2 x half>, !dbg !49
  %1171 = insertelement <2 x float> poison, float %.0.i175, i64 0, !dbg !49
  %1172 = insertelement <2 x float> %1171, float %.0.i178, i64 1, !dbg !49
  %1173 = fptrunc <2 x float> %1172 to <2 x half>, !dbg !49
  %1174 = insertelement <2 x float> poison, float %.0.i181, i64 0, !dbg !49
  %1175 = insertelement <2 x float> %1174, float %.0.i184, i64 1, !dbg !49
  %1176 = fptrunc <2 x float> %1175 to <2 x half>, !dbg !49
  %1177 = insertelement <2 x float> poison, float %.0.i187, i64 0, !dbg !49
  %1178 = insertelement <2 x float> %1177, float %.0.i190, i64 1, !dbg !49
  %1179 = fptrunc <2 x float> %1178 to <2 x half>, !dbg !49
  %1180 = insertelement <2 x float> poison, float %.0.i193, i64 0, !dbg !49
  %1181 = insertelement <2 x float> %1180, float %.0.i196, i64 1, !dbg !49
  %1182 = fptrunc <2 x float> %1181 to <2 x half>, !dbg !49
  %1183 = bitcast <2 x half> %1137 to i32, !dbg !50
  %1184 = bitcast <2 x half> %1140 to i32, !dbg !50
  %1185 = bitcast <2 x half> %1143 to i32, !dbg !50
  %1186 = bitcast <2 x half> %1146 to i32, !dbg !50
  %1187 = bitcast <2 x half> %1149 to i32, !dbg !50
  %1188 = bitcast <2 x half> %1152 to i32, !dbg !50
  %1189 = bitcast <2 x half> %1155 to i32, !dbg !50
  %1190 = bitcast <2 x half> %1158 to i32, !dbg !50
  %1191 = bitcast <2 x half> %1161 to i32, !dbg !50
  %1192 = bitcast <2 x half> %1164 to i32, !dbg !50
  %1193 = bitcast <2 x half> %1167 to i32, !dbg !50
  %1194 = bitcast <2 x half> %1170 to i32, !dbg !50
  %1195 = bitcast <2 x half> %1173 to i32, !dbg !50
  %1196 = bitcast <2 x half> %1176 to i32, !dbg !50
  %1197 = bitcast <2 x half> %1179 to i32, !dbg !50
  %1198 = bitcast <2 x half> %1182 to i32, !dbg !50
  %1199 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1014, float %1015, float %1016, float %1017, i32 %1183, i32 %1184, i32 %1185, i32 %1186, i32 %1082, i32 %1083) #2, !dbg !50
  %1200 = extractvalue { float, float, float, float } %1199, 0, !dbg !50
  %1201 = extractvalue { float, float, float, float } %1199, 1, !dbg !50
  %1202 = extractvalue { float, float, float, float } %1199, 2, !dbg !50
  %1203 = extractvalue { float, float, float, float } %1199, 3, !dbg !50
  %1204 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1018, float %1019, float %1020, float %1021, i32 %1183, i32 %1184, i32 %1185, i32 %1186, i32 %1089, i32 %1090) #2, !dbg !50
  %1205 = extractvalue { float, float, float, float } %1204, 0, !dbg !50
  %1206 = extractvalue { float, float, float, float } %1204, 1, !dbg !50
  %1207 = extractvalue { float, float, float, float } %1204, 2, !dbg !50
  %1208 = extractvalue { float, float, float, float } %1204, 3, !dbg !50
  %1209 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1022, float %1023, float %1024, float %1025, i32 %1183, i32 %1184, i32 %1185, i32 %1186, i32 %1096, i32 %1097) #2, !dbg !50
  %1210 = extractvalue { float, float, float, float } %1209, 0, !dbg !50
  %1211 = extractvalue { float, float, float, float } %1209, 1, !dbg !50
  %1212 = extractvalue { float, float, float, float } %1209, 2, !dbg !50
  %1213 = extractvalue { float, float, float, float } %1209, 3, !dbg !50
  %1214 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1026, float %1027, float %1028, float %1029, i32 %1183, i32 %1184, i32 %1185, i32 %1186, i32 %1103, i32 %1104) #2, !dbg !50
  %1215 = extractvalue { float, float, float, float } %1214, 0, !dbg !50
  %1216 = extractvalue { float, float, float, float } %1214, 1, !dbg !50
  %1217 = extractvalue { float, float, float, float } %1214, 2, !dbg !50
  %1218 = extractvalue { float, float, float, float } %1214, 3, !dbg !50
  %1219 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1030, float %1031, float %1032, float %1033, i32 %1183, i32 %1184, i32 %1185, i32 %1186, i32 %1110, i32 %1111) #2, !dbg !50
  %1220 = extractvalue { float, float, float, float } %1219, 0, !dbg !50
  %1221 = extractvalue { float, float, float, float } %1219, 1, !dbg !50
  %1222 = extractvalue { float, float, float, float } %1219, 2, !dbg !50
  %1223 = extractvalue { float, float, float, float } %1219, 3, !dbg !50
  %1224 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1034, float %1035, float %1036, float %1037, i32 %1183, i32 %1184, i32 %1185, i32 %1186, i32 %1117, i32 %1118) #2, !dbg !50
  %1225 = extractvalue { float, float, float, float } %1224, 0, !dbg !50
  %1226 = extractvalue { float, float, float, float } %1224, 1, !dbg !50
  %1227 = extractvalue { float, float, float, float } %1224, 2, !dbg !50
  %1228 = extractvalue { float, float, float, float } %1224, 3, !dbg !50
  %1229 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1038, float %1039, float %1040, float %1041, i32 %1183, i32 %1184, i32 %1185, i32 %1186, i32 %1124, i32 %1125) #2, !dbg !50
  %1230 = extractvalue { float, float, float, float } %1229, 0, !dbg !50
  %1231 = extractvalue { float, float, float, float } %1229, 1, !dbg !50
  %1232 = extractvalue { float, float, float, float } %1229, 2, !dbg !50
  %1233 = extractvalue { float, float, float, float } %1229, 3, !dbg !50
  %1234 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1042, float %1043, float %1044, float %1045, i32 %1183, i32 %1184, i32 %1185, i32 %1186, i32 %1131, i32 %1132) #2, !dbg !50
  %1235 = extractvalue { float, float, float, float } %1234, 0, !dbg !50
  %1236 = extractvalue { float, float, float, float } %1234, 1, !dbg !50
  %1237 = extractvalue { float, float, float, float } %1234, 2, !dbg !50
  %1238 = extractvalue { float, float, float, float } %1234, 3, !dbg !50
  %1239 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1046, float %1047, float %1048, float %1049, i32 %1191, i32 %1192, i32 %1193, i32 %1194, i32 %1082, i32 %1083) #2, !dbg !50
  %1240 = extractvalue { float, float, float, float } %1239, 0, !dbg !50
  %1241 = extractvalue { float, float, float, float } %1239, 1, !dbg !50
  %1242 = extractvalue { float, float, float, float } %1239, 2, !dbg !50
  %1243 = extractvalue { float, float, float, float } %1239, 3, !dbg !50
  %1244 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1050, float %1051, float %1052, float %1053, i32 %1191, i32 %1192, i32 %1193, i32 %1194, i32 %1089, i32 %1090) #2, !dbg !50
  %1245 = extractvalue { float, float, float, float } %1244, 0, !dbg !50
  %1246 = extractvalue { float, float, float, float } %1244, 1, !dbg !50
  %1247 = extractvalue { float, float, float, float } %1244, 2, !dbg !50
  %1248 = extractvalue { float, float, float, float } %1244, 3, !dbg !50
  %1249 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1054, float %1055, float %1056, float %1057, i32 %1191, i32 %1192, i32 %1193, i32 %1194, i32 %1096, i32 %1097) #2, !dbg !50
  %1250 = extractvalue { float, float, float, float } %1249, 0, !dbg !50
  %1251 = extractvalue { float, float, float, float } %1249, 1, !dbg !50
  %1252 = extractvalue { float, float, float, float } %1249, 2, !dbg !50
  %1253 = extractvalue { float, float, float, float } %1249, 3, !dbg !50
  %1254 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1058, float %1059, float %1060, float %1061, i32 %1191, i32 %1192, i32 %1193, i32 %1194, i32 %1103, i32 %1104) #2, !dbg !50
  %1255 = extractvalue { float, float, float, float } %1254, 0, !dbg !50
  %1256 = extractvalue { float, float, float, float } %1254, 1, !dbg !50
  %1257 = extractvalue { float, float, float, float } %1254, 2, !dbg !50
  %1258 = extractvalue { float, float, float, float } %1254, 3, !dbg !50
  %1259 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1062, float %1063, float %1064, float %1065, i32 %1191, i32 %1192, i32 %1193, i32 %1194, i32 %1110, i32 %1111) #2, !dbg !50
  %1260 = extractvalue { float, float, float, float } %1259, 0, !dbg !50
  %1261 = extractvalue { float, float, float, float } %1259, 1, !dbg !50
  %1262 = extractvalue { float, float, float, float } %1259, 2, !dbg !50
  %1263 = extractvalue { float, float, float, float } %1259, 3, !dbg !50
  %1264 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1066, float %1067, float %1068, float %1069, i32 %1191, i32 %1192, i32 %1193, i32 %1194, i32 %1117, i32 %1118) #2, !dbg !50
  %1265 = extractvalue { float, float, float, float } %1264, 0, !dbg !50
  %1266 = extractvalue { float, float, float, float } %1264, 1, !dbg !50
  %1267 = extractvalue { float, float, float, float } %1264, 2, !dbg !50
  %1268 = extractvalue { float, float, float, float } %1264, 3, !dbg !50
  %1269 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1070, float %1071, float %1072, float %1073, i32 %1191, i32 %1192, i32 %1193, i32 %1194, i32 %1124, i32 %1125) #2, !dbg !50
  %1270 = extractvalue { float, float, float, float } %1269, 0, !dbg !50
  %1271 = extractvalue { float, float, float, float } %1269, 1, !dbg !50
  %1272 = extractvalue { float, float, float, float } %1269, 2, !dbg !50
  %1273 = extractvalue { float, float, float, float } %1269, 3, !dbg !50
  %1274 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1074, float %1075, float %1076, float %1077, i32 %1191, i32 %1192, i32 %1193, i32 %1194, i32 %1131, i32 %1132) #2, !dbg !50
  %1275 = extractvalue { float, float, float, float } %1274, 0, !dbg !50
  %1276 = extractvalue { float, float, float, float } %1274, 1, !dbg !50
  %1277 = extractvalue { float, float, float, float } %1274, 2, !dbg !50
  %1278 = extractvalue { float, float, float, float } %1274, 3, !dbg !50
  %1279 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1200, float %1201, float %1202, float %1203, i32 %1187, i32 %1188, i32 %1189, i32 %1190, i32 %1084, i32 %1085) #2, !dbg !50
  %1280 = extractvalue { float, float, float, float } %1279, 0, !dbg !50
  %1281 = extractvalue { float, float, float, float } %1279, 1, !dbg !50
  %1282 = extractvalue { float, float, float, float } %1279, 2, !dbg !50
  %1283 = extractvalue { float, float, float, float } %1279, 3, !dbg !50
  %1284 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1205, float %1206, float %1207, float %1208, i32 %1187, i32 %1188, i32 %1189, i32 %1190, i32 %1091, i32 %1092) #2, !dbg !50
  %1285 = extractvalue { float, float, float, float } %1284, 0, !dbg !50
  %1286 = extractvalue { float, float, float, float } %1284, 1, !dbg !50
  %1287 = extractvalue { float, float, float, float } %1284, 2, !dbg !50
  %1288 = extractvalue { float, float, float, float } %1284, 3, !dbg !50
  %1289 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1210, float %1211, float %1212, float %1213, i32 %1187, i32 %1188, i32 %1189, i32 %1190, i32 %1098, i32 %1099) #2, !dbg !50
  %1290 = extractvalue { float, float, float, float } %1289, 0, !dbg !50
  %1291 = extractvalue { float, float, float, float } %1289, 1, !dbg !50
  %1292 = extractvalue { float, float, float, float } %1289, 2, !dbg !50
  %1293 = extractvalue { float, float, float, float } %1289, 3, !dbg !50
  %1294 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1215, float %1216, float %1217, float %1218, i32 %1187, i32 %1188, i32 %1189, i32 %1190, i32 %1105, i32 %1106) #2, !dbg !50
  %1295 = extractvalue { float, float, float, float } %1294, 0, !dbg !50
  %1296 = extractvalue { float, float, float, float } %1294, 1, !dbg !50
  %1297 = extractvalue { float, float, float, float } %1294, 2, !dbg !50
  %1298 = extractvalue { float, float, float, float } %1294, 3, !dbg !50
  %1299 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1220, float %1221, float %1222, float %1223, i32 %1187, i32 %1188, i32 %1189, i32 %1190, i32 %1112, i32 %1113) #2, !dbg !50
  %1300 = extractvalue { float, float, float, float } %1299, 0, !dbg !50
  %1301 = extractvalue { float, float, float, float } %1299, 1, !dbg !50
  %1302 = extractvalue { float, float, float, float } %1299, 2, !dbg !50
  %1303 = extractvalue { float, float, float, float } %1299, 3, !dbg !50
  %1304 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1225, float %1226, float %1227, float %1228, i32 %1187, i32 %1188, i32 %1189, i32 %1190, i32 %1119, i32 %1120) #2, !dbg !50
  %1305 = extractvalue { float, float, float, float } %1304, 0, !dbg !50
  %1306 = extractvalue { float, float, float, float } %1304, 1, !dbg !50
  %1307 = extractvalue { float, float, float, float } %1304, 2, !dbg !50
  %1308 = extractvalue { float, float, float, float } %1304, 3, !dbg !50
  %1309 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1230, float %1231, float %1232, float %1233, i32 %1187, i32 %1188, i32 %1189, i32 %1190, i32 %1126, i32 %1127) #2, !dbg !50
  %1310 = extractvalue { float, float, float, float } %1309, 0, !dbg !50
  %1311 = extractvalue { float, float, float, float } %1309, 1, !dbg !50
  %1312 = extractvalue { float, float, float, float } %1309, 2, !dbg !50
  %1313 = extractvalue { float, float, float, float } %1309, 3, !dbg !50
  %1314 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1235, float %1236, float %1237, float %1238, i32 %1187, i32 %1188, i32 %1189, i32 %1190, i32 %1133, i32 %1134) #2, !dbg !50
  %1315 = extractvalue { float, float, float, float } %1314, 0, !dbg !50
  %1316 = extractvalue { float, float, float, float } %1314, 1, !dbg !50
  %1317 = extractvalue { float, float, float, float } %1314, 2, !dbg !50
  %1318 = extractvalue { float, float, float, float } %1314, 3, !dbg !50
  %1319 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1240, float %1241, float %1242, float %1243, i32 %1195, i32 %1196, i32 %1197, i32 %1198, i32 %1084, i32 %1085) #2, !dbg !50
  %1320 = extractvalue { float, float, float, float } %1319, 0, !dbg !50
  %1321 = extractvalue { float, float, float, float } %1319, 1, !dbg !50
  %1322 = extractvalue { float, float, float, float } %1319, 2, !dbg !50
  %1323 = extractvalue { float, float, float, float } %1319, 3, !dbg !50
  %1324 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1245, float %1246, float %1247, float %1248, i32 %1195, i32 %1196, i32 %1197, i32 %1198, i32 %1091, i32 %1092) #2, !dbg !50
  %1325 = extractvalue { float, float, float, float } %1324, 0, !dbg !50
  %1326 = extractvalue { float, float, float, float } %1324, 1, !dbg !50
  %1327 = extractvalue { float, float, float, float } %1324, 2, !dbg !50
  %1328 = extractvalue { float, float, float, float } %1324, 3, !dbg !50
  %1329 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1250, float %1251, float %1252, float %1253, i32 %1195, i32 %1196, i32 %1197, i32 %1198, i32 %1098, i32 %1099) #2, !dbg !50
  %1330 = extractvalue { float, float, float, float } %1329, 0, !dbg !50
  %1331 = extractvalue { float, float, float, float } %1329, 1, !dbg !50
  %1332 = extractvalue { float, float, float, float } %1329, 2, !dbg !50
  %1333 = extractvalue { float, float, float, float } %1329, 3, !dbg !50
  %1334 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1255, float %1256, float %1257, float %1258, i32 %1195, i32 %1196, i32 %1197, i32 %1198, i32 %1105, i32 %1106) #2, !dbg !50
  %1335 = extractvalue { float, float, float, float } %1334, 0, !dbg !50
  %1336 = extractvalue { float, float, float, float } %1334, 1, !dbg !50
  %1337 = extractvalue { float, float, float, float } %1334, 2, !dbg !50
  %1338 = extractvalue { float, float, float, float } %1334, 3, !dbg !50
  %1339 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1260, float %1261, float %1262, float %1263, i32 %1195, i32 %1196, i32 %1197, i32 %1198, i32 %1112, i32 %1113) #2, !dbg !50
  %1340 = extractvalue { float, float, float, float } %1339, 0, !dbg !50
  %1341 = extractvalue { float, float, float, float } %1339, 1, !dbg !50
  %1342 = extractvalue { float, float, float, float } %1339, 2, !dbg !50
  %1343 = extractvalue { float, float, float, float } %1339, 3, !dbg !50
  %1344 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1265, float %1266, float %1267, float %1268, i32 %1195, i32 %1196, i32 %1197, i32 %1198, i32 %1119, i32 %1120) #2, !dbg !50
  %1345 = extractvalue { float, float, float, float } %1344, 0, !dbg !50
  %1346 = extractvalue { float, float, float, float } %1344, 1, !dbg !50
  %1347 = extractvalue { float, float, float, float } %1344, 2, !dbg !50
  %1348 = extractvalue { float, float, float, float } %1344, 3, !dbg !50
  %1349 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1270, float %1271, float %1272, float %1273, i32 %1195, i32 %1196, i32 %1197, i32 %1198, i32 %1126, i32 %1127) #2, !dbg !50
  %1350 = extractvalue { float, float, float, float } %1349, 0, !dbg !50
  %1351 = extractvalue { float, float, float, float } %1349, 1, !dbg !50
  %1352 = extractvalue { float, float, float, float } %1349, 2, !dbg !50
  %1353 = extractvalue { float, float, float, float } %1349, 3, !dbg !50
  %1354 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1275, float %1276, float %1277, float %1278, i32 %1195, i32 %1196, i32 %1197, i32 %1198, i32 %1133, i32 %1134) #2, !dbg !50
  %1355 = extractvalue { float, float, float, float } %1354, 0, !dbg !50
  %1356 = extractvalue { float, float, float, float } %1354, 1, !dbg !50
  %1357 = extractvalue { float, float, float, float } %1354, 2, !dbg !50
  %1358 = extractvalue { float, float, float, float } %1354, 3, !dbg !50
  %1359 = add nuw nsw i64 %296, 32, !dbg !51
  %1360 = add i32 %295, 1, !dbg !31
  %1361 = icmp sgt i32 %1360, 1, !dbg !31
  %1362 = select i1 %1361, i32 0, i32 %1360, !dbg !31
  %1363 = or disjoint i64 %1359, %53, !dbg !27
  %1364 = mul i64 %1363, %39, !dbg !27
  %gep = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %1364, !dbg !27
  %1365 = shl i32 %1362, 11, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %gep369 = getelementptr half, ptr addrspace(3) %226, i32 %1365, !dbg !27
  %1366 = select i1 %364, i32 16, i32 0, !dbg !27
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep369, ptr addrspace(1) %gep, i32 %1366) #2, !dbg !27
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !27
  %1367 = mul i64 %1363, %37, !dbg !30
  %gep371 = getelementptr half, ptr addrspace(1) %invariant.gep370, i64 %1367, !dbg !30
  %gep373 = getelementptr half, ptr addrspace(3) %230, i32 %1365, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep373, ptr addrspace(1) %gep371, i32 %1366) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %1368 = add nuw nsw i32 %361, 32, !dbg !31
  %1369 = icmp samesign ult i32 %361, 4064, !dbg !31
  br i1 %1369, label %293, label %1370, !dbg !31

1370:                                             ; preds = %__nv_exp2f.exit209
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %1371 = extractelement <4 x float> %1013, i64 0, !dbg !52
  %1372 = fcmp olt float %1371, 0x3810000000000000, !dbg !52
  %1373 = fmul float %1371, 0x4160000000000000, !dbg !52
  %.02.i = select i1 %1372, float %1373, float %1371, !dbg !52
  %i.i.0.i = select i1 %1372, float -2.300000e+01, float 0.000000e+00, !dbg !52
  %1374 = bitcast float %.02.i to i32, !dbg !52
  %1375 = add i32 %1374, -1060439283, !dbg !52
  %1376 = and i32 %1375, -8388608, !dbg !52
  %1377 = sub i32 %1374, %1376, !dbg !52
  %1378 = bitcast i32 %1377 to float, !dbg !52
  %1379 = sitofp i32 %1376 to float, !dbg !52
  %1380 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not.i210 = icmp eq i32 %1380, 0, !dbg !52
  %1381 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1379, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !52
  %1382 = tail call float @llvm.nvvm.fma.rn.f(float %1379, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !52
  %.08.i = select i1 %.not.i210, float %1382, float %1381, !dbg !52
  %1383 = fadd float %1378, -1.000000e+00, !dbg !52
  %1384 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not1.i = icmp eq i32 %1384, 0, !dbg !52
  %1385 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3FB8D64FE0000000, float %1383, float 0xBFC58FE600000000) #2, !dbg !52
  %1386 = tail call float @llvm.nvvm.fma.rn.f(float 0x3FB8D64FE0000000, float %1383, float 0xBFC58FE600000000) #2, !dbg !52
  %.010.i = select i1 %.not1.i, float %1386, float %1385, !dbg !52
  %1387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not2.i = icmp eq i32 %1387, 0, !dbg !52
  %1388 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %1383, float 0x3FC5F9E540000000) #2, !dbg !52
  %1389 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %1383, float 0x3FC5F9E540000000) #2, !dbg !52
  %.011.i = select i1 %.not2.i, float %1389, float %1388, !dbg !52
  %1390 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not3.i = icmp eq i32 %1390, 0, !dbg !52
  %1391 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %1383, float 0xBFC6E9C860000000) #2, !dbg !52
  %1392 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %1383, float 0xBFC6E9C860000000) #2, !dbg !52
  %.012.i = select i1 %.not3.i, float %1392, float %1391, !dbg !52
  %1393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not4.i = icmp eq i32 %1393, 0, !dbg !52
  %1394 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %1383, float 0x3FCA417E80000000) #2, !dbg !52
  %1395 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %1383, float 0x3FCA417E80000000) #2, !dbg !52
  %.09.i = select i1 %.not4.i, float %1395, float %1394, !dbg !52
  %1396 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not5.i = icmp eq i32 %1396, 0, !dbg !52
  %1397 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %1383, float 0xBFCEC79160000000) #2, !dbg !52
  %1398 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %1383, float 0xBFCEC79160000000) #2, !dbg !52
  %.05.i = select i1 %.not5.i, float %1398, float %1397, !dbg !52
  %1399 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not6.i = icmp eq i32 %1399, 0, !dbg !52
  %1400 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %1383, float 0x3FD277F320000000) #2, !dbg !52
  %1401 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %1383, float 0x3FD277F320000000) #2, !dbg !52
  %.01.i = select i1 %.not6.i, float %1401, float %1400, !dbg !52
  %1402 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not7.i = icmp eq i32 %1402, 0, !dbg !52
  %1403 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %1383, float 0xBFD7154920000000) #2, !dbg !52
  %1404 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %1383, float 0xBFD7154920000000) #2, !dbg !52
  %.0.i211 = select i1 %.not7.i, float %1404, float %1403, !dbg !52
  %1405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not8.i = icmp eq i32 %1405, 0, !dbg !52
  %1406 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i211, float %1383, float 0x3FDEC70940000000) #2, !dbg !52
  %1407 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i211, float %1383, float 0x3FDEC70940000000) #2, !dbg !52
  %.07.i = select i1 %.not8.i, float %1407, float %1406, !dbg !52
  %1408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not9.i = icmp eq i32 %1408, 0, !dbg !52
  %1409 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %1383, float 0xBFE7154760000000) #2, !dbg !52
  %1410 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %1383, float 0xBFE7154760000000) #2, !dbg !52
  %.06.i = select i1 %.not9.i, float %1410, float %1409, !dbg !52
  %1411 = fmul float %1383, %.06.i, !dbg !52
  %1412 = fmul float %1383, %1411, !dbg !52
  %1413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not10.i = icmp eq i32 %1413, 0, !dbg !52
  %1414 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1383, float 0x3FF7154760000000, float %1412) #2, !dbg !52
  %1415 = tail call float @llvm.nvvm.fma.rn.f(float %1383, float 0x3FF7154760000000, float %1412) #2, !dbg !52
  %.04.i = select i1 %.not10.i, float %1415, float %1414, !dbg !52
  %1416 = fadd float %.08.i, %.04.i, !dbg !52
  %1417 = icmp ugt i32 %1374, 2139095039, !dbg !52
  br i1 %1417, label %__nv_fmaf_rn.exit.i.i, label %__nv_log2f.exit, !dbg !52

__nv_fmaf_rn.exit.i.i:                            ; preds = %1370
  %1418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not11.i = icmp eq i32 %1418, 0, !dbg !52
  %1419 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %1420 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %.03.i = select i1 %.not11.i, float %1420, float %1419, !dbg !52
  br label %__nv_log2f.exit, !dbg !52

__nv_log2f.exit:                                  ; preds = %1370, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %1416, %1370 ], !dbg !52
  %1421 = extractelement <4 x float> %1013, i64 1, !dbg !52
  %1422 = fcmp olt float %1421, 0x3810000000000000, !dbg !52
  %1423 = fmul float %1421, 0x4160000000000000, !dbg !52
  %.02.i212 = select i1 %1422, float %1423, float %1421, !dbg !52
  %i.i.0.i213 = select i1 %1422, float -2.300000e+01, float 0.000000e+00, !dbg !52
  %1424 = bitcast float %.02.i212 to i32, !dbg !52
  %1425 = add i32 %1424, -1060439283, !dbg !52
  %1426 = and i32 %1425, -8388608, !dbg !52
  %1427 = sub i32 %1424, %1426, !dbg !52
  %1428 = bitcast i32 %1427 to float, !dbg !52
  %1429 = sitofp i32 %1426 to float, !dbg !52
  %1430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not.i214 = icmp eq i32 %1430, 0, !dbg !52
  %1431 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1429, float 0x3E80000000000000, float %i.i.0.i213) #2, !dbg !52
  %1432 = tail call float @llvm.nvvm.fma.rn.f(float %1429, float 0x3E80000000000000, float %i.i.0.i213) #2, !dbg !52
  %.08.i215 = select i1 %.not.i214, float %1432, float %1431, !dbg !52
  %1433 = fadd float %1428, -1.000000e+00, !dbg !52
  %1434 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not1.i216 = icmp eq i32 %1434, 0, !dbg !52
  %1435 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3FB8D64FE0000000, float %1433, float 0xBFC58FE600000000) #2, !dbg !52
  %1436 = tail call float @llvm.nvvm.fma.rn.f(float 0x3FB8D64FE0000000, float %1433, float 0xBFC58FE600000000) #2, !dbg !52
  %.010.i217 = select i1 %.not1.i216, float %1436, float %1435, !dbg !52
  %1437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not2.i218 = icmp eq i32 %1437, 0, !dbg !52
  %1438 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i217, float %1433, float 0x3FC5F9E540000000) #2, !dbg !52
  %1439 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i217, float %1433, float 0x3FC5F9E540000000) #2, !dbg !52
  %.011.i219 = select i1 %.not2.i218, float %1439, float %1438, !dbg !52
  %1440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not3.i220 = icmp eq i32 %1440, 0, !dbg !52
  %1441 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i219, float %1433, float 0xBFC6E9C860000000) #2, !dbg !52
  %1442 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i219, float %1433, float 0xBFC6E9C860000000) #2, !dbg !52
  %.012.i221 = select i1 %.not3.i220, float %1442, float %1441, !dbg !52
  %1443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not4.i222 = icmp eq i32 %1443, 0, !dbg !52
  %1444 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i221, float %1433, float 0x3FCA417E80000000) #2, !dbg !52
  %1445 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i221, float %1433, float 0x3FCA417E80000000) #2, !dbg !52
  %.09.i223 = select i1 %.not4.i222, float %1445, float %1444, !dbg !52
  %1446 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not5.i224 = icmp eq i32 %1446, 0, !dbg !52
  %1447 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i223, float %1433, float 0xBFCEC79160000000) #2, !dbg !52
  %1448 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i223, float %1433, float 0xBFCEC79160000000) #2, !dbg !52
  %.05.i225 = select i1 %.not5.i224, float %1448, float %1447, !dbg !52
  %1449 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not6.i226 = icmp eq i32 %1449, 0, !dbg !52
  %1450 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i225, float %1433, float 0x3FD277F320000000) #2, !dbg !52
  %1451 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i225, float %1433, float 0x3FD277F320000000) #2, !dbg !52
  %.01.i227 = select i1 %.not6.i226, float %1451, float %1450, !dbg !52
  %1452 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not7.i228 = icmp eq i32 %1452, 0, !dbg !52
  %1453 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i227, float %1433, float 0xBFD7154920000000) #2, !dbg !52
  %1454 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i227, float %1433, float 0xBFD7154920000000) #2, !dbg !52
  %.0.i229 = select i1 %.not7.i228, float %1454, float %1453, !dbg !52
  %1455 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not8.i230 = icmp eq i32 %1455, 0, !dbg !52
  %1456 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i229, float %1433, float 0x3FDEC70940000000) #2, !dbg !52
  %1457 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i229, float %1433, float 0x3FDEC70940000000) #2, !dbg !52
  %.07.i231 = select i1 %.not8.i230, float %1457, float %1456, !dbg !52
  %1458 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not9.i232 = icmp eq i32 %1458, 0, !dbg !52
  %1459 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i231, float %1433, float 0xBFE7154760000000) #2, !dbg !52
  %1460 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i231, float %1433, float 0xBFE7154760000000) #2, !dbg !52
  %.06.i233 = select i1 %.not9.i232, float %1460, float %1459, !dbg !52
  %1461 = fmul float %1433, %.06.i233, !dbg !52
  %1462 = fmul float %1433, %1461, !dbg !52
  %1463 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not10.i234 = icmp eq i32 %1463, 0, !dbg !52
  %1464 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1433, float 0x3FF7154760000000, float %1462) #2, !dbg !52
  %1465 = tail call float @llvm.nvvm.fma.rn.f(float %1433, float 0x3FF7154760000000, float %1462) #2, !dbg !52
  %.04.i235 = select i1 %.not10.i234, float %1465, float %1464, !dbg !52
  %1466 = fadd float %.08.i215, %.04.i235, !dbg !52
  %1467 = icmp ugt i32 %1424, 2139095039, !dbg !52
  br i1 %1467, label %__nv_fmaf_rn.exit.i.i238, label %__nv_log2f.exit241, !dbg !52

__nv_fmaf_rn.exit.i.i238:                         ; preds = %__nv_log2f.exit
  %1468 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not11.i239 = icmp eq i32 %1468, 0, !dbg !52
  %1469 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i212, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %1470 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i212, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %.03.i240 = select i1 %.not11.i239, float %1470, float %1469, !dbg !52
  br label %__nv_log2f.exit241, !dbg !52

__nv_log2f.exit241:                               ; preds = %__nv_log2f.exit, %__nv_fmaf_rn.exit.i.i238
  %r.i.0.i236 = phi float [ %.03.i240, %__nv_fmaf_rn.exit.i.i238 ], [ %1466, %__nv_log2f.exit ], !dbg !52
  %1471 = extractelement <4 x float> %1013, i64 2, !dbg !52
  %1472 = fcmp olt float %1471, 0x3810000000000000, !dbg !52
  %1473 = fmul float %1471, 0x4160000000000000, !dbg !52
  %.02.i242 = select i1 %1472, float %1473, float %1471, !dbg !52
  %i.i.0.i243 = select i1 %1472, float -2.300000e+01, float 0.000000e+00, !dbg !52
  %1474 = bitcast float %.02.i242 to i32, !dbg !52
  %1475 = add i32 %1474, -1060439283, !dbg !52
  %1476 = and i32 %1475, -8388608, !dbg !52
  %1477 = sub i32 %1474, %1476, !dbg !52
  %1478 = bitcast i32 %1477 to float, !dbg !52
  %1479 = sitofp i32 %1476 to float, !dbg !52
  %1480 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not.i244 = icmp eq i32 %1480, 0, !dbg !52
  %1481 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1479, float 0x3E80000000000000, float %i.i.0.i243) #2, !dbg !52
  %1482 = tail call float @llvm.nvvm.fma.rn.f(float %1479, float 0x3E80000000000000, float %i.i.0.i243) #2, !dbg !52
  %.08.i245 = select i1 %.not.i244, float %1482, float %1481, !dbg !52
  %1483 = fadd float %1478, -1.000000e+00, !dbg !52
  %1484 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not1.i246 = icmp eq i32 %1484, 0, !dbg !52
  %1485 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3FB8D64FE0000000, float %1483, float 0xBFC58FE600000000) #2, !dbg !52
  %1486 = tail call float @llvm.nvvm.fma.rn.f(float 0x3FB8D64FE0000000, float %1483, float 0xBFC58FE600000000) #2, !dbg !52
  %.010.i247 = select i1 %.not1.i246, float %1486, float %1485, !dbg !52
  %1487 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not2.i248 = icmp eq i32 %1487, 0, !dbg !52
  %1488 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i247, float %1483, float 0x3FC5F9E540000000) #2, !dbg !52
  %1489 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i247, float %1483, float 0x3FC5F9E540000000) #2, !dbg !52
  %.011.i249 = select i1 %.not2.i248, float %1489, float %1488, !dbg !52
  %1490 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not3.i250 = icmp eq i32 %1490, 0, !dbg !52
  %1491 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i249, float %1483, float 0xBFC6E9C860000000) #2, !dbg !52
  %1492 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i249, float %1483, float 0xBFC6E9C860000000) #2, !dbg !52
  %.012.i251 = select i1 %.not3.i250, float %1492, float %1491, !dbg !52
  %1493 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not4.i252 = icmp eq i32 %1493, 0, !dbg !52
  %1494 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i251, float %1483, float 0x3FCA417E80000000) #2, !dbg !52
  %1495 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i251, float %1483, float 0x3FCA417E80000000) #2, !dbg !52
  %.09.i253 = select i1 %.not4.i252, float %1495, float %1494, !dbg !52
  %1496 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not5.i254 = icmp eq i32 %1496, 0, !dbg !52
  %1497 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i253, float %1483, float 0xBFCEC79160000000) #2, !dbg !52
  %1498 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i253, float %1483, float 0xBFCEC79160000000) #2, !dbg !52
  %.05.i255 = select i1 %.not5.i254, float %1498, float %1497, !dbg !52
  %1499 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not6.i256 = icmp eq i32 %1499, 0, !dbg !52
  %1500 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i255, float %1483, float 0x3FD277F320000000) #2, !dbg !52
  %1501 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i255, float %1483, float 0x3FD277F320000000) #2, !dbg !52
  %.01.i257 = select i1 %.not6.i256, float %1501, float %1500, !dbg !52
  %1502 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not7.i258 = icmp eq i32 %1502, 0, !dbg !52
  %1503 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i257, float %1483, float 0xBFD7154920000000) #2, !dbg !52
  %1504 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i257, float %1483, float 0xBFD7154920000000) #2, !dbg !52
  %.0.i259 = select i1 %.not7.i258, float %1504, float %1503, !dbg !52
  %1505 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not8.i260 = icmp eq i32 %1505, 0, !dbg !52
  %1506 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i259, float %1483, float 0x3FDEC70940000000) #2, !dbg !52
  %1507 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i259, float %1483, float 0x3FDEC70940000000) #2, !dbg !52
  %.07.i261 = select i1 %.not8.i260, float %1507, float %1506, !dbg !52
  %1508 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not9.i262 = icmp eq i32 %1508, 0, !dbg !52
  %1509 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i261, float %1483, float 0xBFE7154760000000) #2, !dbg !52
  %1510 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i261, float %1483, float 0xBFE7154760000000) #2, !dbg !52
  %.06.i263 = select i1 %.not9.i262, float %1510, float %1509, !dbg !52
  %1511 = fmul float %1483, %.06.i263, !dbg !52
  %1512 = fmul float %1483, %1511, !dbg !52
  %1513 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not10.i264 = icmp eq i32 %1513, 0, !dbg !52
  %1514 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1483, float 0x3FF7154760000000, float %1512) #2, !dbg !52
  %1515 = tail call float @llvm.nvvm.fma.rn.f(float %1483, float 0x3FF7154760000000, float %1512) #2, !dbg !52
  %.04.i265 = select i1 %.not10.i264, float %1515, float %1514, !dbg !52
  %1516 = fadd float %.08.i245, %.04.i265, !dbg !52
  %1517 = icmp ugt i32 %1474, 2139095039, !dbg !52
  br i1 %1517, label %__nv_fmaf_rn.exit.i.i268, label %__nv_log2f.exit271, !dbg !52

__nv_fmaf_rn.exit.i.i268:                         ; preds = %__nv_log2f.exit241
  %1518 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not11.i269 = icmp eq i32 %1518, 0, !dbg !52
  %1519 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i242, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %1520 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i242, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %.03.i270 = select i1 %.not11.i269, float %1520, float %1519, !dbg !52
  br label %__nv_log2f.exit271, !dbg !52

__nv_log2f.exit271:                               ; preds = %__nv_log2f.exit241, %__nv_fmaf_rn.exit.i.i268
  %r.i.0.i266 = phi float [ %.03.i270, %__nv_fmaf_rn.exit.i.i268 ], [ %1516, %__nv_log2f.exit241 ], !dbg !52
  %1521 = extractelement <4 x float> %1013, i64 3, !dbg !52
  %1522 = fcmp olt float %1521, 0x3810000000000000, !dbg !52
  %1523 = fmul float %1521, 0x4160000000000000, !dbg !52
  %.02.i272 = select i1 %1522, float %1523, float %1521, !dbg !52
  %i.i.0.i273 = select i1 %1522, float -2.300000e+01, float 0.000000e+00, !dbg !52
  %1524 = bitcast float %.02.i272 to i32, !dbg !52
  %1525 = add i32 %1524, -1060439283, !dbg !52
  %1526 = and i32 %1525, -8388608, !dbg !52
  %1527 = sub i32 %1524, %1526, !dbg !52
  %1528 = bitcast i32 %1527 to float, !dbg !52
  %1529 = sitofp i32 %1526 to float, !dbg !52
  %1530 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not.i274 = icmp eq i32 %1530, 0, !dbg !52
  %1531 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1529, float 0x3E80000000000000, float %i.i.0.i273) #2, !dbg !52
  %1532 = tail call float @llvm.nvvm.fma.rn.f(float %1529, float 0x3E80000000000000, float %i.i.0.i273) #2, !dbg !52
  %.08.i275 = select i1 %.not.i274, float %1532, float %1531, !dbg !52
  %1533 = fadd float %1528, -1.000000e+00, !dbg !52
  %1534 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not1.i276 = icmp eq i32 %1534, 0, !dbg !52
  %1535 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3FB8D64FE0000000, float %1533, float 0xBFC58FE600000000) #2, !dbg !52
  %1536 = tail call float @llvm.nvvm.fma.rn.f(float 0x3FB8D64FE0000000, float %1533, float 0xBFC58FE600000000) #2, !dbg !52
  %.010.i277 = select i1 %.not1.i276, float %1536, float %1535, !dbg !52
  %1537 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not2.i278 = icmp eq i32 %1537, 0, !dbg !52
  %1538 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i277, float %1533, float 0x3FC5F9E540000000) #2, !dbg !52
  %1539 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i277, float %1533, float 0x3FC5F9E540000000) #2, !dbg !52
  %.011.i279 = select i1 %.not2.i278, float %1539, float %1538, !dbg !52
  %1540 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not3.i280 = icmp eq i32 %1540, 0, !dbg !52
  %1541 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i279, float %1533, float 0xBFC6E9C860000000) #2, !dbg !52
  %1542 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i279, float %1533, float 0xBFC6E9C860000000) #2, !dbg !52
  %.012.i281 = select i1 %.not3.i280, float %1542, float %1541, !dbg !52
  %1543 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not4.i282 = icmp eq i32 %1543, 0, !dbg !52
  %1544 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i281, float %1533, float 0x3FCA417E80000000) #2, !dbg !52
  %1545 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i281, float %1533, float 0x3FCA417E80000000) #2, !dbg !52
  %.09.i283 = select i1 %.not4.i282, float %1545, float %1544, !dbg !52
  %1546 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not5.i284 = icmp eq i32 %1546, 0, !dbg !52
  %1547 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i283, float %1533, float 0xBFCEC79160000000) #2, !dbg !52
  %1548 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i283, float %1533, float 0xBFCEC79160000000) #2, !dbg !52
  %.05.i285 = select i1 %.not5.i284, float %1548, float %1547, !dbg !52
  %1549 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not6.i286 = icmp eq i32 %1549, 0, !dbg !52
  %1550 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i285, float %1533, float 0x3FD277F320000000) #2, !dbg !52
  %1551 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i285, float %1533, float 0x3FD277F320000000) #2, !dbg !52
  %.01.i287 = select i1 %.not6.i286, float %1551, float %1550, !dbg !52
  %1552 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not7.i288 = icmp eq i32 %1552, 0, !dbg !52
  %1553 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i287, float %1533, float 0xBFD7154920000000) #2, !dbg !52
  %1554 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i287, float %1533, float 0xBFD7154920000000) #2, !dbg !52
  %.0.i289 = select i1 %.not7.i288, float %1554, float %1553, !dbg !52
  %1555 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not8.i290 = icmp eq i32 %1555, 0, !dbg !52
  %1556 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i289, float %1533, float 0x3FDEC70940000000) #2, !dbg !52
  %1557 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i289, float %1533, float 0x3FDEC70940000000) #2, !dbg !52
  %.07.i291 = select i1 %.not8.i290, float %1557, float %1556, !dbg !52
  %1558 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not9.i292 = icmp eq i32 %1558, 0, !dbg !52
  %1559 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i291, float %1533, float 0xBFE7154760000000) #2, !dbg !52
  %1560 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i291, float %1533, float 0xBFE7154760000000) #2, !dbg !52
  %.06.i293 = select i1 %.not9.i292, float %1560, float %1559, !dbg !52
  %1561 = fmul float %1533, %.06.i293, !dbg !52
  %1562 = fmul float %1533, %1561, !dbg !52
  %1563 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not10.i294 = icmp eq i32 %1563, 0, !dbg !52
  %1564 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1533, float 0x3FF7154760000000, float %1562) #2, !dbg !52
  %1565 = tail call float @llvm.nvvm.fma.rn.f(float %1533, float 0x3FF7154760000000, float %1562) #2, !dbg !52
  %.04.i295 = select i1 %.not10.i294, float %1565, float %1564, !dbg !52
  %1566 = fadd float %.08.i275, %.04.i295, !dbg !52
  %1567 = icmp ugt i32 %1524, 2139095039, !dbg !52
  br i1 %1567, label %__nv_fmaf_rn.exit.i.i298, label %__nv_log2f.exit301, !dbg !52

__nv_fmaf_rn.exit.i.i298:                         ; preds = %__nv_log2f.exit271
  %1568 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !52
  %.not11.i299 = icmp eq i32 %1568, 0, !dbg !52
  %1569 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i272, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %1570 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i272, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !52
  %.03.i300 = select i1 %.not11.i299, float %1570, float %1569, !dbg !52
  br label %__nv_log2f.exit301, !dbg !52

__nv_log2f.exit301:                               ; preds = %__nv_log2f.exit271, %__nv_fmaf_rn.exit.i.i298
  %r.i.0.i296 = phi float [ %.03.i300, %__nv_fmaf_rn.exit.i.i298 ], [ %1566, %__nv_log2f.exit271 ], !dbg !52
  %1571 = and i32 %40, 128, !dbg !24
  %1572 = fcmp oeq float %.02.i242, 0.000000e+00, !dbg !52
  %r.i.1.i267 = select i1 %1572, float 0xFFF0000000000000, float %r.i.0.i266, !dbg !52
  %1573 = fcmp oeq float %.02.i212, 0.000000e+00, !dbg !52
  %r.i.1.i237 = select i1 %1573, float 0xFFF0000000000000, float %r.i.0.i236, !dbg !52
  %1574 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !52
  %r.i.1.i = select i1 %1574, float 0xFFF0000000000000, float %r.i.0.i, !dbg !52
  %1575 = getelementptr half, ptr addrspace(1) %5, i64 %31, !dbg !53
  %1576 = sext i32 %17 to i64, !dbg !54
  %1577 = and i32 %40, 255, !dbg !24
  %1578 = or disjoint i32 %33, %1577, !dbg !55
  %1579 = fcmp oeq float %.02.i272, 0.000000e+00, !dbg !52
  %r.i.1.i297 = select i1 %1579, float 0xFFF0000000000000, float %r.i.0.i296, !dbg !52
  %1580 = fadd float %722, %r.i.1.i, !dbg !56
  %1581 = fadd float %725, %r.i.1.i237, !dbg !56
  %1582 = fadd float %740, %r.i.1.i267, !dbg !56
  %1583 = fadd float %743, %r.i.1.i297, !dbg !56
  %1584 = tail call float @llvm.nvvm.div.full(float %1280, float %1371), !dbg !57
  %1585 = tail call float @llvm.nvvm.div.full(float %1281, float %1371), !dbg !57
  %1586 = tail call float @llvm.nvvm.div.full(float %1282, float %1421), !dbg !57
  %1587 = tail call float @llvm.nvvm.div.full(float %1283, float %1421), !dbg !57
  %1588 = tail call float @llvm.nvvm.div.full(float %1285, float %1371), !dbg !57
  %1589 = tail call float @llvm.nvvm.div.full(float %1286, float %1371), !dbg !57
  %1590 = tail call float @llvm.nvvm.div.full(float %1287, float %1421), !dbg !57
  %1591 = tail call float @llvm.nvvm.div.full(float %1288, float %1421), !dbg !57
  %1592 = tail call float @llvm.nvvm.div.full(float %1290, float %1371), !dbg !57
  %1593 = tail call float @llvm.nvvm.div.full(float %1291, float %1371), !dbg !57
  %1594 = tail call float @llvm.nvvm.div.full(float %1292, float %1421), !dbg !57
  %1595 = tail call float @llvm.nvvm.div.full(float %1293, float %1421), !dbg !57
  %1596 = tail call float @llvm.nvvm.div.full(float %1295, float %1371), !dbg !57
  %1597 = tail call float @llvm.nvvm.div.full(float %1296, float %1371), !dbg !57
  %1598 = tail call float @llvm.nvvm.div.full(float %1297, float %1421), !dbg !57
  %1599 = tail call float @llvm.nvvm.div.full(float %1298, float %1421), !dbg !57
  %1600 = tail call float @llvm.nvvm.div.full(float %1300, float %1371), !dbg !57
  %1601 = tail call float @llvm.nvvm.div.full(float %1301, float %1371), !dbg !57
  %1602 = tail call float @llvm.nvvm.div.full(float %1302, float %1421), !dbg !57
  %1603 = tail call float @llvm.nvvm.div.full(float %1303, float %1421), !dbg !57
  %1604 = tail call float @llvm.nvvm.div.full(float %1305, float %1371), !dbg !57
  %1605 = tail call float @llvm.nvvm.div.full(float %1306, float %1371), !dbg !57
  %1606 = tail call float @llvm.nvvm.div.full(float %1307, float %1421), !dbg !57
  %1607 = tail call float @llvm.nvvm.div.full(float %1308, float %1421), !dbg !57
  %1608 = tail call float @llvm.nvvm.div.full(float %1310, float %1371), !dbg !57
  %1609 = tail call float @llvm.nvvm.div.full(float %1311, float %1371), !dbg !57
  %1610 = tail call float @llvm.nvvm.div.full(float %1312, float %1421), !dbg !57
  %1611 = tail call float @llvm.nvvm.div.full(float %1313, float %1421), !dbg !57
  %1612 = tail call float @llvm.nvvm.div.full(float %1315, float %1371), !dbg !57
  %1613 = tail call float @llvm.nvvm.div.full(float %1316, float %1371), !dbg !57
  %1614 = tail call float @llvm.nvvm.div.full(float %1317, float %1421), !dbg !57
  %1615 = tail call float @llvm.nvvm.div.full(float %1318, float %1421), !dbg !57
  %1616 = tail call float @llvm.nvvm.div.full(float %1320, float %1471), !dbg !57
  %1617 = tail call float @llvm.nvvm.div.full(float %1321, float %1471), !dbg !57
  %1618 = tail call float @llvm.nvvm.div.full(float %1322, float %1521), !dbg !57
  %1619 = tail call float @llvm.nvvm.div.full(float %1323, float %1521), !dbg !57
  %1620 = tail call float @llvm.nvvm.div.full(float %1325, float %1471), !dbg !57
  %1621 = tail call float @llvm.nvvm.div.full(float %1326, float %1471), !dbg !57
  %1622 = tail call float @llvm.nvvm.div.full(float %1327, float %1521), !dbg !57
  %1623 = tail call float @llvm.nvvm.div.full(float %1328, float %1521), !dbg !57
  %1624 = tail call float @llvm.nvvm.div.full(float %1330, float %1471), !dbg !57
  %1625 = tail call float @llvm.nvvm.div.full(float %1331, float %1471), !dbg !57
  %1626 = tail call float @llvm.nvvm.div.full(float %1332, float %1521), !dbg !57
  %1627 = tail call float @llvm.nvvm.div.full(float %1333, float %1521), !dbg !57
  %1628 = tail call float @llvm.nvvm.div.full(float %1335, float %1471), !dbg !57
  %1629 = tail call float @llvm.nvvm.div.full(float %1336, float %1471), !dbg !57
  %1630 = tail call float @llvm.nvvm.div.full(float %1337, float %1521), !dbg !57
  %1631 = tail call float @llvm.nvvm.div.full(float %1338, float %1521), !dbg !57
  %1632 = tail call float @llvm.nvvm.div.full(float %1340, float %1471), !dbg !57
  %1633 = tail call float @llvm.nvvm.div.full(float %1341, float %1471), !dbg !57
  %1634 = tail call float @llvm.nvvm.div.full(float %1342, float %1521), !dbg !57
  %1635 = tail call float @llvm.nvvm.div.full(float %1343, float %1521), !dbg !57
  %1636 = tail call float @llvm.nvvm.div.full(float %1345, float %1471), !dbg !57
  %1637 = tail call float @llvm.nvvm.div.full(float %1346, float %1471), !dbg !57
  %1638 = tail call float @llvm.nvvm.div.full(float %1347, float %1521), !dbg !57
  %1639 = tail call float @llvm.nvvm.div.full(float %1348, float %1521), !dbg !57
  %1640 = tail call float @llvm.nvvm.div.full(float %1350, float %1471), !dbg !57
  %1641 = tail call float @llvm.nvvm.div.full(float %1351, float %1471), !dbg !57
  %1642 = tail call float @llvm.nvvm.div.full(float %1352, float %1521), !dbg !57
  %1643 = tail call float @llvm.nvvm.div.full(float %1353, float %1521), !dbg !57
  %1644 = tail call float @llvm.nvvm.div.full(float %1355, float %1471), !dbg !57
  %1645 = tail call float @llvm.nvvm.div.full(float %1356, float %1471), !dbg !57
  %1646 = tail call float @llvm.nvvm.div.full(float %1357, float %1521), !dbg !57
  %1647 = tail call float @llvm.nvvm.div.full(float %1358, float %1521), !dbg !57
  %1648 = shl nuw nsw i32 %22, 5, !dbg !58
  %1649 = zext nneg i32 %1648 to i64, !dbg !59
  %1650 = getelementptr float, ptr addrspace(1) %4, i64 %1649, !dbg !59
  %1651 = sext i32 %1578 to i64, !dbg !60
  %1652 = getelementptr float, ptr addrspace(1) %1650, i64 %1651, !dbg !60
  %1653 = lshr i32 %40, 2, !dbg !61
  %1654 = and i32 %1653, 7, !dbg !61
  %1655 = lshr i32 %40, 1, !dbg !61
  %1656 = and i32 %1655, 48, !dbg !61
  %1657 = lshr exact i32 %1571, 1, !dbg !61
  %1658 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1656, !dbg !61
  %1659 = getelementptr inbounds nuw float, ptr addrspace(3) %1658, i32 %1654, !dbg !61
  %1660 = getelementptr inbounds nuw float, ptr addrspace(3) %1659, i32 %1657, !dbg !61
  store float %1580, ptr addrspace(3) %1660, align 4, !dbg !61
  %1661 = getelementptr inbounds nuw i8, ptr addrspace(3) %1660, i32 32, !dbg !61
  store float %1581, ptr addrspace(3) %1661, align 4, !dbg !61
  %1662 = getelementptr inbounds nuw i8, ptr addrspace(3) %1660, i32 512, !dbg !61
  store float %1582, ptr addrspace(3) %1662, align 4, !dbg !61
  %1663 = getelementptr inbounds nuw i8, ptr addrspace(3) %1660, i32 544, !dbg !61
  store float %1583, ptr addrspace(3) %1663, align 4, !dbg !61
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !61
  %1664 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1577, !dbg !61
  %1665 = load i32, ptr addrspace(3) %1664, align 4, !dbg !61
  tail call void asm sideeffect "st.global.b32 [ $1 + 0 ], { $0 };", "r,l"(i32 %1665, ptr addrspace(1) %1652) #2, !dbg !61
  %1666 = insertelement <2 x float> poison, float %1584, i64 0, !dbg !62
  %1667 = insertelement <2 x float> %1666, float %1585, i64 1, !dbg !62
  %1668 = fptrunc <2 x float> %1667 to <2 x half>, !dbg !62
  %1669 = insertelement <2 x float> poison, float %1586, i64 0, !dbg !62
  %1670 = insertelement <2 x float> %1669, float %1587, i64 1, !dbg !62
  %1671 = fptrunc <2 x float> %1670 to <2 x half>, !dbg !62
  %1672 = insertelement <2 x float> poison, float %1588, i64 0, !dbg !62
  %1673 = insertelement <2 x float> %1672, float %1589, i64 1, !dbg !62
  %1674 = fptrunc <2 x float> %1673 to <2 x half>, !dbg !62
  %1675 = insertelement <2 x float> poison, float %1590, i64 0, !dbg !62
  %1676 = insertelement <2 x float> %1675, float %1591, i64 1, !dbg !62
  %1677 = fptrunc <2 x float> %1676 to <2 x half>, !dbg !62
  %1678 = insertelement <2 x float> poison, float %1592, i64 0, !dbg !62
  %1679 = insertelement <2 x float> %1678, float %1593, i64 1, !dbg !62
  %1680 = fptrunc <2 x float> %1679 to <2 x half>, !dbg !62
  %1681 = insertelement <2 x float> poison, float %1594, i64 0, !dbg !62
  %1682 = insertelement <2 x float> %1681, float %1595, i64 1, !dbg !62
  %1683 = fptrunc <2 x float> %1682 to <2 x half>, !dbg !62
  %1684 = insertelement <2 x float> poison, float %1596, i64 0, !dbg !62
  %1685 = insertelement <2 x float> %1684, float %1597, i64 1, !dbg !62
  %1686 = fptrunc <2 x float> %1685 to <2 x half>, !dbg !62
  %1687 = insertelement <2 x float> poison, float %1598, i64 0, !dbg !62
  %1688 = insertelement <2 x float> %1687, float %1599, i64 1, !dbg !62
  %1689 = fptrunc <2 x float> %1688 to <2 x half>, !dbg !62
  %1690 = insertelement <2 x float> poison, float %1600, i64 0, !dbg !62
  %1691 = insertelement <2 x float> %1690, float %1601, i64 1, !dbg !62
  %1692 = fptrunc <2 x float> %1691 to <2 x half>, !dbg !62
  %1693 = insertelement <2 x float> poison, float %1602, i64 0, !dbg !62
  %1694 = insertelement <2 x float> %1693, float %1603, i64 1, !dbg !62
  %1695 = fptrunc <2 x float> %1694 to <2 x half>, !dbg !62
  %1696 = insertelement <2 x float> poison, float %1604, i64 0, !dbg !62
  %1697 = insertelement <2 x float> %1696, float %1605, i64 1, !dbg !62
  %1698 = fptrunc <2 x float> %1697 to <2 x half>, !dbg !62
  %1699 = insertelement <2 x float> poison, float %1606, i64 0, !dbg !62
  %1700 = insertelement <2 x float> %1699, float %1607, i64 1, !dbg !62
  %1701 = fptrunc <2 x float> %1700 to <2 x half>, !dbg !62
  %1702 = insertelement <2 x float> poison, float %1608, i64 0, !dbg !62
  %1703 = insertelement <2 x float> %1702, float %1609, i64 1, !dbg !62
  %1704 = fptrunc <2 x float> %1703 to <2 x half>, !dbg !62
  %1705 = insertelement <2 x float> poison, float %1610, i64 0, !dbg !62
  %1706 = insertelement <2 x float> %1705, float %1611, i64 1, !dbg !62
  %1707 = fptrunc <2 x float> %1706 to <2 x half>, !dbg !62
  %1708 = insertelement <2 x float> poison, float %1612, i64 0, !dbg !62
  %1709 = insertelement <2 x float> %1708, float %1613, i64 1, !dbg !62
  %1710 = fptrunc <2 x float> %1709 to <2 x half>, !dbg !62
  %1711 = insertelement <2 x float> poison, float %1614, i64 0, !dbg !62
  %1712 = insertelement <2 x float> %1711, float %1615, i64 1, !dbg !62
  %1713 = fptrunc <2 x float> %1712 to <2 x half>, !dbg !62
  %1714 = insertelement <2 x float> poison, float %1616, i64 0, !dbg !62
  %1715 = insertelement <2 x float> %1714, float %1617, i64 1, !dbg !62
  %1716 = fptrunc <2 x float> %1715 to <2 x half>, !dbg !62
  %1717 = insertelement <2 x float> poison, float %1618, i64 0, !dbg !62
  %1718 = insertelement <2 x float> %1717, float %1619, i64 1, !dbg !62
  %1719 = fptrunc <2 x float> %1718 to <2 x half>, !dbg !62
  %1720 = insertelement <2 x float> poison, float %1620, i64 0, !dbg !62
  %1721 = insertelement <2 x float> %1720, float %1621, i64 1, !dbg !62
  %1722 = fptrunc <2 x float> %1721 to <2 x half>, !dbg !62
  %1723 = insertelement <2 x float> poison, float %1622, i64 0, !dbg !62
  %1724 = insertelement <2 x float> %1723, float %1623, i64 1, !dbg !62
  %1725 = fptrunc <2 x float> %1724 to <2 x half>, !dbg !62
  %1726 = insertelement <2 x float> poison, float %1624, i64 0, !dbg !62
  %1727 = insertelement <2 x float> %1726, float %1625, i64 1, !dbg !62
  %1728 = fptrunc <2 x float> %1727 to <2 x half>, !dbg !62
  %1729 = insertelement <2 x float> poison, float %1626, i64 0, !dbg !62
  %1730 = insertelement <2 x float> %1729, float %1627, i64 1, !dbg !62
  %1731 = fptrunc <2 x float> %1730 to <2 x half>, !dbg !62
  %1732 = insertelement <2 x float> poison, float %1628, i64 0, !dbg !62
  %1733 = insertelement <2 x float> %1732, float %1629, i64 1, !dbg !62
  %1734 = fptrunc <2 x float> %1733 to <2 x half>, !dbg !62
  %1735 = insertelement <2 x float> poison, float %1630, i64 0, !dbg !62
  %1736 = insertelement <2 x float> %1735, float %1631, i64 1, !dbg !62
  %1737 = fptrunc <2 x float> %1736 to <2 x half>, !dbg !62
  %1738 = insertelement <2 x float> poison, float %1632, i64 0, !dbg !62
  %1739 = insertelement <2 x float> %1738, float %1633, i64 1, !dbg !62
  %1740 = fptrunc <2 x float> %1739 to <2 x half>, !dbg !62
  %1741 = insertelement <2 x float> poison, float %1634, i64 0, !dbg !62
  %1742 = insertelement <2 x float> %1741, float %1635, i64 1, !dbg !62
  %1743 = fptrunc <2 x float> %1742 to <2 x half>, !dbg !62
  %1744 = insertelement <2 x float> poison, float %1636, i64 0, !dbg !62
  %1745 = insertelement <2 x float> %1744, float %1637, i64 1, !dbg !62
  %1746 = fptrunc <2 x float> %1745 to <2 x half>, !dbg !62
  %1747 = insertelement <2 x float> poison, float %1638, i64 0, !dbg !62
  %1748 = insertelement <2 x float> %1747, float %1639, i64 1, !dbg !62
  %1749 = fptrunc <2 x float> %1748 to <2 x half>, !dbg !62
  %1750 = insertelement <2 x float> poison, float %1640, i64 0, !dbg !62
  %1751 = insertelement <2 x float> %1750, float %1641, i64 1, !dbg !62
  %1752 = fptrunc <2 x float> %1751 to <2 x half>, !dbg !62
  %1753 = insertelement <2 x float> poison, float %1642, i64 0, !dbg !62
  %1754 = insertelement <2 x float> %1753, float %1643, i64 1, !dbg !62
  %1755 = fptrunc <2 x float> %1754 to <2 x half>, !dbg !62
  %1756 = insertelement <2 x float> poison, float %1644, i64 0, !dbg !62
  %1757 = insertelement <2 x float> %1756, float %1645, i64 1, !dbg !62
  %1758 = fptrunc <2 x float> %1757 to <2 x half>, !dbg !62
  %1759 = insertelement <2 x float> poison, float %1646, i64 0, !dbg !62
  %1760 = insertelement <2 x float> %1759, float %1647, i64 1, !dbg !62
  %1761 = fptrunc <2 x float> %1760 to <2 x half>, !dbg !62
  %1762 = mul nsw i64 %61, %1576, !dbg !63
  %1763 = mul nsw i64 %62, %1576, !dbg !63
  %1764 = mul nsw i64 %63, %1576, !dbg !63
  %1765 = mul nsw i64 %64, %1576, !dbg !63
  %1766 = mul nsw i64 %65, %1576, !dbg !63
  %1767 = mul nsw i64 %66, %1576, !dbg !63
  %1768 = mul nsw i64 %67, %1576, !dbg !63
  %1769 = mul nsw i64 %68, %1576, !dbg !63
  %1770 = getelementptr half, ptr addrspace(1) %1575, i64 %1762, !dbg !63
  %1771 = getelementptr half, ptr addrspace(1) %1770, i64 %79, !dbg !63
  %1772 = getelementptr half, ptr addrspace(1) %1575, i64 %1763, !dbg !63
  %1773 = getelementptr half, ptr addrspace(1) %1772, i64 %79, !dbg !63
  %1774 = getelementptr half, ptr addrspace(1) %1575, i64 %1764, !dbg !63
  %1775 = getelementptr half, ptr addrspace(1) %1774, i64 %79, !dbg !63
  %1776 = getelementptr half, ptr addrspace(1) %1575, i64 %1765, !dbg !63
  %1777 = getelementptr half, ptr addrspace(1) %1776, i64 %79, !dbg !63
  %1778 = getelementptr half, ptr addrspace(1) %1575, i64 %1766, !dbg !63
  %1779 = getelementptr half, ptr addrspace(1) %1778, i64 %79, !dbg !63
  %1780 = getelementptr half, ptr addrspace(1) %1575, i64 %1767, !dbg !63
  %1781 = getelementptr half, ptr addrspace(1) %1780, i64 %79, !dbg !63
  %1782 = getelementptr half, ptr addrspace(1) %1575, i64 %1768, !dbg !63
  %1783 = getelementptr half, ptr addrspace(1) %1782, i64 %79, !dbg !63
  %1784 = getelementptr half, ptr addrspace(1) %1575, i64 %1769, !dbg !63
  %1785 = getelementptr half, ptr addrspace(1) %1784, i64 %79, !dbg !63
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !63
  %1786 = shl nuw nsw i32 %40, 1, !dbg !63
  %1787 = and i32 %1786, 6, !dbg !63
  %1788 = shl nuw nsw i32 %40, 4, !dbg !63
  %1789 = and i32 %1788, 192, !dbg !63
  %1790 = or disjoint i32 %1789, %1787, !dbg !63
  %1791 = shl nuw nsw i32 %41, 4, !dbg !63
  %1792 = or disjoint i32 %1790, %1791, !dbg !63
  %1793 = and i32 %249, 3072, !dbg !63
  %1794 = or disjoint i32 %1792, %1793, !dbg !63
  %1795 = shl nuw nsw i32 %1571, 5, !dbg !63
  %1796 = or disjoint i32 %1794, %1795, !dbg !63
  %1797 = and i32 %77, 2040, !dbg !63
  %1798 = lshr i32 %1796, 3, !dbg !63
  %1799 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1798, !dbg !63
  %1800 = getelementptr inbounds nuw half, ptr addrspace(3) %1799, i32 %1796, !dbg !63
  store <2 x half> %1668, ptr addrspace(3) %1800, align 4, !dbg !63
  %1801 = or disjoint i32 %1796, 512, !dbg !63
  %1802 = lshr i32 %1801, 3, !dbg !63
  %1803 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1802, !dbg !63
  %1804 = getelementptr inbounds nuw half, ptr addrspace(3) %1803, i32 %1801, !dbg !63
  store <2 x half> %1671, ptr addrspace(3) %1804, align 4, !dbg !63
  %1805 = getelementptr inbounds nuw i8, ptr addrspace(3) %1800, i32 16, !dbg !63
  store <2 x half> %1674, ptr addrspace(3) %1805, align 4, !dbg !63
  %1806 = or disjoint i32 %1796, 520, !dbg !63
  %1807 = lshr i32 %1806, 3, !dbg !63
  %1808 = and i32 %1807, 536870904, !dbg !63
  %1809 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1808, !dbg !63
  %1810 = getelementptr inbounds nuw half, ptr addrspace(3) %1809, i32 %1806, !dbg !63
  store <2 x half> %1677, ptr addrspace(3) %1810, align 4, !dbg !63
  %1811 = getelementptr inbounds nuw i8, ptr addrspace(3) %1800, i32 32, !dbg !63
  store <2 x half> %1680, ptr addrspace(3) %1811, align 4, !dbg !63
  %1812 = or disjoint i32 %1796, 528, !dbg !63
  %1813 = lshr i32 %1812, 3, !dbg !63
  %1814 = and i32 %1813, 536870904, !dbg !63
  %1815 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1814, !dbg !63
  %1816 = getelementptr inbounds nuw half, ptr addrspace(3) %1815, i32 %1812, !dbg !63
  store <2 x half> %1683, ptr addrspace(3) %1816, align 4, !dbg !63
  %1817 = getelementptr inbounds nuw i8, ptr addrspace(3) %1800, i32 48, !dbg !63
  store <2 x half> %1686, ptr addrspace(3) %1817, align 4, !dbg !63
  %1818 = or disjoint i32 %1796, 536, !dbg !63
  %1819 = lshr i32 %1818, 3, !dbg !63
  %1820 = and i32 %1819, 536870904, !dbg !63
  %1821 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1820, !dbg !63
  %1822 = getelementptr inbounds nuw half, ptr addrspace(3) %1821, i32 %1818, !dbg !63
  store <2 x half> %1689, ptr addrspace(3) %1822, align 4, !dbg !63
  %1823 = getelementptr inbounds nuw i8, ptr addrspace(3) %1800, i32 64, !dbg !63
  store <2 x half> %1692, ptr addrspace(3) %1823, align 4, !dbg !63
  %1824 = or disjoint i32 %1796, 544, !dbg !63
  %1825 = lshr i32 %1824, 3, !dbg !63
  %1826 = and i32 %1825, 536870904, !dbg !63
  %1827 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1826, !dbg !63
  %1828 = getelementptr inbounds nuw half, ptr addrspace(3) %1827, i32 %1824, !dbg !63
  store <2 x half> %1695, ptr addrspace(3) %1828, align 4, !dbg !63
  %1829 = getelementptr inbounds nuw i8, ptr addrspace(3) %1800, i32 80, !dbg !63
  store <2 x half> %1698, ptr addrspace(3) %1829, align 4, !dbg !63
  %1830 = or disjoint i32 %1796, 552, !dbg !63
  %1831 = lshr i32 %1830, 3, !dbg !63
  %1832 = and i32 %1831, 536870904, !dbg !63
  %1833 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1832, !dbg !63
  %1834 = getelementptr inbounds nuw half, ptr addrspace(3) %1833, i32 %1830, !dbg !63
  store <2 x half> %1701, ptr addrspace(3) %1834, align 4, !dbg !63
  %1835 = getelementptr inbounds nuw i8, ptr addrspace(3) %1800, i32 96, !dbg !63
  store <2 x half> %1704, ptr addrspace(3) %1835, align 4, !dbg !63
  %1836 = or disjoint i32 %1796, 560, !dbg !63
  %1837 = lshr i32 %1836, 3, !dbg !63
  %1838 = and i32 %1837, 536870904, !dbg !63
  %1839 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1838, !dbg !63
  %1840 = getelementptr inbounds nuw half, ptr addrspace(3) %1839, i32 %1836, !dbg !63
  store <2 x half> %1707, ptr addrspace(3) %1840, align 4, !dbg !63
  %1841 = getelementptr inbounds nuw i8, ptr addrspace(3) %1800, i32 112, !dbg !63
  store <2 x half> %1710, ptr addrspace(3) %1841, align 4, !dbg !63
  %1842 = or disjoint i32 %1796, 568, !dbg !63
  %1843 = lshr i32 %1842, 3, !dbg !63
  %1844 = and i32 %1843, 536870904, !dbg !63
  %1845 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1844, !dbg !63
  %1846 = getelementptr inbounds nuw half, ptr addrspace(3) %1845, i32 %1842, !dbg !63
  store <2 x half> %1713, ptr addrspace(3) %1846, align 4, !dbg !63
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !63
  %1847 = and i32 %40, 248, !dbg !63
  %1848 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1847, !dbg !63
  %1849 = getelementptr inbounds nuw half, ptr addrspace(3) %1848, i32 %1797, !dbg !63
  %1850 = load <4 x i32>, ptr addrspace(3) %1849, align 16, !dbg !63
  %1851 = or disjoint i32 %1797, 2048, !dbg !63
  %1852 = lshr exact i32 %1851, 3, !dbg !63
  %1853 = and i32 %1852, 504, !dbg !63
  %1854 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1853, !dbg !63
  %1855 = getelementptr inbounds nuw half, ptr addrspace(3) %1854, i32 %1851, !dbg !63
  %1856 = load <4 x i32>, ptr addrspace(3) %1855, align 16, !dbg !63
  %1857 = or disjoint i32 %1797, 4096, !dbg !63
  %1858 = lshr exact i32 %1857, 3, !dbg !63
  %1859 = and i32 %1858, 760, !dbg !63
  %1860 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1859, !dbg !63
  %1861 = getelementptr inbounds nuw half, ptr addrspace(3) %1860, i32 %1857, !dbg !63
  %1862 = load <4 x i32>, ptr addrspace(3) %1861, align 16, !dbg !63
  %1863 = or i32 %77, 6144, !dbg !63
  %1864 = lshr exact i32 %1863, 3, !dbg !63
  %1865 = and i32 %1864, 1016, !dbg !63
  %1866 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i32 %1865, !dbg !63
  %1867 = getelementptr inbounds nuw half, ptr addrspace(3) %1866, i32 %1863, !dbg !63
  %1868 = load <4 x i32>, ptr addrspace(3) %1867, align 16, !dbg !63
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !63
  store <2 x half> %1716, ptr addrspace(3) %1800, align 4, !dbg !63
  store <2 x half> %1719, ptr addrspace(3) %1804, align 4, !dbg !63
  store <2 x half> %1722, ptr addrspace(3) %1805, align 4, !dbg !63
  store <2 x half> %1725, ptr addrspace(3) %1810, align 4, !dbg !63
  store <2 x half> %1728, ptr addrspace(3) %1811, align 4, !dbg !63
  store <2 x half> %1731, ptr addrspace(3) %1816, align 4, !dbg !63
  store <2 x half> %1734, ptr addrspace(3) %1817, align 4, !dbg !63
  store <2 x half> %1737, ptr addrspace(3) %1822, align 4, !dbg !63
  store <2 x half> %1740, ptr addrspace(3) %1823, align 4, !dbg !63
  store <2 x half> %1743, ptr addrspace(3) %1828, align 4, !dbg !63
  store <2 x half> %1746, ptr addrspace(3) %1829, align 4, !dbg !63
  store <2 x half> %1749, ptr addrspace(3) %1834, align 4, !dbg !63
  store <2 x half> %1752, ptr addrspace(3) %1835, align 4, !dbg !63
  store <2 x half> %1755, ptr addrspace(3) %1840, align 4, !dbg !63
  store <2 x half> %1758, ptr addrspace(3) %1841, align 4, !dbg !63
  store <2 x half> %1761, ptr addrspace(3) %1846, align 4, !dbg !63
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !63
  %1869 = load <4 x i32>, ptr addrspace(3) %1849, align 16, !dbg !63
  %1870 = load <4 x i32>, ptr addrspace(3) %1855, align 16, !dbg !63
  %1871 = load <4 x i32>, ptr addrspace(3) %1861, align 16, !dbg !63
  %1872 = load <4 x i32>, ptr addrspace(3) %1867, align 16, !dbg !63
  %.extract = extractelement <4 x i32> %1850, i64 0, !dbg !63
  %.extract304 = extractelement <4 x i32> %1850, i64 1, !dbg !63
  %.extract306 = extractelement <4 x i32> %1850, i64 2, !dbg !63
  %.extract308 = extractelement <4 x i32> %1850, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract, i32 %.extract304, i32 %.extract306, i32 %.extract308, ptr addrspace(1) %1771) #2, !dbg !63
  %.extract310 = extractelement <4 x i32> %1856, i64 0, !dbg !63
  %.extract312 = extractelement <4 x i32> %1856, i64 1, !dbg !63
  %.extract314 = extractelement <4 x i32> %1856, i64 2, !dbg !63
  %.extract316 = extractelement <4 x i32> %1856, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract310, i32 %.extract312, i32 %.extract314, i32 %.extract316, ptr addrspace(1) %1773) #2, !dbg !63
  %.extract318 = extractelement <4 x i32> %1862, i64 0, !dbg !63
  %.extract320 = extractelement <4 x i32> %1862, i64 1, !dbg !63
  %.extract322 = extractelement <4 x i32> %1862, i64 2, !dbg !63
  %.extract324 = extractelement <4 x i32> %1862, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract318, i32 %.extract320, i32 %.extract322, i32 %.extract324, ptr addrspace(1) %1775) #2, !dbg !63
  %.extract326 = extractelement <4 x i32> %1868, i64 0, !dbg !63
  %.extract328 = extractelement <4 x i32> %1868, i64 1, !dbg !63
  %.extract330 = extractelement <4 x i32> %1868, i64 2, !dbg !63
  %.extract332 = extractelement <4 x i32> %1868, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract326, i32 %.extract328, i32 %.extract330, i32 %.extract332, ptr addrspace(1) %1777) #2, !dbg !63
  %.extract334 = extractelement <4 x i32> %1869, i64 0, !dbg !63
  %.extract336 = extractelement <4 x i32> %1869, i64 1, !dbg !63
  %.extract338 = extractelement <4 x i32> %1869, i64 2, !dbg !63
  %.extract340 = extractelement <4 x i32> %1869, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract334, i32 %.extract336, i32 %.extract338, i32 %.extract340, ptr addrspace(1) %1779) #2, !dbg !63
  %.extract342 = extractelement <4 x i32> %1870, i64 0, !dbg !63
  %.extract344 = extractelement <4 x i32> %1870, i64 1, !dbg !63
  %.extract346 = extractelement <4 x i32> %1870, i64 2, !dbg !63
  %.extract348 = extractelement <4 x i32> %1870, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract342, i32 %.extract344, i32 %.extract346, i32 %.extract348, ptr addrspace(1) %1781) #2, !dbg !63
  %.extract350 = extractelement <4 x i32> %1871, i64 0, !dbg !63
  %.extract352 = extractelement <4 x i32> %1871, i64 1, !dbg !63
  %.extract354 = extractelement <4 x i32> %1871, i64 2, !dbg !63
  %.extract356 = extractelement <4 x i32> %1871, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract350, i32 %.extract352, i32 %.extract354, i32 %.extract356, ptr addrspace(1) %1783) #2, !dbg !63
  %.extract358 = extractelement <4 x i32> %1872, i64 0, !dbg !63
  %.extract360 = extractelement <4 x i32> %1872, i64 1, !dbg !63
  %.extract362 = extractelement <4 x i32> %1872, i64 2, !dbg !63
  %.extract364 = extractelement <4 x i32> %1872, i64 3, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract358, i32 %.extract360, i32 %.extract362, i32 %.extract364, ptr addrspace(1) %1785) #2, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x float> @llvm.maxnum.v4f32(<4 x float>, <4 x float>) #7

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "gqa.py", directory: "/home/ubuntu/anjiang/PTX_dataset/triton_ptx")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "_attn_fwd", linkageName: "_attn_fwd", scope: !1, file: !1, line: 114, type: !6, scopeLine: 114, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 127, column: 28, scope: !5)
!9 = !DILocation(line: 128, column: 27, scope: !5)
!10 = !DILocation(line: 129, column: 22, scope: !5)
!11 = !DILocation(line: 130, column: 21, scope: !5)
!12 = !DILocation(line: 131, column: 26, scope: !5)
!13 = !DILocation(line: 131, column: 38, scope: !5)
!14 = !DILocation(line: 131, column: 59, scope: !5)
!15 = !DILocation(line: 131, column: 71, scope: !5)
!16 = !DILocation(line: 131, column: 50, scope: !5)
!17 = !DILocation(line: 135, column: 17, scope: !5)
!18 = !DILocation(line: 138, column: 27, scope: !5)
!19 = !DILocation(line: 140, column: 8, scope: !5)
!20 = !DILocation(line: 143, column: 17, scope: !5)
!21 = !DILocation(line: 148, column: 8, scope: !5)
!22 = !DILocation(line: 151, column: 17, scope: !5)
!23 = !DILocation(line: 156, column: 8, scope: !5)
!24 = !DILocation(line: 167, column: 46, scope: !5)
!25 = !DILocation(line: 175, column: 16, scope: !5)
!26 = !DILocation(line: 177, column: 16, scope: !5)
!27 = !DILocation(line: 47, column: 20, scope: !28, inlinedAt: !29)
!28 = distinct !DILexicalBlockFile(scope: !5, file: !1, discriminator: 0)
!29 = !DILocation(line: 185, column: 82, scope: !5)
!30 = !DILocation(line: 65, column: 20, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 44, column: 33, scope: !28, inlinedAt: !29)
!32 = !DILocation(line: 55, column: 51, scope: !28, inlinedAt: !29)
!33 = !DILocation(line: 48, column: 23, scope: !28, inlinedAt: !29)
!34 = !DILocation(line: 167, column: 27, scope: !35, inlinedAt: !29)
!35 = distinct !DILexicalBlockFile(scope: !5, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/mnt/efs/anjiang/miniconda3/envs/ptx/lib/python3.10/site-packages/triton/language")
!37 = !DILocation(line: 188, column: 40, scope: !35, inlinedAt: !29)
!38 = !DILocation(line: 55, column: 35, scope: !28, inlinedAt: !29)
!39 = !DILocation(line: 56, column: 22, scope: !28, inlinedAt: !29)
!40 = !DILocation(line: 56, column: 33, scope: !28, inlinedAt: !29)
!41 = !DILocation(line: 57, column: 25, scope: !28, inlinedAt: !29)
!42 = !DILocation(line: 260, column: 15, scope: !35, inlinedAt: !29)
!43 = !DILocation(line: 290, column: 36, scope: !35, inlinedAt: !29)
!44 = !DILocation(line: 60, column: 35, scope: !28, inlinedAt: !29)
!45 = !DILocation(line: 60, column: 29, scope: !28, inlinedAt: !29)
!46 = !DILocation(line: 61, column: 20, scope: !28, inlinedAt: !29)
!47 = !DILocation(line: 61, column: 28, scope: !28, inlinedAt: !29)
!48 = !DILocation(line: 63, column: 20, scope: !28, inlinedAt: !29)
!49 = !DILocation(line: 69, column: 21, scope: !28, inlinedAt: !29)
!50 = !DILocation(line: 70, column: 27, scope: !28, inlinedAt: !29)
!51 = !DILocation(line: 73, column: 46, scope: !28, inlinedAt: !29)
!52 = !DILocation(line: 198, column: 24, scope: !5)
!53 = !DILocation(line: 159, column: 19, scope: !5)
!54 = !DILocation(line: 164, column: 8, scope: !5)
!55 = !DILocation(line: 167, column: 33, scope: !5)
!56 = !DILocation(line: 198, column: 11, scope: !5)
!57 = !DILocation(line: 199, column: 16, scope: !5)
!58 = !DILocation(line: 200, column: 26, scope: !5)
!59 = !DILocation(line: 200, column: 17, scope: !5)
!60 = !DILocation(line: 200, column: 34, scope: !5)
!61 = !DILocation(line: 201, column: 21, scope: !5)
!62 = !DILocation(line: 202, column: 33, scope: !5)
!63 = !DILocation(line: 202, column: 26, scope: !5)
!64 = !DILocation(line: 202, column: 4, scope: !5)
